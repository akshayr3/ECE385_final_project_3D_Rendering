
final_app.elf:     file format elf32-littlenios2
final_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00018ed0 memsz 0x00018ed0 flags r-x
    LOAD off    0x00019ef0 vaddr 0x00018ef0 paddr 0x0001b248 align 2**12
         filesz 0x00002358 memsz 0x00002358 flags rw-
    LOAD off    0x0001c5a0 vaddr 0x0001d5a0 paddr 0x0001d5a0 align 2**12
         filesz 0x00000000 memsz 0x0000018c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017eb0  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000e04  000180ec  000180ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002358  00018ef0  0001b248  00019ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000018c  0001d5a0  0001d5a0  0001c5a0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001d72c  0001d72c  0001c248  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001c248  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001288  00000000  00000000  0001c270  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b086  00000000  00000000  0001d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b315  00000000  00000000  0004857e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e709  00000000  00000000  00053893  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002f00  00000000  00000000  00061f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000049af  00000000  00000000  00064e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b535  00000000  00000000  0006984b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00084d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001af8  00000000  00000000  00084dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008a786  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0008a789  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008a78e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008a78f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008a790  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0008a79b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008a79f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0008a7aa  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0008a7b3  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e59  00000000  00000000  0008a7db  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000a99e1  00000000  00000000  0008f634  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
000180ec l    d  .rodata	00000000 .rodata
00018ef0 l    d  .rwdata	00000000 .rwdata
0001d5a0 l    d  .bss	00000000 .bss
0001d72c l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_app_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gpu.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
0001d5ac l     O .bss	00000002 ctl_reg
0001d5ae l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00001850 l     F .text	00000068 alt_dma_txchan_send
000018b8 l     F .text	00000068 alt_dma_rxchan_prepare
0001d5c8 l     O .bss	00000004 copy_done
00003258 l     F .text	00000030 done
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00018a58 l     O .rodata	00000108 two_over_pi
000189d8 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00018ba0 l     O .rodata	00000010 init_jk
00018b60 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
000195d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00018cfa l     O .rodata	00000010 zeroes.4404
0000c3f0 l     F .text	000000bc __sbprintf
00018d0a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000c600 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
0000deb0 l     F .text	000001e0 print_e
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000ec90 l     F .text	00000008 __fp_unlock
0000eca4 l     F .text	0000019c __sinit.part.1
0000ee40 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00019e20 l     O .rwdata	00000020 lc_ctype_charset
00019e00 l     O .rwdata	00000020 lc_message_charset
00019e40 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00018d38 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011b44 l     F .text	000000fc __sprint_r.part.0
00018e5c l     O .rodata	00000010 zeroes.4349
00013180 l     F .text	000000bc __sbprintf
00018e6c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00014748 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001485c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
00014888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
00014918 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00014a38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00014b2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014c14 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00014d00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00014edc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001b23c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00015150 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00015234 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015370 l     F .text	00000034 alt_dev_reg
0001a020 l     O .rwdata	000000a4 copy_dma_priv
0001a0c4 l     O .rwdata	0000001c copy_dma_tx
0001a0e0 l     O .rwdata	0000001c copy_dma_rx
0001a0fc l     O .rwdata	00001060 jtag_uart_0
0001b15c l     O .rwdata	00000054 pixel_dma
0001b1b0 l     O .rwdata	00000044 vga_resampler
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
00015720 l     F .text	00000034 alt_dma_txchan_reg
00015754 l     F .text	00000034 alt_dma_rxchan_reg
00015880 l     F .text	0000009c alt_avalon_dma_launch_txonly
0001591c l     F .text	0000009c alt_avalon_dma_launch_rxonly
000159b8 l     F .text	00000344 alt_avalon_dma_ioctl
00016070 l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00016508 l     F .text	0000020c altera_avalon_jtag_uart_irq
00016714 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016d4c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000170e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00017544 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000176a4 l     F .text	0000003c alt_get_errno
000176e0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001d600 g     O .bss	00000004 alt_instruction_exception_handler
0001114c g     F .text	00000074 _mprec_log10
00011238 g     F .text	0000008c __any_on
00013734 g     F .text	00000054 _isatty_r
00018d44 g     O .rodata	00000028 __mprec_tinytens
00014e18 g     F .text	0000007c alt_main
00011ab4 g     F .text	00000090 strcpy
00009f30 g     F .text	000000c0 _puts_r
0001d62c g     O .bss	00000100 alt_irq
0000637c g     F .text	00000014 fabs
00013788 g     F .text	00000060 _lseek_r
00003288 g     F .text	00000128 transfer
0001b248 g       *ABS*	00000000 __flash_rwdata_start
00007b8c g     F .text	00000088 .hidden __eqdf2
0001d72c g       *ABS*	00000000 __alt_heap_start
0001b1f8 g     O .rwdata	00000004 dma
00009ef4 g     F .text	0000003c printf
000139a0 g     F .text	0000009c _wcrtomb_r
0001b1f4 g     O .rwdata	00000004 gpu
0001d5ba g     O .bss	00000002 usb_ctl_val
00011974 g     F .text	0000005c __sseek
0000eff0 g     F .text	00000010 __sinit
0000e090 g     F .text	000001a4 fcvtbuf
00016230 g     F .text	000000b4 alt_avalon_dma_init
0001d5b4 g     O .bss	00000004 keycode
00013848 g     F .text	00000140 __swbuf_r
0000fac4 g     F .text	0000007c _setlocale_r
0000ee48 g     F .text	00000078 __sfmoreglue
00014eb8 g     F .text	00000024 __malloc_unlock
00004424 g     F .text	00000088 UsbGetRetryCnt
00001920 g     F .text	00000540 draw_tree
0000ff88 g     F .text	0000015c memmove
00000834 g     F .text	000000b0 IO_init
0000efd8 g     F .text	00000018 _cleanup
0001020c g     F .text	000000a8 _Balloc
000006dc g     F .text	00000158 draw_char
00007c14 g     F .text	000000dc .hidden __gtdf2
00017acc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001518c g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
000136d8 g     F .text	0000005c _fstat_r
0001d5d8 g     O .bss	00000004 errno
00006390 g     F .text	000001ec floor
000118f0 g     F .text	00000008 __seofread
0001d5ec g     O .bss	00000004 alt_argv
000231f4 g       *ABS*	00000000 _gp
00015204 g     F .text	00000030 usleep
00014954 g     F .text	00000054 alt_dma_txchan_open
00019ea0 g     O .rwdata	00000180 alt_fd_list
00004708 g     F .text	0000076c __ieee754_rem_pio2
000149a8 g     F .text	00000090 alt_find_dev
0000fe40 g     F .text	00000148 memcpy
0000a0f0 g     F .text	00000008 _times_r
0000ec98 g     F .text	0000000c _cleanup_r
00008fcc g     F .text	000000dc .hidden __floatsidf
00017628 g     F .text	0000007c alt_io_redirect
0001d5bc g     O .bss	00000001 data_size
00007cf0 g     F .text	000000f4 .hidden __ltdf2
000180ec g       *ABS*	00000000 __DTOR_END__
00009ff0 g     F .text	00000014 puts
00017cbc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00011828 g     F .text	00000074 __fpclassifyd
000110a8 g     F .text	000000a4 __ratio
00013164 g     F .text	0000001c __vfiprintf_internal
0001690c g     F .text	0000021c altera_avalon_jtag_uart_read
00009690 g     F .text	00000014 malloc
00009ec4 g     F .text	00000030 _printf_r
0000682c g     F .text	00000064 .hidden __udivsi3
00014b68 g     F .text	000000ac isatty
00018d94 g     O .rodata	000000c8 __mprec_tens
0000fb40 g     F .text	0000000c __locale_charset
00004e74 g     F .text	000004a4 __kernel_cos
00009650 g     F .text	00000040 gcvtf
0001d5d4 g     O .bss	00000004 __malloc_top_pad
00003ab0 g     F .text	00000268 UsbGetConfigDesc2
000002ec g     F .text	00000074 clear_depth
0001b20c g     O .rwdata	00000004 __mb_cur_max
0000fb70 g     F .text	0000000c _localeconv_r
00010640 g     F .text	0000003c __i2b
0000f474 g     F .text	000004c8 __sfvwrite_r
0001d5be g     O .bss	00000002 intStat
0000a004 g     F .text	00000054 _sbrk_r
000137e8 g     F .text	00000060 _read_r
0001b224 g     O .rwdata	00000004 alt_max_fd
000133cc g     F .text	000000f0 _fclose_r
0000ec60 g     F .text	00000030 fflush
0001d5d0 g     O .bss	00000004 __malloc_max_sbrked_mem
000060b0 g     F .text	000002cc __kernel_sin
00009150 g     F .text	00000110 .hidden __extendsfdf2
00006910 g     F .text	000008ac .hidden __adddf3
00015788 g     F .text	000000f8 alt_avalon_dma_launch_bidir
00010e50 g     F .text	0000010c __b2d
00014184 g     F .text	000005c4 .hidden __umoddi3
000148c4 g     F .text	00000054 alt_dma_rxchan_open
00014d3c g     F .text	000000dc lseek
0001b1fc g     O .rwdata	00000004 _global_impure_ptr
000112c4 g     F .text	00000564 _realloc_r
08000000 g       *ABS*	00000000 __alt_exception_stack_pointer
0001d72c g       *ABS*	00000000 __bss_end
00017454 g     F .text	000000f0 alt_iic_isr_register
000179c4 g     F .text	00000108 alt_tick
00013b88 g     F .text	000005fc .hidden __udivdi3
00013634 g     F .text	00000024 _fputwc_r
00018d6c g     O .rodata	00000028 __mprec_bigtens
00010424 g     F .text	00000104 __s2b
000090a8 g     F .text	000000a8 .hidden __floatunsidf
00010b90 g     F .text	00000060 __mcmp
00003500 g     F .text	00000100 UsbSetAddress
0000f010 g     F .text	00000018 __fp_lock_all
00017408 g     F .text	0000004c alt_ic_irq_enabled
00017928 g     F .text	0000009c alt_alarm_stop
0001d5f4 g     O .bss	00000004 alt_irq_active
00000108 g     F .exceptions	000000d4 alt_irq_handler
00019e78 g     O .rwdata	00000028 alt_dev_null
00005318 g     F .text	00000d98 __kernel_rem_pio2
000170c4 g     F .text	00000020 alt_dcache_flush_all
00010528 g     F .text	00000068 __hi0bits
0000096c g     F .text	00000080 IO_read
00008f4c g     F .text	00000080 .hidden __fixdfsi
0001b248 g       *ABS*	00000000 __ram_rwdata_end
0001b21c g     O .rwdata	00000008 alt_dev_list
00015ec4 g     F .text	00000074 alt_avalon_dma_space
00015270 g     F .text	00000100 write
00018ef0 g       *ABS*	00000000 __ram_rodata_end
00014a74 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00007cf0 g     F .text	000000f4 .hidden __ledf2
000044ac g     F .text	00000080 UsbPrintMem
00010908 g     F .text	00000140 __pow5mult
00011c58 g     F .text	0000150c ___vfiprintf_internal_r
0001d5e4 g     O .bss	00000004 __nlocale_changed
00006890 g     F .text	00000058 .hidden __umodsi3
0001d72c g       *ABS*	00000000 end
00000360 g     F .text	000000e0 draw_cube
0001d5a0 g     O .bss	00000004 x_off
00016448 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
000180ec g       *ABS*	00000000 __CTOR_LIST__
07fffc00 g       *ABS*	00000000 __alt_stack_pointer
0000e6d8 g     F .text	00000310 _dcvt
00016dc4 g     F .text	0000007c alt_avalon_timer_sc_init
00009408 g     F .text	00000064 .hidden __clzsi2
00016b28 g     F .text	00000224 altera_avalon_jtag_uart_write
0000452c g     F .text	000000ec cos
0000f000 g     F .text	00000004 __sfp_lock_acquire
0000fd5c g     F .text	000000e4 memchr
0000a0f8 g     F .text	000022dc ___vfprintf_internal_r
00003e18 g     F .text	00000100 UsbClassRequest
0000f164 g     F .text	00000310 _free_r
0000fb4c g     F .text	00000010 __locale_mb_cur_max
00015f38 g     F .text	00000138 alt_avalon_dma_send
00017f38 g     F .text	00000180 __call_exitprocs
0001b230 g     O .rwdata	00000008 alt_dma_txchan_list
0001d5e0 g     O .bss	00000004 __mlocale_changed
0001b204 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
0001d5f8 g     O .bss	00000004 _alt_tick_rate
00000440 g     F .text	0000029c draw_string
00004618 g     F .text	000000f0 sin
0000e374 g     F .text	00000364 _gcvt
00010a48 g     F .text	00000148 __lshift
0001d5fc g     O .bss	00000004 _alt_nticks
00014f18 g     F .text	00000104 read
000153dc g     F .text	00000344 alt_sys_init
00017e20 g     F .text	00000118 __register_exitproc
0001067c g     F .text	0000028c __multiply
000167b4 g     F .text	00000068 altera_avalon_jtag_uart_close
000068e8 g     F .text	00000028 .hidden __mulsi3
00018ef0 g       *ABS*	00000000 __ram_rwdata_start
000180ec g       *ABS*	00000000 __ram_rodata_start
0001d604 g     O .bss	00000028 __malloc_current_mallinfo
00010f5c g     F .text	0000014c __d2b
00003600 g     F .text	00000148 UsbGetDeviceDesc1
000162e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00017bf8 g     F .text	000000c4 alt_get_fd
00016f6c g     F .text	00000158 alt_busy_sleep
00018ef0 g     O .rwdata	000006e4 font_data
0001329c g     F .text	00000054 _close_r
00001e60 g     F .text	000005e4 gen_world
00017da4 g     F .text	0000007c memcmp
000163a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001d72c g       *ABS*	00000000 __alt_stack_base
000163f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000c4ac g     F .text	00000154 __swsetup_r
000071bc g     F .text	000009d0 .hidden __divdf3
0000eec0 g     F .text	00000118 __sfp
000111c0 g     F .text	00000078 __copybits
000199f8 g     O .rwdata	00000408 __malloc_av_
0000f00c g     F .text	00000004 __sinit_lock_release
00007de4 g     F .text	0000086c .hidden __muldf3
0001189c g     F .text	00000054 __sread
000043a0 g     F .text	00000084 UsbWaitTDListDone
00017af0 g     F .text	00000108 alt_find_file
00017120 g     F .text	000000a4 alt_dev_llist_insert
00014e94 g     F .text	00000024 __malloc_lock
000150a0 g     F .text	000000b0 sbrk
0000ec04 g     F .text	0000005c _fflush_r
000132f0 g     F .text	000000dc _calloc_r
0001d5c0 g     O .bss	00000001 hot_plug_count
0001d5a0 g       *ABS*	00000000 __bss_start
000100e4 g     F .text	00000128 memset
00002444 g     F .text	00000e14 main
000094b8 g     F .text	00000024 fcvt
00015d44 g     F .text	00000048 alt_avalon_dma_rx_ioctl
0001d5f0 g     O .bss	00000004 alt_envp
0001d5cc g     O .bss	00000004 __malloc_max_total_mem
00016344 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00003d18 g     F .text	00000100 UsbSetConfig
00013988 g     F .text	00000018 __swbuf
0000e234 g     F .text	00000140 ecvtbuf
000119d0 g     F .text	00000008 __sclose
07fffc00 g       *ABS*	00000000 __alt_heap_limit
000134bc g     F .text	00000014 fclose
00009260 g     F .text	000001a8 .hidden __truncdfsf2
0000c828 g     F .text	00001688 _dtoa_r
000096b8 g     F .text	0000080c _malloc_r
00013afc g     F .text	00000030 __ascii_wctomb
0001b238 g     O .rwdata	00000004 alt_errno
00009558 g     F .text	00000058 ecvtf
0000f93c g     F .text	000000c4 _fwalk
00006734 g     F .text	00000084 .hidden __divsi3
0000f040 g     F .text	00000124 _malloc_trim_r
00003f18 g     F .text	00000148 UsbGetHidDesc
000180ec g       *ABS*	00000000 __CTOR_END__
000119d8 g     F .text	000000dc strcmp
000180ec g       *ABS*	00000000 __flash_rodata_start
000180ec g       *ABS*	00000000 __DTOR_LIST__
00006718 g     F .text	0000001c copysign
00007b8c g     F .text	00000088 .hidden __nedf2
00003408 g     F .text	00000044 UsbRead
000009ec g     F .text	000002ec loop_keyboard
000153a4 g     F .text	00000038 alt_irq_init
0001501c g     F .text	00000084 alt_release_fd
00018bb0 g     O .rodata	00000100 .hidden __clz_tab
0001d5dc g     O .bss	00000004 _PathLocale
00017d58 g     F .text	00000014 atexit
0001323c g     F .text	00000060 _write_r
0001d5a4 g     O .bss	00000004 y_off
0000fb7c g     F .text	00000018 setlocale
0001b200 g     O .rwdata	00000004 _impure_ptr
0001d5e8 g     O .bss	00000004 alt_argc
0001d5a8 g     O .bss	00000004 z_off
0000e9e8 g     F .text	0000021c __sflush_r
0000657c g     F .text	0000019c scalbn
00017224 g     F .text	00000060 _do_dtors
0000fb68 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00010dec g     F .text	00000064 __ulp
0000f028 g     F .text	00000018 __fp_unlock_all
0001d5b8 g     O .bss	00000001 toggle
00009534 g     F .text	00000024 ecvt
0001b214 g     O .rwdata	00000008 alt_fs_list
0001d5c4 g     O .bss	00000004 offset
00004060 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000fb94 g     F .text	0000000c localeconv
000172a4 g     F .text	00000050 alt_ic_isr_register
0001b248 g       *ABS*	00000000 _edata
0001d72c g       *ABS*	00000000 _end
000033b0 g     F .text	00000058 UsbWrite
000134d0 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
0001681c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001d5c2 g     O .bss	00000002 code
0001737c g     F .text	0000008c alt_ic_irq_disable
000118f8 g     F .text	0000007c __swrite
0001b208 g     O .rwdata	00000004 __malloc_trim_threshold
000094dc g     F .text	00000058 fcvtf
0000fb5c g     F .text	0000000c __locale_msgcharset
0001d5b0 g     O .bss	00000002 fs_device
00017d6c g     F .text	00000038 exit
0000fa00 g     F .text	000000c4 _fwalk_reent
00010bf0 g     F .text	000001fc __mdiff
000067b8 g     F .text	00000074 .hidden __modsi3
07fffc00 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000f004 g     F .text	00000004 __sfp_lock_release
000095b0 g     F .text	000000a0 gcvt
000008e4 g     F .text	00000088 IO_write
000180b8 g     F .text	00000034 _exit
00016e40 g     F .text	0000012c alt_alarm_start
0000fba0 g     F .text	000001bc __smakebuf_r
0000a058 g     F .text	00000098 strlen
000177cc g     F .text	0000015c open
00007c14 g     F .text	000000dc .hidden __gedf2
0000946c g     F .text	0000004c clock
0001b210 g     O .rwdata	00000004 __wctomb
00011c40 g     F .text	00000018 __sprint_r
00017284 g     F .text	00000020 alt_icache_flush_all
000172f4 g     F .text	00000088 alt_ic_irq_enable
0000c3d4 g     F .text	0000001c __vfprintf_internal
00013b2c g     F .text	0000005c _wctomb_r
00015d8c g     F .text	00000138 alt_avalon_dma_prepare
00000278 g     F .text	00000074 clear_screen
00008650 g     F .text	000008fc .hidden __subdf3
00000cd8 g     F .text	00000b78 init_keyboard
0001b228 g     O .rwdata	00000008 alt_dma_rxchan_list
00010590 g     F .text	000000b0 __lo0bits
00003920 g     F .text	00000190 UsbGetConfigDesc1
0001b240 g     O .rwdata	00000008 alt_alarm_list
000171c4 g     F .text	00000060 _do_ctors
0000344c g     F .text	000000b4 UsbSoftReset
00013a3c g     F .text	000000c0 wcrtomb
00014784 g     F .text	000000d8 close
00003748 g     F .text	000001d8 UsbGetDeviceDesc2
00014c7c g     F .text	00000084 alt_load
00015cfc g     F .text	00000048 alt_avalon_dma_tx_ioctl
00013658 g     F .text	00000080 fputwc
000096a4 g     F .text	00000014 free
0000f008 g     F .text	00000004 __sinit_lock_acquire
000102dc g     F .text	00000148 __multadd
000102b4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408f14 	ori	at,at,572
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	0601fff4 	movhi	et,2047
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c63fec14 	ori	et,et,65456
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	008000b4 	movhi	r2,2
 14c:	10b58b04 	addi	r2,r2,-10708
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	008000b4 	movhi	r2,2
 164:	10b58b04 	addi	r2,r2,-10708
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_exception_stack_pointer+0xf8000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_exception_stack_pointer+0xf800012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a90317 	ldw	r2,-23540(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a90317 	ldw	r2,-23540(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c1fff4 	movhi	sp,2047
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	deff0014 	ori	sp,sp,64512
    movhi gp, %hi(_gp)
     244:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     248:	d68c7d14 	ori	gp,gp,12788
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	10b56814 	ori	r2,r2,54688

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18f5cb14 	ori	r3,r3,55084

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <__alt_exception_stack_pointer+0xf8000260>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	0014c7c0 	call	14c7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	0014e180 	call	14e18 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <__alt_exception_stack_pointer+0xf8000274>

00000278 <clear_screen>:
{0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0},
{0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0},
{0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0},
{1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0}};

void clear_screen(volatile gpu_core_t* gpu, int should_wait) {
     278:	defffd04 	addi	sp,sp,-12
     27c:	df000215 	stw	fp,8(sp)
     280:	df000204 	addi	fp,sp,8
     284:	e13ffe15 	stw	r4,-8(fp)
     288:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_FRAME;
     28c:	e0bffe17 	ldw	r2,-8(fp)
     290:	00c00084 	movi	r3,2
     294:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
     298:	e0bffe17 	ldw	r2,-8(fp)
     29c:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
     2a0:	e0bffe17 	ldw	r2,-8(fp)
     2a4:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
     2a8:	e0bffe17 	ldw	r2,-8(fp)
     2ac:	00c00044 	movi	r3,1
     2b0:	10c00115 	stw	r3,4(r2)
	if (should_wait == 1) {
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	10800058 	cmpnei	r2,r2,1
     2bc:	1000061e 	bne	r2,zero,2d8 <clear_screen+0x60>
		while (gpu->done == 0) {
     2c0:	0001883a 	nop
     2c4:	e0bffe17 	ldw	r2,-8(fp)
     2c8:	10800217 	ldw	r2,8(r2)
     2cc:	103ffd26 	beq	r2,zero,2c4 <__alt_exception_stack_pointer+0xf80002c4>
		}
		gpu->mode = GPU_MODE_IDLE;
     2d0:	e0bffe17 	ldw	r2,-8(fp)
     2d4:	10000815 	stw	zero,32(r2)

	}
}
     2d8:	0001883a 	nop
     2dc:	e037883a 	mov	sp,fp
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00104 	addi	sp,sp,4
     2e8:	f800283a 	ret

000002ec <clear_depth>:

void clear_depth(volatile gpu_core_t* gpu, int should_wait) {
     2ec:	defffd04 	addi	sp,sp,-12
     2f0:	df000215 	stw	fp,8(sp)
     2f4:	df000204 	addi	fp,sp,8
     2f8:	e13ffe15 	stw	r4,-8(fp)
     2fc:	e17fff15 	stw	r5,-4(fp)
	gpu->mode = GPU_MODE_CLEAR_DEPTH;
     300:	e0bffe17 	ldw	r2,-8(fp)
     304:	00c000c4 	movi	r3,3
     308:	10c00815 	stw	r3,32(r2)
	gpu->done = 0;
     30c:	e0bffe17 	ldw	r2,-8(fp)
     310:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
     31c:	e0bffe17 	ldw	r2,-8(fp)
     320:	00c00044 	movi	r3,1
     324:	10c00115 	stw	r3,4(r2)
	if (should_wait == 1) {
     328:	e0bfff17 	ldw	r2,-4(fp)
     32c:	10800058 	cmpnei	r2,r2,1
     330:	1000041e 	bne	r2,zero,344 <clear_depth+0x58>
		while (gpu->done == 0) {
     334:	0001883a 	nop
     338:	e0bffe17 	ldw	r2,-8(fp)
     33c:	10800217 	ldw	r2,8(r2)
     340:	103ffd26 	beq	r2,zero,338 <__alt_exception_stack_pointer+0xf8000338>
		}
	}
	gpu->mode = GPU_MODE_IDLE;
     344:	e0bffe17 	ldw	r2,-8(fp)
     348:	10000815 	stw	zero,32(r2)
}
     34c:	0001883a 	nop
     350:	e037883a 	mov	sp,fp
     354:	df000017 	ldw	fp,0(sp)
     358:	dec00104 	addi	sp,sp,4
     35c:	f800283a 	ret

00000360 <draw_cube>:
int x_off;
int y_off;
int z_off;

void draw_cube(volatile gpu_core_t* gpu, int scale, int x, int y, int z,
		int block_id) {
     360:	defffb04 	addi	sp,sp,-20
     364:	df000415 	stw	fp,16(sp)
     368:	df000404 	addi	fp,sp,16
     36c:	e13ffc15 	stw	r4,-16(fp)
     370:	e17ffd15 	stw	r5,-12(fp)
     374:	e1bffe15 	stw	r6,-8(fp)
     378:	e1ffff15 	stw	r7,-4(fp)
	gpu->mode = GPU_MODE_RENDER;
     37c:	e0bffc17 	ldw	r2,-16(fp)
     380:	00c00044 	movi	r3,1
     384:	10c00815 	stw	r3,32(r2)
	gpu->block_id = block_id;
     388:	e0bffc17 	ldw	r2,-16(fp)
     38c:	e0c00217 	ldw	r3,8(fp)
     390:	10c00915 	stw	r3,36(r2)
	gpu->scale = scale * (FP_SCALE);
     394:	e0bffd17 	ldw	r2,-12(fp)
     398:	1006923a 	slli	r3,r2,8
     39c:	e0bffc17 	ldw	r2,-16(fp)
     3a0:	10c00415 	stw	r3,16(r2)
	gpu->x = (x+x_off) * (FP_SCALE);
     3a4:	d0e8eb17 	ldw	r3,-23636(gp)
     3a8:	e0bffe17 	ldw	r2,-8(fp)
     3ac:	1885883a 	add	r2,r3,r2
     3b0:	1006923a 	slli	r3,r2,8
     3b4:	e0bffc17 	ldw	r2,-16(fp)
     3b8:	10c00515 	stw	r3,20(r2)
	gpu->y = (y+4+y_off) * (FP_SCALE);
     3bc:	e0bfff17 	ldw	r2,-4(fp)
     3c0:	10c00104 	addi	r3,r2,4
     3c4:	d0a8ec17 	ldw	r2,-23632(gp)
     3c8:	1885883a 	add	r2,r3,r2
     3cc:	1006923a 	slli	r3,r2,8
     3d0:	e0bffc17 	ldw	r2,-16(fp)
     3d4:	10c00615 	stw	r3,24(r2)
	gpu->z = (z+z_off) * (FP_SCALE);
     3d8:	d0e8ed17 	ldw	r3,-23628(gp)
     3dc:	e0800117 	ldw	r2,4(fp)
     3e0:	1885883a 	add	r2,r3,r2
     3e4:	1006923a 	slli	r3,r2,8
     3e8:	e0bffc17 	ldw	r2,-16(fp)
     3ec:	10c00715 	stw	r3,28(r2)
	//printf("%d\n", z_off);
	gpu->done = 0;
     3f0:	e0bffc17 	ldw	r2,-16(fp)
     3f4:	10000215 	stw	zero,8(r2)
	gpu->start = 0;
     3f8:	e0bffc17 	ldw	r2,-16(fp)
     3fc:	10000115 	stw	zero,4(r2)
	gpu->start = 1;
     400:	e0bffc17 	ldw	r2,-16(fp)
     404:	00c00044 	movi	r3,1
     408:	10c00115 	stw	r3,4(r2)
	while (gpu->done == 0) {
     40c:	0001883a 	nop
     410:	e0bffc17 	ldw	r2,-16(fp)
     414:	10800217 	ldw	r2,8(r2)
     418:	103ffd26 	beq	r2,zero,410 <__alt_exception_stack_pointer+0xf8000410>

	}

	gpu->done = 0;
     41c:	e0bffc17 	ldw	r2,-16(fp)
     420:	10000215 	stw	zero,8(r2)
	gpu->mode = GPU_MODE_IDLE;
     424:	e0bffc17 	ldw	r2,-16(fp)
     428:	10000815 	stw	zero,32(r2)

}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	df000017 	ldw	fp,0(sp)
     438:	dec00104 	addi	sp,sp,4
     43c:	f800283a 	ret

00000440 <draw_string>:

void draw_string(frame_buffer_t* frame, char* s, int num_chars, int x, int y, pixel_t color) {
     440:	defff304 	addi	sp,sp,-52
     444:	dfc00c15 	stw	ra,48(sp)
     448:	df000b15 	stw	fp,44(sp)
     44c:	dc400a15 	stw	r17,40(sp)
     450:	dc000915 	stw	r16,36(sp)
     454:	df000b04 	addi	fp,sp,44
     458:	e13ffa15 	stw	r4,-24(fp)
     45c:	e17ffb15 	stw	r5,-20(fp)
     460:	e1bffc15 	stw	r6,-16(fp)
     464:	e1fffd15 	stw	r7,-12(fp)
	int x_offset = 0;
     468:	e03ff615 	stw	zero,-40(fp)
	for(int i = 0; i < num_chars; i++) {
     46c:	e03ff715 	stw	zero,-36(fp)
     470:	00008f06 	br	6b0 <draw_string+0x270>
		if(s[i] == '.') {
     474:	e0bff717 	ldw	r2,-36(fp)
     478:	e0fffb17 	ldw	r3,-20(fp)
     47c:	1885883a 	add	r2,r3,r2
     480:	10800003 	ldbu	r2,0(r2)
     484:	10803fcc 	andi	r2,r2,255
     488:	1080201c 	xori	r2,r2,128
     48c:	10bfe004 	addi	r2,r2,-128
     490:	10800b98 	cmpnei	r2,r2,46
     494:	10001c1e 	bne	r2,zero,508 <draw_string+0xc8>
			pixel_t black = {0, 0, 0, 0};
     498:	e03ff805 	stb	zero,-32(fp)
     49c:	e03ff845 	stb	zero,-31(fp)
     4a0:	e03ff885 	stb	zero,-30(fp)
     4a4:	e03ff8c5 	stb	zero,-29(fp)
			frame->D2[y + 6][x + x_offset] = black;
     4a8:	e0800217 	ldw	r2,8(fp)
     4ac:	11000184 	addi	r4,r2,6
     4b0:	e0fffd17 	ldw	r3,-12(fp)
     4b4:	e0bff617 	ldw	r2,-40(fp)
     4b8:	18a3883a 	add	r17,r3,r2
     4bc:	e43ffa17 	ldw	r16,-24(fp)
     4c0:	01405004 	movi	r5,320
     4c4:	00068e80 	call	68e8 <__mulsi3>
     4c8:	1445883a 	add	r2,r2,r17
     4cc:	1085883a 	add	r2,r2,r2
     4d0:	1085883a 	add	r2,r2,r2
     4d4:	8085883a 	add	r2,r16,r2
     4d8:	e0fff803 	ldbu	r3,-32(fp)
     4dc:	10c00005 	stb	r3,0(r2)
     4e0:	e0fff843 	ldbu	r3,-31(fp)
     4e4:	10c00045 	stb	r3,1(r2)
     4e8:	e0fff883 	ldbu	r3,-30(fp)
     4ec:	10c00085 	stb	r3,2(r2)
     4f0:	e0fff8c3 	ldbu	r3,-29(fp)
     4f4:	10c000c5 	stb	r3,3(r2)
			x_offset += 2;
     4f8:	e0bff617 	ldw	r2,-40(fp)
     4fc:	10800084 	addi	r2,r2,2
     500:	e0bff615 	stw	r2,-40(fp)
     504:	00006706 	br	6a4 <draw_string+0x264>
		} else if(s[i] == ':') {
     508:	e0bff717 	ldw	r2,-36(fp)
     50c:	e0fffb17 	ldw	r3,-20(fp)
     510:	1885883a 	add	r2,r3,r2
     514:	10800003 	ldbu	r2,0(r2)
     518:	10803fcc 	andi	r2,r2,255
     51c:	1080201c 	xori	r2,r2,128
     520:	10bfe004 	addi	r2,r2,-128
     524:	10800e98 	cmpnei	r2,r2,58
     528:	1000301e 	bne	r2,zero,5ec <draw_string+0x1ac>
			pixel_t black = {0, 0, 0, 0};
     52c:	e03ff905 	stb	zero,-28(fp)
     530:	e03ff945 	stb	zero,-27(fp)
     534:	e03ff985 	stb	zero,-26(fp)
     538:	e03ff9c5 	stb	zero,-25(fp)
			frame->D2[y + 6][x + x_offset] = black;
     53c:	e0800217 	ldw	r2,8(fp)
     540:	11000184 	addi	r4,r2,6
     544:	e0fffd17 	ldw	r3,-12(fp)
     548:	e0bff617 	ldw	r2,-40(fp)
     54c:	18a3883a 	add	r17,r3,r2
     550:	e43ffa17 	ldw	r16,-24(fp)
     554:	01405004 	movi	r5,320
     558:	00068e80 	call	68e8 <__mulsi3>
     55c:	1445883a 	add	r2,r2,r17
     560:	1085883a 	add	r2,r2,r2
     564:	1085883a 	add	r2,r2,r2
     568:	8085883a 	add	r2,r16,r2
     56c:	e0fff903 	ldbu	r3,-28(fp)
     570:	10c00005 	stb	r3,0(r2)
     574:	e0fff943 	ldbu	r3,-27(fp)
     578:	10c00045 	stb	r3,1(r2)
     57c:	e0fff983 	ldbu	r3,-26(fp)
     580:	10c00085 	stb	r3,2(r2)
     584:	e0fff9c3 	ldbu	r3,-25(fp)
     588:	10c000c5 	stb	r3,3(r2)
			frame->D2[y + 1][x + x_offset] = black;
     58c:	e0800217 	ldw	r2,8(fp)
     590:	11000044 	addi	r4,r2,1
     594:	e0fffd17 	ldw	r3,-12(fp)
     598:	e0bff617 	ldw	r2,-40(fp)
     59c:	18a3883a 	add	r17,r3,r2
     5a0:	e43ffa17 	ldw	r16,-24(fp)
     5a4:	01405004 	movi	r5,320
     5a8:	00068e80 	call	68e8 <__mulsi3>
     5ac:	1445883a 	add	r2,r2,r17
     5b0:	1085883a 	add	r2,r2,r2
     5b4:	1085883a 	add	r2,r2,r2
     5b8:	8085883a 	add	r2,r16,r2
     5bc:	e0fff903 	ldbu	r3,-28(fp)
     5c0:	10c00005 	stb	r3,0(r2)
     5c4:	e0fff943 	ldbu	r3,-27(fp)
     5c8:	10c00045 	stb	r3,1(r2)
     5cc:	e0fff983 	ldbu	r3,-26(fp)
     5d0:	10c00085 	stb	r3,2(r2)
     5d4:	e0fff9c3 	ldbu	r3,-25(fp)
     5d8:	10c000c5 	stb	r3,3(r2)
			x_offset += 2;
     5dc:	e0bff617 	ldw	r2,-40(fp)
     5e0:	10800084 	addi	r2,r2,2
     5e4:	e0bff615 	stw	r2,-40(fp)
     5e8:	00002e06 	br	6a4 <draw_string+0x264>
		} else if(s[i] == ' ') {
     5ec:	e0bff717 	ldw	r2,-36(fp)
     5f0:	e0fffb17 	ldw	r3,-20(fp)
     5f4:	1885883a 	add	r2,r3,r2
     5f8:	10800003 	ldbu	r2,0(r2)
     5fc:	10803fcc 	andi	r2,r2,255
     600:	1080201c 	xori	r2,r2,128
     604:	10bfe004 	addi	r2,r2,-128
     608:	10800818 	cmpnei	r2,r2,32
     60c:	1000041e 	bne	r2,zero,620 <draw_string+0x1e0>
			x_offset += 3;
     610:	e0bff617 	ldw	r2,-40(fp)
     614:	108000c4 	addi	r2,r2,3
     618:	e0bff615 	stw	r2,-40(fp)
     61c:	00002106 	br	6a4 <draw_string+0x264>
		} else if((int)s[i] == 4) {
     620:	e0bff717 	ldw	r2,-36(fp)
     624:	e0fffb17 	ldw	r3,-20(fp)
     628:	1885883a 	add	r2,r3,r2
     62c:	10800003 	ldbu	r2,0(r2)
     630:	10803fcc 	andi	r2,r2,255
     634:	1080201c 	xori	r2,r2,128
     638:	10bfe004 	addi	r2,r2,-128
     63c:	10800118 	cmpnei	r2,r2,4
     640:	1000041e 	bne	r2,zero,654 <draw_string+0x214>
			x_offset += 3;
     644:	e0bff617 	ldw	r2,-40(fp)
     648:	108000c4 	addi	r2,r2,3
     64c:	e0bff615 	stw	r2,-40(fp)
     650:	00001406 	br	6a4 <draw_string+0x264>
		} else {
			draw_char(frame, s[i], x+x_offset, y, color);
     654:	e0bff717 	ldw	r2,-36(fp)
     658:	e0fffb17 	ldw	r3,-20(fp)
     65c:	1885883a 	add	r2,r3,r2
     660:	10800003 	ldbu	r2,0(r2)
     664:	11003fcc 	andi	r4,r2,255
     668:	2100201c 	xori	r4,r4,128
     66c:	213fe004 	addi	r4,r4,-128
     670:	e0fffd17 	ldw	r3,-12(fp)
     674:	e0bff617 	ldw	r2,-40(fp)
     678:	1887883a 	add	r3,r3,r2
     67c:	e0800317 	ldw	r2,12(fp)
     680:	d8800015 	stw	r2,0(sp)
     684:	e1c00217 	ldw	r7,8(fp)
     688:	180d883a 	mov	r6,r3
     68c:	200b883a 	mov	r5,r4
     690:	e13ffa17 	ldw	r4,-24(fp)
     694:	00006dc0 	call	6dc <draw_char>
			x_offset += 8;
     698:	e0bff617 	ldw	r2,-40(fp)
     69c:	10800204 	addi	r2,r2,8
     6a0:	e0bff615 	stw	r2,-40(fp)

}

void draw_string(frame_buffer_t* frame, char* s, int num_chars, int x, int y, pixel_t color) {
	int x_offset = 0;
	for(int i = 0; i < num_chars; i++) {
     6a4:	e0bff717 	ldw	r2,-36(fp)
     6a8:	10800044 	addi	r2,r2,1
     6ac:	e0bff715 	stw	r2,-36(fp)
     6b0:	e0fff717 	ldw	r3,-36(fp)
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	18bf6e16 	blt	r3,r2,474 <__alt_exception_stack_pointer+0xf8000474>
		} else {
			draw_char(frame, s[i], x+x_offset, y, color);
			x_offset += 8;
		}
	}
}
     6bc:	0001883a 	nop
     6c0:	e6fffe04 	addi	sp,fp,-8
     6c4:	dfc00317 	ldw	ra,12(sp)
     6c8:	df000217 	ldw	fp,8(sp)
     6cc:	dc400117 	ldw	r17,4(sp)
     6d0:	dc000017 	ldw	r16,0(sp)
     6d4:	dec00404 	addi	sp,sp,16
     6d8:	f800283a 	ret

000006dc <draw_char>:

void draw_char(frame_buffer_t* frame, char c, int x, int y, pixel_t color) {
     6dc:	defff504 	addi	sp,sp,-44
     6e0:	dfc00a15 	stw	ra,40(sp)
     6e4:	df000915 	stw	fp,36(sp)
     6e8:	dc400815 	stw	r17,32(sp)
     6ec:	dc000715 	stw	r16,28(sp)
     6f0:	df000904 	addi	fp,sp,36
     6f4:	e13ffa15 	stw	r4,-24(fp)
     6f8:	2805883a 	mov	r2,r5
     6fc:	e1bffc15 	stw	r6,-16(fp)
     700:	e1fffd15 	stw	r7,-12(fp)
     704:	e0bffb05 	stb	r2,-20(fp)
	int offset = 0;
     708:	e03ff715 	stw	zero,-36(fp)
	if(c >= 'A') {
     70c:	e0bffb07 	ldb	r2,-20(fp)
     710:	10801050 	cmplti	r2,r2,65
     714:	1000041e 	bne	r2,zero,728 <draw_char+0x4c>
		offset = c - 'A';
     718:	e0bffb07 	ldb	r2,-20(fp)
     71c:	10bfefc4 	addi	r2,r2,-65
     720:	e0bff715 	stw	r2,-36(fp)
     724:	00000306 	br	734 <draw_char+0x58>
	} else {
		offset = c - '0' + 26;
     728:	e0bffb07 	ldb	r2,-20(fp)
     72c:	10bffa84 	addi	r2,r2,-22
     730:	e0bff715 	stw	r2,-36(fp)
	}
	for(int i = 0; i < 7; i++) {
     734:	e03ff815 	stw	zero,-32(fp)
     738:	00003306 	br	808 <draw_char+0x12c>
		for(int j = 0; j < 7; j++) {
     73c:	e03ff915 	stw	zero,-28(fp)
     740:	00002b06 	br	7f0 <draw_char+0x114>
			if(font_data[i][j + offset*7]) {
     744:	014001c4 	movi	r5,7
     748:	e13ff717 	ldw	r4,-36(fp)
     74c:	00068e80 	call	68e8 <__mulsi3>
     750:	1007883a 	mov	r3,r2
     754:	e0bff917 	ldw	r2,-28(fp)
     758:	18a3883a 	add	r17,r3,r2
     75c:	040000b4 	movhi	r16,2
     760:	8423bc04 	addi	r16,r16,-28944
     764:	e0bff817 	ldw	r2,-32(fp)
     768:	01403f04 	movi	r5,252
     76c:	1009883a 	mov	r4,r2
     770:	00068e80 	call	68e8 <__mulsi3>
     774:	8085883a 	add	r2,r16,r2
     778:	1445883a 	add	r2,r2,r17
     77c:	10800003 	ldbu	r2,0(r2)
     780:	10803fcc 	andi	r2,r2,255
     784:	1080201c 	xori	r2,r2,128
     788:	10bfe004 	addi	r2,r2,-128
     78c:	10001526 	beq	r2,zero,7e4 <draw_char+0x108>
				frame->D2[i + y][j + x] = color;
     790:	e0fff817 	ldw	r3,-32(fp)
     794:	e0bffd17 	ldw	r2,-12(fp)
     798:	1889883a 	add	r4,r3,r2
     79c:	e0fff917 	ldw	r3,-28(fp)
     7a0:	e0bffc17 	ldw	r2,-16(fp)
     7a4:	18a3883a 	add	r17,r3,r2
     7a8:	e43ffa17 	ldw	r16,-24(fp)
     7ac:	01405004 	movi	r5,320
     7b0:	00068e80 	call	68e8 <__mulsi3>
     7b4:	1445883a 	add	r2,r2,r17
     7b8:	1085883a 	add	r2,r2,r2
     7bc:	1085883a 	add	r2,r2,r2
     7c0:	8085883a 	add	r2,r16,r2
     7c4:	e0c00203 	ldbu	r3,8(fp)
     7c8:	10c00005 	stb	r3,0(r2)
     7cc:	e0c00243 	ldbu	r3,9(fp)
     7d0:	10c00045 	stb	r3,1(r2)
     7d4:	e0c00283 	ldbu	r3,10(fp)
     7d8:	10c00085 	stb	r3,2(r2)
     7dc:	e0c002c3 	ldbu	r3,11(fp)
     7e0:	10c000c5 	stb	r3,3(r2)
		offset = c - 'A';
	} else {
		offset = c - '0' + 26;
	}
	for(int i = 0; i < 7; i++) {
		for(int j = 0; j < 7; j++) {
     7e4:	e0bff917 	ldw	r2,-28(fp)
     7e8:	10800044 	addi	r2,r2,1
     7ec:	e0bff915 	stw	r2,-28(fp)
     7f0:	e0bff917 	ldw	r2,-28(fp)
     7f4:	108001d0 	cmplti	r2,r2,7
     7f8:	103fd21e 	bne	r2,zero,744 <__alt_exception_stack_pointer+0xf8000744>
	if(c >= 'A') {
		offset = c - 'A';
	} else {
		offset = c - '0' + 26;
	}
	for(int i = 0; i < 7; i++) {
     7fc:	e0bff817 	ldw	r2,-32(fp)
     800:	10800044 	addi	r2,r2,1
     804:	e0bff815 	stw	r2,-32(fp)
     808:	e0bff817 	ldw	r2,-32(fp)
     80c:	108001d0 	cmplti	r2,r2,7
     810:	103fca1e 	bne	r2,zero,73c <__alt_exception_stack_pointer+0xf800073c>
			if(font_data[i][j + offset*7]) {
				frame->D2[i + y][j + x] = color;
			}
		}
	}
}
     814:	0001883a 	nop
     818:	e6fffe04 	addi	sp,fp,-8
     81c:	dfc00317 	ldw	ra,12(sp)
     820:	df000217 	ldw	fp,8(sp)
     824:	dc400117 	ldw	r17,4(sp)
     828:	dc000017 	ldw	r16,0(sp)
     82c:	dec00404 	addi	sp,sp,16
     830:	f800283a 	ret

00000834 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     834:	deffff04 	addi	sp,sp,-4
     838:	df000015 	stw	fp,0(sp)
     83c:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     840:	00820034 	movhi	r2,2048
     844:	108c1004 	addi	r2,r2,12352
     848:	00c00044 	movi	r3,1
     84c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     850:	00820034 	movhi	r2,2048
     854:	108c1404 	addi	r2,r2,12368
     858:	00c00044 	movi	r3,1
     85c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     860:	00820034 	movhi	r2,2048
     864:	108c1c04 	addi	r2,r2,12400
     868:	00c00044 	movi	r3,1
     86c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     870:	00820034 	movhi	r2,2048
     874:	108c1804 	addi	r2,r2,12384
     878:	00c00044 	movi	r3,1
     87c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     880:	00820034 	movhi	r2,2048
     884:	108c2404 	addi	r2,r2,12432
     888:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     88c:	00820034 	movhi	r2,2048
     890:	108c2004 	addi	r2,r2,12416
     894:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     898:	00820034 	movhi	r2,2048
     89c:	108c1404 	addi	r2,r2,12368
     8a0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     8a4:	00820034 	movhi	r2,2048
     8a8:	108c1004 	addi	r2,r2,12352
     8ac:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     8b0:	00820034 	movhi	r2,2048
     8b4:	108c1004 	addi	r2,r2,12352
     8b8:	00c00044 	movi	r3,1
     8bc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     8c0:	00820034 	movhi	r2,2048
     8c4:	108c1404 	addi	r2,r2,12368
     8c8:	00c00044 	movi	r3,1
     8cc:	10c00005 	stb	r3,0(r2)
}
     8d0:	0001883a 	nop
     8d4:	e037883a 	mov	sp,fp
     8d8:	df000017 	ldw	fp,0(sp)
     8dc:	dec00104 	addi	sp,sp,4
     8e0:	f800283a 	ret

000008e4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     8e4:	defffd04 	addi	sp,sp,-12
     8e8:	df000215 	stw	fp,8(sp)
     8ec:	df000204 	addi	fp,sp,8
     8f0:	2007883a 	mov	r3,r4
     8f4:	2805883a 	mov	r2,r5
     8f8:	e0fffe05 	stb	r3,-8(fp)
     8fc:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     900:	00820034 	movhi	r2,2048
     904:	108c2404 	addi	r2,r2,12432
     908:	e0fffe03 	ldbu	r3,-8(fp)
     90c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     910:	00820034 	movhi	r2,2048
     914:	108c2004 	addi	r2,r2,12416
     918:	e0ffff0b 	ldhu	r3,-4(fp)
     91c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     920:	00820034 	movhi	r2,2048
     924:	108c1404 	addi	r2,r2,12368
     928:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
     92c:	00820034 	movhi	r2,2048
     930:	108c1804 	addi	r2,r2,12384
     934:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     938:	00820034 	movhi	r2,2048
     93c:	108c1804 	addi	r2,r2,12384
     940:	00c00044 	movi	r3,1
     944:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     948:	00820034 	movhi	r2,2048
     94c:	108c1404 	addi	r2,r2,12368
     950:	00c00044 	movi	r3,1
     954:	10c00005 	stb	r3,0(r2)

}
     958:	0001883a 	nop
     95c:	e037883a 	mov	sp,fp
     960:	df000017 	ldw	fp,0(sp)
     964:	dec00104 	addi	sp,sp,4
     968:	f800283a 	ret

0000096c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     96c:	defffd04 	addi	sp,sp,-12
     970:	df000215 	stw	fp,8(sp)
     974:	df000204 	addi	fp,sp,8
     978:	2005883a 	mov	r2,r4
     97c:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
     980:	00820034 	movhi	r2,2048
     984:	108c2404 	addi	r2,r2,12432
     988:	e0ffff03 	ldbu	r3,-4(fp)
     98c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     990:	00820034 	movhi	r2,2048
     994:	108c1404 	addi	r2,r2,12368
     998:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     99c:	00820034 	movhi	r2,2048
     9a0:	108c1c04 	addi	r2,r2,12400
     9a4:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     9a8:	00820034 	movhi	r2,2048
     9ac:	108c2004 	addi	r2,r2,12416
     9b0:	10800017 	ldw	r2,0(r2)
     9b4:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     9b8:	00820034 	movhi	r2,2048
     9bc:	108c1c04 	addi	r2,r2,12400
     9c0:	00c00044 	movi	r3,1
     9c4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     9c8:	00820034 	movhi	r2,2048
     9cc:	108c1404 	addi	r2,r2,12368
     9d0:	00c00044 	movi	r3,1
     9d4:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
     9d8:	e0bffe0b 	ldhu	r2,-8(fp)
}
     9dc:	e037883a 	mov	sp,fp
     9e0:	df000017 	ldw	fp,0(sp)
     9e4:	dec00104 	addi	sp,sp,4
     9e8:	f800283a 	ret

000009ec <loop_keyboard>:
	alt_u8 toggle = 0;
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

void loop_keyboard(int* keycode_ptr) {
     9ec:	defffd04 	addi	sp,sp,-12
     9f0:	dfc00215 	stw	ra,8(sp)
     9f4:	df000115 	stw	fp,4(sp)
     9f8:	df000104 	addi	fp,sp,4
     9fc:	e13fff15 	stw	r4,-4(fp)

	toggle++;
     a00:	d0a8f103 	ldbu	r2,-23612(gp)
     a04:	10800044 	addi	r2,r2,1
     a08:	d0a8f105 	stb	r2,-23612(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
     a0c:	01414004 	movi	r5,1280
     a10:	01000084 	movi	r4,2
     a14:	00008e40 	call	8e4 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
     a18:	01414704 	movi	r5,1308
     a1c:	0009883a 	mov	r4,zero
     a20:	00008e40 	call	8e4 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
     a24:	d0a8f203 	ldbu	r2,-23608(gp)
     a28:	10803fcc 	andi	r2,r2,255
     a2c:	108003cc 	andi	r2,r2,15
     a30:	100b883a 	mov	r5,r2
     a34:	0009883a 	mov	r4,zero
     a38:	00008e40 	call	8e4 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     a3c:	0140a444 	movi	r5,657
     a40:	0009883a 	mov	r4,zero
     a44:	00008e40 	call	8e4 <IO_write>
	if(toggle%2)
     a48:	d0a8f103 	ldbu	r2,-23612(gp)
     a4c:	1080004c 	andi	r2,r2,1
     a50:	10803fcc 	andi	r2,r2,255
     a54:	10000426 	beq	r2,zero,a68 <loop_keyboard+0x7c>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
     a58:	01400044 	movi	r5,1
     a5c:	0009883a 	mov	r4,zero
     a60:	00008e40 	call	8e4 <IO_write>
     a64:	00000306 	br	a74 <loop_keyboard+0x88>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
     a68:	01401044 	movi	r5,65
     a6c:	0009883a 	mov	r4,zero
     a70:	00008e40 	call	8e4 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
     a74:	014004c4 	movi	r5,19
     a78:	0009883a 	mov	r4,zero
     a7c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
     a80:	000b883a 	mov	r5,zero
     a84:	0009883a 	mov	r4,zero
     a88:	00008e40 	call	8e4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     a8c:	01414004 	movi	r5,1280
     a90:	01006c04 	movi	r4,432
     a94:	00033b00 	call	33b0 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a98:	00002506 	br	b30 <loop_keyboard+0x144>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
     a9c:	01414004 	movi	r5,1280
     aa0:	01000084 	movi	r4,2
     aa4:	00008e40 	call	8e4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     aa8:	01414704 	movi	r5,1308
     aac:	0009883a 	mov	r4,zero
     ab0:	00008e40 	call	8e4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     ab4:	d0a8f203 	ldbu	r2,-23608(gp)
     ab8:	10803fcc 	andi	r2,r2,255
     abc:	108003cc 	andi	r2,r2,15
     ac0:	100b883a 	mov	r5,r2
     ac4:	0009883a 	mov	r4,zero
     ac8:	00008e40 	call	8e4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     acc:	0140a444 	movi	r5,657
     ad0:	0009883a 	mov	r4,zero
     ad4:	00008e40 	call	8e4 <IO_write>
		if(toggle%2)
     ad8:	d0a8f103 	ldbu	r2,-23612(gp)
     adc:	1080004c 	andi	r2,r2,1
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10000426 	beq	r2,zero,af8 <loop_keyboard+0x10c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     ae8:	01400044 	movi	r5,1
     aec:	0009883a 	mov	r4,zero
     af0:	00008e40 	call	8e4 <IO_write>
     af4:	00000306 	br	b04 <loop_keyboard+0x118>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     af8:	01401044 	movi	r5,65
     afc:	0009883a 	mov	r4,zero
     b00:	00008e40 	call	8e4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     b04:	014004c4 	movi	r5,19
     b08:	0009883a 	mov	r4,zero
     b0c:	00008e40 	call	8e4 <IO_write>
		IO_write(HPI_DATA,0x0000);//
     b10:	000b883a 	mov	r5,zero
     b14:	0009883a 	mov	r4,zero
     b18:	00008e40 	call	8e4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     b1c:	01414004 	movi	r5,1280
     b20:	01006c04 	movi	r4,432
     b24:	00033b00 	call	33b0 <UsbWrite>
		usleep(10*1000);
     b28:	0109c404 	movi	r4,10000
     b2c:	00152040 	call	15204 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b30:	010000c4 	movi	r4,3
     b34:	000096c0 	call	96c <IO_read>
     b38:	10bfffcc 	andi	r2,r2,65535
     b3c:	1080040c 	andi	r2,r2,16
     b40:	103fd626 	beq	r2,zero,a9c <__alt_exception_stack_pointer+0xf8000a9c>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
     b44:	00043a00 	call	43a0 <UsbWaitTDListDone>
     b48:	d0a8f18d 	sth	r2,-23610(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode = UsbRead(0x051e);
     b4c:	01014784 	movi	r4,1310
     b50:	00034080 	call	3408 <UsbRead>
     b54:	10bfffcc 	andi	r2,r2,65535
     b58:	d0a8f015 	stw	r2,-23616(gp)
	//printf("\nfirst two keycode values are %04x\n",keycode);
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode & 0xff;
     b5c:	00820034 	movhi	r2,2048
     b60:	108c2804 	addi	r2,r2,12448
     b64:	d0e8f017 	ldw	r3,-23616(gp)
     b68:	10c00005 	stb	r3,0(r2)
	*keycode_ptr = keycode & 0xff;
     b6c:	d0a8f017 	ldw	r2,-23616(gp)
     b70:	10c03fcc 	andi	r3,r2,255
     b74:	e0bfff17 	ldw	r2,-4(fp)
     b78:	10c00015 	stw	r3,0(r2)

	usleep(200);//usleep(5000);
     b7c:	01003204 	movi	r4,200
     b80:	00152040 	call	15204 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
     b84:	d0a8ee0b 	ldhu	r2,-23624(gp)
     b88:	10bfffcc 	andi	r2,r2,65535
     b8c:	1009883a 	mov	r4,r2
     b90:	00034080 	call	3408 <UsbRead>
     b94:	d0a8f18d 	sth	r2,-23610(gp)

	if(!(usb_ctl_val & no_device))
     b98:	d0e8f18b 	ldhu	r3,-23610(gp)
     b9c:	d0a8ee8b 	ldhu	r2,-23622(gp)
     ba0:	1884703a 	and	r2,r3,r2
     ba4:	10bfffcc 	andi	r2,r2,65535
     ba8:	1000401e 	bne	r2,zero,cac <loop_keyboard+0x2c0>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     bac:	d028f305 	stb	zero,-23604(gp)
     bb0:	00000f06 	br	bf0 <loop_keyboard+0x204>
		{
			usleep(5*1000);
     bb4:	0104e204 	movi	r4,5000
     bb8:	00152040 	call	15204 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     bbc:	d0a8ee0b 	ldhu	r2,-23624(gp)
     bc0:	10bfffcc 	andi	r2,r2,65535
     bc4:	1009883a 	mov	r4,r2
     bc8:	00034080 	call	3408 <UsbRead>
     bcc:	d0a8f18d 	sth	r2,-23610(gp)
			if(usb_ctl_val & no_device) break;
     bd0:	d0e8f18b 	ldhu	r3,-23610(gp)
     bd4:	d0a8ee8b 	ldhu	r2,-23622(gp)
     bd8:	1884703a 	and	r2,r3,r2
     bdc:	10bfffcc 	andi	r2,r2,65535
     be0:	1000081e 	bne	r2,zero,c04 <loop_keyboard+0x218>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     be4:	d0a8f303 	ldbu	r2,-23604(gp)
     be8:	10800044 	addi	r2,r2,1
     bec:	d0a8f305 	stb	r2,-23604(gp)
     bf0:	d0a8f303 	ldbu	r2,-23604(gp)
     bf4:	10803fcc 	andi	r2,r2,255
     bf8:	108001f0 	cmpltui	r2,r2,7
     bfc:	103fed1e 	bne	r2,zero,bb4 <__alt_exception_stack_pointer+0xf8000bb4>
     c00:	00000106 	br	c08 <loop_keyboard+0x21c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     c04:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     c08:	d0e8f18b 	ldhu	r3,-23610(gp)
     c0c:	d0a8ee8b 	ldhu	r2,-23622(gp)
     c10:	1884703a 	and	r2,r3,r2
     c14:	10bfffcc 	andi	r2,r2,65535
     c18:	1000241e 	bne	r2,zero,cac <loop_keyboard+0x2c0>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
     c1c:	010000b4 	movhi	r4,2
     c20:	21203b04 	addi	r4,r4,-32532
     c24:	0009ff00 	call	9ff0 <puts>
			printf("[INFO]: please insert again!!! \n");
     c28:	010000b4 	movhi	r4,2
     c2c:	21204604 	addi	r4,r4,-32488
     c30:	0009ff00 	call	9ff0 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
     c34:	00001d06 	br	cac <loop_keyboard+0x2c0>
	{

		usb_ctl_val = UsbRead(ctl_reg);
     c38:	d0a8ee0b 	ldhu	r2,-23624(gp)
     c3c:	10bfffcc 	andi	r2,r2,65535
     c40:	1009883a 	mov	r4,r2
     c44:	00034080 	call	3408 <UsbRead>
     c48:	d0a8f18d 	sth	r2,-23610(gp)
		usleep(5*1000);
     c4c:	0104e204 	movi	r4,5000
     c50:	00152040 	call	15204 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     c54:	d0a8ee0b 	ldhu	r2,-23624(gp)
     c58:	10bfffcc 	andi	r2,r2,65535
     c5c:	1009883a 	mov	r4,r2
     c60:	00034080 	call	3408 <UsbRead>
     c64:	d0a8f18d 	sth	r2,-23610(gp)
		usleep(5*1000);
     c68:	0104e204 	movi	r4,5000
     c6c:	00152040 	call	15204 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     c70:	d0a8ee0b 	ldhu	r2,-23624(gp)
     c74:	10bfffcc 	andi	r2,r2,65535
     c78:	1009883a 	mov	r4,r2
     c7c:	00034080 	call	3408 <UsbRead>
     c80:	d0a8f18d 	sth	r2,-23610(gp)
		usleep(5*1000);
     c84:	0104e204 	movi	r4,5000
     c88:	00152040 	call	15204 <usleep>

		if(usb_ctl_val & no_device)
     c8c:	d0e8f18b 	ldhu	r3,-23610(gp)
     c90:	d0a8ee8b 	ldhu	r2,-23622(gp)
     c94:	1884703a 	and	r2,r3,r2
     c98:	10bfffcc 	andi	r2,r2,65535
     c9c:	10000126 	beq	r2,zero,ca4 <loop_keyboard+0x2b8>
			init_keyboard();
     ca0:	0000cd80 	call	cd8 <init_keyboard>
			//goto USB_HOT_PLUG;

		usleep(200);
     ca4:	01003204 	movi	r4,200
     ca8:	00152040 	call	15204 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
     cac:	d0e8f18b 	ldhu	r3,-23610(gp)
     cb0:	d0a8ee8b 	ldhu	r2,-23622(gp)
     cb4:	1884703a 	and	r2,r3,r2
     cb8:	10bfffcc 	andi	r2,r2,65535
     cbc:	103fde26 	beq	r2,zero,c38 <__alt_exception_stack_pointer+0xf8000c38>
			//goto USB_HOT_PLUG;

		usleep(200);
	}

}
     cc0:	0001883a 	nop
     cc4:	e037883a 	mov	sp,fp
     cc8:	dfc00117 	ldw	ra,4(sp)
     ccc:	df000017 	ldw	fp,0(sp)
     cd0:	dec00204 	addi	sp,sp,8
     cd4:	f800283a 	ret

00000cd8 <init_keyboard>:

void init_keyboard() {
     cd8:	defffe04 	addi	sp,sp,-8
     cdc:	dfc00115 	stw	ra,4(sp)
     ce0:	df000015 	stw	fp,0(sp)
     ce4:	d839883a 	mov	fp,sp
	IO_init();
     ce8:	00008340 	call	834 <IO_init>
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/


	printf("USB keyboard setup...\n\n");
     cec:	010000b4 	movhi	r4,2
     cf0:	21204e04 	addi	r4,r4,-32456
     cf4:	0009ff00 	call	9ff0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     cf8:	000344c0 	call	344c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     cfc:	000b883a 	mov	r5,zero
     d00:	01005104 	movi	r4,324
     d04:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     d08:	017fffd4 	movui	r5,65535
     d0c:	01302414 	movui	r4,49296
     d10:	00033b00 	call	33b0 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     d14:	01409604 	movi	r5,600
     d18:	01006d04 	movi	r4,436
     d1c:	00033b00 	call	33b0 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     d20:	00811004 	movi	r2,1088
     d24:	d0a8f18d 	sth	r2,-23610(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     d28:	d0a8f18b 	ldhu	r2,-23610(gp)
     d2c:	10bfffcc 	andi	r2,r2,65535
     d30:	100b883a 	mov	r5,r2
     d34:	01005084 	movi	r4,322
     d38:	00033b00 	call	33b0 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     d3c:	00808404 	movi	r2,528
     d40:	d0a8f28d 	sth	r2,-23606(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     d44:	d0a8f28b 	ldhu	r2,-23606(gp)
     d48:	10bfffcc 	andi	r2,r2,65535
     d4c:	100b883a 	mov	r5,r2
     d50:	01302314 	movui	r4,49292
     d54:	00033b00 	call	33b0 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     d58:	000b883a 	mov	r5,zero
     d5c:	01007104 	movi	r4,452
     d60:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     d64:	000b883a 	mov	r5,zero
     d68:	01007184 	movi	r4,454
     d6c:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     d70:	000b883a 	mov	r5,zero
     d74:	01007204 	movi	r4,456
     d78:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     d7c:	000b883a 	mov	r5,zero
     d80:	01007284 	movi	r4,458
     d84:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     d88:	000b883a 	mov	r5,zero
     d8c:	01007304 	movi	r4,460
     d90:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     d94:	000b883a 	mov	r5,zero
     d98:	01007384 	movi	r4,462
     d9c:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     da0:	000b883a 	mov	r5,zero
     da4:	01007404 	movi	r4,464
     da8:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     dac:	000b883a 	mov	r5,zero
     db0:	01007484 	movi	r4,466
     db4:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     db8:	000b883a 	mov	r5,zero
     dbc:	01007504 	movi	r4,468
     dc0:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     dc4:	000b883a 	mov	r5,zero
     dc8:	01007584 	movi	r4,470
     dcc:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     dd0:	000b883a 	mov	r5,zero
     dd4:	01007604 	movi	r4,472
     dd8:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     ddc:	000b883a 	mov	r5,zero
     de0:	01007684 	movi	r4,474
     de4:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     de8:	000b883a 	mov	r5,zero
     dec:	01007704 	movi	r4,476
     df0:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     df4:	000b883a 	mov	r5,zero
     df8:	01007784 	movi	r4,478
     dfc:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     e00:	01401c84 	movi	r5,114
     e04:	01007084 	movi	r4,450
     e08:	00033b00 	call	33b0 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     e0c:	01738054 	movui	r5,52737
     e10:	01000044 	movi	r4,1
     e14:	00008e40 	call	8e4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     e18:	0001883a 	nop
     e1c:	010000c4 	movi	r4,3
     e20:	000096c0 	call	96c <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	103ffc26 	beq	r2,zero,e1c <__alt_exception_stack_pointer+0xf8000e1c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     e2c:	00000806 	br	e50 <init_keyboard+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     e30:	01000044 	movi	r4,1
     e34:	000096c0 	call	96c <IO_read>
     e38:	10bfffcc 	andi	r2,r2,65535
     e3c:	100b883a 	mov	r5,r2
     e40:	010000b4 	movhi	r4,2
     e44:	21205404 	addi	r4,r4,-32432
     e48:	0009ef40 	call	9ef4 <printf>
		goto USB_HOT_PLUG;
     e4c:	003faa06 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     e50:	01000044 	movi	r4,1
     e54:	000096c0 	call	96c <IO_read>
     e58:	10bfffcc 	andi	r2,r2,65535
     e5c:	1083fb58 	cmpnei	r2,r2,4077
     e60:	103ff31e 	bne	r2,zero,e30 <__alt_exception_stack_pointer+0xf8000e30>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     e64:	010000b4 	movhi	r4,2
     e68:	21205d04 	addi	r4,r4,-32396
     e6c:	0009ef40 	call	9ef4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     e70:	01401d04 	movi	r5,116
     e74:	01007084 	movi	r4,450
     e78:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     e7c:	01400f04 	movi	r5,60
     e80:	01007104 	movi	r4,452
     e84:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     e88:	000b883a 	mov	r5,zero
     e8c:	01007184 	movi	r4,454
     e90:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     e94:	000b883a 	mov	r5,zero
     e98:	01007204 	movi	r4,456
     e9c:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     ea0:	000b883a 	mov	r5,zero
     ea4:	01007284 	movi	r4,458
     ea8:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     eac:	000b883a 	mov	r5,zero
     eb0:	01007304 	movi	r4,460
     eb4:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     eb8:	000b883a 	mov	r5,zero
     ebc:	01007384 	movi	r4,462
     ec0:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     ec4:	000b883a 	mov	r5,zero
     ec8:	01007404 	movi	r4,464
     ecc:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     ed0:	000b883a 	mov	r5,zero
     ed4:	01007484 	movi	r4,466
     ed8:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     edc:	000b883a 	mov	r5,zero
     ee0:	01007504 	movi	r4,468
     ee4:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     ee8:	000b883a 	mov	r5,zero
     eec:	01007584 	movi	r4,470
     ef0:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     ef4:	000b883a 	mov	r5,zero
     ef8:	01007604 	movi	r4,472
     efc:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     f00:	000b883a 	mov	r5,zero
     f04:	01007684 	movi	r4,474
     f08:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     f0c:	000b883a 	mov	r5,zero
     f10:	01007704 	movi	r4,476
     f14:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     f18:	000b883a 	mov	r5,zero
     f1c:	01007784 	movi	r4,478
     f20:	00033b00 	call	33b0 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     f24:	01738054 	movui	r5,52737
     f28:	01000044 	movi	r4,1
     f2c:	00008e40 	call	8e4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     f30:	0001883a 	nop
     f34:	01000044 	movi	r4,1
     f38:	000096c0 	call	96c <IO_read>
     f3c:	10bfffcc 	andi	r2,r2,65535
     f40:	1083fb58 	cmpnei	r2,r2,4077
     f44:	10000826 	beq	r2,zero,f68 <init_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     f48:	01000044 	movi	r4,1
     f4c:	000096c0 	call	96c <IO_read>
     f50:	10bfffcc 	andi	r2,r2,65535
     f54:	100b883a 	mov	r5,r2
     f58:	010000b4 	movhi	r4,2
     f5c:	21205404 	addi	r4,r4,-32432
     f60:	0009ef40 	call	9ef4 <printf>
		goto USB_HOT_PLUG;
     f64:	003f6406 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     f68:	00b02284 	movi	r2,-16246
     f6c:	d0a8ee0d 	sth	r2,-23624(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     f70:	008c0004 	movi	r2,12288
     f74:	d0a8ee8d 	sth	r2,-23622(gp)
	fs_device = A_DP_STAT;
     f78:	00880004 	movi	r2,8192
     f7c:	d0a8ef0d 	sth	r2,-23620(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     f80:	d0a8ee0b 	ldhu	r2,-23624(gp)
     f84:	10bfffcc 	andi	r2,r2,65535
     f88:	1009883a 	mov	r4,r2
     f8c:	00034080 	call	3408 <UsbRead>
     f90:	d0a8f18d 	sth	r2,-23610(gp)

	if (!(usb_ctl_val & no_device))
     f94:	d0e8f18b 	ldhu	r3,-23610(gp)
     f98:	d0a8ee8b 	ldhu	r2,-23622(gp)
     f9c:	1884703a 	and	r2,r3,r2
     fa0:	10bfffcc 	andi	r2,r2,65535
     fa4:	1000361e 	bne	r2,zero,1080 <init_keyboard+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     fa8:	d028f305 	stb	zero,-23604(gp)
     fac:	00000f06 	br	fec <init_keyboard+0x314>
		{
			usleep(5*1000);
     fb0:	0104e204 	movi	r4,5000
     fb4:	00152040 	call	15204 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     fb8:	d0a8ee0b 	ldhu	r2,-23624(gp)
     fbc:	10bfffcc 	andi	r2,r2,65535
     fc0:	1009883a 	mov	r4,r2
     fc4:	00034080 	call	3408 <UsbRead>
     fc8:	d0a8f18d 	sth	r2,-23610(gp)
			if(usb_ctl_val & no_device) break;
     fcc:	d0e8f18b 	ldhu	r3,-23610(gp)
     fd0:	d0a8ee8b 	ldhu	r2,-23622(gp)
     fd4:	1884703a 	and	r2,r3,r2
     fd8:	10bfffcc 	andi	r2,r2,65535
     fdc:	1000081e 	bne	r2,zero,1000 <init_keyboard+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     fe0:	d0a8f303 	ldbu	r2,-23604(gp)
     fe4:	10800044 	addi	r2,r2,1
     fe8:	d0a8f305 	stb	r2,-23604(gp)
     fec:	d0a8f303 	ldbu	r2,-23604(gp)
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10800170 	cmpltui	r2,r2,5
     ff8:	103fed1e 	bne	r2,zero,fb0 <__alt_exception_stack_pointer+0xf8000fb0>
     ffc:	00000106 	br	1004 <init_keyboard+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
    1000:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
    1004:	d0e8f18b 	ldhu	r3,-23610(gp)
    1008:	d0a8ee8b 	ldhu	r2,-23622(gp)
    100c:	1884703a 	and	r2,r3,r2
    1010:	10bfffcc 	andi	r2,r2,65535
    1014:	1000261e 	bne	r2,zero,10b0 <init_keyboard+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
    1018:	010000b4 	movhi	r4,2
    101c:	21206104 	addi	r4,r4,-32380
    1020:	0009ff00 	call	9ff0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
    1024:	010000b4 	movhi	r4,2
    1028:	21206b04 	addi	r4,r4,-32340
    102c:	0009ff00 	call	9ff0 <puts>
			while (!(usb_ctl_val & no_device))
    1030:	00000d06 	br	1068 <init_keyboard+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
    1034:	d0a8ee0b 	ldhu	r2,-23624(gp)
    1038:	10bfffcc 	andi	r2,r2,65535
    103c:	1009883a 	mov	r4,r2
    1040:	00034080 	call	3408 <UsbRead>
    1044:	d0a8f18d 	sth	r2,-23610(gp)
				if(usb_ctl_val & no_device)
    1048:	d0e8f18b 	ldhu	r3,-23610(gp)
    104c:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1050:	1884703a 	and	r2,r3,r2
    1054:	10bfffcc 	andi	r2,r2,65535
    1058:	10000126 	beq	r2,zero,1060 <init_keyboard+0x388>
					goto USB_HOT_PLUG;
    105c:	003f2606 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>

				usleep(2000);
    1060:	0101f404 	movi	r4,2000
    1064:	00152040 	call	15204 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
    1068:	d0e8f18b 	ldhu	r3,-23610(gp)
    106c:	d0a8ee8b 	ldhu	r2,-23622(gp)
    1070:	1884703a 	and	r2,r3,r2
    1074:	10bfffcc 	andi	r2,r2,65535
    1078:	103fee26 	beq	r2,zero,1034 <__alt_exception_stack_pointer+0xf8001034>
    107c:	00000c06 	br	10b0 <init_keyboard+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
    1080:	d0e8f18b 	ldhu	r3,-23610(gp)
    1084:	d0a8ef0b 	ldhu	r2,-23620(gp)
    1088:	1884703a 	and	r2,r3,r2
    108c:	10bfffcc 	andi	r2,r2,65535
    1090:	10000426 	beq	r2,zero,10a4 <init_keyboard+0x3cc>
		{
			printf("[INFO]: full speed device\n");
    1094:	010000b4 	movhi	r4,2
    1098:	21207704 	addi	r4,r4,-32292
    109c:	0009ff00 	call	9ff0 <puts>
    10a0:	00000306 	br	10b0 <init_keyboard+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
    10a4:	010000b4 	movhi	r4,2
    10a8:	21207e04 	addi	r4,r4,-32264
    10ac:	0009ff00 	call	9ff0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
    10b0:	00035000 	call	3500 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    10b4:	00000306 	br	10c4 <init_keyboard+0x3ec>
	{
		UsbSetAddress();
    10b8:	00035000 	call	3500 <UsbSetAddress>
		usleep(10*1000);
    10bc:	0109c404 	movi	r4,10000
    10c0:	00152040 	call	15204 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    10c4:	010000c4 	movi	r4,3
    10c8:	000096c0 	call	96c <IO_read>
    10cc:	10bfffcc 	andi	r2,r2,65535
    10d0:	1080040c 	andi	r2,r2,16
    10d4:	103ff826 	beq	r2,zero,10b8 <__alt_exception_stack_pointer+0xf80010b8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    10d8:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
    10dc:	01414184 	movi	r5,1286
    10e0:	01000084 	movi	r4,2
    10e4:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
    10e8:	0009883a 	mov	r4,zero
    10ec:	000096c0 	call	96c <IO_read>
    10f0:	10bfffcc 	andi	r2,r2,65535
    10f4:	100b883a 	mov	r5,r2
    10f8:	010000b4 	movhi	r4,2
    10fc:	21208504 	addi	r4,r4,-32236
    1100:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
    1104:	01414204 	movi	r5,1288
    1108:	01000084 	movi	r4,2
    110c:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1110:	0009883a 	mov	r4,zero
    1114:	000096c0 	call	96c <IO_read>
    1118:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
    111c:	d0a8f18b 	ldhu	r2,-23610(gp)
    1120:	10bfffcc 	andi	r2,r2,65535
    1124:	100b883a 	mov	r5,r2
    1128:	010000b4 	movhi	r4,2
    112c:	21209004 	addi	r4,r4,-32192
    1130:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
    1134:	0001883a 	nop
    1138:	d0a8f18b 	ldhu	r2,-23610(gp)
    113c:	10bfffcc 	andi	r2,r2,65535
    1140:	108000d8 	cmpnei	r2,r2,3
    1144:	10000326 	beq	r2,zero,1154 <init_keyboard+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1148:	00044240 	call	4424 <UsbGetRetryCnt>
    114c:	d0a8f18d 	sth	r2,-23610(gp)

		goto USB_HOT_PLUG;
    1150:	003ee906 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
    1154:	010000b4 	movhi	r4,2
    1158:	21209c04 	addi	r4,r4,-32144
    115c:	0009ff00 	call	9ff0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
    1160:	00036000 	call	3600 <UsbGetDeviceDesc1>

	usleep(10*1000);
    1164:	0109c404 	movi	r4,10000
    1168:	00152040 	call	15204 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    116c:	00000306 	br	117c <init_keyboard+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
    1170:	00036000 	call	3600 <UsbGetDeviceDesc1>
		usleep(10*1000);
    1174:	0109c404 	movi	r4,10000
    1178:	00152040 	call	15204 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    117c:	010000c4 	movi	r4,3
    1180:	000096c0 	call	96c <IO_read>
    1184:	10bfffcc 	andi	r2,r2,65535
    1188:	1080040c 	andi	r2,r2,16
    118c:	103ff826 	beq	r2,zero,1170 <__alt_exception_stack_pointer+0xf8001170>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1190:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1194:	01414184 	movi	r5,1286
    1198:	01000084 	movi	r4,2
    119c:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
    11a0:	0009883a 	mov	r4,zero
    11a4:	000096c0 	call	96c <IO_read>
    11a8:	10bfffcc 	andi	r2,r2,65535
    11ac:	100b883a 	mov	r5,r2
    11b0:	010000b4 	movhi	r4,2
    11b4:	2120ab04 	addi	r4,r4,-32084
    11b8:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508);
    11bc:	01414204 	movi	r5,1288
    11c0:	01000084 	movi	r4,2
    11c4:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    11c8:	0009883a 	mov	r4,zero
    11cc:	000096c0 	call	96c <IO_read>
    11d0:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    11d4:	d0a8f18b 	ldhu	r2,-23610(gp)
    11d8:	10bfffcc 	andi	r2,r2,65535
    11dc:	100b883a 	mov	r5,r2
    11e0:	010000b4 	movhi	r4,2
    11e4:	2120b604 	addi	r4,r4,-32040
    11e8:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03)
    11ec:	0001883a 	nop
    11f0:	d0a8f18b 	ldhu	r2,-23610(gp)
    11f4:	10bfffcc 	andi	r2,r2,65535
    11f8:	108000d8 	cmpnei	r2,r2,3
    11fc:	10000626 	beq	r2,zero,1218 <init_keyboard+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1200:	00044240 	call	4424 <UsbGetRetryCnt>
    1204:	d0a8f18d 	sth	r2,-23610(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1208:	010000b4 	movhi	r4,2
    120c:	2120c204 	addi	r4,r4,-31992
    1210:	0009ff00 	call	9ff0 <puts>
		goto USB_HOT_PLUG;
    1214:	003eb806 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
    1218:	010000b4 	movhi	r4,2
    121c:	2120cb04 	addi	r4,r4,-31956
    1220:	0009ff00 	call	9ff0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
    1224:	00037480 	call	3748 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1228:	00000306 	br	1238 <init_keyboard+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
    122c:	00037480 	call	3748 <UsbGetDeviceDesc2>
		usleep(10*1000);
    1230:	0109c404 	movi	r4,10000
    1234:	00152040 	call	15204 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1238:	010000c4 	movi	r4,3
    123c:	000096c0 	call	96c <IO_read>
    1240:	10bfffcc 	andi	r2,r2,65535
    1244:	1080040c 	andi	r2,r2,16
    1248:	103ff826 	beq	r2,zero,122c <__alt_exception_stack_pointer+0xf800122c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    124c:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1250:	01414184 	movi	r5,1286
    1254:	01000084 	movi	r4,2
    1258:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
    125c:	0009883a 	mov	r4,zero
    1260:	000096c0 	call	96c <IO_read>
    1264:	10bfffcc 	andi	r2,r2,65535
    1268:	100b883a 	mov	r5,r2
    126c:	010000b4 	movhi	r4,2
    1270:	2120ab04 	addi	r4,r4,-32084
    1274:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508);
    1278:	01414204 	movi	r5,1288
    127c:	01000084 	movi	r4,2
    1280:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1284:	0009883a 	mov	r4,zero
    1288:	000096c0 	call	96c <IO_read>
    128c:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    1290:	d0a8f18b 	ldhu	r2,-23610(gp)
    1294:	10bfffcc 	andi	r2,r2,65535
    1298:	100b883a 	mov	r5,r2
    129c:	010000b4 	movhi	r4,2
    12a0:	2120b604 	addi	r4,r4,-32040
    12a4:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03)
    12a8:	0001883a 	nop
    12ac:	d0a8f18b 	ldhu	r2,-23610(gp)
    12b0:	10bfffcc 	andi	r2,r2,65535
    12b4:	108000d8 	cmpnei	r2,r2,3
    12b8:	10000626 	beq	r2,zero,12d4 <init_keyboard+0x5fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
    12bc:	00044240 	call	4424 <UsbGetRetryCnt>
    12c0:	d0a8f18d 	sth	r2,-23610(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    12c4:	010000b4 	movhi	r4,2
    12c8:	2120c204 	addi	r4,r4,-31992
    12cc:	0009ff00 	call	9ff0 <puts>
		goto USB_HOT_PLUG;
    12d0:	003e8906 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
    12d4:	010000b4 	movhi	r4,2
    12d8:	2120df04 	addi	r4,r4,-31876
    12dc:	0009ff00 	call	9ff0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
    12e0:	00039200 	call	3920 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    12e4:	00000306 	br	12f4 <init_keyboard+0x61c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
    12e8:	00039200 	call	3920 <UsbGetConfigDesc1>
		usleep(10*1000);
    12ec:	0109c404 	movi	r4,10000
    12f0:	00152040 	call	15204 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    12f4:	010000c4 	movi	r4,3
    12f8:	000096c0 	call	96c <IO_read>
    12fc:	10bfffcc 	andi	r2,r2,65535
    1300:	1080040c 	andi	r2,r2,16
    1304:	103ff826 	beq	r2,zero,12e8 <__alt_exception_stack_pointer+0xf80012e8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1308:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    130c:	01414184 	movi	r5,1286
    1310:	01000084 	movi	r4,2
    1314:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1318:	0009883a 	mov	r4,zero
    131c:	000096c0 	call	96c <IO_read>
    1320:	10bfffcc 	andi	r2,r2,65535
    1324:	100b883a 	mov	r5,r2
    1328:	010000b4 	movhi	r4,2
    132c:	2120f104 	addi	r4,r4,-31804
    1330:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508);
    1334:	01414204 	movi	r5,1288
    1338:	01000084 	movi	r4,2
    133c:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1340:	0009883a 	mov	r4,zero
    1344:	000096c0 	call	96c <IO_read>
    1348:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    134c:	d0a8f18b 	ldhu	r2,-23610(gp)
    1350:	10bfffcc 	andi	r2,r2,65535
    1354:	100b883a 	mov	r5,r2
    1358:	010000b4 	movhi	r4,2
    135c:	2120fc04 	addi	r4,r4,-31760
    1360:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03)
    1364:	0001883a 	nop
    1368:	d0a8f18b 	ldhu	r2,-23610(gp)
    136c:	10bfffcc 	andi	r2,r2,65535
    1370:	108000d8 	cmpnei	r2,r2,3
    1374:	10000626 	beq	r2,zero,1390 <init_keyboard+0x6b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1378:	00044240 	call	4424 <UsbGetRetryCnt>
    137c:	d0a8f18d 	sth	r2,-23610(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1380:	010000b4 	movhi	r4,2
    1384:	2120c204 	addi	r4,r4,-31992
    1388:	0009ff00 	call	9ff0 <puts>
		goto USB_HOT_PLUG;
    138c:	003e5a06 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
    1390:	010000b4 	movhi	r4,2
    1394:	21210804 	addi	r4,r4,-31712
    1398:	0009ff00 	call	9ff0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
    139c:	0003ab00 	call	3ab0 <UsbGetConfigDesc2>

	usleep(100*1000);
    13a0:	010000b4 	movhi	r4,2
    13a4:	2121a804 	addi	r4,r4,-31072
    13a8:	00152040 	call	15204 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    13ac:	00000306 	br	13bc <init_keyboard+0x6e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
    13b0:	0003ab00 	call	3ab0 <UsbGetConfigDesc2>
		usleep(10*1000);
    13b4:	0109c404 	movi	r4,10000
    13b8:	00152040 	call	15204 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    13bc:	010000c4 	movi	r4,3
    13c0:	000096c0 	call	96c <IO_read>
    13c4:	10bfffcc 	andi	r2,r2,65535
    13c8:	1080040c 	andi	r2,r2,16
    13cc:	103ff826 	beq	r2,zero,13b0 <__alt_exception_stack_pointer+0xf80013b0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    13d0:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    13d4:	01414184 	movi	r5,1286
    13d8:	01000084 	movi	r4,2
    13dc:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
    13e0:	0009883a 	mov	r4,zero
    13e4:	000096c0 	call	96c <IO_read>
    13e8:	10bfffcc 	andi	r2,r2,65535
    13ec:	100b883a 	mov	r5,r2
    13f0:	010000b4 	movhi	r4,2
    13f4:	21211b04 	addi	r4,r4,-31636
    13f8:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508);
    13fc:	01414204 	movi	r5,1288
    1400:	01000084 	movi	r4,2
    1404:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1408:	0009883a 	mov	r4,zero
    140c:	000096c0 	call	96c <IO_read>
    1410:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    1414:	d0a8f18b 	ldhu	r2,-23610(gp)
    1418:	10bfffcc 	andi	r2,r2,65535
    141c:	100b883a 	mov	r5,r2
    1420:	010000b4 	movhi	r4,2
    1424:	21212604 	addi	r4,r4,-31592
    1428:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03)
    142c:	0001883a 	nop
    1430:	d0a8f18b 	ldhu	r2,-23610(gp)
    1434:	10bfffcc 	andi	r2,r2,65535
    1438:	108000d8 	cmpnei	r2,r2,3
    143c:	10000626 	beq	r2,zero,1458 <init_keyboard+0x780>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1440:	00044240 	call	4424 <UsbGetRetryCnt>
    1444:	d0a8f18d 	sth	r2,-23610(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1448:	010000b4 	movhi	r4,2
    144c:	2120c204 	addi	r4,r4,-31992
    1450:	0009ff00 	call	9ff0 <puts>
		goto USB_HOT_PLUG;
    1454:	003e2806 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
    1458:	010000b4 	movhi	r4,2
    145c:	21213204 	addi	r4,r4,-31544
    1460:	0009ff00 	call	9ff0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
    1464:	01415b04 	movi	r5,1388
    1468:	01000084 	movi	r4,2
    146c:	00008e40 	call	8e4 <IO_write>
	code = IO_read(HPI_DATA);
    1470:	0009883a 	mov	r4,zero
    1474:	000096c0 	call	96c <IO_read>
    1478:	d0a8f38d 	sth	r2,-23602(gp)
	code = code & 0x003;
    147c:	d0a8f38b 	ldhu	r2,-23602(gp)
    1480:	108000cc 	andi	r2,r2,3
    1484:	d0a8f38d 	sth	r2,-23602(gp)
	printf("\ncode = %x\n", code);
    1488:	d0a8f38b 	ldhu	r2,-23602(gp)
    148c:	10bfffcc 	andi	r2,r2,65535
    1490:	100b883a 	mov	r5,r2
    1494:	010000b4 	movhi	r4,2
    1498:	21214504 	addi	r4,r4,-31468
    149c:	0009ef40 	call	9ef4 <printf>

	if (code == 0x01)
    14a0:	d0a8f38b 	ldhu	r2,-23602(gp)
    14a4:	10bfffcc 	andi	r2,r2,65535
    14a8:	10800058 	cmpnei	r2,r2,1
    14ac:	1000041e 	bne	r2,zero,14c0 <init_keyboard+0x7e8>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
    14b0:	010000b4 	movhi	r4,2
    14b4:	21214804 	addi	r4,r4,-31456
    14b8:	0009ff00 	call	9ff0 <puts>
    14bc:	00000306 	br	14cc <init_keyboard+0x7f4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
    14c0:	010000b4 	movhi	r4,2
    14c4:	21215704 	addi	r4,r4,-31396
    14c8:	0009ff00 	call	9ff0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
    14cc:	01415d84 	movi	r5,1398
    14d0:	01000084 	movi	r4,2
    14d4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x073F);
    14d8:	0141cfc4 	movi	r5,1855
    14dc:	0009883a 	mov	r4,zero
    14e0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x8105);
    14e4:	01604154 	movui	r5,33029
    14e8:	0009883a 	mov	r4,zero
    14ec:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0003);
    14f0:	014000c4 	movi	r5,3
    14f4:	0009883a 	mov	r4,zero
    14f8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);
    14fc:	01400204 	movi	r5,8
    1500:	0009883a 	mov	r4,zero
    1504:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
    1508:	016b0294 	movui	r5,44042
    150c:	0009883a 	mov	r4,zero
    1510:	00008e40 	call	8e4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
    1514:	01415d84 	movi	r5,1398
    1518:	01006c04 	movi	r4,432
    151c:	00033b00 	call	33b0 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
    1520:	01415f04 	movi	r5,1404
    1524:	01000084 	movi	r4,2
    1528:	00008e40 	call	8e4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
    152c:	0009883a 	mov	r4,zero
    1530:	000096c0 	call	96c <IO_read>
    1534:	d0a8f205 	stb	r2,-23608(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
    1538:	d0a8f203 	ldbu	r2,-23608(gp)
    153c:	10803fcc 	andi	r2,r2,255
    1540:	100b883a 	mov	r5,r2
    1544:	010000b4 	movhi	r4,2
    1548:	21216004 	addi	r4,r4,-31360
    154c:	0009ef40 	call	9ef4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
    1550:	0003d180 	call	3d18 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1554:	00000306 	br	1564 <init_keyboard+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
    1558:	0003d180 	call	3d18 <UsbSetConfig>
		usleep(10*1000);
    155c:	0109c404 	movi	r4,10000
    1560:	00152040 	call	15204 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1564:	010000c4 	movi	r4,3
    1568:	000096c0 	call	96c <IO_read>
    156c:	10bfffcc 	andi	r2,r2,65535
    1570:	1080040c 	andi	r2,r2,16
    1574:	103ff826 	beq	r2,zero,1558 <__alt_exception_stack_pointer+0xf8001558>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1578:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    157c:	01414184 	movi	r5,1286
    1580:	01000084 	movi	r4,2
    1584:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1588:	0009883a 	mov	r4,zero
    158c:	000096c0 	call	96c <IO_read>
    1590:	10bfffcc 	andi	r2,r2,65535
    1594:	100b883a 	mov	r5,r2
    1598:	010000b4 	movhi	r4,2
    159c:	21216a04 	addi	r4,r4,-31320
    15a0:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508);
    15a4:	01414204 	movi	r5,1288
    15a8:	01000084 	movi	r4,2
    15ac:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    15b0:	0009883a 	mov	r4,zero
    15b4:	000096c0 	call	96c <IO_read>
    15b8:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    15bc:	d0a8f18b 	ldhu	r2,-23610(gp)
    15c0:	10bfffcc 	andi	r2,r2,65535
    15c4:	100b883a 	mov	r5,r2
    15c8:	010000b4 	movhi	r4,2
    15cc:	21217504 	addi	r4,r4,-31276
    15d0:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03)
    15d4:	0001883a 	nop
    15d8:	d0a8f18b 	ldhu	r2,-23610(gp)
    15dc:	10bfffcc 	andi	r2,r2,65535
    15e0:	108000d8 	cmpnei	r2,r2,3
    15e4:	10000626 	beq	r2,zero,1600 <init_keyboard+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
    15e8:	00044240 	call	4424 <UsbGetRetryCnt>
    15ec:	d0a8f18d 	sth	r2,-23610(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    15f0:	010000b4 	movhi	r4,2
    15f4:	2120c204 	addi	r4,r4,-31992
    15f8:	0009ff00 	call	9ff0 <puts>
		goto USB_HOT_PLUG;
    15fc:	003dbe06 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    1600:	010000b4 	movhi	r4,2
    1604:	21218104 	addi	r4,r4,-31228
    1608:	0009ff00 	call	9ff0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
    160c:	0003e180 	call	3e18 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1610:	00000306 	br	1620 <init_keyboard+0x948>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
    1614:	0003e180 	call	3e18 <UsbClassRequest>
		usleep(10*1000);
    1618:	0109c404 	movi	r4,10000
    161c:	00152040 	call	15204 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1620:	010000c4 	movi	r4,3
    1624:	000096c0 	call	96c <IO_read>
    1628:	10bfffcc 	andi	r2,r2,65535
    162c:	1080040c 	andi	r2,r2,16
    1630:	103ff826 	beq	r2,zero,1614 <__alt_exception_stack_pointer+0xf8001614>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1634:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1638:	01414184 	movi	r5,1286
    163c:	01000084 	movi	r4,2
    1640:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1644:	0009883a 	mov	r4,zero
    1648:	000096c0 	call	96c <IO_read>
    164c:	10bfffcc 	andi	r2,r2,65535
    1650:	100b883a 	mov	r5,r2
    1654:	010000b4 	movhi	r4,2
    1658:	21219304 	addi	r4,r4,-31156
    165c:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508);
    1660:	01414204 	movi	r5,1288
    1664:	01000084 	movi	r4,2
    1668:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    166c:	0009883a 	mov	r4,zero
    1670:	000096c0 	call	96c <IO_read>
    1674:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    1678:	d0a8f18b 	ldhu	r2,-23610(gp)
    167c:	10bfffcc 	andi	r2,r2,65535
    1680:	100b883a 	mov	r5,r2
    1684:	010000b4 	movhi	r4,2
    1688:	21219e04 	addi	r4,r4,-31112
    168c:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03)
    1690:	0001883a 	nop
    1694:	d0a8f18b 	ldhu	r2,-23610(gp)
    1698:	10bfffcc 	andi	r2,r2,65535
    169c:	108000d8 	cmpnei	r2,r2,3
    16a0:	10000626 	beq	r2,zero,16bc <init_keyboard+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
    16a4:	00044240 	call	4424 <UsbGetRetryCnt>
    16a8:	d0a8f18d 	sth	r2,-23610(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    16ac:	010000b4 	movhi	r4,2
    16b0:	2120c204 	addi	r4,r4,-31992
    16b4:	0009ff00 	call	9ff0 <puts>
		goto USB_HOT_PLUG;
    16b8:	003d8f06 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    16bc:	010000b4 	movhi	r4,2
    16c0:	2121aa04 	addi	r4,r4,-31064
    16c4:	0009ff00 	call	9ff0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
    16c8:	0003f180 	call	3f18 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    16cc:	00000306 	br	16dc <init_keyboard+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
    16d0:	0003f180 	call	3f18 <UsbGetHidDesc>
		usleep(10*1000);
    16d4:	0109c404 	movi	r4,10000
    16d8:	00152040 	call	15204 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    16dc:	010000c4 	movi	r4,3
    16e0:	000096c0 	call	96c <IO_read>
    16e4:	10bfffcc 	andi	r2,r2,65535
    16e8:	1080040c 	andi	r2,r2,16
    16ec:	103ff826 	beq	r2,zero,16d0 <__alt_exception_stack_pointer+0xf80016d0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    16f0:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    16f4:	01414184 	movi	r5,1286
    16f8:	01000084 	movi	r4,2
    16fc:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1700:	0009883a 	mov	r4,zero
    1704:	000096c0 	call	96c <IO_read>
    1708:	10bfffcc 	andi	r2,r2,65535
    170c:	100b883a 	mov	r5,r2
    1710:	010000b4 	movhi	r4,2
    1714:	21219304 	addi	r4,r4,-31156
    1718:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508);
    171c:	01414204 	movi	r5,1288
    1720:	01000084 	movi	r4,2
    1724:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1728:	0009883a 	mov	r4,zero
    172c:	000096c0 	call	96c <IO_read>
    1730:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    1734:	d0a8f18b 	ldhu	r2,-23610(gp)
    1738:	10bfffcc 	andi	r2,r2,65535
    173c:	100b883a 	mov	r5,r2
    1740:	010000b4 	movhi	r4,2
    1744:	21219e04 	addi	r4,r4,-31112
    1748:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03)
    174c:	0001883a 	nop
    1750:	d0a8f18b 	ldhu	r2,-23610(gp)
    1754:	10bfffcc 	andi	r2,r2,65535
    1758:	108000d8 	cmpnei	r2,r2,3
    175c:	10000626 	beq	r2,zero,1778 <init_keyboard+0xaa0>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1760:	00044240 	call	4424 <UsbGetRetryCnt>
    1764:	d0a8f18d 	sth	r2,-23610(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    1768:	010000b4 	movhi	r4,2
    176c:	2120c204 	addi	r4,r4,-31992
    1770:	0009ff00 	call	9ff0 <puts>
		goto USB_HOT_PLUG;
    1774:	003d6006 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    1778:	010000b4 	movhi	r4,2
    177c:	2121bc04 	addi	r4,r4,-30992
    1780:	0009ff00 	call	9ff0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
    1784:	00040600 	call	4060 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1788:	00000106 	br	1790 <init_keyboard+0xab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
    178c:	00040600 	call	4060 <UsbGetReportDesc>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1790:	010000c4 	movi	r4,3
    1794:	000096c0 	call	96c <IO_read>
    1798:	10bfffcc 	andi	r2,r2,65535
    179c:	1080040c 	andi	r2,r2,16
    17a0:	103ffa26 	beq	r2,zero,178c <__alt_exception_stack_pointer+0xf800178c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		//usleep(10*1000);
	}

	UsbWaitTDListDone();
    17a4:	00043a00 	call	43a0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    17a8:	01414184 	movi	r5,1286
    17ac:	01000084 	movi	r4,2
    17b0:	00008e40 	call	8e4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    17b4:	0009883a 	mov	r4,zero
    17b8:	000096c0 	call	96c <IO_read>
    17bc:	10bfffcc 	andi	r2,r2,65535
    17c0:	100b883a 	mov	r5,r2
    17c4:	010000b4 	movhi	r4,2
    17c8:	2121d004 	addi	r4,r4,-30912
    17cc:	0009ef40 	call	9ef4 <printf>

	IO_write(HPI_ADDR,0x0508);
    17d0:	01414204 	movi	r5,1288
    17d4:	01000084 	movi	r4,2
    17d8:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    17dc:	0009883a 	mov	r4,zero
    17e0:	000096c0 	call	96c <IO_read>
    17e4:	d0a8f18d 	sth	r2,-23610(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    17e8:	d0a8f18b 	ldhu	r2,-23610(gp)
    17ec:	10bfffcc 	andi	r2,r2,65535
    17f0:	100b883a 	mov	r5,r2
    17f4:	010000b4 	movhi	r4,2
    17f8:	2121dc04 	addi	r4,r4,-30864
    17fc:	0009ef40 	call	9ef4 <printf>
	while (usb_ctl_val != 0x03)
    1800:	0001883a 	nop
    1804:	d0a8f18b 	ldhu	r2,-23610(gp)
    1808:	10bfffcc 	andi	r2,r2,65535
    180c:	108000d8 	cmpnei	r2,r2,3
    1810:	10000626 	beq	r2,zero,182c <init_keyboard+0xb54>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1814:	00044240 	call	4424 <UsbGetRetryCnt>
    1818:	d0a8f18d 	sth	r2,-23610(gp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
    181c:	010000b4 	movhi	r4,2
    1820:	2120c204 	addi	r4,r4,-31992
    1824:	0009ff00 	call	9ff0 <puts>
		goto USB_HOT_PLUG;
    1828:	003d3306 	br	cf8 <__alt_exception_stack_pointer+0xf8000cf8>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    182c:	010000b4 	movhi	r4,2
    1830:	2121e804 	addi	r4,r4,-30816
    1834:	0009ff00 	call	9ff0 <puts>


}
    1838:	0001883a 	nop
    183c:	e037883a 	mov	sp,fp
    1840:	dfc00117 	ldw	ra,4(sp)
    1844:	df000017 	ldw	fp,0(sp)
    1848:	dec00204 	addi	sp,sp,8
    184c:	f800283a 	ret

00001850 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
    1850:	defff904 	addi	sp,sp,-28
    1854:	dfc00615 	stw	ra,24(sp)
    1858:	df000515 	stw	fp,20(sp)
    185c:	df000504 	addi	fp,sp,20
    1860:	e13ffc15 	stw	r4,-16(fp)
    1864:	e17ffd15 	stw	r5,-12(fp)
    1868:	e1bffe15 	stw	r6,-8(fp)
    186c:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
    1870:	e0bffc17 	ldw	r2,-16(fp)
    1874:	10000a26 	beq	r2,zero,18a0 <alt_dma_txchan_send+0x50>
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
    1878:	e0bffc17 	ldw	r2,-16(fp)
    187c:	10800417 	ldw	r2,16(r2)
        from, 
        length,
        done, 
        handle) : -ENODEV;
    1880:	e0c00217 	ldw	r3,8(fp)
    1884:	d8c00015 	stw	r3,0(sp)
    1888:	e1ffff17 	ldw	r7,-4(fp)
    188c:	e1bffe17 	ldw	r6,-8(fp)
    1890:	e17ffd17 	ldw	r5,-12(fp)
    1894:	e13ffc17 	ldw	r4,-16(fp)
    1898:	103ee83a 	callr	r2
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
    189c:	00000106 	br	18a4 <alt_dma_txchan_send+0x54>
        from, 
        length,
        done, 
        handle) : -ENODEV;
    18a0:	00bffb44 	movi	r2,-19
}
    18a4:	e037883a 	mov	sp,fp
    18a8:	dfc00117 	ldw	ra,4(sp)
    18ac:	df000017 	ldw	fp,0(sp)
    18b0:	dec00204 	addi	sp,sp,8
    18b4:	f800283a 	ret

000018b8 <alt_dma_rxchan_prepare>:
static ALT_INLINE int alt_dma_rxchan_prepare (alt_dma_rxchan   dma, 
                                              void*            data,
                                              alt_u32          len,
                                              alt_rxchan_done* done,  
                                              void*            handle)
{
    18b8:	defff904 	addi	sp,sp,-28
    18bc:	dfc00615 	stw	ra,24(sp)
    18c0:	df000515 	stw	fp,20(sp)
    18c4:	df000504 	addi	fp,sp,20
    18c8:	e13ffc15 	stw	r4,-16(fp)
    18cc:	e17ffd15 	stw	r5,-12(fp)
    18d0:	e1bffe15 	stw	r6,-8(fp)
    18d4:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->prepare (dma, data, len, done, handle) : -ENODEV;
    18d8:	e0bffc17 	ldw	r2,-16(fp)
    18dc:	10000a26 	beq	r2,zero,1908 <alt_dma_rxchan_prepare+0x50>
    18e0:	e0bffc17 	ldw	r2,-16(fp)
    18e4:	10800417 	ldw	r2,16(r2)
    18e8:	e0c00217 	ldw	r3,8(fp)
    18ec:	d8c00015 	stw	r3,0(sp)
    18f0:	e1ffff17 	ldw	r7,-4(fp)
    18f4:	e1bffe17 	ldw	r6,-8(fp)
    18f8:	e17ffd17 	ldw	r5,-12(fp)
    18fc:	e13ffc17 	ldw	r4,-16(fp)
    1900:	103ee83a 	callr	r2
    1904:	00000106 	br	190c <alt_dma_rxchan_prepare+0x54>
    1908:	00bffb44 	movi	r2,-19
}
    190c:	e037883a 	mov	sp,fp
    1910:	dfc00117 	ldw	ra,4(sp)
    1914:	df000017 	ldw	fp,0(sp)
    1918:	dec00204 	addi	sp,sp,8
    191c:	f800283a 	ret

00001920 <draw_tree>:
#define WORLD_Z 10
#define WORLD_Y 15
#define WORLD_X 15

void draw_tree(int world_data[WORLD_Z][WORLD_Y][WORLD_X], int base_x,
		int base_y, int base_z, int height, int log_id, int leaf_id) {
    1920:	defff704 	addi	sp,sp,-36
    1924:	dfc00815 	stw	ra,32(sp)
    1928:	df000715 	stw	fp,28(sp)
    192c:	dc400615 	stw	r17,24(sp)
    1930:	dc000515 	stw	r16,20(sp)
    1934:	df000704 	addi	fp,sp,28
    1938:	e13ffa15 	stw	r4,-24(fp)
    193c:	e17ffb15 	stw	r5,-20(fp)
    1940:	e1bffc15 	stw	r6,-16(fp)
    1944:	e1fffd15 	stw	r7,-12(fp)

	for (int y = 0; y < height; y++) {
    1948:	e03ff915 	stw	zero,-28(fp)
    194c:	00001806 	br	19b0 <draw_tree+0x90>
		world_data[base_z][base_y + y][base_x] = log_id;
    1950:	e0bffd17 	ldw	r2,-12(fp)
    1954:	0140e104 	movi	r5,900
    1958:	1009883a 	mov	r4,r2
    195c:	00068e80 	call	68e8 <__mulsi3>
    1960:	1007883a 	mov	r3,r2
    1964:	e0bffa17 	ldw	r2,-24(fp)
    1968:	10e1883a 	add	r16,r2,r3
    196c:	e0fffc17 	ldw	r3,-16(fp)
    1970:	e0bff917 	ldw	r2,-28(fp)
    1974:	1885883a 	add	r2,r3,r2
    1978:	014003c4 	movi	r5,15
    197c:	1009883a 	mov	r4,r2
    1980:	00068e80 	call	68e8 <__mulsi3>
    1984:	1007883a 	mov	r3,r2
    1988:	e0bffb17 	ldw	r2,-20(fp)
    198c:	1885883a 	add	r2,r3,r2
    1990:	1085883a 	add	r2,r2,r2
    1994:	1085883a 	add	r2,r2,r2
    1998:	8085883a 	add	r2,r16,r2
    199c:	e0c00317 	ldw	r3,12(fp)
    19a0:	10c00015 	stw	r3,0(r2)
#define WORLD_X 15

void draw_tree(int world_data[WORLD_Z][WORLD_Y][WORLD_X], int base_x,
		int base_y, int base_z, int height, int log_id, int leaf_id) {

	for (int y = 0; y < height; y++) {
    19a4:	e0bff917 	ldw	r2,-28(fp)
    19a8:	10800044 	addi	r2,r2,1
    19ac:	e0bff915 	stw	r2,-28(fp)
    19b0:	e0fff917 	ldw	r3,-28(fp)
    19b4:	e0800217 	ldw	r2,8(fp)
    19b8:	18bfe516 	blt	r3,r2,1950 <__alt_exception_stack_pointer+0xf8001950>
		world_data[base_z][base_y + y][base_x] = log_id;
	}

	world_data[base_z][base_y + 1 * height][base_x] = leaf_id;
    19bc:	e0bffd17 	ldw	r2,-12(fp)
    19c0:	0140e104 	movi	r5,900
    19c4:	1009883a 	mov	r4,r2
    19c8:	00068e80 	call	68e8 <__mulsi3>
    19cc:	1007883a 	mov	r3,r2
    19d0:	e0bffa17 	ldw	r2,-24(fp)
    19d4:	10e1883a 	add	r16,r2,r3
    19d8:	e0fffc17 	ldw	r3,-16(fp)
    19dc:	e0800217 	ldw	r2,8(fp)
    19e0:	1885883a 	add	r2,r3,r2
    19e4:	014003c4 	movi	r5,15
    19e8:	1009883a 	mov	r4,r2
    19ec:	00068e80 	call	68e8 <__mulsi3>
    19f0:	1007883a 	mov	r3,r2
    19f4:	e0bffb17 	ldw	r2,-20(fp)
    19f8:	1885883a 	add	r2,r3,r2
    19fc:	1085883a 	add	r2,r2,r2
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	8085883a 	add	r2,r16,r2
    1a08:	e0c00417 	ldw	r3,16(fp)
    1a0c:	10c00015 	stw	r3,0(r2)
	world_data[base_z][base_y + 1 * height - 1][base_x - 1] = leaf_id;
    1a10:	e0bffd17 	ldw	r2,-12(fp)
    1a14:	0140e104 	movi	r5,900
    1a18:	1009883a 	mov	r4,r2
    1a1c:	00068e80 	call	68e8 <__mulsi3>
    1a20:	1007883a 	mov	r3,r2
    1a24:	e0bffa17 	ldw	r2,-24(fp)
    1a28:	10e1883a 	add	r16,r2,r3
    1a2c:	e0fffc17 	ldw	r3,-16(fp)
    1a30:	e0800217 	ldw	r2,8(fp)
    1a34:	1885883a 	add	r2,r3,r2
    1a38:	10ffffc4 	addi	r3,r2,-1
    1a3c:	e0bffb17 	ldw	r2,-20(fp)
    1a40:	147fffc4 	addi	r17,r2,-1
    1a44:	014003c4 	movi	r5,15
    1a48:	1809883a 	mov	r4,r3
    1a4c:	00068e80 	call	68e8 <__mulsi3>
    1a50:	1445883a 	add	r2,r2,r17
    1a54:	1085883a 	add	r2,r2,r2
    1a58:	1085883a 	add	r2,r2,r2
    1a5c:	8085883a 	add	r2,r16,r2
    1a60:	e0c00417 	ldw	r3,16(fp)
    1a64:	10c00015 	stw	r3,0(r2)
	world_data[base_z][base_y + 1 * height - 1][base_x + 1] = leaf_id;
    1a68:	e0bffd17 	ldw	r2,-12(fp)
    1a6c:	0140e104 	movi	r5,900
    1a70:	1009883a 	mov	r4,r2
    1a74:	00068e80 	call	68e8 <__mulsi3>
    1a78:	1007883a 	mov	r3,r2
    1a7c:	e0bffa17 	ldw	r2,-24(fp)
    1a80:	10e1883a 	add	r16,r2,r3
    1a84:	e0fffc17 	ldw	r3,-16(fp)
    1a88:	e0800217 	ldw	r2,8(fp)
    1a8c:	1885883a 	add	r2,r3,r2
    1a90:	10ffffc4 	addi	r3,r2,-1
    1a94:	e0bffb17 	ldw	r2,-20(fp)
    1a98:	14400044 	addi	r17,r2,1
    1a9c:	014003c4 	movi	r5,15
    1aa0:	1809883a 	mov	r4,r3
    1aa4:	00068e80 	call	68e8 <__mulsi3>
    1aa8:	1445883a 	add	r2,r2,r17
    1aac:	1085883a 	add	r2,r2,r2
    1ab0:	1085883a 	add	r2,r2,r2
    1ab4:	8085883a 	add	r2,r16,r2
    1ab8:	e0c00417 	ldw	r3,16(fp)
    1abc:	10c00015 	stw	r3,0(r2)
	world_data[base_z + 1][base_y + 1 * height - 1][base_x] = leaf_id;
    1ac0:	e0bffd17 	ldw	r2,-12(fp)
    1ac4:	10800044 	addi	r2,r2,1
    1ac8:	0140e104 	movi	r5,900
    1acc:	1009883a 	mov	r4,r2
    1ad0:	00068e80 	call	68e8 <__mulsi3>
    1ad4:	1007883a 	mov	r3,r2
    1ad8:	e0bffa17 	ldw	r2,-24(fp)
    1adc:	10e1883a 	add	r16,r2,r3
    1ae0:	e0fffc17 	ldw	r3,-16(fp)
    1ae4:	e0800217 	ldw	r2,8(fp)
    1ae8:	1885883a 	add	r2,r3,r2
    1aec:	10bfffc4 	addi	r2,r2,-1
    1af0:	014003c4 	movi	r5,15
    1af4:	1009883a 	mov	r4,r2
    1af8:	00068e80 	call	68e8 <__mulsi3>
    1afc:	1007883a 	mov	r3,r2
    1b00:	e0bffb17 	ldw	r2,-20(fp)
    1b04:	1885883a 	add	r2,r3,r2
    1b08:	1085883a 	add	r2,r2,r2
    1b0c:	1085883a 	add	r2,r2,r2
    1b10:	8085883a 	add	r2,r16,r2
    1b14:	e0c00417 	ldw	r3,16(fp)
    1b18:	10c00015 	stw	r3,0(r2)
	world_data[base_z - 1][base_y + 1 * height - 1][base_x] = leaf_id;
    1b1c:	e0bffd17 	ldw	r2,-12(fp)
    1b20:	0140e104 	movi	r5,900
    1b24:	1009883a 	mov	r4,r2
    1b28:	00068e80 	call	68e8 <__mulsi3>
    1b2c:	10bf1f04 	addi	r2,r2,-900
    1b30:	e0fffa17 	ldw	r3,-24(fp)
    1b34:	18a1883a 	add	r16,r3,r2
    1b38:	e0fffc17 	ldw	r3,-16(fp)
    1b3c:	e0800217 	ldw	r2,8(fp)
    1b40:	1885883a 	add	r2,r3,r2
    1b44:	10bfffc4 	addi	r2,r2,-1
    1b48:	014003c4 	movi	r5,15
    1b4c:	1009883a 	mov	r4,r2
    1b50:	00068e80 	call	68e8 <__mulsi3>
    1b54:	1007883a 	mov	r3,r2
    1b58:	e0bffb17 	ldw	r2,-20(fp)
    1b5c:	1885883a 	add	r2,r3,r2
    1b60:	1085883a 	add	r2,r2,r2
    1b64:	1085883a 	add	r2,r2,r2
    1b68:	8085883a 	add	r2,r16,r2
    1b6c:	e0c00417 	ldw	r3,16(fp)
    1b70:	10c00015 	stw	r3,0(r2)

	world_data[base_z][base_y + 1 * height - 2][base_x - 1] = leaf_id;
    1b74:	e0bffd17 	ldw	r2,-12(fp)
    1b78:	0140e104 	movi	r5,900
    1b7c:	1009883a 	mov	r4,r2
    1b80:	00068e80 	call	68e8 <__mulsi3>
    1b84:	1007883a 	mov	r3,r2
    1b88:	e0bffa17 	ldw	r2,-24(fp)
    1b8c:	10e1883a 	add	r16,r2,r3
    1b90:	e0fffc17 	ldw	r3,-16(fp)
    1b94:	e0800217 	ldw	r2,8(fp)
    1b98:	1885883a 	add	r2,r3,r2
    1b9c:	10ffff84 	addi	r3,r2,-2
    1ba0:	e0bffb17 	ldw	r2,-20(fp)
    1ba4:	147fffc4 	addi	r17,r2,-1
    1ba8:	014003c4 	movi	r5,15
    1bac:	1809883a 	mov	r4,r3
    1bb0:	00068e80 	call	68e8 <__mulsi3>
    1bb4:	1445883a 	add	r2,r2,r17
    1bb8:	1085883a 	add	r2,r2,r2
    1bbc:	1085883a 	add	r2,r2,r2
    1bc0:	8085883a 	add	r2,r16,r2
    1bc4:	e0c00417 	ldw	r3,16(fp)
    1bc8:	10c00015 	stw	r3,0(r2)
	world_data[base_z][base_y + 1 * height - 2][base_x + 1] = leaf_id;
    1bcc:	e0bffd17 	ldw	r2,-12(fp)
    1bd0:	0140e104 	movi	r5,900
    1bd4:	1009883a 	mov	r4,r2
    1bd8:	00068e80 	call	68e8 <__mulsi3>
    1bdc:	1007883a 	mov	r3,r2
    1be0:	e0bffa17 	ldw	r2,-24(fp)
    1be4:	10e1883a 	add	r16,r2,r3
    1be8:	e0fffc17 	ldw	r3,-16(fp)
    1bec:	e0800217 	ldw	r2,8(fp)
    1bf0:	1885883a 	add	r2,r3,r2
    1bf4:	10ffff84 	addi	r3,r2,-2
    1bf8:	e0bffb17 	ldw	r2,-20(fp)
    1bfc:	14400044 	addi	r17,r2,1
    1c00:	014003c4 	movi	r5,15
    1c04:	1809883a 	mov	r4,r3
    1c08:	00068e80 	call	68e8 <__mulsi3>
    1c0c:	1445883a 	add	r2,r2,r17
    1c10:	1085883a 	add	r2,r2,r2
    1c14:	1085883a 	add	r2,r2,r2
    1c18:	8085883a 	add	r2,r16,r2
    1c1c:	e0c00417 	ldw	r3,16(fp)
    1c20:	10c00015 	stw	r3,0(r2)
	world_data[base_z + 1][base_y + 1 * height - 2][base_x] = leaf_id;
    1c24:	e0bffd17 	ldw	r2,-12(fp)
    1c28:	10800044 	addi	r2,r2,1
    1c2c:	0140e104 	movi	r5,900
    1c30:	1009883a 	mov	r4,r2
    1c34:	00068e80 	call	68e8 <__mulsi3>
    1c38:	1007883a 	mov	r3,r2
    1c3c:	e0bffa17 	ldw	r2,-24(fp)
    1c40:	10e1883a 	add	r16,r2,r3
    1c44:	e0fffc17 	ldw	r3,-16(fp)
    1c48:	e0800217 	ldw	r2,8(fp)
    1c4c:	1885883a 	add	r2,r3,r2
    1c50:	10bfff84 	addi	r2,r2,-2
    1c54:	014003c4 	movi	r5,15
    1c58:	1009883a 	mov	r4,r2
    1c5c:	00068e80 	call	68e8 <__mulsi3>
    1c60:	1007883a 	mov	r3,r2
    1c64:	e0bffb17 	ldw	r2,-20(fp)
    1c68:	1885883a 	add	r2,r3,r2
    1c6c:	1085883a 	add	r2,r2,r2
    1c70:	1085883a 	add	r2,r2,r2
    1c74:	8085883a 	add	r2,r16,r2
    1c78:	e0c00417 	ldw	r3,16(fp)
    1c7c:	10c00015 	stw	r3,0(r2)
	world_data[base_z - 1][base_y + 1 * height - 2][base_x] = leaf_id;
    1c80:	e0bffd17 	ldw	r2,-12(fp)
    1c84:	0140e104 	movi	r5,900
    1c88:	1009883a 	mov	r4,r2
    1c8c:	00068e80 	call	68e8 <__mulsi3>
    1c90:	10bf1f04 	addi	r2,r2,-900
    1c94:	e0fffa17 	ldw	r3,-24(fp)
    1c98:	18a1883a 	add	r16,r3,r2
    1c9c:	e0fffc17 	ldw	r3,-16(fp)
    1ca0:	e0800217 	ldw	r2,8(fp)
    1ca4:	1885883a 	add	r2,r3,r2
    1ca8:	10bfff84 	addi	r2,r2,-2
    1cac:	014003c4 	movi	r5,15
    1cb0:	1009883a 	mov	r4,r2
    1cb4:	00068e80 	call	68e8 <__mulsi3>
    1cb8:	1007883a 	mov	r3,r2
    1cbc:	e0bffb17 	ldw	r2,-20(fp)
    1cc0:	1885883a 	add	r2,r3,r2
    1cc4:	1085883a 	add	r2,r2,r2
    1cc8:	1085883a 	add	r2,r2,r2
    1ccc:	8085883a 	add	r2,r16,r2
    1cd0:	e0c00417 	ldw	r3,16(fp)
    1cd4:	10c00015 	stw	r3,0(r2)

	world_data[base_z - 1][base_y + 1 * height - 2][base_x - 1] = leaf_id;
    1cd8:	e0bffd17 	ldw	r2,-12(fp)
    1cdc:	0140e104 	movi	r5,900
    1ce0:	1009883a 	mov	r4,r2
    1ce4:	00068e80 	call	68e8 <__mulsi3>
    1ce8:	10bf1f04 	addi	r2,r2,-900
    1cec:	e0fffa17 	ldw	r3,-24(fp)
    1cf0:	18a1883a 	add	r16,r3,r2
    1cf4:	e0fffc17 	ldw	r3,-16(fp)
    1cf8:	e0800217 	ldw	r2,8(fp)
    1cfc:	1885883a 	add	r2,r3,r2
    1d00:	10ffff84 	addi	r3,r2,-2
    1d04:	e0bffb17 	ldw	r2,-20(fp)
    1d08:	147fffc4 	addi	r17,r2,-1
    1d0c:	014003c4 	movi	r5,15
    1d10:	1809883a 	mov	r4,r3
    1d14:	00068e80 	call	68e8 <__mulsi3>
    1d18:	1445883a 	add	r2,r2,r17
    1d1c:	1085883a 	add	r2,r2,r2
    1d20:	1085883a 	add	r2,r2,r2
    1d24:	8085883a 	add	r2,r16,r2
    1d28:	e0c00417 	ldw	r3,16(fp)
    1d2c:	10c00015 	stw	r3,0(r2)
	world_data[base_z - 1][base_y + 1 * height - 2][base_x + 1] = leaf_id;
    1d30:	e0bffd17 	ldw	r2,-12(fp)
    1d34:	0140e104 	movi	r5,900
    1d38:	1009883a 	mov	r4,r2
    1d3c:	00068e80 	call	68e8 <__mulsi3>
    1d40:	10bf1f04 	addi	r2,r2,-900
    1d44:	e0fffa17 	ldw	r3,-24(fp)
    1d48:	18a1883a 	add	r16,r3,r2
    1d4c:	e0fffc17 	ldw	r3,-16(fp)
    1d50:	e0800217 	ldw	r2,8(fp)
    1d54:	1885883a 	add	r2,r3,r2
    1d58:	10ffff84 	addi	r3,r2,-2
    1d5c:	e0bffb17 	ldw	r2,-20(fp)
    1d60:	14400044 	addi	r17,r2,1
    1d64:	014003c4 	movi	r5,15
    1d68:	1809883a 	mov	r4,r3
    1d6c:	00068e80 	call	68e8 <__mulsi3>
    1d70:	1445883a 	add	r2,r2,r17
    1d74:	1085883a 	add	r2,r2,r2
    1d78:	1085883a 	add	r2,r2,r2
    1d7c:	8085883a 	add	r2,r16,r2
    1d80:	e0c00417 	ldw	r3,16(fp)
    1d84:	10c00015 	stw	r3,0(r2)
	world_data[base_z + 1][base_y + 1 * height - 2][base_x - 1] = leaf_id;
    1d88:	e0bffd17 	ldw	r2,-12(fp)
    1d8c:	10800044 	addi	r2,r2,1
    1d90:	0140e104 	movi	r5,900
    1d94:	1009883a 	mov	r4,r2
    1d98:	00068e80 	call	68e8 <__mulsi3>
    1d9c:	1007883a 	mov	r3,r2
    1da0:	e0bffa17 	ldw	r2,-24(fp)
    1da4:	10e1883a 	add	r16,r2,r3
    1da8:	e0fffc17 	ldw	r3,-16(fp)
    1dac:	e0800217 	ldw	r2,8(fp)
    1db0:	1885883a 	add	r2,r3,r2
    1db4:	10ffff84 	addi	r3,r2,-2
    1db8:	e0bffb17 	ldw	r2,-20(fp)
    1dbc:	147fffc4 	addi	r17,r2,-1
    1dc0:	014003c4 	movi	r5,15
    1dc4:	1809883a 	mov	r4,r3
    1dc8:	00068e80 	call	68e8 <__mulsi3>
    1dcc:	1445883a 	add	r2,r2,r17
    1dd0:	1085883a 	add	r2,r2,r2
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	8085883a 	add	r2,r16,r2
    1ddc:	e0c00417 	ldw	r3,16(fp)
    1de0:	10c00015 	stw	r3,0(r2)
	world_data[base_z + 1][base_y + 1 * height - 2][base_x + 1] = leaf_id;
    1de4:	e0bffd17 	ldw	r2,-12(fp)
    1de8:	10800044 	addi	r2,r2,1
    1dec:	0140e104 	movi	r5,900
    1df0:	1009883a 	mov	r4,r2
    1df4:	00068e80 	call	68e8 <__mulsi3>
    1df8:	1007883a 	mov	r3,r2
    1dfc:	e0bffa17 	ldw	r2,-24(fp)
    1e00:	10e1883a 	add	r16,r2,r3
    1e04:	e0fffc17 	ldw	r3,-16(fp)
    1e08:	e0800217 	ldw	r2,8(fp)
    1e0c:	1885883a 	add	r2,r3,r2
    1e10:	10ffff84 	addi	r3,r2,-2
    1e14:	e0bffb17 	ldw	r2,-20(fp)
    1e18:	14400044 	addi	r17,r2,1
    1e1c:	014003c4 	movi	r5,15
    1e20:	1809883a 	mov	r4,r3
    1e24:	00068e80 	call	68e8 <__mulsi3>
    1e28:	1445883a 	add	r2,r2,r17
    1e2c:	1085883a 	add	r2,r2,r2
    1e30:	1085883a 	add	r2,r2,r2
    1e34:	8085883a 	add	r2,r16,r2
    1e38:	e0c00417 	ldw	r3,16(fp)
    1e3c:	10c00015 	stw	r3,0(r2)

}
    1e40:	0001883a 	nop
    1e44:	e6fffe04 	addi	sp,fp,-8
    1e48:	dfc00317 	ldw	ra,12(sp)
    1e4c:	df000217 	ldw	fp,8(sp)
    1e50:	dc400117 	ldw	r17,4(sp)
    1e54:	dc000017 	ldw	r16,0(sp)
    1e58:	dec00404 	addi	sp,sp,16
    1e5c:	f800283a 	ret

00001e60 <gen_world>:

void gen_world(int world_data[WORLD_Z][WORLD_Y][WORLD_X]) {
    1e60:	deffe704 	addi	sp,sp,-100
    1e64:	dfc01815 	stw	ra,96(sp)
    1e68:	df001715 	stw	fp,92(sp)
    1e6c:	dc001615 	stw	r16,88(sp)
    1e70:	df001704 	addi	fp,sp,92
    1e74:	e13ffe15 	stw	r4,-8(fp)
	for (int z = 0; z < WORLD_Z; z++) {
    1e78:	e03fec15 	stw	zero,-80(fp)
    1e7c:	00002606 	br	1f18 <gen_world+0xb8>
		for (int y = 0; y < WORLD_Y; y++) {
    1e80:	e03fed15 	stw	zero,-76(fp)
    1e84:	00001e06 	br	1f00 <gen_world+0xa0>
			for (int x = 0; x < WORLD_X; x++) {
    1e88:	e03fee15 	stw	zero,-72(fp)
    1e8c:	00001606 	br	1ee8 <gen_world+0x88>
				world_data[z][y][x] = -1;
    1e90:	e0bfec17 	ldw	r2,-80(fp)
    1e94:	0140e104 	movi	r5,900
    1e98:	1009883a 	mov	r4,r2
    1e9c:	00068e80 	call	68e8 <__mulsi3>
    1ea0:	1007883a 	mov	r3,r2
    1ea4:	e0bffe17 	ldw	r2,-8(fp)
    1ea8:	10e1883a 	add	r16,r2,r3
    1eac:	e0bfed17 	ldw	r2,-76(fp)
    1eb0:	014003c4 	movi	r5,15
    1eb4:	1009883a 	mov	r4,r2
    1eb8:	00068e80 	call	68e8 <__mulsi3>
    1ebc:	1007883a 	mov	r3,r2
    1ec0:	e0bfee17 	ldw	r2,-72(fp)
    1ec4:	1885883a 	add	r2,r3,r2
    1ec8:	1085883a 	add	r2,r2,r2
    1ecc:	1085883a 	add	r2,r2,r2
    1ed0:	8085883a 	add	r2,r16,r2
    1ed4:	00ffffc4 	movi	r3,-1
    1ed8:	10c00015 	stw	r3,0(r2)
}

void gen_world(int world_data[WORLD_Z][WORLD_Y][WORLD_X]) {
	for (int z = 0; z < WORLD_Z; z++) {
		for (int y = 0; y < WORLD_Y; y++) {
			for (int x = 0; x < WORLD_X; x++) {
    1edc:	e0bfee17 	ldw	r2,-72(fp)
    1ee0:	10800044 	addi	r2,r2,1
    1ee4:	e0bfee15 	stw	r2,-72(fp)
    1ee8:	e0bfee17 	ldw	r2,-72(fp)
    1eec:	108003d0 	cmplti	r2,r2,15
    1ef0:	103fe71e 	bne	r2,zero,1e90 <__alt_exception_stack_pointer+0xf8001e90>

}

void gen_world(int world_data[WORLD_Z][WORLD_Y][WORLD_X]) {
	for (int z = 0; z < WORLD_Z; z++) {
		for (int y = 0; y < WORLD_Y; y++) {
    1ef4:	e0bfed17 	ldw	r2,-76(fp)
    1ef8:	10800044 	addi	r2,r2,1
    1efc:	e0bfed15 	stw	r2,-76(fp)
    1f00:	e0bfed17 	ldw	r2,-76(fp)
    1f04:	108003d0 	cmplti	r2,r2,15
    1f08:	103fdf1e 	bne	r2,zero,1e88 <__alt_exception_stack_pointer+0xf8001e88>
	world_data[base_z + 1][base_y + 1 * height - 2][base_x + 1] = leaf_id;

}

void gen_world(int world_data[WORLD_Z][WORLD_Y][WORLD_X]) {
	for (int z = 0; z < WORLD_Z; z++) {
    1f0c:	e0bfec17 	ldw	r2,-80(fp)
    1f10:	10800044 	addi	r2,r2,1
    1f14:	e0bfec15 	stw	r2,-80(fp)
    1f18:	e0bfec17 	ldw	r2,-80(fp)
    1f1c:	10800290 	cmplti	r2,r2,10
    1f20:	103fd71e 	bne	r2,zero,1e80 <__alt_exception_stack_pointer+0xf8001e80>
				world_data[z][y][x] = -1;
			}
		}
	}

	const int grass_depth = 5;
    1f24:	00800144 	movi	r2,5
    1f28:	e0bffb15 	stw	r2,-20(fp)
	const int wall_height = 4;
    1f2c:	00800104 	movi	r2,4
    1f30:	e0bffc15 	stw	r2,-16(fp)
	const int sold_wall_width = 7;
    1f34:	008001c4 	movi	r2,7
    1f38:	e0bffd15 	stw	r2,-12(fp)

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
    1f3c:	00c00284 	movi	r3,10
    1f40:	e0bffb17 	ldw	r2,-20(fp)
    1f44:	1885c83a 	sub	r2,r3,r2
    1f48:	e0bfef15 	stw	r2,-68(fp)
    1f4c:	00001706 	br	1fac <gen_world+0x14c>
		for (int x = 0; x < WORLD_X; x++) {
    1f50:	e03ff015 	stw	zero,-64(fp)
    1f54:	00000f06 	br	1f94 <gen_world+0x134>
			world_data[z][0][x] = BLOCK_GRASS;
    1f58:	e0bfef17 	ldw	r2,-68(fp)
    1f5c:	0140e104 	movi	r5,900
    1f60:	1009883a 	mov	r4,r2
    1f64:	00068e80 	call	68e8 <__mulsi3>
    1f68:	1007883a 	mov	r3,r2
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	10c7883a 	add	r3,r2,r3
    1f74:	e0bff017 	ldw	r2,-64(fp)
    1f78:	1085883a 	add	r2,r2,r2
    1f7c:	1085883a 	add	r2,r2,r2
    1f80:	1885883a 	add	r2,r3,r2
    1f84:	10000015 	stw	zero,0(r2)
	const int grass_depth = 5;
	const int wall_height = 4;
	const int sold_wall_width = 7;

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
		for (int x = 0; x < WORLD_X; x++) {
    1f88:	e0bff017 	ldw	r2,-64(fp)
    1f8c:	10800044 	addi	r2,r2,1
    1f90:	e0bff015 	stw	r2,-64(fp)
    1f94:	e0bff017 	ldw	r2,-64(fp)
    1f98:	108003d0 	cmplti	r2,r2,15
    1f9c:	103fee1e 	bne	r2,zero,1f58 <__alt_exception_stack_pointer+0xf8001f58>

	const int grass_depth = 5;
	const int wall_height = 4;
	const int sold_wall_width = 7;

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
    1fa0:	e0bfef17 	ldw	r2,-68(fp)
    1fa4:	10800044 	addi	r2,r2,1
    1fa8:	e0bfef15 	stw	r2,-68(fp)
    1fac:	e0bfef17 	ldw	r2,-68(fp)
    1fb0:	10800290 	cmplti	r2,r2,10
    1fb4:	103fe61e 	bne	r2,zero,1f50 <__alt_exception_stack_pointer+0xf8001f50>
		for (int x = 0; x < WORLD_X; x++) {
			world_data[z][0][x] = BLOCK_GRASS;
		}
	}

	for (int x = 0; x < 4; x++) {
    1fb8:	e03ff115 	stw	zero,-60(fp)
    1fbc:	00002106 	br	2044 <gen_world+0x1e4>
		for (int y = 1; y < wall_height; y++) {
    1fc0:	00800044 	movi	r2,1
    1fc4:	e0bff215 	stw	r2,-56(fp)
    1fc8:	00001806 	br	202c <gen_world+0x1cc>
			world_data[WORLD_Z - grass_depth][y][x] = BLOCK_STONE;
    1fcc:	00c00284 	movi	r3,10
    1fd0:	e0bffb17 	ldw	r2,-20(fp)
    1fd4:	1885c83a 	sub	r2,r3,r2
    1fd8:	0140e104 	movi	r5,900
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	00068e80 	call	68e8 <__mulsi3>
    1fe4:	1007883a 	mov	r3,r2
    1fe8:	e0bffe17 	ldw	r2,-8(fp)
    1fec:	10e1883a 	add	r16,r2,r3
    1ff0:	e0bff217 	ldw	r2,-56(fp)
    1ff4:	014003c4 	movi	r5,15
    1ff8:	1009883a 	mov	r4,r2
    1ffc:	00068e80 	call	68e8 <__mulsi3>
    2000:	1007883a 	mov	r3,r2
    2004:	e0bff117 	ldw	r2,-60(fp)
    2008:	1885883a 	add	r2,r3,r2
    200c:	1085883a 	add	r2,r2,r2
    2010:	1085883a 	add	r2,r2,r2
    2014:	8085883a 	add	r2,r16,r2
    2018:	00c001c4 	movi	r3,7
    201c:	10c00015 	stw	r3,0(r2)
			world_data[z][0][x] = BLOCK_GRASS;
		}
	}

	for (int x = 0; x < 4; x++) {
		for (int y = 1; y < wall_height; y++) {
    2020:	e0bff217 	ldw	r2,-56(fp)
    2024:	10800044 	addi	r2,r2,1
    2028:	e0bff215 	stw	r2,-56(fp)
    202c:	e0fff217 	ldw	r3,-56(fp)
    2030:	e0bffc17 	ldw	r2,-16(fp)
    2034:	18bfe516 	blt	r3,r2,1fcc <__alt_exception_stack_pointer+0xf8001fcc>
		for (int x = 0; x < WORLD_X; x++) {
			world_data[z][0][x] = BLOCK_GRASS;
		}
	}

	for (int x = 0; x < 4; x++) {
    2038:	e0bff117 	ldw	r2,-60(fp)
    203c:	10800044 	addi	r2,r2,1
    2040:	e0bff115 	stw	r2,-60(fp)
    2044:	e0bff117 	ldw	r2,-60(fp)
    2048:	10800110 	cmplti	r2,r2,4
    204c:	103fdc1e 	bne	r2,zero,1fc0 <__alt_exception_stack_pointer+0xf8001fc0>
		for (int y = 1; y < wall_height; y++) {
			world_data[WORLD_Z - grass_depth][y][x] = BLOCK_STONE;
		}
	}

	for (int x = 4; x < 7; x++) {
    2050:	00800104 	movi	r2,4
    2054:	e0bff315 	stw	r2,-52(fp)
    2058:	00002306 	br	20e8 <gen_world+0x288>
		for (int y = 1; y < wall_height; y++) {
    205c:	00800044 	movi	r2,1
    2060:	e0bff415 	stw	r2,-48(fp)
    2064:	00001a06 	br	20d0 <gen_world+0x270>
			world_data[WORLD_Z - grass_depth - (y)][y][x] = BLOCK_PLANK;
    2068:	00c00284 	movi	r3,10
    206c:	e0bffb17 	ldw	r2,-20(fp)
    2070:	1887c83a 	sub	r3,r3,r2
    2074:	e0bff417 	ldw	r2,-48(fp)
    2078:	1885c83a 	sub	r2,r3,r2
    207c:	0140e104 	movi	r5,900
    2080:	1009883a 	mov	r4,r2
    2084:	00068e80 	call	68e8 <__mulsi3>
    2088:	1007883a 	mov	r3,r2
    208c:	e0bffe17 	ldw	r2,-8(fp)
    2090:	10e1883a 	add	r16,r2,r3
    2094:	e0bff417 	ldw	r2,-48(fp)
    2098:	014003c4 	movi	r5,15
    209c:	1009883a 	mov	r4,r2
    20a0:	00068e80 	call	68e8 <__mulsi3>
    20a4:	1007883a 	mov	r3,r2
    20a8:	e0bff317 	ldw	r2,-52(fp)
    20ac:	1885883a 	add	r2,r3,r2
    20b0:	1085883a 	add	r2,r2,r2
    20b4:	1085883a 	add	r2,r2,r2
    20b8:	8085883a 	add	r2,r16,r2
    20bc:	00c00104 	movi	r3,4
    20c0:	10c00015 	stw	r3,0(r2)
			world_data[WORLD_Z - grass_depth][y][x] = BLOCK_STONE;
		}
	}

	for (int x = 4; x < 7; x++) {
		for (int y = 1; y < wall_height; y++) {
    20c4:	e0bff417 	ldw	r2,-48(fp)
    20c8:	10800044 	addi	r2,r2,1
    20cc:	e0bff415 	stw	r2,-48(fp)
    20d0:	e0fff417 	ldw	r3,-48(fp)
    20d4:	e0bffc17 	ldw	r2,-16(fp)
    20d8:	18bfe316 	blt	r3,r2,2068 <__alt_exception_stack_pointer+0xf8002068>
		for (int y = 1; y < wall_height; y++) {
			world_data[WORLD_Z - grass_depth][y][x] = BLOCK_STONE;
		}
	}

	for (int x = 4; x < 7; x++) {
    20dc:	e0bff317 	ldw	r2,-52(fp)
    20e0:	10800044 	addi	r2,r2,1
    20e4:	e0bff315 	stw	r2,-52(fp)
    20e8:	e0bff317 	ldw	r2,-52(fp)
    20ec:	108001d0 	cmplti	r2,r2,7
    20f0:	103fda1e 	bne	r2,zero,205c <__alt_exception_stack_pointer+0xf800205c>
		for (int y = 1; y < wall_height; y++) {
			world_data[WORLD_Z - grass_depth - (y)][y][x] = BLOCK_PLANK;
		}
	}

	for (int x = 7; x < WORLD_X; x++) {
    20f4:	008001c4 	movi	r2,7
    20f8:	e0bff515 	stw	r2,-44(fp)
    20fc:	00002106 	br	2184 <gen_world+0x324>
		for (int y = 1; y < wall_height; y++) {
    2100:	00800044 	movi	r2,1
    2104:	e0bff615 	stw	r2,-40(fp)
    2108:	00001806 	br	216c <gen_world+0x30c>
			world_data[WORLD_Z - grass_depth][y][x] = BLOCK_STONE;
    210c:	00c00284 	movi	r3,10
    2110:	e0bffb17 	ldw	r2,-20(fp)
    2114:	1885c83a 	sub	r2,r3,r2
    2118:	0140e104 	movi	r5,900
    211c:	1009883a 	mov	r4,r2
    2120:	00068e80 	call	68e8 <__mulsi3>
    2124:	1007883a 	mov	r3,r2
    2128:	e0bffe17 	ldw	r2,-8(fp)
    212c:	10e1883a 	add	r16,r2,r3
    2130:	e0bff617 	ldw	r2,-40(fp)
    2134:	014003c4 	movi	r5,15
    2138:	1009883a 	mov	r4,r2
    213c:	00068e80 	call	68e8 <__mulsi3>
    2140:	1007883a 	mov	r3,r2
    2144:	e0bff517 	ldw	r2,-44(fp)
    2148:	1885883a 	add	r2,r3,r2
    214c:	1085883a 	add	r2,r2,r2
    2150:	1085883a 	add	r2,r2,r2
    2154:	8085883a 	add	r2,r16,r2
    2158:	00c001c4 	movi	r3,7
    215c:	10c00015 	stw	r3,0(r2)
			world_data[WORLD_Z - grass_depth - (y)][y][x] = BLOCK_PLANK;
		}
	}

	for (int x = 7; x < WORLD_X; x++) {
		for (int y = 1; y < wall_height; y++) {
    2160:	e0bff617 	ldw	r2,-40(fp)
    2164:	10800044 	addi	r2,r2,1
    2168:	e0bff615 	stw	r2,-40(fp)
    216c:	e0fff617 	ldw	r3,-40(fp)
    2170:	e0bffc17 	ldw	r2,-16(fp)
    2174:	18bfe516 	blt	r3,r2,210c <__alt_exception_stack_pointer+0xf800210c>
		for (int y = 1; y < wall_height; y++) {
			world_data[WORLD_Z - grass_depth - (y)][y][x] = BLOCK_PLANK;
		}
	}

	for (int x = 7; x < WORLD_X; x++) {
    2178:	e0bff517 	ldw	r2,-44(fp)
    217c:	10800044 	addi	r2,r2,1
    2180:	e0bff515 	stw	r2,-44(fp)
    2184:	e0bff517 	ldw	r2,-44(fp)
    2188:	108003d0 	cmplti	r2,r2,15
    218c:	103fdc1e 	bne	r2,zero,2100 <__alt_exception_stack_pointer+0xf8002100>
		for (int y = 1; y < wall_height; y++) {
			world_data[WORLD_Z - grass_depth][y][x] = BLOCK_STONE;
		}
	}

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
    2190:	00c00284 	movi	r3,10
    2194:	e0bffb17 	ldw	r2,-20(fp)
    2198:	1885c83a 	sub	r2,r3,r2
    219c:	e0bff715 	stw	r2,-36(fp)
    21a0:	00001906 	br	2208 <gen_world+0x3a8>
		for (int x = 4; x < 7; x++) {
    21a4:	00800104 	movi	r2,4
    21a8:	e0bff815 	stw	r2,-32(fp)
    21ac:	00001006 	br	21f0 <gen_world+0x390>
			world_data[z][0][x] = BLOCK_COBBLE;
    21b0:	e0bff717 	ldw	r2,-36(fp)
    21b4:	0140e104 	movi	r5,900
    21b8:	1009883a 	mov	r4,r2
    21bc:	00068e80 	call	68e8 <__mulsi3>
    21c0:	1007883a 	mov	r3,r2
    21c4:	e0bffe17 	ldw	r2,-8(fp)
    21c8:	10c7883a 	add	r3,r2,r3
    21cc:	e0bff817 	ldw	r2,-32(fp)
    21d0:	1085883a 	add	r2,r2,r2
    21d4:	1085883a 	add	r2,r2,r2
    21d8:	1885883a 	add	r2,r3,r2
    21dc:	00c00204 	movi	r3,8
    21e0:	10c00015 	stw	r3,0(r2)
			world_data[WORLD_Z - grass_depth][y][x] = BLOCK_STONE;
		}
	}

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
		for (int x = 4; x < 7; x++) {
    21e4:	e0bff817 	ldw	r2,-32(fp)
    21e8:	10800044 	addi	r2,r2,1
    21ec:	e0bff815 	stw	r2,-32(fp)
    21f0:	e0bff817 	ldw	r2,-32(fp)
    21f4:	108001d0 	cmplti	r2,r2,7
    21f8:	103fed1e 	bne	r2,zero,21b0 <__alt_exception_stack_pointer+0xf80021b0>
		for (int y = 1; y < wall_height; y++) {
			world_data[WORLD_Z - grass_depth][y][x] = BLOCK_STONE;
		}
	}

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
    21fc:	e0bff717 	ldw	r2,-36(fp)
    2200:	10800044 	addi	r2,r2,1
    2204:	e0bff715 	stw	r2,-36(fp)
    2208:	e0bff717 	ldw	r2,-36(fp)
    220c:	10800290 	cmplti	r2,r2,10
    2210:	103fe41e 	bne	r2,zero,21a4 <__alt_exception_stack_pointer+0xf80021a4>
		for (int x = 4; x < 7; x++) {
			world_data[z][0][x] = BLOCK_COBBLE;
		}
	}

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
    2214:	00c00284 	movi	r3,10
    2218:	e0bffb17 	ldw	r2,-20(fp)
    221c:	1885c83a 	sub	r2,r3,r2
    2220:	e0bff915 	stw	r2,-28(fp)
    2224:	00000c06 	br	2258 <gen_world+0x3f8>
		world_data[z][0][3] = BLOCK_DIRT;
    2228:	e0bff917 	ldw	r2,-28(fp)
    222c:	0140e104 	movi	r5,900
    2230:	1009883a 	mov	r4,r2
    2234:	00068e80 	call	68e8 <__mulsi3>
    2238:	1007883a 	mov	r3,r2
    223c:	e0bffe17 	ldw	r2,-8(fp)
    2240:	10c5883a 	add	r2,r2,r3
    2244:	00c00044 	movi	r3,1
    2248:	10c00315 	stw	r3,12(r2)
		for (int x = 4; x < 7; x++) {
			world_data[z][0][x] = BLOCK_COBBLE;
		}
	}

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
    224c:	e0bff917 	ldw	r2,-28(fp)
    2250:	10800044 	addi	r2,r2,1
    2254:	e0bff915 	stw	r2,-28(fp)
    2258:	e0bff917 	ldw	r2,-28(fp)
    225c:	10800290 	cmplti	r2,r2,10
    2260:	103ff11e 	bne	r2,zero,2228 <__alt_exception_stack_pointer+0xf8002228>
		world_data[z][0][3] = BLOCK_DIRT;
	}

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
    2264:	00c00284 	movi	r3,10
    2268:	e0bffb17 	ldw	r2,-20(fp)
    226c:	1885c83a 	sub	r2,r3,r2
    2270:	e0bffa15 	stw	r2,-24(fp)
    2274:	00000c06 	br	22a8 <gen_world+0x448>
		world_data[z][0][7] = BLOCK_DIRT;
    2278:	e0bffa17 	ldw	r2,-24(fp)
    227c:	0140e104 	movi	r5,900
    2280:	1009883a 	mov	r4,r2
    2284:	00068e80 	call	68e8 <__mulsi3>
    2288:	1007883a 	mov	r3,r2
    228c:	e0bffe17 	ldw	r2,-8(fp)
    2290:	10c5883a 	add	r2,r2,r3
    2294:	00c00044 	movi	r3,1
    2298:	10c00715 	stw	r3,28(r2)

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
		world_data[z][0][3] = BLOCK_DIRT;
	}

	for (int z = WORLD_Z - grass_depth; z < WORLD_Z; z++) {
    229c:	e0bffa17 	ldw	r2,-24(fp)
    22a0:	10800044 	addi	r2,r2,1
    22a4:	e0bffa15 	stw	r2,-24(fp)
    22a8:	e0bffa17 	ldw	r2,-24(fp)
    22ac:	10800290 	cmplti	r2,r2,10
    22b0:	103ff11e 	bne	r2,zero,2278 <__alt_exception_stack_pointer+0xf8002278>
		world_data[z][0][7] = BLOCK_DIRT;
	}


	world_data[grass_depth+1][1][3] = BLOCK_LEAF_SOLID;
    22b4:	e0bffb17 	ldw	r2,-20(fp)
    22b8:	10800044 	addi	r2,r2,1
    22bc:	0140e104 	movi	r5,900
    22c0:	1009883a 	mov	r4,r2
    22c4:	00068e80 	call	68e8 <__mulsi3>
    22c8:	1007883a 	mov	r3,r2
    22cc:	e0bffe17 	ldw	r2,-8(fp)
    22d0:	10c5883a 	add	r2,r2,r3
    22d4:	00c00184 	movi	r3,6
    22d8:	10c01215 	stw	r3,72(r2)
	world_data[grass_depth+1][1][2] = BLOCK_LEAF_SOLID;
    22dc:	e0bffb17 	ldw	r2,-20(fp)
    22e0:	10800044 	addi	r2,r2,1
    22e4:	0140e104 	movi	r5,900
    22e8:	1009883a 	mov	r4,r2
    22ec:	00068e80 	call	68e8 <__mulsi3>
    22f0:	1007883a 	mov	r3,r2
    22f4:	e0bffe17 	ldw	r2,-8(fp)
    22f8:	10c5883a 	add	r2,r2,r3
    22fc:	00c00184 	movi	r3,6
    2300:	10c01115 	stw	r3,68(r2)
	world_data[grass_depth+1][1][1] = BLOCK_LEAF_SOLID;
    2304:	e0bffb17 	ldw	r2,-20(fp)
    2308:	10800044 	addi	r2,r2,1
    230c:	0140e104 	movi	r5,900
    2310:	1009883a 	mov	r4,r2
    2314:	00068e80 	call	68e8 <__mulsi3>
    2318:	1007883a 	mov	r3,r2
    231c:	e0bffe17 	ldw	r2,-8(fp)
    2320:	10c5883a 	add	r2,r2,r3
    2324:	00c00184 	movi	r3,6
    2328:	10c01015 	stw	r3,64(r2)
	world_data[grass_depth+1][1][0] = BLOCK_LEAF_SOLID;
    232c:	e0bffb17 	ldw	r2,-20(fp)
    2330:	10800044 	addi	r2,r2,1
    2334:	0140e104 	movi	r5,900
    2338:	1009883a 	mov	r4,r2
    233c:	00068e80 	call	68e8 <__mulsi3>
    2340:	1007883a 	mov	r3,r2
    2344:	e0bffe17 	ldw	r2,-8(fp)
    2348:	10c5883a 	add	r2,r2,r3
    234c:	00c00184 	movi	r3,6
    2350:	10c00f15 	stw	r3,60(r2)

	world_data[grass_depth+3][1][1] = BLOCK_PUMPKIN;
    2354:	e0bffb17 	ldw	r2,-20(fp)
    2358:	0140e104 	movi	r5,900
    235c:	1009883a 	mov	r4,r2
    2360:	00068e80 	call	68e8 <__mulsi3>
    2364:	1082a304 	addi	r2,r2,2700
    2368:	e0fffe17 	ldw	r3,-8(fp)
    236c:	1885883a 	add	r2,r3,r2
    2370:	00c00244 	movi	r3,9
    2374:	10c01015 	stw	r3,64(r2)


	draw_tree(world_data, 12, 1, grass_depth + 3, 7, BLOCK_LOG,
    2378:	e0bffb17 	ldw	r2,-20(fp)
    237c:	10c000c4 	addi	r3,r2,3
    2380:	00800184 	movi	r2,6
    2384:	d8800215 	stw	r2,8(sp)
    2388:	00800084 	movi	r2,2
    238c:	d8800115 	stw	r2,4(sp)
    2390:	008001c4 	movi	r2,7
    2394:	d8800015 	stw	r2,0(sp)
    2398:	180f883a 	mov	r7,r3
    239c:	01800044 	movi	r6,1
    23a0:	01400304 	movi	r5,12
    23a4:	e13ffe17 	ldw	r4,-8(fp)
    23a8:	00019200 	call	1920 <draw_tree>
			BLOCK_LEAF_SOLID);

	draw_tree(world_data, 8, 1, grass_depth + 1, 6, BLOCK_LOG_DARK,
    23ac:	e0bffb17 	ldw	r2,-20(fp)
    23b0:	10c00044 	addi	r3,r2,1
    23b4:	00800144 	movi	r2,5
    23b8:	d8800215 	stw	r2,8(sp)
    23bc:	008000c4 	movi	r2,3
    23c0:	d8800115 	stw	r2,4(sp)
    23c4:	00800184 	movi	r2,6
    23c8:	d8800015 	stw	r2,0(sp)
    23cc:	180f883a 	mov	r7,r3
    23d0:	01800044 	movi	r6,1
    23d4:	01400204 	movi	r5,8
    23d8:	e13ffe17 	ldw	r4,-8(fp)
    23dc:	00019200 	call	1920 <draw_tree>
			BLOCK_LEAF_TRANS);

	world_data[grass_depth+3][2][10] = BLOCK_FURNACE;
    23e0:	e0bffb17 	ldw	r2,-20(fp)
    23e4:	0140e104 	movi	r5,900
    23e8:	1009883a 	mov	r4,r2
    23ec:	00068e80 	call	68e8 <__mulsi3>
    23f0:	1082a304 	addi	r2,r2,2700
    23f4:	e0fffe17 	ldw	r3,-8(fp)
    23f8:	1885883a 	add	r2,r3,r2
    23fc:	00c00284 	movi	r3,10
    2400:	10c02815 	stw	r3,160(r2)
	world_data[grass_depth+3][1][10] = BLOCK_GLASS;
    2404:	e0bffb17 	ldw	r2,-20(fp)
    2408:	0140e104 	movi	r5,900
    240c:	1009883a 	mov	r4,r2
    2410:	00068e80 	call	68e8 <__mulsi3>
    2414:	1082a304 	addi	r2,r2,2700
    2418:	e0fffe17 	ldw	r3,-8(fp)
    241c:	1885883a 	add	r2,r3,r2
    2420:	00c002c4 	movi	r3,11
    2424:	10c01915 	stw	r3,100(r2)





}
    2428:	0001883a 	nop
    242c:	e6ffff04 	addi	sp,fp,-4
    2430:	dfc00217 	ldw	ra,8(sp)
    2434:	df000117 	ldw	fp,4(sp)
    2438:	dc000017 	ldw	r16,0(sp)
    243c:	dec00304 	addi	sp,sp,12
    2440:	f800283a 	ret

00002444 <main>:

int main() {
    2444:	def70b04 	addi	sp,sp,-9172
    2448:	dfc8f415 	stw	ra,9168(sp)
    244c:	df08f315 	stw	fp,9164(sp)
    2450:	dd48f215 	stw	r21,9160(sp)
    2454:	dd08f115 	stw	r20,9156(sp)
    2458:	dcc8f015 	stw	r19,9152(sp)
    245c:	dc88ef15 	stw	r18,9148(sp)
    2460:	dc48ee15 	stw	r17,9144(sp)
    2464:	dc08ed15 	stw	r16,9140(sp)
    2468:	df08f304 	addi	fp,sp,9164

	printf("Starting up");
    246c:	010000b4 	movhi	r4,2
    2470:	2121fc04 	addi	r4,r4,-30736
    2474:	0009ef40 	call	9ef4 <printf>

	union frame_buffer_t* frame1 =
    2478:	00820034 	movhi	r2,2048
    247c:	e0b71e15 	stw	r2,-9096(fp)
			(frame_buffer_t*) COPY_DMA_WRITE_MASTER_FRAME_BUFFER_BASE;
	union frame_buffer_t* frame2 = malloc(sizeof(frame_buffer_t));
    2480:	01000174 	movhi	r4,5
    2484:	212c0004 	addi	r4,r4,-20480
    2488:	00096900 	call	9690 <malloc>
    248c:	e0b71f15 	stw	r2,-9092(fp)
	union z_buffer_t* z_buffer = malloc(sizeof(z_buffer_t));
    2490:	01000174 	movhi	r4,5
    2494:	212c0004 	addi	r4,r4,-20480
    2498:	00096900 	call	9690 <malloc>
    249c:	e0b72015 	stw	r2,-9088(fp)

	dma->back_buffer = frame1;
    24a0:	d0a00117 	ldw	r2,-32764(gp)
    24a4:	e0f71e17 	ldw	r3,-9096(fp)
    24a8:	10c00115 	stw	r3,4(r2)
	dma->front_buffer = 0; //swap
    24ac:	d0a00117 	ldw	r2,-32764(gp)
    24b0:	10000015 	stw	zero,0(r2)

	gpu->frame_pointer = frame2;
    24b4:	d0a00017 	ldw	r2,-32768(gp)
    24b8:	e0f71f17 	ldw	r3,-9092(fp)
    24bc:	10c00015 	stw	r3,0(r2)
	gpu->z_buffer = z_buffer;
    24c0:	d0a00017 	ldw	r2,-32768(gp)
    24c4:	e0f72017 	ldw	r3,-9088(fp)
    24c8:	10c00315 	stw	r3,12(r2)

	pixel_t black = {0, 0, 0, 0};
    24cc:	e0372a05 	stb	zero,-9048(fp)
    24d0:	e0372a45 	stb	zero,-9047(fp)
    24d4:	e0372a85 	stb	zero,-9046(fp)
    24d8:	e0372ac5 	stb	zero,-9045(fp)
	pixel_t red = {0, 0, 255, 0};
    24dc:	e0372b05 	stb	zero,-9044(fp)
    24e0:	e0372b45 	stb	zero,-9043(fp)
    24e4:	00bfffc4 	movi	r2,-1
    24e8:	e0b72b85 	stb	r2,-9042(fp)
    24ec:	e0372bc5 	stb	zero,-9041(fp)

	clear_screen(gpu, 1);
    24f0:	d0a00017 	ldw	r2,-32768(gp)
    24f4:	01400044 	movi	r5,1
    24f8:	1009883a 	mov	r4,r2
    24fc:	00002780 	call	278 <clear_screen>
	draw_string(frame2, "INITING KEYBOARD", 16, SCREEN_WIDTH / 4,
    2500:	e0b72a17 	ldw	r2,-9048(fp)
    2504:	d8800115 	stw	r2,4(sp)
    2508:	00801e04 	movi	r2,120
    250c:	d8800015 	stw	r2,0(sp)
    2510:	01c01404 	movi	r7,80
    2514:	01800404 	movi	r6,16
    2518:	014000b4 	movhi	r5,2
    251c:	2961ff04 	addi	r5,r5,-30724
    2520:	e1371f17 	ldw	r4,-9092(fp)
    2524:	00004400 	call	440 <draw_string>
			SCREEN_HEIGHT / 2, black);
	transfer(frame2, frame1, sizeof(frame1->D1));
    2528:	01800174 	movhi	r6,5
    252c:	31ac0004 	addi	r6,r6,-20480
    2530:	e1771e17 	ldw	r5,-9096(fp)
    2534:	e1371f17 	ldw	r4,-9092(fp)
    2538:	00032880 	call	3288 <transfer>

	gpu->z_clip = -16 * (FP_SCALE) * FP_SCALE;
    253c:	d0a00017 	ldw	r2,-32768(gp)
    2540:	00fffc34 	movhi	r3,65520
    2544:	10c01915 	stw	r3,100(r2)

	//gpu->cam_trans.z = (FP_SCALE)<<100;

	printf("Allocation Done. Frame 1: %h, Frame2: %h, Z Buffer: %h\n", frame1,
    2548:	e1f72017 	ldw	r7,-9088(fp)
    254c:	e1b71f17 	ldw	r6,-9092(fp)
    2550:	e1771e17 	ldw	r5,-9096(fp)
    2554:	010000b4 	movhi	r4,2
    2558:	21220404 	addi	r4,r4,-30704
    255c:	0009ef40 	call	9ef4 <printf>
			frame2, z_buffer);

	printf("Done initial clear, Initing keyboard\n");
    2560:	010000b4 	movhi	r4,2
    2564:	21221204 	addi	r4,r4,-30648
    2568:	0009ff00 	call	9ff0 <puts>
	init_keyboard();
    256c:	0000cd80 	call	cd8 <init_keyboard>

	clear_screen(gpu, 1);
    2570:	d0a00017 	ldw	r2,-32768(gp)
    2574:	01400044 	movi	r5,1
    2578:	1009883a 	mov	r4,r2
    257c:	00002780 	call	278 <clear_screen>
	draw_string(frame2, "GENERATING WORLD", 16, SCREEN_WIDTH / 4,
    2580:	e0b72a17 	ldw	r2,-9048(fp)
    2584:	d8800115 	stw	r2,4(sp)
    2588:	00801e04 	movi	r2,120
    258c:	d8800015 	stw	r2,0(sp)
    2590:	01c01404 	movi	r7,80
    2594:	01800404 	movi	r6,16
    2598:	014000b4 	movhi	r5,2
    259c:	29621c04 	addi	r5,r5,-30608
    25a0:	e1371f17 	ldw	r4,-9092(fp)
    25a4:	00004400 	call	440 <draw_string>
			SCREEN_HEIGHT / 2, black);
	transfer(frame2, frame1, sizeof(frame1->D1));
    25a8:	01800174 	movhi	r6,5
    25ac:	31ac0004 	addi	r6,r6,-20480
    25b0:	e1771e17 	ldw	r5,-9096(fp)
    25b4:	e1371f17 	ldw	r4,-9092(fp)
    25b8:	00032880 	call	3288 <transfer>

	double theta = 0;
    25bc:	e0370f15 	stw	zero,-9156(fp)
    25c0:	e0371015 	stw	zero,-9152(fp)
	double phi = 0;
    25c4:	e0371115 	stw	zero,-9148(fp)
    25c8:	e0371215 	stw	zero,-9144(fp)

	gpu->cam_pos.x = 0;
    25cc:	d0a00017 	ldw	r2,-32768(gp)
    25d0:	10001315 	stw	zero,76(r2)
	gpu->cam_pos.z = 0;
    25d4:	d0a00017 	ldw	r2,-32768(gp)
    25d8:	10001515 	stw	zero,84(r2)
	gpu->cam_pos.y = 0;
    25dc:	d0a00017 	ldw	r2,-32768(gp)
    25e0:	10001415 	stw	zero,80(r2)

	gpu->cam_trans.x = 0;
    25e4:	d0a00017 	ldw	r2,-32768(gp)
    25e8:	10001615 	stw	zero,88(r2)
	gpu->cam_trans.y = 0;
    25ec:	d0a00017 	ldw	r2,-32768(gp)
    25f0:	10001715 	stw	zero,92(r2)
	gpu->cam_trans.z = 0;
    25f4:	d0a00017 	ldw	r2,-32768(gp)
    25f8:	10001815 	stw	zero,96(r2)

	int poll_keycode = 0;
    25fc:	e0372c15 	stw	zero,-9040(fp)
	int keycode = 0;
    2600:	e0371315 	stw	zero,-9140(fp)
	int selected_block = 0;
    2604:	e0371415 	stw	zero,-9136(fp)
	int break_flag = 0;
    2608:	e0371515 	stw	zero,-9132(fp)
	int place_flag = 0;
    260c:	e0371615 	stw	zero,-9128(fp)
	float last_fps = 0;
    2610:	e0371715 	stw	zero,-9124(fp)
	char fps_str[4];
	char blk_str[2];

	int world_data[WORLD_Z][WORLD_Y][WORLD_X];
	gen_world(world_data);
    2614:	e0b72f04 	addi	r2,fp,-9028
    2618:	1009883a 	mov	r4,r2
    261c:	0001e600 	call	1e60 <gen_world>




	printf("Starting game loop");
    2620:	010000b4 	movhi	r4,2
    2624:	21222104 	addi	r4,r4,-30588
    2628:	0009ef40 	call	9ef4 <printf>
	while (1) {
		time_t frame_time = clock();
    262c:	000946c0 	call	946c <clock>
    2630:	e0b72115 	stw	r2,-9084(fp)

		//transfer(frame_clean, frame2, sizeof(frame2->D1));
		//transfer(z_buffer_clean, z_buffer, sizeof(z_buffer->D2));

		keycode = 0;
    2634:	e0371315 	stw	zero,-9140(fp)
		clear_screen(gpu, 1);
    2638:	d0a00017 	ldw	r2,-32768(gp)
    263c:	01400044 	movi	r5,1
    2640:	1009883a 	mov	r4,r2
    2644:	00002780 	call	278 <clear_screen>

		loop_keyboard(&poll_keycode);
    2648:	e0b72c04 	addi	r2,fp,-9040
    264c:	1009883a 	mov	r4,r2
    2650:	00009ec0 	call	9ec <loop_keyboard>
		keycode = (poll_keycode == 0 ? keycode : poll_keycode);
    2654:	e0b72c17 	ldw	r2,-9040(fp)
    2658:	1000021e 	bne	r2,zero,2664 <main+0x220>
    265c:	e0b71317 	ldw	r2,-9140(fp)
    2660:	00000106 	br	2668 <main+0x224>
    2664:	e0b72c17 	ldw	r2,-9040(fp)
    2668:	e0b71315 	stw	r2,-9140(fp)

		clear_depth(gpu, 1);
    266c:	d0a00017 	ldw	r2,-32768(gp)
    2670:	01400044 	movi	r5,1
    2674:	1009883a 	mov	r4,r2
    2678:	00002ec0 	call	2ec <clear_depth>

		for (int z = WORLD_Z - 1; z >= 0; z--) {
    267c:	00800244 	movi	r2,9
    2680:	e0b71815 	stw	r2,-9120(fp)
    2684:	00005306 	br	27d4 <main+0x390>
			for (int y = 0; y < WORLD_Y; y++) {
    2688:	e0371915 	stw	zero,-9116(fp)
    268c:	00004206 	br	2798 <main+0x354>
				for (int x = 0; x < WORLD_X; x++) {
    2690:	e0371a15 	stw	zero,-9112(fp)
    2694:	00003a06 	br	2780 <main+0x33c>
					if (world_data[z][y][x] != -1) {
    2698:	e0b71917 	ldw	r2,-9116(fp)
    269c:	e4771817 	ldw	r17,-9120(fp)
    26a0:	014003c4 	movi	r5,15
    26a4:	1009883a 	mov	r4,r2
    26a8:	00068e80 	call	68e8 <__mulsi3>
    26ac:	1021883a 	mov	r16,r2
    26b0:	01403844 	movi	r5,225
    26b4:	8809883a 	mov	r4,r17
    26b8:	00068e80 	call	68e8 <__mulsi3>
    26bc:	8087883a 	add	r3,r16,r2
    26c0:	e0b71a17 	ldw	r2,-9112(fp)
    26c4:	1885883a 	add	r2,r3,r2
    26c8:	1085883a 	add	r2,r2,r2
    26cc:	1085883a 	add	r2,r2,r2
    26d0:	e0f70f04 	addi	r3,fp,-9156
    26d4:	1885883a 	add	r2,r3,r2
    26d8:	10802004 	addi	r2,r2,128
    26dc:	10800017 	ldw	r2,0(r2)
    26e0:	10bfffe0 	cmpeqi	r2,r2,-1
    26e4:	1000231e 	bne	r2,zero,2774 <main+0x330>
						draw_cube(gpu, 8, x * 8 - 64, y * 8 - 16, z * 8 - 96,
    26e8:	d4600017 	ldw	r17,-32768(gp)
    26ec:	e0b71a17 	ldw	r2,-9112(fp)
    26f0:	10bffe04 	addi	r2,r2,-8
    26f4:	102490fa 	slli	r18,r2,3
    26f8:	e0b71917 	ldw	r2,-9116(fp)
    26fc:	10bfff84 	addi	r2,r2,-2
    2700:	102690fa 	slli	r19,r2,3
    2704:	e0b71817 	ldw	r2,-9120(fp)
    2708:	10bffd04 	addi	r2,r2,-12
    270c:	102090fa 	slli	r16,r2,3
    2710:	e0b71917 	ldw	r2,-9116(fp)
    2714:	e5771817 	ldw	r21,-9120(fp)
    2718:	014003c4 	movi	r5,15
    271c:	1009883a 	mov	r4,r2
    2720:	00068e80 	call	68e8 <__mulsi3>
    2724:	1029883a 	mov	r20,r2
    2728:	01403844 	movi	r5,225
    272c:	a809883a 	mov	r4,r21
    2730:	00068e80 	call	68e8 <__mulsi3>
    2734:	a087883a 	add	r3,r20,r2
    2738:	e0b71a17 	ldw	r2,-9112(fp)
    273c:	1885883a 	add	r2,r3,r2
    2740:	1085883a 	add	r2,r2,r2
    2744:	1085883a 	add	r2,r2,r2
    2748:	e0f70f04 	addi	r3,fp,-9156
    274c:	1885883a 	add	r2,r3,r2
    2750:	10802004 	addi	r2,r2,128
    2754:	10800017 	ldw	r2,0(r2)
    2758:	d8800115 	stw	r2,4(sp)
    275c:	dc000015 	stw	r16,0(sp)
    2760:	980f883a 	mov	r7,r19
    2764:	900d883a 	mov	r6,r18
    2768:	01400204 	movi	r5,8
    276c:	8809883a 	mov	r4,r17
    2770:	00003600 	call	360 <draw_cube>

		clear_depth(gpu, 1);

		for (int z = WORLD_Z - 1; z >= 0; z--) {
			for (int y = 0; y < WORLD_Y; y++) {
				for (int x = 0; x < WORLD_X; x++) {
    2774:	e0b71a17 	ldw	r2,-9112(fp)
    2778:	10800044 	addi	r2,r2,1
    277c:	e0b71a15 	stw	r2,-9112(fp)
    2780:	e0b71a17 	ldw	r2,-9112(fp)
    2784:	108003d0 	cmplti	r2,r2,15
    2788:	103fc31e 	bne	r2,zero,2698 <__alt_exception_stack_pointer+0xf8002698>
		keycode = (poll_keycode == 0 ? keycode : poll_keycode);

		clear_depth(gpu, 1);

		for (int z = WORLD_Z - 1; z >= 0; z--) {
			for (int y = 0; y < WORLD_Y; y++) {
    278c:	e0b71917 	ldw	r2,-9116(fp)
    2790:	10800044 	addi	r2,r2,1
    2794:	e0b71915 	stw	r2,-9116(fp)
    2798:	e0b71917 	ldw	r2,-9116(fp)
    279c:	108003d0 	cmplti	r2,r2,15
    27a0:	103fbb1e 	bne	r2,zero,2690 <__alt_exception_stack_pointer+0xf8002690>
						draw_cube(gpu, 8, x * 8 - 64, y * 8 - 16, z * 8 - 96,
								world_data[z][y][x]);
					}
				}
			}
			loop_keyboard(&poll_keycode);
    27a4:	e0b72c04 	addi	r2,fp,-9040
    27a8:	1009883a 	mov	r4,r2
    27ac:	00009ec0 	call	9ec <loop_keyboard>
			keycode = (poll_keycode == 0 ? keycode : poll_keycode);
    27b0:	e0b72c17 	ldw	r2,-9040(fp)
    27b4:	1000021e 	bne	r2,zero,27c0 <main+0x37c>
    27b8:	e0b71317 	ldw	r2,-9140(fp)
    27bc:	00000106 	br	27c4 <main+0x380>
    27c0:	e0b72c17 	ldw	r2,-9040(fp)
    27c4:	e0b71315 	stw	r2,-9140(fp)
		loop_keyboard(&poll_keycode);
		keycode = (poll_keycode == 0 ? keycode : poll_keycode);

		clear_depth(gpu, 1);

		for (int z = WORLD_Z - 1; z >= 0; z--) {
    27c8:	e0b71817 	ldw	r2,-9120(fp)
    27cc:	10bfffc4 	addi	r2,r2,-1
    27d0:	e0b71815 	stw	r2,-9120(fp)
    27d4:	e0b71817 	ldw	r2,-9120(fp)
    27d8:	103fab0e 	bge	r2,zero,2688 <__alt_exception_stack_pointer+0xf8002688>
			}
			loop_keyboard(&poll_keycode);
			keycode = (poll_keycode == 0 ? keycode : poll_keycode);
		}

		int cursor_y = 2 - ((y_off) / 8);
    27dc:	d0a8ec17 	ldw	r2,-23632(gp)
    27e0:	1000010e 	bge	r2,zero,27e8 <main+0x3a4>
    27e4:	108001c4 	addi	r2,r2,7
    27e8:	1005d0fa 	srai	r2,r2,3
    27ec:	1007883a 	mov	r3,r2
    27f0:	00800084 	movi	r2,2
    27f4:	10c5c83a 	sub	r2,r2,r3
    27f8:	e0b72215 	stw	r2,-9080(fp)
		int cursor_x = 8 - ((x_off + 4) / 8);
    27fc:	d0a8eb17 	ldw	r2,-23636(gp)
    2800:	10800104 	addi	r2,r2,4
    2804:	1000010e 	bge	r2,zero,280c <main+0x3c8>
    2808:	108001c4 	addi	r2,r2,7
    280c:	1005d0fa 	srai	r2,r2,3
    2810:	1007883a 	mov	r3,r2
    2814:	00800204 	movi	r2,8
    2818:	10c5c83a 	sub	r2,r2,r3
    281c:	e0b72315 	stw	r2,-9076(fp)
//        world_data[WORLD_Z - 1][2 - ((y_off) / 8)][8 - ((x_off+4) / 8)] = BLOCK_FURNACE;
		if (z_buffer->D2[SCREEN_HEIGHT / 2][SCREEN_WIDTH / 2] < 268435455) {
    2820:	e0f72017 	ldw	r3,-9088(fp)
    2824:	008000b4 	movhi	r2,2
    2828:	1096a004 	addi	r2,r2,23168
    282c:	1885883a 	add	r2,r3,r2
    2830:	10c00017 	ldw	r3,0(r2)
    2834:	00840034 	movhi	r2,4096
    2838:	10bfff84 	addi	r2,r2,-2
    283c:	10c05536 	bltu	r2,r3,2994 <main+0x550>
			int depth_check = WORLD_Z - 1;
    2840:	00800244 	movi	r2,9
    2844:	e0b71b15 	stw	r2,-9108(fp)
			if (place_flag == 1 || break_flag == 1) {
    2848:	e0b71617 	ldw	r2,-9128(fp)
    284c:	10800060 	cmpeqi	r2,r2,1
    2850:	1000071e 	bne	r2,zero,2870 <main+0x42c>
    2854:	e0b71517 	ldw	r2,-9132(fp)
    2858:	10800058 	cmpnei	r2,r2,1
    285c:	10004d1e 	bne	r2,zero,2994 <main+0x550>
				while (world_data[depth_check][cursor_y][cursor_x] == -1
    2860:	00000306 	br	2870 <main+0x42c>
						&& depth_check >= 0) {
					depth_check--;
    2864:	e0b71b17 	ldw	r2,-9108(fp)
    2868:	10bfffc4 	addi	r2,r2,-1
    286c:	e0b71b15 	stw	r2,-9108(fp)
		int cursor_x = 8 - ((x_off + 4) / 8);
//        world_data[WORLD_Z - 1][2 - ((y_off) / 8)][8 - ((x_off+4) / 8)] = BLOCK_FURNACE;
		if (z_buffer->D2[SCREEN_HEIGHT / 2][SCREEN_WIDTH / 2] < 268435455) {
			int depth_check = WORLD_Z - 1;
			if (place_flag == 1 || break_flag == 1) {
				while (world_data[depth_check][cursor_y][cursor_x] == -1
    2870:	e0b72217 	ldw	r2,-9080(fp)
    2874:	e4771b17 	ldw	r17,-9108(fp)
    2878:	014003c4 	movi	r5,15
    287c:	1009883a 	mov	r4,r2
    2880:	00068e80 	call	68e8 <__mulsi3>
    2884:	1021883a 	mov	r16,r2
    2888:	01403844 	movi	r5,225
    288c:	8809883a 	mov	r4,r17
    2890:	00068e80 	call	68e8 <__mulsi3>
    2894:	8087883a 	add	r3,r16,r2
    2898:	e0b72317 	ldw	r2,-9076(fp)
    289c:	1885883a 	add	r2,r3,r2
    28a0:	1085883a 	add	r2,r2,r2
    28a4:	1085883a 	add	r2,r2,r2
    28a8:	e0f70f04 	addi	r3,fp,-9156
    28ac:	1885883a 	add	r2,r3,r2
    28b0:	10802004 	addi	r2,r2,128
    28b4:	10800017 	ldw	r2,0(r2)
    28b8:	10bfffd8 	cmpnei	r2,r2,-1
    28bc:	1000021e 	bne	r2,zero,28c8 <main+0x484>
						&& depth_check >= 0) {
    28c0:	e0b71b17 	ldw	r2,-9108(fp)
    28c4:	103fe70e 	bge	r2,zero,2864 <__alt_exception_stack_pointer+0xf8002864>
					depth_check--;
				}
				if (depth_check >= 0 && depth_check < WORLD_Z) {
    28c8:	e0b71b17 	ldw	r2,-9108(fp)
    28cc:	10002f16 	blt	r2,zero,298c <main+0x548>
    28d0:	e0b71b17 	ldw	r2,-9108(fp)
    28d4:	10800288 	cmpgei	r2,r2,10
    28d8:	10002c1e 	bne	r2,zero,298c <main+0x548>
					if (place_flag) {
    28dc:	e0b71617 	ldw	r2,-9128(fp)
    28e0:	10001526 	beq	r2,zero,2938 <main+0x4f4>
						world_data[depth_check + 1][cursor_y][cursor_x] =
    28e4:	e0b71b17 	ldw	r2,-9108(fp)
    28e8:	14400044 	addi	r17,r2,1
    28ec:	e0b72217 	ldw	r2,-9080(fp)
    28f0:	014003c4 	movi	r5,15
    28f4:	1009883a 	mov	r4,r2
    28f8:	00068e80 	call	68e8 <__mulsi3>
    28fc:	1021883a 	mov	r16,r2
    2900:	01403844 	movi	r5,225
    2904:	8809883a 	mov	r4,r17
    2908:	00068e80 	call	68e8 <__mulsi3>
    290c:	8087883a 	add	r3,r16,r2
    2910:	e0b72317 	ldw	r2,-9076(fp)
    2914:	1885883a 	add	r2,r3,r2
    2918:	1085883a 	add	r2,r2,r2
    291c:	1085883a 	add	r2,r2,r2
    2920:	e0f70f04 	addi	r3,fp,-9156
    2924:	1885883a 	add	r2,r3,r2
    2928:	10802004 	addi	r2,r2,128
    292c:	e0f71417 	ldw	r3,-9136(fp)
    2930:	10c00015 	stw	r3,0(r2)
    2934:	00001506 	br	298c <main+0x548>
								selected_block;
					} else if (break_flag) {
    2938:	e0b71517 	ldw	r2,-9132(fp)
    293c:	10001326 	beq	r2,zero,298c <main+0x548>
						world_data[depth_check][cursor_y][cursor_x] = -1;
    2940:	e0b72217 	ldw	r2,-9080(fp)
    2944:	e4771b17 	ldw	r17,-9108(fp)
    2948:	014003c4 	movi	r5,15
    294c:	1009883a 	mov	r4,r2
    2950:	00068e80 	call	68e8 <__mulsi3>
    2954:	1021883a 	mov	r16,r2
    2958:	01403844 	movi	r5,225
    295c:	8809883a 	mov	r4,r17
    2960:	00068e80 	call	68e8 <__mulsi3>
    2964:	8087883a 	add	r3,r16,r2
    2968:	e0b72317 	ldw	r2,-9076(fp)
    296c:	1885883a 	add	r2,r3,r2
    2970:	1085883a 	add	r2,r2,r2
    2974:	1085883a 	add	r2,r2,r2
    2978:	e0f70f04 	addi	r3,fp,-9156
    297c:	1885883a 	add	r2,r3,r2
    2980:	10802004 	addi	r2,r2,128
    2984:	00ffffc4 	movi	r3,-1
    2988:	10c00015 	stw	r3,0(r2)
					}
				}
				break_flag = 0;
    298c:	e0371515 	stw	zero,-9132(fp)
				place_flag = 0;
    2990:	e0371615 	stw	zero,-9128(fp)
			}
		}

		int c_w = 3;
    2994:	008000c4 	movi	r2,3
    2998:	e0b72415 	stw	r2,-9072(fp)
		int c_h = 3;
    299c:	008000c4 	movi	r2,3
    29a0:	e0b72515 	stw	r2,-9068(fp)
		pixel_t pixel = { 200, 200, 200, 0 };
    29a4:	00bff204 	movi	r2,-56
    29a8:	e0bff905 	stb	r2,-28(fp)
    29ac:	00bff204 	movi	r2,-56
    29b0:	e0bff945 	stb	r2,-27(fp)
    29b4:	00bff204 	movi	r2,-56
    29b8:	e0bff985 	stb	r2,-26(fp)
    29bc:	e03ff9c5 	stb	zero,-25(fp)
		for (int c = SCREEN_HEIGHT / 2 - c_w; c < SCREEN_HEIGHT / 2 + c_w + 1;
    29c0:	00c01e04 	movi	r3,120
    29c4:	e0b72417 	ldw	r2,-9072(fp)
    29c8:	1885c83a 	sub	r2,r3,r2
    29cc:	e0b71c15 	stw	r2,-9104(fp)
    29d0:	00001206 	br	2a1c <main+0x5d8>
				c++) {
			frame2->D2[c][SCREEN_WIDTH / 2] = pixel;
    29d4:	e4371f17 	ldw	r16,-9092(fp)
    29d8:	e0b71c17 	ldw	r2,-9104(fp)
    29dc:	01414004 	movi	r5,1280
    29e0:	1009883a 	mov	r4,r2
    29e4:	00068e80 	call	68e8 <__mulsi3>
    29e8:	8085883a 	add	r2,r16,r2
    29ec:	1080a004 	addi	r2,r2,640
    29f0:	e0fff903 	ldbu	r3,-28(fp)
    29f4:	10c00005 	stb	r3,0(r2)
    29f8:	e0fff943 	ldbu	r3,-27(fp)
    29fc:	10c00045 	stb	r3,1(r2)
    2a00:	e0fff983 	ldbu	r3,-26(fp)
    2a04:	10c00085 	stb	r3,2(r2)
    2a08:	e0fff9c3 	ldbu	r3,-25(fp)
    2a0c:	10c000c5 	stb	r3,3(r2)

		int c_w = 3;
		int c_h = 3;
		pixel_t pixel = { 200, 200, 200, 0 };
		for (int c = SCREEN_HEIGHT / 2 - c_w; c < SCREEN_HEIGHT / 2 + c_w + 1;
				c++) {
    2a10:	e0b71c17 	ldw	r2,-9104(fp)
    2a14:	10800044 	addi	r2,r2,1
    2a18:	e0b71c15 	stw	r2,-9104(fp)
		}

		int c_w = 3;
		int c_h = 3;
		pixel_t pixel = { 200, 200, 200, 0 };
		for (int c = SCREEN_HEIGHT / 2 - c_w; c < SCREEN_HEIGHT / 2 + c_w + 1;
    2a1c:	e0b72417 	ldw	r2,-9072(fp)
    2a20:	10801e44 	addi	r2,r2,121
    2a24:	e0f71c17 	ldw	r3,-9104(fp)
    2a28:	18bfea16 	blt	r3,r2,29d4 <__alt_exception_stack_pointer+0xf80029d4>
				c++) {
			frame2->D2[c][SCREEN_WIDTH / 2] = pixel;
		}
		for (int c = SCREEN_WIDTH / 2 - c_h; c < SCREEN_WIDTH / 2 + c_h + 1;
    2a2c:	00c02804 	movi	r3,160
    2a30:	e0b72517 	ldw	r2,-9068(fp)
    2a34:	1885c83a 	sub	r2,r3,r2
    2a38:	e0b71d15 	stw	r2,-9100(fp)
    2a3c:	00001206 	br	2a88 <main+0x644>
				c++) {
			frame2->D2[SCREEN_HEIGHT / 2][c] = pixel;
    2a40:	e0f71f17 	ldw	r3,-9092(fp)
    2a44:	e1371d17 	ldw	r4,-9100(fp)
    2a48:	00a58014 	movui	r2,38400
    2a4c:	2085883a 	add	r2,r4,r2
    2a50:	1085883a 	add	r2,r2,r2
    2a54:	1085883a 	add	r2,r2,r2
    2a58:	1885883a 	add	r2,r3,r2
    2a5c:	e0fff903 	ldbu	r3,-28(fp)
    2a60:	10c00005 	stb	r3,0(r2)
    2a64:	e0fff943 	ldbu	r3,-27(fp)
    2a68:	10c00045 	stb	r3,1(r2)
    2a6c:	e0fff983 	ldbu	r3,-26(fp)
    2a70:	10c00085 	stb	r3,2(r2)
    2a74:	e0fff9c3 	ldbu	r3,-25(fp)
    2a78:	10c000c5 	stb	r3,3(r2)
		for (int c = SCREEN_HEIGHT / 2 - c_w; c < SCREEN_HEIGHT / 2 + c_w + 1;
				c++) {
			frame2->D2[c][SCREEN_WIDTH / 2] = pixel;
		}
		for (int c = SCREEN_WIDTH / 2 - c_h; c < SCREEN_WIDTH / 2 + c_h + 1;
				c++) {
    2a7c:	e0b71d17 	ldw	r2,-9100(fp)
    2a80:	10800044 	addi	r2,r2,1
    2a84:	e0b71d15 	stw	r2,-9100(fp)
		pixel_t pixel = { 200, 200, 200, 0 };
		for (int c = SCREEN_HEIGHT / 2 - c_w; c < SCREEN_HEIGHT / 2 + c_w + 1;
				c++) {
			frame2->D2[c][SCREEN_WIDTH / 2] = pixel;
		}
		for (int c = SCREEN_WIDTH / 2 - c_h; c < SCREEN_WIDTH / 2 + c_h + 1;
    2a88:	e0b72517 	ldw	r2,-9068(fp)
    2a8c:	10802844 	addi	r2,r2,161
    2a90:	e0f71d17 	ldw	r3,-9100(fp)
    2a94:	18bfea16 	blt	r3,r2,2a40 <__alt_exception_stack_pointer+0xf8002a40>
				c++) {
			frame2->D2[SCREEN_HEIGHT / 2][c] = pixel;
		}

		gcvt(last_fps, 4, fps_str);
    2a98:	e1371717 	ldw	r4,-9124(fp)
    2a9c:	00091500 	call	9150 <__extendsfdf2>
    2aa0:	1011883a 	mov	r8,r2
    2aa4:	1813883a 	mov	r9,r3
    2aa8:	e0b72d04 	addi	r2,fp,-9036
    2aac:	100f883a 	mov	r7,r2
    2ab0:	01800104 	movi	r6,4
    2ab4:	4009883a 	mov	r4,r8
    2ab8:	480b883a 	mov	r5,r9
    2abc:	00095b00 	call	95b0 <gcvt>
		gcvt(selected_block+1, 2, blk_str);
    2ac0:	e0b71417 	ldw	r2,-9136(fp)
    2ac4:	10800044 	addi	r2,r2,1
    2ac8:	1009883a 	mov	r4,r2
    2acc:	0008fcc0 	call	8fcc <__floatsidf>
    2ad0:	1011883a 	mov	r8,r2
    2ad4:	1813883a 	mov	r9,r3
    2ad8:	e0b72e04 	addi	r2,fp,-9032
    2adc:	100f883a 	mov	r7,r2
    2ae0:	01800084 	movi	r6,2
    2ae4:	4009883a 	mov	r4,r8
    2ae8:	480b883a 	mov	r5,r9
    2aec:	00095b00 	call	95b0 <gcvt>




		draw_string(frame2, "FPS:", 4, 10, 10, black);
    2af0:	e0b72a17 	ldw	r2,-9048(fp)
    2af4:	d8800115 	stw	r2,4(sp)
    2af8:	00800284 	movi	r2,10
    2afc:	d8800015 	stw	r2,0(sp)
    2b00:	01c00284 	movi	r7,10
    2b04:	01800104 	movi	r6,4
    2b08:	014000b4 	movhi	r5,2
    2b0c:	29622604 	addi	r5,r5,-30568
    2b10:	e1371f17 	ldw	r4,-9092(fp)
    2b14:	00004400 	call	440 <draw_string>
		draw_string(frame2, fps_str, 5, 40, 10, black);
    2b18:	e0f72d04 	addi	r3,fp,-9036
    2b1c:	e0b72a17 	ldw	r2,-9048(fp)
    2b20:	d8800115 	stw	r2,4(sp)
    2b24:	00800284 	movi	r2,10
    2b28:	d8800015 	stw	r2,0(sp)
    2b2c:	01c00a04 	movi	r7,40
    2b30:	01800144 	movi	r6,5
    2b34:	180b883a 	mov	r5,r3
    2b38:	e1371f17 	ldw	r4,-9092(fp)
    2b3c:	00004400 	call	440 <draw_string>
		if(selected_block+1<10) {
    2b40:	e0b71417 	ldw	r2,-9136(fp)
    2b44:	10800044 	addi	r2,r2,1
    2b48:	10800288 	cmpgei	r2,r2,10
    2b4c:	10000b1e 	bne	r2,zero,2b7c <main+0x738>
			draw_string(frame2, blk_str, 1, 300, 10, red);
    2b50:	e0f72e04 	addi	r3,fp,-9032
    2b54:	e0b72b17 	ldw	r2,-9044(fp)
    2b58:	d8800115 	stw	r2,4(sp)
    2b5c:	00800284 	movi	r2,10
    2b60:	d8800015 	stw	r2,0(sp)
    2b64:	01c04b04 	movi	r7,300
    2b68:	01800044 	movi	r6,1
    2b6c:	180b883a 	mov	r5,r3
    2b70:	e1371f17 	ldw	r4,-9092(fp)
    2b74:	00004400 	call	440 <draw_string>
    2b78:	00000a06 	br	2ba4 <main+0x760>
		} else {
			draw_string(frame2, blk_str, 2, 300, 10, red);
    2b7c:	e0f72e04 	addi	r3,fp,-9032
    2b80:	e0b72b17 	ldw	r2,-9044(fp)
    2b84:	d8800115 	stw	r2,4(sp)
    2b88:	00800284 	movi	r2,10
    2b8c:	d8800015 	stw	r2,0(sp)
    2b90:	01c04b04 	movi	r7,300
    2b94:	01800084 	movi	r6,2
    2b98:	180b883a 	mov	r5,r3
    2b9c:	e1371f17 	ldw	r4,-9092(fp)
    2ba0:	00004400 	call	440 <draw_string>
		}
		transfer(frame2, frame1, sizeof(frame1->D1));
    2ba4:	01800174 	movhi	r6,5
    2ba8:	31ac0004 	addi	r6,r6,-20480
    2bac:	e1771e17 	ldw	r5,-9096(fp)
    2bb0:	e1371f17 	ldw	r4,-9092(fp)
    2bb4:	00032880 	call	3288 <transfer>
		loop_keyboard(&poll_keycode);
    2bb8:	e0b72c04 	addi	r2,fp,-9040
    2bbc:	1009883a 	mov	r4,r2
    2bc0:	00009ec0 	call	9ec <loop_keyboard>
		keycode = (poll_keycode == 0 ? keycode : poll_keycode);
    2bc4:	e0b72c17 	ldw	r2,-9040(fp)
    2bc8:	1000021e 	bne	r2,zero,2bd4 <main+0x790>
    2bcc:	e0b71317 	ldw	r2,-9140(fp)
    2bd0:	00000106 	br	2bd8 <main+0x794>
    2bd4:	e0b72c17 	ldw	r2,-9040(fp)
    2bd8:	e0b71315 	stw	r2,-9140(fp)
//		} else if (keycode == KEY_W) {
//			gpu->cam_trans.z -= FP_SCALE;
//			printf("%d", gpu->cam_trans.z);
//		}

		if (keycode == KEY_S) {
    2bdc:	e0b71317 	ldw	r2,-9140(fp)
    2be0:	10800598 	cmpnei	r2,r2,22
    2be4:	1000041e 	bne	r2,zero,2bf8 <main+0x7b4>
			//gpu->cam_pos.z += 1;
			z_off -= 4;
    2be8:	d0a8ed17 	ldw	r2,-23628(gp)
    2bec:	10bfff04 	addi	r2,r2,-4
    2bf0:	d0a8ed15 	stw	r2,-23628(gp)
    2bf4:	0000bf06 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_W) {
    2bf8:	e0b71317 	ldw	r2,-9140(fp)
    2bfc:	10800698 	cmpnei	r2,r2,26
    2c00:	1000041e 	bne	r2,zero,2c14 <main+0x7d0>
			//gpu->cam_pos.z -= 1;
			z_off += 4;
    2c04:	d0a8ed17 	ldw	r2,-23628(gp)
    2c08:	10800104 	addi	r2,r2,4
    2c0c:	d0a8ed15 	stw	r2,-23628(gp)
    2c10:	0000b806 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_A) {
    2c14:	e0b71317 	ldw	r2,-9140(fp)
    2c18:	10800118 	cmpnei	r2,r2,4
    2c1c:	1000041e 	bne	r2,zero,2c30 <main+0x7ec>
			x_off += 4;
    2c20:	d0a8eb17 	ldw	r2,-23636(gp)
    2c24:	10800104 	addi	r2,r2,4
    2c28:	d0a8eb15 	stw	r2,-23636(gp)
    2c2c:	0000b106 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_D) {
    2c30:	e0b71317 	ldw	r2,-9140(fp)
    2c34:	108001d8 	cmpnei	r2,r2,7
    2c38:	1000041e 	bne	r2,zero,2c4c <main+0x808>
			x_off -= 4;
    2c3c:	d0a8eb17 	ldw	r2,-23636(gp)
    2c40:	10bfff04 	addi	r2,r2,-4
    2c44:	d0a8eb15 	stw	r2,-23636(gp)
    2c48:	0000aa06 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_SPACE) {
    2c4c:	e0b71317 	ldw	r2,-9140(fp)
    2c50:	10800b18 	cmpnei	r2,r2,44
    2c54:	1000041e 	bne	r2,zero,2c68 <main+0x824>
			y_off -= 4;
    2c58:	d0a8ec17 	ldw	r2,-23632(gp)
    2c5c:	10bfff04 	addi	r2,r2,-4
    2c60:	d0a8ec15 	stw	r2,-23632(gp)
    2c64:	0000a306 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_C) {
    2c68:	e0b71317 	ldw	r2,-9140(fp)
    2c6c:	10800198 	cmpnei	r2,r2,6
    2c70:	1000041e 	bne	r2,zero,2c84 <main+0x840>
			y_off += 4;
    2c74:	d0a8ec17 	ldw	r2,-23632(gp)
    2c78:	10800104 	addi	r2,r2,4
    2c7c:	d0a8ec15 	stw	r2,-23632(gp)
    2c80:	00009c06 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_UP) {
    2c84:	e0b71317 	ldw	r2,-9140(fp)
    2c88:	10801498 	cmpnei	r2,r2,82
    2c8c:	10000c1e 	bne	r2,zero,2cc0 <main+0x87c>
			theta += 0.005;
    2c90:	0191ebb4 	movhi	r6,18350
    2c94:	31851ec4 	addi	r6,r6,5243
    2c98:	01cfdd34 	movhi	r7,16244
    2c9c:	39deb844 	addi	r7,r7,31457
    2ca0:	e1370f17 	ldw	r4,-9156(fp)
    2ca4:	e1771017 	ldw	r5,-9152(fp)
    2ca8:	00069100 	call	6910 <__adddf3>
    2cac:	1009883a 	mov	r4,r2
    2cb0:	180b883a 	mov	r5,r3
    2cb4:	e1370f15 	stw	r4,-9156(fp)
    2cb8:	e1771015 	stw	r5,-9152(fp)
    2cbc:	00008d06 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_DOWN) {
    2cc0:	e0b71317 	ldw	r2,-9140(fp)
    2cc4:	10801458 	cmpnei	r2,r2,81
    2cc8:	10000c1e 	bne	r2,zero,2cfc <main+0x8b8>
			theta -= 0.005;
    2ccc:	0191ebb4 	movhi	r6,18350
    2cd0:	31851ec4 	addi	r6,r6,5243
    2cd4:	01cfdd34 	movhi	r7,16244
    2cd8:	39deb844 	addi	r7,r7,31457
    2cdc:	e1370f17 	ldw	r4,-9156(fp)
    2ce0:	e1771017 	ldw	r5,-9152(fp)
    2ce4:	00086500 	call	8650 <__subdf3>
    2ce8:	1009883a 	mov	r4,r2
    2cec:	180b883a 	mov	r5,r3
    2cf0:	e1370f15 	stw	r4,-9156(fp)
    2cf4:	e1771015 	stw	r5,-9152(fp)
    2cf8:	00007e06 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_LEFT) {
    2cfc:	e0b71317 	ldw	r2,-9140(fp)
    2d00:	10801418 	cmpnei	r2,r2,80
    2d04:	10000c1e 	bne	r2,zero,2d38 <main+0x8f4>
			phi += 0.005;
    2d08:	0191ebb4 	movhi	r6,18350
    2d0c:	31851ec4 	addi	r6,r6,5243
    2d10:	01cfdd34 	movhi	r7,16244
    2d14:	39deb844 	addi	r7,r7,31457
    2d18:	e1371117 	ldw	r4,-9148(fp)
    2d1c:	e1771217 	ldw	r5,-9144(fp)
    2d20:	00069100 	call	6910 <__adddf3>
    2d24:	1009883a 	mov	r4,r2
    2d28:	180b883a 	mov	r5,r3
    2d2c:	e1371115 	stw	r4,-9148(fp)
    2d30:	e1771215 	stw	r5,-9144(fp)
    2d34:	00006f06 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_RIGHT) {
    2d38:	e0b71317 	ldw	r2,-9140(fp)
    2d3c:	108013d8 	cmpnei	r2,r2,79
    2d40:	10000c1e 	bne	r2,zero,2d74 <main+0x930>
			phi -= 0.005;
    2d44:	0191ebb4 	movhi	r6,18350
    2d48:	31851ec4 	addi	r6,r6,5243
    2d4c:	01cfdd34 	movhi	r7,16244
    2d50:	39deb844 	addi	r7,r7,31457
    2d54:	e1371117 	ldw	r4,-9148(fp)
    2d58:	e1771217 	ldw	r5,-9144(fp)
    2d5c:	00086500 	call	8650 <__subdf3>
    2d60:	1009883a 	mov	r4,r2
    2d64:	180b883a 	mov	r5,r3
    2d68:	e1371115 	stw	r4,-9148(fp)
    2d6c:	e1771215 	stw	r5,-9144(fp)
    2d70:	00006006 	br	2ef4 <main+0xab0>
		} else if (keycode >= KEY_1 && keycode <= KEY_0) {
    2d74:	e0b71317 	ldw	r2,-9140(fp)
    2d78:	10800790 	cmplti	r2,r2,30
    2d7c:	1000071e 	bne	r2,zero,2d9c <main+0x958>
    2d80:	e0b71317 	ldw	r2,-9140(fp)
    2d84:	10800a08 	cmpgei	r2,r2,40
    2d88:	1000041e 	bne	r2,zero,2d9c <main+0x958>
			selected_block = keycode - KEY_1;
    2d8c:	e0b71317 	ldw	r2,-9140(fp)
    2d90:	10bff884 	addi	r2,r2,-30
    2d94:	e0b71415 	stw	r2,-9136(fp)
    2d98:	00005606 	br	2ef4 <main+0xab0>
		} else if(keycode == KEY_I) {
    2d9c:	e0b71317 	ldw	r2,-9140(fp)
    2da0:	10800318 	cmpnei	r2,r2,12
    2da4:	1000031e 	bne	r2,zero,2db4 <main+0x970>
			selected_block = BLOCK_FURNACE;
    2da8:	00800284 	movi	r2,10
    2dac:	e0b71415 	stw	r2,-9136(fp)
    2db0:	00005006 	br	2ef4 <main+0xab0>
		} else if(keycode == KEY_O) {
    2db4:	e0b71317 	ldw	r2,-9140(fp)
    2db8:	10800498 	cmpnei	r2,r2,18
    2dbc:	1000031e 	bne	r2,zero,2dcc <main+0x988>
			selected_block = BLOCK_GLASS;
    2dc0:	008002c4 	movi	r2,11
    2dc4:	e0b71415 	stw	r2,-9136(fp)
    2dc8:	00004a06 	br	2ef4 <main+0xab0>
		} else if(keycode == KEY_P) {
    2dcc:	e0b71317 	ldw	r2,-9140(fp)
    2dd0:	108004d8 	cmpnei	r2,r2,19
    2dd4:	1000031e 	bne	r2,zero,2de4 <main+0x9a0>
			selected_block = BLOCK_BEEHIVE;
    2dd8:	00800304 	movi	r2,12
    2ddc:	e0b71415 	stw	r2,-9136(fp)
    2de0:	00004406 	br	2ef4 <main+0xab0>
		} else if (keycode == KEY_Q) {
    2de4:	e0b71317 	ldw	r2,-9140(fp)
    2de8:	10800518 	cmpnei	r2,r2,20
    2dec:	10000f1e 	bne	r2,zero,2e2c <main+0x9e8>
			if(theta == 0 && phi == 0) {
    2df0:	000d883a 	mov	r6,zero
    2df4:	000f883a 	mov	r7,zero
    2df8:	e1370f17 	ldw	r4,-9156(fp)
    2dfc:	e1771017 	ldw	r5,-9152(fp)
    2e00:	0007b8c0 	call	7b8c <__eqdf2>
    2e04:	10003b1e 	bne	r2,zero,2ef4 <main+0xab0>
    2e08:	000d883a 	mov	r6,zero
    2e0c:	000f883a 	mov	r7,zero
    2e10:	e1371117 	ldw	r4,-9148(fp)
    2e14:	e1771217 	ldw	r5,-9144(fp)
    2e18:	0007b8c0 	call	7b8c <__eqdf2>
    2e1c:	1000351e 	bne	r2,zero,2ef4 <main+0xab0>
				break_flag = 1;
    2e20:	00800044 	movi	r2,1
    2e24:	e0b71515 	stw	r2,-9132(fp)
    2e28:	00003206 	br	2ef4 <main+0xab0>
			}
		} else if (keycode == KEY_E) {
    2e2c:	e0b71317 	ldw	r2,-9140(fp)
    2e30:	10800218 	cmpnei	r2,r2,8
    2e34:	10000f1e 	bne	r2,zero,2e74 <main+0xa30>
			if(theta == 0 && phi == 0) {
    2e38:	000d883a 	mov	r6,zero
    2e3c:	000f883a 	mov	r7,zero
    2e40:	e1370f17 	ldw	r4,-9156(fp)
    2e44:	e1771017 	ldw	r5,-9152(fp)
    2e48:	0007b8c0 	call	7b8c <__eqdf2>
    2e4c:	1000291e 	bne	r2,zero,2ef4 <main+0xab0>
    2e50:	000d883a 	mov	r6,zero
    2e54:	000f883a 	mov	r7,zero
    2e58:	e1371117 	ldw	r4,-9148(fp)
    2e5c:	e1771217 	ldw	r5,-9144(fp)
    2e60:	0007b8c0 	call	7b8c <__eqdf2>
    2e64:	1000231e 	bne	r2,zero,2ef4 <main+0xab0>
				place_flag = 1;
    2e68:	00800044 	movi	r2,1
    2e6c:	e0b71615 	stw	r2,-9128(fp)
    2e70:	00002006 	br	2ef4 <main+0xab0>
			}
		} else if(keycode == KEY_R) {
    2e74:	e0b71317 	ldw	r2,-9140(fp)
    2e78:	10800558 	cmpnei	r2,r2,21
    2e7c:	10001d1e 	bne	r2,zero,2ef4 <main+0xab0>
			clear_screen(gpu, 1);
    2e80:	d0a00017 	ldw	r2,-32768(gp)
    2e84:	01400044 	movi	r5,1
    2e88:	1009883a 	mov	r4,r2
    2e8c:	00002780 	call	278 <clear_screen>
			draw_string(frame2, "RESETING WORLD", 14, SCREEN_WIDTH / 4,
    2e90:	e0b72a17 	ldw	r2,-9048(fp)
    2e94:	d8800115 	stw	r2,4(sp)
    2e98:	00801e04 	movi	r2,120
    2e9c:	d8800015 	stw	r2,0(sp)
    2ea0:	01c01404 	movi	r7,80
    2ea4:	01800384 	movi	r6,14
    2ea8:	014000b4 	movhi	r5,2
    2eac:	29622804 	addi	r5,r5,-30560
    2eb0:	e1371f17 	ldw	r4,-9092(fp)
    2eb4:	00004400 	call	440 <draw_string>
					SCREEN_HEIGHT / 2, black);
			x_off = 0;
    2eb8:	d028eb15 	stw	zero,-23636(gp)
			y_off = 0;
    2ebc:	d028ec15 	stw	zero,-23632(gp)
			z_off = 0;
    2ec0:	d028ed15 	stw	zero,-23628(gp)
			theta = 0;
    2ec4:	e0370f15 	stw	zero,-9156(fp)
    2ec8:	e0371015 	stw	zero,-9152(fp)
			phi = 0;
    2ecc:	e0371115 	stw	zero,-9148(fp)
    2ed0:	e0371215 	stw	zero,-9144(fp)
			transfer(frame2, frame1, sizeof(frame1->D1));
    2ed4:	01800174 	movhi	r6,5
    2ed8:	31ac0004 	addi	r6,r6,-20480
    2edc:	e1771e17 	ldw	r5,-9096(fp)
    2ee0:	e1371f17 	ldw	r4,-9092(fp)
    2ee4:	00032880 	call	3288 <transfer>
			gen_world(world_data);
    2ee8:	e0b72f04 	addi	r2,fp,-9028
    2eec:	1009883a 	mov	r4,r2
    2ef0:	0001e600 	call	1e60 <gen_world>
		}
		if (phi >= 0.02) {
    2ef4:	0191ebb4 	movhi	r6,18350
    2ef8:	31851ec4 	addi	r6,r6,5243
    2efc:	01cfe534 	movhi	r7,16276
    2f00:	39deb844 	addi	r7,r7,31457
    2f04:	e1371117 	ldw	r4,-9148(fp)
    2f08:	e1771217 	ldw	r5,-9144(fp)
    2f0c:	0007c140 	call	7c14 <__gedf2>
    2f10:	10000616 	blt	r2,zero,2f2c <main+0xae8>
			phi = 0.02;
    2f14:	0091ebb4 	movhi	r2,18350
    2f18:	10851ec4 	addi	r2,r2,5243
    2f1c:	e0b71115 	stw	r2,-9148(fp)
    2f20:	008fe534 	movhi	r2,16276
    2f24:	109eb844 	addi	r2,r2,31457
    2f28:	e0b71215 	stw	r2,-9144(fp)
		}
		if (phi <= -0.02) {
    2f2c:	0191ebb4 	movhi	r6,18350
    2f30:	31851ec4 	addi	r6,r6,5243
    2f34:	01efe534 	movhi	r7,49044
    2f38:	39deb844 	addi	r7,r7,31457
    2f3c:	e1371117 	ldw	r4,-9148(fp)
    2f40:	e1771217 	ldw	r5,-9144(fp)
    2f44:	0007cf00 	call	7cf0 <__ledf2>
    2f48:	00800616 	blt	zero,r2,2f64 <main+0xb20>
			phi = -0.02;
    2f4c:	0091ebb4 	movhi	r2,18350
    2f50:	10851ec4 	addi	r2,r2,5243
    2f54:	e0b71115 	stw	r2,-9148(fp)
    2f58:	00afe534 	movhi	r2,49044
    2f5c:	109eb844 	addi	r2,r2,31457
    2f60:	e0b71215 	stw	r2,-9144(fp)
		}
		if (x_off >= 60) {
    2f64:	d0a8eb17 	ldw	r2,-23636(gp)
    2f68:	10800f10 	cmplti	r2,r2,60
    2f6c:	1000021e 	bne	r2,zero,2f78 <main+0xb34>
			x_off = 60;
    2f70:	00800f04 	movi	r2,60
    2f74:	d0a8eb15 	stw	r2,-23636(gp)
		}
		if (x_off <= -60) {
    2f78:	d0a8eb17 	ldw	r2,-23636(gp)
    2f7c:	10bff148 	cmpgei	r2,r2,-59
    2f80:	1000021e 	bne	r2,zero,2f8c <main+0xb48>
			x_off = -60;
    2f84:	00bff104 	movi	r2,-60
    2f88:	d0a8eb15 	stw	r2,-23636(gp)
		}
		if (theta >= 0.02) {
    2f8c:	0191ebb4 	movhi	r6,18350
    2f90:	31851ec4 	addi	r6,r6,5243
    2f94:	01cfe534 	movhi	r7,16276
    2f98:	39deb844 	addi	r7,r7,31457
    2f9c:	e1370f17 	ldw	r4,-9156(fp)
    2fa0:	e1771017 	ldw	r5,-9152(fp)
    2fa4:	0007c140 	call	7c14 <__gedf2>
    2fa8:	10000616 	blt	r2,zero,2fc4 <main+0xb80>
			theta = 0.02;
    2fac:	0091ebb4 	movhi	r2,18350
    2fb0:	10851ec4 	addi	r2,r2,5243
    2fb4:	e0b70f15 	stw	r2,-9156(fp)
    2fb8:	008fe534 	movhi	r2,16276
    2fbc:	109eb844 	addi	r2,r2,31457
    2fc0:	e0b71015 	stw	r2,-9152(fp)
		}
		if (theta <= -0.02) {
    2fc4:	0191ebb4 	movhi	r6,18350
    2fc8:	31851ec4 	addi	r6,r6,5243
    2fcc:	01efe534 	movhi	r7,49044
    2fd0:	39deb844 	addi	r7,r7,31457
    2fd4:	e1370f17 	ldw	r4,-9156(fp)
    2fd8:	e1771017 	ldw	r5,-9152(fp)
    2fdc:	0007cf00 	call	7cf0 <__ledf2>
    2fe0:	00800616 	blt	zero,r2,2ffc <main+0xbb8>
			theta = -0.02;
    2fe4:	0091ebb4 	movhi	r2,18350
    2fe8:	10851ec4 	addi	r2,r2,5243
    2fec:	e0b70f15 	stw	r2,-9156(fp)
    2ff0:	00afe534 	movhi	r2,49044
    2ff4:	109eb844 	addi	r2,r2,31457
    2ff8:	e0b71015 	stw	r2,-9152(fp)
		}
		if (z_off >= 32) {
    2ffc:	d0a8ed17 	ldw	r2,-23628(gp)
    3000:	10800810 	cmplti	r2,r2,32
    3004:	1000021e 	bne	r2,zero,3010 <main+0xbcc>
			z_off = 32;
    3008:	00800804 	movi	r2,32
    300c:	d0a8ed15 	stw	r2,-23628(gp)
		}

		int s_t = (int) (sin(theta) * (1 << 8));
    3010:	e1370f17 	ldw	r4,-9156(fp)
    3014:	e1771017 	ldw	r5,-9152(fp)
    3018:	00046180 	call	4618 <sin>
    301c:	1011883a 	mov	r8,r2
    3020:	1813883a 	mov	r9,r3
    3024:	000d883a 	mov	r6,zero
    3028:	01d01c34 	movhi	r7,16496
    302c:	4009883a 	mov	r4,r8
    3030:	480b883a 	mov	r5,r9
    3034:	0007de40 	call	7de4 <__muldf3>
    3038:	1009883a 	mov	r4,r2
    303c:	180b883a 	mov	r5,r3
    3040:	2005883a 	mov	r2,r4
    3044:	2807883a 	mov	r3,r5
    3048:	1009883a 	mov	r4,r2
    304c:	180b883a 	mov	r5,r3
    3050:	0008f4c0 	call	8f4c <__fixdfsi>
    3054:	e0b72615 	stw	r2,-9064(fp)
		int c_t = (int) (cos(theta) * (1 << 8));
    3058:	e1370f17 	ldw	r4,-9156(fp)
    305c:	e1771017 	ldw	r5,-9152(fp)
    3060:	000452c0 	call	452c <cos>
    3064:	1011883a 	mov	r8,r2
    3068:	1813883a 	mov	r9,r3
    306c:	000d883a 	mov	r6,zero
    3070:	01d01c34 	movhi	r7,16496
    3074:	4009883a 	mov	r4,r8
    3078:	480b883a 	mov	r5,r9
    307c:	0007de40 	call	7de4 <__muldf3>
    3080:	1009883a 	mov	r4,r2
    3084:	180b883a 	mov	r5,r3
    3088:	2005883a 	mov	r2,r4
    308c:	2807883a 	mov	r3,r5
    3090:	1009883a 	mov	r4,r2
    3094:	180b883a 	mov	r5,r3
    3098:	0008f4c0 	call	8f4c <__fixdfsi>
    309c:	e0b72715 	stw	r2,-9060(fp)
		int s_p = (int) (sin(phi) * (1 << 8));
    30a0:	e1371117 	ldw	r4,-9148(fp)
    30a4:	e1771217 	ldw	r5,-9144(fp)
    30a8:	00046180 	call	4618 <sin>
    30ac:	1011883a 	mov	r8,r2
    30b0:	1813883a 	mov	r9,r3
    30b4:	000d883a 	mov	r6,zero
    30b8:	01d01c34 	movhi	r7,16496
    30bc:	4009883a 	mov	r4,r8
    30c0:	480b883a 	mov	r5,r9
    30c4:	0007de40 	call	7de4 <__muldf3>
    30c8:	1009883a 	mov	r4,r2
    30cc:	180b883a 	mov	r5,r3
    30d0:	2005883a 	mov	r2,r4
    30d4:	2807883a 	mov	r3,r5
    30d8:	1009883a 	mov	r4,r2
    30dc:	180b883a 	mov	r5,r3
    30e0:	0008f4c0 	call	8f4c <__fixdfsi>
    30e4:	e0b72815 	stw	r2,-9056(fp)
		int c_p = (int) (cos(phi) * (1 << 8));
    30e8:	e1371117 	ldw	r4,-9148(fp)
    30ec:	e1771217 	ldw	r5,-9144(fp)
    30f0:	000452c0 	call	452c <cos>
    30f4:	1011883a 	mov	r8,r2
    30f8:	1813883a 	mov	r9,r3
    30fc:	000d883a 	mov	r6,zero
    3100:	01d01c34 	movhi	r7,16496
    3104:	4009883a 	mov	r4,r8
    3108:	480b883a 	mov	r5,r9
    310c:	0007de40 	call	7de4 <__muldf3>
    3110:	1009883a 	mov	r4,r2
    3114:	180b883a 	mov	r5,r3
    3118:	2005883a 	mov	r2,r4
    311c:	2807883a 	mov	r3,r5
    3120:	1009883a 	mov	r4,r2
    3124:	180b883a 	mov	r5,r3
    3128:	0008f4c0 	call	8f4c <__fixdfsi>
    312c:	e0b72915 	stw	r2,-9052(fp)

		//        Matrix([[cos(phi), 			0,			 sin(phi), 0],
		//                [sin(phi)*sin(theta), cos(theta), -sin(theta)*cos(phi), 0],
		//                [-sin(phi)*cos(theta), sin(theta), cos(phi)*cos(theta), 0], [0, 0, 0, 1]]

		gpu->cam_x_axis.x = c_p;
    3130:	d0a00017 	ldw	r2,-32768(gp)
    3134:	e0f72917 	ldw	r3,-9052(fp)
    3138:	10c00a15 	stw	r3,40(r2)
		gpu->cam_x_axis.y = s_p * s_t / FP_SCALE;
    313c:	d4200017 	ldw	r16,-32768(gp)
    3140:	e1772617 	ldw	r5,-9064(fp)
    3144:	e1372817 	ldw	r4,-9056(fp)
    3148:	00068e80 	call	68e8 <__mulsi3>
    314c:	1000010e 	bge	r2,zero,3154 <main+0xd10>
    3150:	10803fc4 	addi	r2,r2,255
    3154:	1005d23a 	srai	r2,r2,8
    3158:	80800b15 	stw	r2,44(r16)
		gpu->cam_x_axis.z = -s_p * c_t / FP_SCALE;
    315c:	d4200017 	ldw	r16,-32768(gp)
    3160:	e0b72817 	ldw	r2,-9056(fp)
    3164:	0085c83a 	sub	r2,zero,r2
    3168:	e1772717 	ldw	r5,-9060(fp)
    316c:	1009883a 	mov	r4,r2
    3170:	00068e80 	call	68e8 <__mulsi3>
    3174:	1000010e 	bge	r2,zero,317c <main+0xd38>
    3178:	10803fc4 	addi	r2,r2,255
    317c:	1005d23a 	srai	r2,r2,8
    3180:	80800c15 	stw	r2,48(r16)

		gpu->cam_y_axis.x = 0;
    3184:	d0a00017 	ldw	r2,-32768(gp)
    3188:	10000d15 	stw	zero,52(r2)
		gpu->cam_y_axis.y = c_t;
    318c:	d0a00017 	ldw	r2,-32768(gp)
    3190:	e0f72717 	ldw	r3,-9060(fp)
    3194:	10c00e15 	stw	r3,56(r2)
		gpu->cam_y_axis.z = s_t;
    3198:	d0a00017 	ldw	r2,-32768(gp)
    319c:	e0f72617 	ldw	r3,-9064(fp)
    31a0:	10c00f15 	stw	r3,60(r2)

		gpu->cam_z_axis.x = s_p;
    31a4:	d0a00017 	ldw	r2,-32768(gp)
    31a8:	e0f72817 	ldw	r3,-9056(fp)
    31ac:	10c01015 	stw	r3,64(r2)
		gpu->cam_z_axis.y = -s_t * c_p / FP_SCALE;
    31b0:	d4200017 	ldw	r16,-32768(gp)
    31b4:	e0b72617 	ldw	r2,-9064(fp)
    31b8:	0085c83a 	sub	r2,zero,r2
    31bc:	e1772917 	ldw	r5,-9052(fp)
    31c0:	1009883a 	mov	r4,r2
    31c4:	00068e80 	call	68e8 <__mulsi3>
    31c8:	1000010e 	bge	r2,zero,31d0 <main+0xd8c>
    31cc:	10803fc4 	addi	r2,r2,255
    31d0:	1005d23a 	srai	r2,r2,8
    31d4:	80801115 	stw	r2,68(r16)
		gpu->cam_z_axis.z = c_p * c_t / FP_SCALE;
    31d8:	d4200017 	ldw	r16,-32768(gp)
    31dc:	e1772717 	ldw	r5,-9060(fp)
    31e0:	e1372917 	ldw	r4,-9052(fp)
    31e4:	00068e80 	call	68e8 <__mulsi3>
    31e8:	1000010e 	bge	r2,zero,31f0 <main+0xdac>
    31ec:	10803fc4 	addi	r2,r2,255
    31f0:	1005d23a 	srai	r2,r2,8
    31f4:	80801215 	stw	r2,72(r16)
//
//				gpu->cam_x_axis.z = s_p;
//				gpu->cam_y_axis.z = -s_t * c_p / FP_SCALE;
//				gpu->cam_z_axis.z = c_p * c_t / FP_SCALE;

		last_fps = 1000.0 / (clock() - frame_time);
    31f8:	000946c0 	call	946c <clock>
    31fc:	1007883a 	mov	r3,r2
    3200:	e0b72117 	ldw	r2,-9084(fp)
    3204:	1885c83a 	sub	r2,r3,r2
    3208:	1009883a 	mov	r4,r2
    320c:	00090a80 	call	90a8 <__floatunsidf>
    3210:	1009883a 	mov	r4,r2
    3214:	180b883a 	mov	r5,r3
    3218:	200d883a 	mov	r6,r4
    321c:	280f883a 	mov	r7,r5
    3220:	0009883a 	mov	r4,zero
    3224:	015023f4 	movhi	r5,16527
    3228:	29500004 	addi	r5,r5,16384
    322c:	00071bc0 	call	71bc <__divdf3>
    3230:	1009883a 	mov	r4,r2
    3234:	180b883a 	mov	r5,r3
    3238:	2005883a 	mov	r2,r4
    323c:	2807883a 	mov	r3,r5
    3240:	1009883a 	mov	r4,r2
    3244:	180b883a 	mov	r5,r3
    3248:	00092600 	call	9260 <__truncdfsf2>
    324c:	1007883a 	mov	r3,r2
    3250:	e0f71715 	stw	r3,-9124(fp)
		//printf("Frame ticks %.2f\n", );
	}
    3254:	003cf506 	br	262c <__alt_exception_stack_pointer+0xf800262c>

00003258 <done>:

	return 1;
}

static void done(void* handle, void* data) {
    3258:	defffd04 	addi	sp,sp,-12
    325c:	df000215 	stw	fp,8(sp)
    3260:	df000204 	addi	fp,sp,8
    3264:	e13ffe15 	stw	r4,-8(fp)
    3268:	e17fff15 	stw	r5,-4(fp)
	copy_done = 255;
    326c:	00803fc4 	movi	r2,255
    3270:	d0a8f515 	stw	r2,-23596(gp)
}
    3274:	0001883a 	nop
    3278:	e037883a 	mov	sp,fp
    327c:	df000017 	ldw	fp,0(sp)
    3280:	dec00104 	addi	sp,sp,4
    3284:	f800283a 	ret

00003288 <transfer>:

char transfer(volatile void* from, volatile void* to, alt_u32 size) {
    3288:	defff504 	addi	sp,sp,-44
    328c:	dfc00a15 	stw	ra,40(sp)
    3290:	df000915 	stw	fp,36(sp)
    3294:	df000904 	addi	fp,sp,36
    3298:	e13ffd15 	stw	r4,-12(fp)
    329c:	e17ffe15 	stw	r5,-8(fp)
    32a0:	e1bfff15 	stw	r6,-4(fp)
	copy_done = 0;
    32a4:	d028f515 	stw	zero,-23596(gp)
	int rc;
	alt_dma_txchan txchan;
	alt_dma_rxchan rxchan;
	void* tx_data = (void*) from; /* pointer to data to send */
    32a8:	e0bffd17 	ldw	r2,-12(fp)
    32ac:	e0bff815 	stw	r2,-32(fp)
	void* rx_buffer = (void*) to; /* pointer to rx buffer */
    32b0:	e0bffe17 	ldw	r2,-8(fp)
    32b4:	e0bff915 	stw	r2,-28(fp)
	/* Create the transmit channel */
	if ((txchan = alt_dma_txchan_open("/dev/copy_dma")) == NULL) {
    32b8:	010000b4 	movhi	r4,2
    32bc:	21222c04 	addi	r4,r4,-30544
    32c0:	00149540 	call	14954 <alt_dma_txchan_open>
    32c4:	e0bffa15 	stw	r2,-24(fp)
    32c8:	e0bffa17 	ldw	r2,-24(fp)
    32cc:	1000051e 	bne	r2,zero,32e4 <transfer+0x5c>
		printf("Failed to create transmit channel");
    32d0:	010000b4 	movhi	r4,2
    32d4:	21223004 	addi	r4,r4,-30528
    32d8:	0009ef40 	call	9ef4 <printf>
		return 255;
    32dc:	00bfffc4 	movi	r2,-1
    32e0:	00002e06 	br	339c <transfer+0x114>
	}
	/* Create the receive channel */
	if ((rxchan = alt_dma_rxchan_open("/dev/copy_dma")) == NULL) {
    32e4:	010000b4 	movhi	r4,2
    32e8:	21222c04 	addi	r4,r4,-30544
    32ec:	00148c40 	call	148c4 <alt_dma_rxchan_open>
    32f0:	e0bffb15 	stw	r2,-20(fp)
    32f4:	e0bffb17 	ldw	r2,-20(fp)
    32f8:	1000051e 	bne	r2,zero,3310 <transfer+0x88>
		printf("Failed to create receive channel");
    32fc:	010000b4 	movhi	r4,2
    3300:	21223904 	addi	r4,r4,-30492
    3304:	0009ef40 	call	9ef4 <printf>
		return 225;
    3308:	00bff844 	movi	r2,-31
    330c:	00002306 	br	339c <transfer+0x114>
	}
	/* Post the transmit request */
	if ((rc = alt_dma_txchan_send(txchan, tx_data, size, NULL, NULL)) < 0) {
    3310:	d8000015 	stw	zero,0(sp)
    3314:	000f883a 	mov	r7,zero
    3318:	e1bfff17 	ldw	r6,-4(fp)
    331c:	e17ff817 	ldw	r5,-32(fp)
    3320:	e13ffa17 	ldw	r4,-24(fp)
    3324:	00018500 	call	1850 <alt_dma_txchan_send>
    3328:	e0bffc15 	stw	r2,-16(fp)
    332c:	e0bffc17 	ldw	r2,-16(fp)
    3330:	1000060e 	bge	r2,zero,334c <transfer+0xc4>
		printf("Failed to post transmit request, reason = %i\n", rc);
    3334:	e17ffc17 	ldw	r5,-16(fp)
    3338:	010000b4 	movhi	r4,2
    333c:	21224204 	addi	r4,r4,-30456
    3340:	0009ef40 	call	9ef4 <printf>
		return 225;
    3344:	00bff844 	movi	r2,-31
    3348:	00001406 	br	339c <transfer+0x114>
	}
	/* Post the receive request */
	if ((rc = alt_dma_rxchan_prepare(rxchan, rx_buffer, size, done, NULL))
    334c:	d8000015 	stw	zero,0(sp)
    3350:	01c00034 	movhi	r7,0
    3354:	39cc9604 	addi	r7,r7,12888
    3358:	e1bfff17 	ldw	r6,-4(fp)
    335c:	e17ff917 	ldw	r5,-28(fp)
    3360:	e13ffb17 	ldw	r4,-20(fp)
    3364:	00018b80 	call	18b8 <alt_dma_rxchan_prepare>
    3368:	e0bffc15 	stw	r2,-16(fp)
    336c:	e0bffc17 	ldw	r2,-16(fp)
    3370:	1000060e 	bge	r2,zero,338c <transfer+0x104>
			< 0) {
		printf("Failed to post read request, reason = %i\n", rc);
    3374:	e17ffc17 	ldw	r5,-16(fp)
    3378:	010000b4 	movhi	r4,2
    337c:	21224e04 	addi	r4,r4,-30408
    3380:	0009ef40 	call	9ef4 <printf>
		return 225;
    3384:	00bff844 	movi	r2,-31
    3388:	00000406 	br	339c <transfer+0x114>
	}
	/* wait for transfer to complete */
	while (!copy_done)
    338c:	0001883a 	nop
    3390:	d0a8f517 	ldw	r2,-23596(gp)
    3394:	103ffe26 	beq	r2,zero,3390 <__alt_exception_stack_pointer+0xf8003390>
		;
	return 0;
    3398:	0005883a 	mov	r2,zero
}
    339c:	e037883a 	mov	sp,fp
    33a0:	dfc00117 	ldw	ra,4(sp)
    33a4:	df000017 	ldw	fp,0(sp)
    33a8:	dec00204 	addi	sp,sp,8
    33ac:	f800283a 	ret

000033b0 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    33b0:	defffc04 	addi	sp,sp,-16
    33b4:	dfc00315 	stw	ra,12(sp)
    33b8:	df000215 	stw	fp,8(sp)
    33bc:	df000204 	addi	fp,sp,8
    33c0:	2007883a 	mov	r3,r4
    33c4:	2805883a 	mov	r2,r5
    33c8:	e0fffe0d 	sth	r3,-8(fp)
    33cc:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    33d0:	e0bffe0b 	ldhu	r2,-8(fp)
    33d4:	100b883a 	mov	r5,r2
    33d8:	01000084 	movi	r4,2
    33dc:	00008e40 	call	8e4 <IO_write>
	IO_write(0, Data);
    33e0:	e0bfff0b 	ldhu	r2,-4(fp)
    33e4:	100b883a 	mov	r5,r2
    33e8:	0009883a 	mov	r4,zero
    33ec:	00008e40 	call	8e4 <IO_write>
}
    33f0:	0001883a 	nop
    33f4:	e037883a 	mov	sp,fp
    33f8:	dfc00117 	ldw	ra,4(sp)
    33fc:	df000017 	ldw	fp,0(sp)
    3400:	dec00204 	addi	sp,sp,8
    3404:	f800283a 	ret

00003408 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    3408:	defffd04 	addi	sp,sp,-12
    340c:	dfc00215 	stw	ra,8(sp)
    3410:	df000115 	stw	fp,4(sp)
    3414:	df000104 	addi	fp,sp,4
    3418:	2005883a 	mov	r2,r4
    341c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(2, Address);
    3420:	e0bfff0b 	ldhu	r2,-4(fp)
    3424:	100b883a 	mov	r5,r2
    3428:	01000084 	movi	r4,2
    342c:	00008e40 	call	8e4 <IO_write>
	return IO_read(0);
    3430:	0009883a 	mov	r4,zero
    3434:	000096c0 	call	96c <IO_read>

}
    3438:	e037883a 	mov	sp,fp
    343c:	dfc00117 	ldw	ra,4(sp)
    3440:	df000017 	ldw	fp,0(sp)
    3444:	dec00204 	addi	sp,sp,8
    3448:	f800283a 	ret

0000344c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    344c:	defffe04 	addi	sp,sp,-8
    3450:	dfc00115 	stw	ra,4(sp)
    3454:	df000015 	stw	fp,0(sp)
    3458:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    345c:	017e9414 	movui	r5,64080
    3460:	01000044 	movi	r4,1
    3464:	00008e40 	call	8e4 <IO_write>
	usleep(100000);
    3468:	010000b4 	movhi	r4,2
    346c:	2121a804 	addi	r4,r4,-31072
    3470:	00152040 	call	15204 <usleep>
	printf("[USB INIT]:reset finished!\n");
    3474:	010000b4 	movhi	r4,2
    3478:	21225904 	addi	r4,r4,-30364
    347c:	0009ff00 	call	9ff0 <puts>

	usleep(500000);
    3480:	01000234 	movhi	r4,8
    3484:	21284804 	addi	r4,r4,-24288
    3488:	00152040 	call	15204 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    348c:	010000b4 	movhi	r4,2
    3490:	21226004 	addi	r4,r4,-30336
    3494:	0009ff00 	call	9ff0 <puts>
	IO_read(HPI_MAILBOX);
    3498:	01000044 	movi	r4,1
    349c:	000096c0 	call	96c <IO_read>
	IO_read(HPI_STATUS);
    34a0:	010000c4 	movi	r4,3
    34a4:	000096c0 	call	96c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    34a8:	01005104 	movi	r4,324
    34ac:	00034080 	call	3408 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    34b0:	000b883a 	mov	r5,zero
    34b4:	01005104 	movi	r4,324
    34b8:	00033b00 	call	33b0 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    34bc:	01005204 	movi	r4,328
    34c0:	00034080 	call	3408 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    34c4:	000b883a 	mov	r5,zero
    34c8:	01005204 	movi	r4,328
    34cc:	00033b00 	call	33b0 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    34d0:	017fffd4 	movui	r5,65535
    34d4:	01302414 	movui	r4,49296
    34d8:	00033b00 	call	33b0 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    34dc:	017fffd4 	movui	r5,65535
    34e0:	01302c14 	movui	r4,49328
    34e4:	00033b00 	call	33b0 <UsbWrite>
}
    34e8:	0001883a 	nop
    34ec:	e037883a 	mov	sp,fp
    34f0:	dfc00117 	ldw	ra,4(sp)
    34f4:	df000017 	ldw	fp,0(sp)
    34f8:	dec00204 	addi	sp,sp,8
    34fc:	f800283a 	ret

00003500 <UsbSetAddress>:


void UsbSetAddress()
{
    3500:	defffe04 	addi	sp,sp,-8
    3504:	dfc00115 	stw	ra,4(sp)
    3508:	df000015 	stw	fp,0(sp)
    350c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3510:	01414004 	movi	r5,1280
    3514:	01000084 	movi	r4,2
    3518:	00008e40 	call	8e4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    351c:	01414304 	movi	r5,1292
    3520:	0009883a 	mov	r4,zero
    3524:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3528:	01400204 	movi	r5,8
    352c:	0009883a 	mov	r4,zero
    3530:	00008e40 	call	8e4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    3534:	01403404 	movi	r5,208
    3538:	0009883a 	mov	r4,zero
    353c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3540:	01400044 	movi	r5,1
    3544:	0009883a 	mov	r4,zero
    3548:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    354c:	014004c4 	movi	r5,19
    3550:	0009883a 	mov	r4,zero
    3554:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3558:	01414504 	movi	r5,1300
    355c:	0009883a 	mov	r4,zero
    3560:	00008e40 	call	8e4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    3564:	01414004 	movi	r5,1280
    3568:	0009883a 	mov	r4,zero
    356c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0002);
    3570:	01400084 	movi	r5,2
    3574:	0009883a 	mov	r4,zero
    3578:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    357c:	000b883a 	mov	r5,zero
    3580:	0009883a 	mov	r4,zero
    3584:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3588:	000b883a 	mov	r5,zero
    358c:	0009883a 	mov	r4,zero
    3590:	00008e40 	call	8e4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    3594:	000b883a 	mov	r5,zero
    3598:	0009883a 	mov	r4,zero
    359c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    35a0:	000b883a 	mov	r5,zero
    35a4:	0009883a 	mov	r4,zero
    35a8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    35ac:	01402404 	movi	r5,144
    35b0:	0009883a 	mov	r4,zero
    35b4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);
    35b8:	01401044 	movi	r5,65
    35bc:	0009883a 	mov	r4,zero
    35c0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    35c4:	014004c4 	movi	r5,19
    35c8:	0009883a 	mov	r4,zero
    35cc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    35d0:	000b883a 	mov	r5,zero
    35d4:	0009883a 	mov	r4,zero
    35d8:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    35dc:	01414004 	movi	r5,1280
    35e0:	01006c04 	movi	r4,432
    35e4:	00033b00 	call	33b0 <UsbWrite>
}
    35e8:	0001883a 	nop
    35ec:	e037883a 	mov	sp,fp
    35f0:	dfc00117 	ldw	ra,4(sp)
    35f4:	df000017 	ldw	fp,0(sp)
    35f8:	dec00204 	addi	sp,sp,8
    35fc:	f800283a 	ret

00003600 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    3600:	defffe04 	addi	sp,sp,-8
    3604:	dfc00115 	stw	ra,4(sp)
    3608:	df000015 	stw	fp,0(sp)
    360c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3610:	01414004 	movi	r5,1280
    3614:	01000084 	movi	r4,2
    3618:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    361c:	01414304 	movi	r5,1292
    3620:	0009883a 	mov	r4,zero
    3624:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3628:	01400204 	movi	r5,8
    362c:	0009883a 	mov	r4,zero
    3630:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    3634:	0140b404 	movi	r5,720
    3638:	0009883a 	mov	r4,zero
    363c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3640:	01400044 	movi	r5,1
    3644:	0009883a 	mov	r4,zero
    3648:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    364c:	014004c4 	movi	r5,19
    3650:	0009883a 	mov	r4,zero
    3654:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3658:	01414504 	movi	r5,1300
    365c:	0009883a 	mov	r4,zero
    3660:	00008e40 	call	8e4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    3664:	0141a004 	movi	r5,1664
    3668:	0009883a 	mov	r4,zero
    366c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    3670:	01404004 	movi	r5,256
    3674:	0009883a 	mov	r4,zero
    3678:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    367c:	000b883a 	mov	r5,zero
    3680:	0009883a 	mov	r4,zero
    3684:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);
    3688:	01400204 	movi	r5,8
    368c:	0009883a 	mov	r4,zero
    3690:	00008e40 	call	8e4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    3694:	01414b04 	movi	r5,1324
    3698:	0009883a 	mov	r4,zero
    369c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    36a0:	01400204 	movi	r5,8
    36a4:	0009883a 	mov	r4,zero
    36a8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    36ac:	0140a404 	movi	r5,656
    36b0:	0009883a 	mov	r4,zero
    36b4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);
    36b8:	01401044 	movi	r5,65
    36bc:	0009883a 	mov	r4,zero
    36c0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    36c4:	014004c4 	movi	r5,19
    36c8:	0009883a 	mov	r4,zero
    36cc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0520);
    36d0:	01414804 	movi	r5,1312
    36d4:	0009883a 	mov	r4,zero
    36d8:	00008e40 	call	8e4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    36dc:	000b883a 	mov	r5,zero
    36e0:	0009883a 	mov	r4,zero
    36e4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    36e8:	000b883a 	mov	r5,zero
    36ec:	0009883a 	mov	r4,zero
    36f0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    36f4:	01408404 	movi	r5,528
    36f8:	0009883a 	mov	r4,zero
    36fc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);
    3700:	01401044 	movi	r5,65
    3704:	0009883a 	mov	r4,zero
    3708:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    370c:	014004c4 	movi	r5,19
    3710:	0009883a 	mov	r4,zero
    3714:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3718:	000b883a 	mov	r5,zero
    371c:	0009883a 	mov	r4,zero
    3720:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3724:	01414004 	movi	r5,1280
    3728:	01006c04 	movi	r4,432
    372c:	00033b00 	call	33b0 <UsbWrite>
}
    3730:	0001883a 	nop
    3734:	e037883a 	mov	sp,fp
    3738:	dfc00117 	ldw	ra,4(sp)
    373c:	df000017 	ldw	fp,0(sp)
    3740:	dec00204 	addi	sp,sp,8
    3744:	f800283a 	ret

00003748 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    3748:	defffe04 	addi	sp,sp,-8
    374c:	dfc00115 	stw	ra,4(sp)
    3750:	df000015 	stw	fp,0(sp)
    3754:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3758:	01414004 	movi	r5,1280
    375c:	01000084 	movi	r4,2
    3760:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3764:	01414304 	movi	r5,1292
    3768:	0009883a 	mov	r4,zero
    376c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3770:	01400204 	movi	r5,8
    3774:	0009883a 	mov	r4,zero
    3778:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    377c:	0140b404 	movi	r5,720
    3780:	0009883a 	mov	r4,zero
    3784:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3788:	01400044 	movi	r5,1
    378c:	0009883a 	mov	r4,zero
    3790:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3794:	014004c4 	movi	r5,19
    3798:	0009883a 	mov	r4,zero
    379c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    37a0:	01414504 	movi	r5,1300
    37a4:	0009883a 	mov	r4,zero
    37a8:	00008e40 	call	8e4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    37ac:	0141a004 	movi	r5,1664
    37b0:	0009883a 	mov	r4,zero
    37b4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    37b8:	01404004 	movi	r5,256
    37bc:	0009883a 	mov	r4,zero
    37c0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    37c4:	000b883a 	mov	r5,zero
    37c8:	0009883a 	mov	r4,zero
    37cc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    37d0:	01400484 	movi	r5,18
    37d4:	0009883a 	mov	r4,zero
    37d8:	00008e40 	call	8e4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    37dc:	01415104 	movi	r5,1348
    37e0:	0009883a 	mov	r4,zero
    37e4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    37e8:	01400204 	movi	r5,8
    37ec:	0009883a 	mov	r4,zero
    37f0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    37f4:	0140a404 	movi	r5,656
    37f8:	0009883a 	mov	r4,zero
    37fc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    3800:	01401044 	movi	r5,65
    3804:	0009883a 	mov	r4,zero
    3808:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    380c:	014004c4 	movi	r5,19
    3810:	0009883a 	mov	r4,zero
    3814:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    3818:	01414804 	movi	r5,1312
    381c:	0009883a 	mov	r4,zero
    3820:	00008e40 	call	8e4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    3824:	01415304 	movi	r5,1356
    3828:	0009883a 	mov	r4,zero
    382c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    3830:	01400204 	movi	r5,8
    3834:	0009883a 	mov	r4,zero
    3838:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    383c:	0140a404 	movi	r5,656
    3840:	0009883a 	mov	r4,zero
    3844:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    3848:	01400044 	movi	r5,1
    384c:	0009883a 	mov	r4,zero
    3850:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3854:	014004c4 	movi	r5,19
    3858:	0009883a 	mov	r4,zero
    385c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    3860:	01414b04 	movi	r5,1324
    3864:	0009883a 	mov	r4,zero
    3868:	00008e40 	call	8e4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    386c:	01415504 	movi	r5,1364
    3870:	0009883a 	mov	r4,zero
    3874:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    3878:	01400084 	movi	r5,2
    387c:	0009883a 	mov	r4,zero
    3880:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    3884:	0140a404 	movi	r5,656
    3888:	0009883a 	mov	r4,zero
    388c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    3890:	01401044 	movi	r5,65
    3894:	0009883a 	mov	r4,zero
    3898:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    389c:	014004c4 	movi	r5,19
    38a0:	0009883a 	mov	r4,zero
    38a4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    38a8:	01414e04 	movi	r5,1336
    38ac:	0009883a 	mov	r4,zero
    38b0:	00008e40 	call	8e4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    38b4:	000b883a 	mov	r5,zero
    38b8:	0009883a 	mov	r4,zero
    38bc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    38c0:	000b883a 	mov	r5,zero
    38c4:	0009883a 	mov	r4,zero
    38c8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    38cc:	01408404 	movi	r5,528
    38d0:	0009883a 	mov	r4,zero
    38d4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    38d8:	01401044 	movi	r5,65
    38dc:	0009883a 	mov	r4,zero
    38e0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    38e4:	014004c4 	movi	r5,19
    38e8:	0009883a 	mov	r4,zero
    38ec:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    38f0:	000b883a 	mov	r5,zero
    38f4:	0009883a 	mov	r4,zero
    38f8:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    38fc:	01414004 	movi	r5,1280
    3900:	01006c04 	movi	r4,432
    3904:	00033b00 	call	33b0 <UsbWrite>
}
    3908:	0001883a 	nop
    390c:	e037883a 	mov	sp,fp
    3910:	dfc00117 	ldw	ra,4(sp)
    3914:	df000017 	ldw	fp,0(sp)
    3918:	dec00204 	addi	sp,sp,8
    391c:	f800283a 	ret

00003920 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    3920:	defffe04 	addi	sp,sp,-8
    3924:	dfc00115 	stw	ra,4(sp)
    3928:	df000015 	stw	fp,0(sp)
    392c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3930:	01414004 	movi	r5,1280
    3934:	01000084 	movi	r4,2
    3938:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    393c:	01414304 	movi	r5,1292
    3940:	0009883a 	mov	r4,zero
    3944:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3948:	01400204 	movi	r5,8
    394c:	0009883a 	mov	r4,zero
    3950:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    3954:	0140b404 	movi	r5,720
    3958:	0009883a 	mov	r4,zero
    395c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3960:	01400044 	movi	r5,1
    3964:	0009883a 	mov	r4,zero
    3968:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    396c:	014004c4 	movi	r5,19
    3970:	0009883a 	mov	r4,zero
    3974:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3978:	01414504 	movi	r5,1300
    397c:	0009883a 	mov	r4,zero
    3980:	00008e40 	call	8e4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    3984:	0141a004 	movi	r5,1664
    3988:	0009883a 	mov	r4,zero
    398c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    3990:	01408004 	movi	r5,512
    3994:	0009883a 	mov	r4,zero
    3998:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    399c:	000b883a 	mov	r5,zero
    39a0:	0009883a 	mov	r4,zero
    39a4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    39a8:	01400244 	movi	r5,9
    39ac:	0009883a 	mov	r4,zero
    39b0:	00008e40 	call	8e4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    39b4:	01415104 	movi	r5,1348
    39b8:	0009883a 	mov	r4,zero
    39bc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    39c0:	01400204 	movi	r5,8
    39c4:	0009883a 	mov	r4,zero
    39c8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    39cc:	0140a404 	movi	r5,656
    39d0:	0009883a 	mov	r4,zero
    39d4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    39d8:	01401044 	movi	r5,65
    39dc:	0009883a 	mov	r4,zero
    39e0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    39e4:	014004c4 	movi	r5,19
    39e8:	0009883a 	mov	r4,zero
    39ec:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    39f0:	01414804 	movi	r5,1312
    39f4:	0009883a 	mov	r4,zero
    39f8:	00008e40 	call	8e4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    39fc:	01415304 	movi	r5,1356
    3a00:	0009883a 	mov	r4,zero
    3a04:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    3a08:	01400044 	movi	r5,1
    3a0c:	0009883a 	mov	r4,zero
    3a10:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3a14:	0140a404 	movi	r5,656
    3a18:	0009883a 	mov	r4,zero
    3a1c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    3a20:	01400044 	movi	r5,1
    3a24:	0009883a 	mov	r4,zero
    3a28:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3a2c:	014004c4 	movi	r5,19
    3a30:	0009883a 	mov	r4,zero
    3a34:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    3a38:	01414b04 	movi	r5,1324
    3a3c:	0009883a 	mov	r4,zero
    3a40:	00008e40 	call	8e4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    3a44:	000b883a 	mov	r5,zero
    3a48:	0009883a 	mov	r4,zero
    3a4c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    3a50:	000b883a 	mov	r5,zero
    3a54:	0009883a 	mov	r4,zero
    3a58:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    3a5c:	01408404 	movi	r5,528
    3a60:	0009883a 	mov	r4,zero
    3a64:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    3a68:	01401044 	movi	r5,65
    3a6c:	0009883a 	mov	r4,zero
    3a70:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    3a74:	014004c4 	movi	r5,19
    3a78:	0009883a 	mov	r4,zero
    3a7c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    3a80:	000b883a 	mov	r5,zero
    3a84:	0009883a 	mov	r4,zero
    3a88:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3a8c:	01414004 	movi	r5,1280
    3a90:	01006c04 	movi	r4,432
    3a94:	00033b00 	call	33b0 <UsbWrite>
}
    3a98:	0001883a 	nop
    3a9c:	e037883a 	mov	sp,fp
    3aa0:	dfc00117 	ldw	ra,4(sp)
    3aa4:	df000017 	ldw	fp,0(sp)
    3aa8:	dec00204 	addi	sp,sp,8
    3aac:	f800283a 	ret

00003ab0 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    3ab0:	defffe04 	addi	sp,sp,-8
    3ab4:	dfc00115 	stw	ra,4(sp)
    3ab8:	df000015 	stw	fp,0(sp)
    3abc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3ac0:	01414004 	movi	r5,1280
    3ac4:	01000084 	movi	r4,2
    3ac8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3acc:	01414304 	movi	r5,1292
    3ad0:	0009883a 	mov	r4,zero
    3ad4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3ad8:	01400204 	movi	r5,8
    3adc:	0009883a 	mov	r4,zero
    3ae0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    3ae4:	0140b404 	movi	r5,720
    3ae8:	0009883a 	mov	r4,zero
    3aec:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3af0:	01400044 	movi	r5,1
    3af4:	0009883a 	mov	r4,zero
    3af8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3afc:	014004c4 	movi	r5,19
    3b00:	0009883a 	mov	r4,zero
    3b04:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3b08:	01414504 	movi	r5,1300
    3b0c:	0009883a 	mov	r4,zero
    3b10:	00008e40 	call	8e4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    3b14:	0141a004 	movi	r5,1664
    3b18:	0009883a 	mov	r4,zero
    3b1c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    3b20:	01408004 	movi	r5,512
    3b24:	0009883a 	mov	r4,zero
    3b28:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    3b2c:	000b883a 	mov	r5,zero
    3b30:	0009883a 	mov	r4,zero
    3b34:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    3b38:	01403fc4 	movi	r5,255
    3b3c:	0009883a 	mov	r4,zero
    3b40:	00008e40 	call	8e4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    3b44:	01415704 	movi	r5,1372
    3b48:	0009883a 	mov	r4,zero
    3b4c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    3b50:	01400204 	movi	r5,8
    3b54:	0009883a 	mov	r4,zero
    3b58:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    3b5c:	0140a404 	movi	r5,656
    3b60:	0009883a 	mov	r4,zero
    3b64:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    3b68:	01401044 	movi	r5,65
    3b6c:	0009883a 	mov	r4,zero
    3b70:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3b74:	014004c4 	movi	r5,19
    3b78:	0009883a 	mov	r4,zero
    3b7c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    3b80:	01414804 	movi	r5,1312
    3b84:	0009883a 	mov	r4,zero
    3b88:	00008e40 	call	8e4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    3b8c:	01415904 	movi	r5,1380
    3b90:	0009883a 	mov	r4,zero
    3b94:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    3b98:	01400204 	movi	r5,8
    3b9c:	0009883a 	mov	r4,zero
    3ba0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3ba4:	0140a404 	movi	r5,656
    3ba8:	0009883a 	mov	r4,zero
    3bac:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    3bb0:	01400044 	movi	r5,1
    3bb4:	0009883a 	mov	r4,zero
    3bb8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3bbc:	014004c4 	movi	r5,19
    3bc0:	0009883a 	mov	r4,zero
    3bc4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    3bc8:	01414b04 	movi	r5,1324
    3bcc:	0009883a 	mov	r4,zero
    3bd0:	00008e40 	call	8e4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    3bd4:	01415b04 	movi	r5,1388
    3bd8:	0009883a 	mov	r4,zero
    3bdc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    3be0:	01400204 	movi	r5,8
    3be4:	0009883a 	mov	r4,zero
    3be8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    3bec:	0140a404 	movi	r5,656
    3bf0:	0009883a 	mov	r4,zero
    3bf4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    3bf8:	01401044 	movi	r5,65
    3bfc:	0009883a 	mov	r4,zero
    3c00:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    3c04:	014004c4 	movi	r5,19
    3c08:	0009883a 	mov	r4,zero
    3c0c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    3c10:	01414e04 	movi	r5,1336
    3c14:	0009883a 	mov	r4,zero
    3c18:	00008e40 	call	8e4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    3c1c:	01415d04 	movi	r5,1396
    3c20:	0009883a 	mov	r4,zero
    3c24:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    3c28:	01400204 	movi	r5,8
    3c2c:	0009883a 	mov	r4,zero
    3c30:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    3c34:	0140a404 	movi	r5,656
    3c38:	0009883a 	mov	r4,zero
    3c3c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    3c40:	01400044 	movi	r5,1
    3c44:	0009883a 	mov	r4,zero
    3c48:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    3c4c:	014004c4 	movi	r5,19
    3c50:	0009883a 	mov	r4,zero
    3c54:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    3c58:	01415104 	movi	r5,1348
    3c5c:	0009883a 	mov	r4,zero
    3c60:	00008e40 	call	8e4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    3c64:	01415f04 	movi	r5,1404
    3c68:	0009883a 	mov	r4,zero
    3c6c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    3c70:	01400084 	movi	r5,2
    3c74:	0009883a 	mov	r4,zero
    3c78:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    3c7c:	0140a404 	movi	r5,656
    3c80:	0009883a 	mov	r4,zero
    3c84:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    3c88:	01401044 	movi	r5,65
    3c8c:	0009883a 	mov	r4,zero
    3c90:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3c94:	014004c4 	movi	r5,19
    3c98:	0009883a 	mov	r4,zero
    3c9c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    3ca0:	01415404 	movi	r5,1360
    3ca4:	0009883a 	mov	r4,zero
    3ca8:	00008e40 	call	8e4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    3cac:	000b883a 	mov	r5,zero
    3cb0:	0009883a 	mov	r4,zero
    3cb4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    3cb8:	000b883a 	mov	r5,zero
    3cbc:	0009883a 	mov	r4,zero
    3cc0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    3cc4:	01408404 	movi	r5,528
    3cc8:	0009883a 	mov	r4,zero
    3ccc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    3cd0:	01401044 	movi	r5,65
    3cd4:	0009883a 	mov	r4,zero
    3cd8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3cdc:	014004c4 	movi	r5,19
    3ce0:	0009883a 	mov	r4,zero
    3ce4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    3ce8:	000b883a 	mov	r5,zero
    3cec:	0009883a 	mov	r4,zero
    3cf0:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3cf4:	01414004 	movi	r5,1280
    3cf8:	01006c04 	movi	r4,432
    3cfc:	00033b00 	call	33b0 <UsbWrite>
}
    3d00:	0001883a 	nop
    3d04:	e037883a 	mov	sp,fp
    3d08:	dfc00117 	ldw	ra,4(sp)
    3d0c:	df000017 	ldw	fp,0(sp)
    3d10:	dec00204 	addi	sp,sp,8
    3d14:	f800283a 	ret

00003d18 <UsbSetConfig>:

void UsbSetConfig()
{
    3d18:	defffe04 	addi	sp,sp,-8
    3d1c:	dfc00115 	stw	ra,4(sp)
    3d20:	df000015 	stw	fp,0(sp)
    3d24:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3d28:	01414004 	movi	r5,1280
    3d2c:	01000084 	movi	r4,2
    3d30:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3d34:	01414304 	movi	r5,1292
    3d38:	0009883a 	mov	r4,zero
    3d3c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3d40:	01400204 	movi	r5,8
    3d44:	0009883a 	mov	r4,zero
    3d48:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    3d4c:	0140b404 	movi	r5,720
    3d50:	0009883a 	mov	r4,zero
    3d54:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3d58:	01400044 	movi	r5,1
    3d5c:	0009883a 	mov	r4,zero
    3d60:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3d64:	014004c4 	movi	r5,19
    3d68:	0009883a 	mov	r4,zero
    3d6c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3d70:	01414504 	movi	r5,1300
    3d74:	0009883a 	mov	r4,zero
    3d78:	00008e40 	call	8e4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    3d7c:	01424004 	movi	r5,2304
    3d80:	0009883a 	mov	r4,zero
    3d84:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    3d88:	01400044 	movi	r5,1
    3d8c:	0009883a 	mov	r4,zero
    3d90:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3d94:	000b883a 	mov	r5,zero
    3d98:	0009883a 	mov	r4,zero
    3d9c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3da0:	000b883a 	mov	r5,zero
    3da4:	0009883a 	mov	r4,zero
    3da8:	00008e40 	call	8e4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    3dac:	000b883a 	mov	r5,zero
    3db0:	0009883a 	mov	r4,zero
    3db4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    3db8:	000b883a 	mov	r5,zero
    3dbc:	0009883a 	mov	r4,zero
    3dc0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    3dc4:	0140a404 	movi	r5,656
    3dc8:	0009883a 	mov	r4,zero
    3dcc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    3dd0:	01401044 	movi	r5,65
    3dd4:	0009883a 	mov	r4,zero
    3dd8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3ddc:	014004c4 	movi	r5,19
    3de0:	0009883a 	mov	r4,zero
    3de4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3de8:	000b883a 	mov	r5,zero
    3dec:	0009883a 	mov	r4,zero
    3df0:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3df4:	01414004 	movi	r5,1280
    3df8:	01006c04 	movi	r4,432
    3dfc:	00033b00 	call	33b0 <UsbWrite>

}
    3e00:	0001883a 	nop
    3e04:	e037883a 	mov	sp,fp
    3e08:	dfc00117 	ldw	ra,4(sp)
    3e0c:	df000017 	ldw	fp,0(sp)
    3e10:	dec00204 	addi	sp,sp,8
    3e14:	f800283a 	ret

00003e18 <UsbClassRequest>:

void UsbClassRequest()
{
    3e18:	defffe04 	addi	sp,sp,-8
    3e1c:	dfc00115 	stw	ra,4(sp)
    3e20:	df000015 	stw	fp,0(sp)
    3e24:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3e28:	01414004 	movi	r5,1280
    3e2c:	01000084 	movi	r4,2
    3e30:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3e34:	01414304 	movi	r5,1292
    3e38:	0009883a 	mov	r4,zero
    3e3c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3e40:	01400204 	movi	r5,8
    3e44:	0009883a 	mov	r4,zero
    3e48:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    3e4c:	0140b404 	movi	r5,720
    3e50:	0009883a 	mov	r4,zero
    3e54:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3e58:	01400044 	movi	r5,1
    3e5c:	0009883a 	mov	r4,zero
    3e60:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3e64:	014004c4 	movi	r5,19
    3e68:	0009883a 	mov	r4,zero
    3e6c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3e70:	01414504 	movi	r5,1300
    3e74:	0009883a 	mov	r4,zero
    3e78:	00008e40 	call	8e4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    3e7c:	01428844 	movi	r5,2593
    3e80:	0009883a 	mov	r4,zero
    3e84:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    3e88:	000b883a 	mov	r5,zero
    3e8c:	0009883a 	mov	r4,zero
    3e90:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3e94:	000b883a 	mov	r5,zero
    3e98:	0009883a 	mov	r4,zero
    3e9c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3ea0:	000b883a 	mov	r5,zero
    3ea4:	0009883a 	mov	r4,zero
    3ea8:	00008e40 	call	8e4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    3eac:	000b883a 	mov	r5,zero
    3eb0:	0009883a 	mov	r4,zero
    3eb4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    3eb8:	000b883a 	mov	r5,zero
    3ebc:	0009883a 	mov	r4,zero
    3ec0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    3ec4:	0140a404 	movi	r5,656
    3ec8:	0009883a 	mov	r4,zero
    3ecc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    3ed0:	01401044 	movi	r5,65
    3ed4:	0009883a 	mov	r4,zero
    3ed8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3edc:	014004c4 	movi	r5,19
    3ee0:	0009883a 	mov	r4,zero
    3ee4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3ee8:	000b883a 	mov	r5,zero
    3eec:	0009883a 	mov	r4,zero
    3ef0:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3ef4:	01414004 	movi	r5,1280
    3ef8:	01006c04 	movi	r4,432
    3efc:	00033b00 	call	33b0 <UsbWrite>
}
    3f00:	0001883a 	nop
    3f04:	e037883a 	mov	sp,fp
    3f08:	dfc00117 	ldw	ra,4(sp)
    3f0c:	df000017 	ldw	fp,0(sp)
    3f10:	dec00204 	addi	sp,sp,8
    3f14:	f800283a 	ret

00003f18 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    3f18:	defffe04 	addi	sp,sp,-8
    3f1c:	dfc00115 	stw	ra,4(sp)
    3f20:	df000015 	stw	fp,0(sp)
    3f24:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3f28:	01414004 	movi	r5,1280
    3f2c:	01000084 	movi	r4,2
    3f30:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3f34:	01414304 	movi	r5,1292
    3f38:	0009883a 	mov	r4,zero
    3f3c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3f40:	01400204 	movi	r5,8
    3f44:	0009883a 	mov	r4,zero
    3f48:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    3f4c:	0140b404 	movi	r5,720
    3f50:	0009883a 	mov	r4,zero
    3f54:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3f58:	01400044 	movi	r5,1
    3f5c:	0009883a 	mov	r4,zero
    3f60:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3f64:	014004c4 	movi	r5,19
    3f68:	0009883a 	mov	r4,zero
    3f6c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3f70:	01414504 	movi	r5,1300
    3f74:	0009883a 	mov	r4,zero
    3f78:	00008e40 	call	8e4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    3f7c:	0141a044 	movi	r5,1665
    3f80:	0009883a 	mov	r4,zero
    3f84:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    3f88:	01484004 	movi	r5,8448
    3f8c:	0009883a 	mov	r4,zero
    3f90:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    3f94:	000b883a 	mov	r5,zero
    3f98:	0009883a 	mov	r4,zero
    3f9c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    3fa0:	01401ec4 	movi	r5,123
    3fa4:	0009883a 	mov	r4,zero
    3fa8:	00008e40 	call	8e4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    3fac:	01415104 	movi	r5,1348
    3fb0:	0009883a 	mov	r4,zero
    3fb4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    3fb8:	01400204 	movi	r5,8
    3fbc:	0009883a 	mov	r4,zero
    3fc0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    3fc4:	0140a404 	movi	r5,656
    3fc8:	0009883a 	mov	r4,zero
    3fcc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    3fd0:	01401044 	movi	r5,65
    3fd4:	0009883a 	mov	r4,zero
    3fd8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3fdc:	014004c4 	movi	r5,19
    3fe0:	0009883a 	mov	r4,zero
    3fe4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    3fe8:	01414804 	movi	r5,1312
    3fec:	0009883a 	mov	r4,zero
    3ff0:	00008e40 	call	8e4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    3ff4:	000b883a 	mov	r5,zero
    3ff8:	0009883a 	mov	r4,zero
    3ffc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    4000:	000b883a 	mov	r5,zero
    4004:	0009883a 	mov	r4,zero
    4008:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    400c:	01408404 	movi	r5,528
    4010:	0009883a 	mov	r4,zero
    4014:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    4018:	01401044 	movi	r5,65
    401c:	0009883a 	mov	r4,zero
    4020:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    4024:	014004c4 	movi	r5,19
    4028:	0009883a 	mov	r4,zero
    402c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    4030:	000b883a 	mov	r5,zero
    4034:	0009883a 	mov	r4,zero
    4038:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    403c:	01414004 	movi	r5,1280
    4040:	01006c04 	movi	r4,432
    4044:	00033b00 	call	33b0 <UsbWrite>

}
    4048:	0001883a 	nop
    404c:	e037883a 	mov	sp,fp
    4050:	dfc00117 	ldw	ra,4(sp)
    4054:	df000017 	ldw	fp,0(sp)
    4058:	dec00204 	addi	sp,sp,8
    405c:	f800283a 	ret

00004060 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    4060:	defffe04 	addi	sp,sp,-8
    4064:	dfc00115 	stw	ra,4(sp)
    4068:	df000015 	stw	fp,0(sp)
    406c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    4070:	01414004 	movi	r5,1280
    4074:	01000084 	movi	r4,2
    4078:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x050C);
    407c:	01414304 	movi	r5,1292
    4080:	0009883a 	mov	r4,zero
    4084:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    4088:	01400204 	movi	r5,8
    408c:	0009883a 	mov	r4,zero
    4090:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    4094:	0140b404 	movi	r5,720
    4098:	0009883a 	mov	r4,zero
    409c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);
    40a0:	01400044 	movi	r5,1
    40a4:	0009883a 	mov	r4,zero
    40a8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);
    40ac:	014004c4 	movi	r5,19
    40b0:	0009883a 	mov	r4,zero
    40b4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0514);
    40b8:	01414504 	movi	r5,1300
    40bc:	0009883a 	mov	r4,zero
    40c0:	00008e40 	call	8e4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    40c4:	0141a044 	movi	r5,1665
    40c8:	0009883a 	mov	r4,zero
    40cc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    40d0:	01488004 	movi	r5,8704
    40d4:	0009883a 	mov	r4,zero
    40d8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    40dc:	000b883a 	mov	r5,zero
    40e0:	0009883a 	mov	r4,zero
    40e4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    40e8:	01401ec4 	movi	r5,123
    40ec:	0009883a 	mov	r4,zero
    40f0:	00008e40 	call	8e4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    40f4:	01416004 	movi	r5,1408
    40f8:	0009883a 	mov	r4,zero
    40fc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    4100:	01400204 	movi	r5,8
    4104:	0009883a 	mov	r4,zero
    4108:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    410c:	0140a404 	movi	r5,656
    4110:	0009883a 	mov	r4,zero
    4114:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    4118:	01401044 	movi	r5,65
    411c:	0009883a 	mov	r4,zero
    4120:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    4124:	014004c4 	movi	r5,19
    4128:	0009883a 	mov	r4,zero
    412c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    4130:	01414804 	movi	r5,1312
    4134:	0009883a 	mov	r4,zero
    4138:	00008e40 	call	8e4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    413c:	01416204 	movi	r5,1416
    4140:	0009883a 	mov	r4,zero
    4144:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    4148:	01400204 	movi	r5,8
    414c:	0009883a 	mov	r4,zero
    4150:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    4154:	0140a404 	movi	r5,656
    4158:	0009883a 	mov	r4,zero
    415c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    4160:	01400044 	movi	r5,1
    4164:	0009883a 	mov	r4,zero
    4168:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    416c:	014004c4 	movi	r5,19
    4170:	0009883a 	mov	r4,zero
    4174:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    4178:	01414b04 	movi	r5,1324
    417c:	0009883a 	mov	r4,zero
    4180:	00008e40 	call	8e4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    4184:	01416404 	movi	r5,1424
    4188:	0009883a 	mov	r4,zero
    418c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    4190:	01400204 	movi	r5,8
    4194:	0009883a 	mov	r4,zero
    4198:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    419c:	0140a404 	movi	r5,656
    41a0:	0009883a 	mov	r4,zero
    41a4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    41a8:	01401044 	movi	r5,65
    41ac:	0009883a 	mov	r4,zero
    41b0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    41b4:	014004c4 	movi	r5,19
    41b8:	0009883a 	mov	r4,zero
    41bc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    41c0:	01414e04 	movi	r5,1336
    41c4:	0009883a 	mov	r4,zero
    41c8:	00008e40 	call	8e4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    41cc:	01416604 	movi	r5,1432
    41d0:	0009883a 	mov	r4,zero
    41d4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    41d8:	01400204 	movi	r5,8
    41dc:	0009883a 	mov	r4,zero
    41e0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    41e4:	0140a404 	movi	r5,656
    41e8:	0009883a 	mov	r4,zero
    41ec:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    41f0:	01400044 	movi	r5,1
    41f4:	0009883a 	mov	r4,zero
    41f8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    41fc:	014004c4 	movi	r5,19
    4200:	0009883a 	mov	r4,zero
    4204:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    4208:	01415104 	movi	r5,1348
    420c:	0009883a 	mov	r4,zero
    4210:	00008e40 	call	8e4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    4214:	01416804 	movi	r5,1440
    4218:	0009883a 	mov	r4,zero
    421c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    4220:	01400204 	movi	r5,8
    4224:	0009883a 	mov	r4,zero
    4228:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    422c:	0140a404 	movi	r5,656
    4230:	0009883a 	mov	r4,zero
    4234:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    4238:	01401044 	movi	r5,65
    423c:	0009883a 	mov	r4,zero
    4240:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    4244:	014004c4 	movi	r5,19
    4248:	0009883a 	mov	r4,zero
    424c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    4250:	01415404 	movi	r5,1360
    4254:	0009883a 	mov	r4,zero
    4258:	00008e40 	call	8e4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    425c:	01416a04 	movi	r5,1448
    4260:	0009883a 	mov	r4,zero
    4264:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    4268:	01400204 	movi	r5,8
    426c:	0009883a 	mov	r4,zero
    4270:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    4274:	0140a404 	movi	r5,656
    4278:	0009883a 	mov	r4,zero
    427c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    4280:	01400044 	movi	r5,1
    4284:	0009883a 	mov	r4,zero
    4288:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    428c:	014004c4 	movi	r5,19
    4290:	0009883a 	mov	r4,zero
    4294:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    4298:	01415704 	movi	r5,1372
    429c:	0009883a 	mov	r4,zero
    42a0:	00008e40 	call	8e4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    42a4:	01416c04 	movi	r5,1456
    42a8:	0009883a 	mov	r4,zero
    42ac:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    42b0:	01400204 	movi	r5,8
    42b4:	0009883a 	mov	r4,zero
    42b8:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    42bc:	0140a404 	movi	r5,656
    42c0:	0009883a 	mov	r4,zero
    42c4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    42c8:	01401044 	movi	r5,65
    42cc:	0009883a 	mov	r4,zero
    42d0:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    42d4:	014004c4 	movi	r5,19
    42d8:	0009883a 	mov	r4,zero
    42dc:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    42e0:	01415a04 	movi	r5,1384
    42e4:	0009883a 	mov	r4,zero
    42e8:	00008e40 	call	8e4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    42ec:	01416e04 	movi	r5,1464
    42f0:	0009883a 	mov	r4,zero
    42f4:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    42f8:	014000c4 	movi	r5,3
    42fc:	0009883a 	mov	r4,zero
    4300:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    4304:	0140a404 	movi	r5,656
    4308:	0009883a 	mov	r4,zero
    430c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    4310:	01400044 	movi	r5,1
    4314:	0009883a 	mov	r4,zero
    4318:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    431c:	014004c4 	movi	r5,19
    4320:	0009883a 	mov	r4,zero
    4324:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    4328:	01415d04 	movi	r5,1396
    432c:	0009883a 	mov	r4,zero
    4330:	00008e40 	call	8e4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    4334:	000b883a 	mov	r5,zero
    4338:	0009883a 	mov	r4,zero
    433c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    4340:	000b883a 	mov	r5,zero
    4344:	0009883a 	mov	r4,zero
    4348:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    434c:	01408404 	movi	r5,528
    4350:	0009883a 	mov	r4,zero
    4354:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    4358:	01401044 	movi	r5,65
    435c:	0009883a 	mov	r4,zero
    4360:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    4364:	014004c4 	movi	r5,19
    4368:	0009883a 	mov	r4,zero
    436c:	00008e40 	call	8e4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    4370:	000b883a 	mov	r5,zero
    4374:	0009883a 	mov	r4,zero
    4378:	00008e40 	call	8e4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    437c:	01414004 	movi	r5,1280
    4380:	01006c04 	movi	r4,432
    4384:	00033b00 	call	33b0 <UsbWrite>

}
    4388:	0001883a 	nop
    438c:	e037883a 	mov	sp,fp
    4390:	dfc00117 	ldw	ra,4(sp)
    4394:	df000017 	ldw	fp,0(sp)
    4398:	dec00204 	addi	sp,sp,8
    439c:	f800283a 	ret

000043a0 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    43a0:	defffd04 	addi	sp,sp,-12
    43a4:	dfc00215 	stw	ra,8(sp)
    43a8:	df000115 	stw	fp,4(sp)
    43ac:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    43b0:	01005104 	movi	r4,324
    43b4:	00034080 	call	3408 <UsbRead>
    43b8:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    43bc:	000b883a 	mov	r5,zero
    43c0:	01005104 	movi	r4,324
    43c4:	00033b00 	call	33b0 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    43c8:	00000d06 	br	4400 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    43cc:	e0bfff0b 	ldhu	r2,-4(fp)
    43d0:	10000526 	beq	r2,zero,43e8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    43d4:	e0bfff0b 	ldhu	r2,-4(fp)
    43d8:	100b883a 	mov	r5,r2
    43dc:	010000b4 	movhi	r4,2
    43e0:	21226904 	addi	r4,r4,-30300
    43e4:	0009ef40 	call	9ef4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    43e8:	01005104 	movi	r4,324
    43ec:	00034080 	call	3408 <UsbRead>
    43f0:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    43f4:	000b883a 	mov	r5,zero
    43f8:	01005104 	movi	r4,324
    43fc:	00033b00 	call	33b0 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    4400:	e0bfff0b 	ldhu	r2,-4(fp)
    4404:	10840018 	cmpnei	r2,r2,4096
    4408:	103ff01e 	bne	r2,zero,43cc <__alt_exception_stack_pointer+0xf80043cc>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    440c:	e0bfff0b 	ldhu	r2,-4(fp)
}
    4410:	e037883a 	mov	sp,fp
    4414:	dfc00117 	ldw	ra,4(sp)
    4418:	df000017 	ldw	fp,0(sp)
    441c:	dec00204 	addi	sp,sp,8
    4420:	f800283a 	ret

00004424 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    4424:	defffd04 	addi	sp,sp,-12
    4428:	dfc00215 	stw	ra,8(sp)
    442c:	df000115 	stw	fp,4(sp)
    4430:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    4434:	010000c4 	movi	r4,3
    4438:	000096c0 	call	96c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    443c:	01005104 	movi	r4,324
    4440:	00034080 	call	3408 <UsbRead>
    4444:	10bfffcc 	andi	r2,r2,65535
    4448:	10840018 	cmpnei	r2,r2,4096
    444c:	1000091e 	bne	r2,zero,4474 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    4450:	000b883a 	mov	r5,zero
    4454:	01005104 	movi	r4,324
    4458:	00033b00 	call	33b0 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    445c:	0001883a 	nop
    4460:	010000c4 	movi	r4,3
    4464:	000096c0 	call	96c <IO_read>
    4468:	10bfffcc 	andi	r2,r2,65535
    446c:	1080040c 	andi	r2,r2,16
    4470:	103ffb26 	beq	r2,zero,4460 <__alt_exception_stack_pointer+0xf8004460>
		{
		}
	}
	usleep(1000);
    4474:	0100fa04 	movi	r4,1000
    4478:	00152040 	call	15204 <usleep>
	IO_write(HPI_ADDR,0x0508);
    447c:	01414204 	movi	r5,1288
    4480:	01000084 	movi	r4,2
    4484:	00008e40 	call	8e4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    4488:	0009883a 	mov	r4,zero
    448c:	000096c0 	call	96c <IO_read>
    4490:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    4494:	e0bfff0b 	ldhu	r2,-4(fp)
}
    4498:	e037883a 	mov	sp,fp
    449c:	dfc00117 	ldw	ra,4(sp)
    44a0:	df000017 	ldw	fp,0(sp)
    44a4:	dec00204 	addi	sp,sp,8
    44a8:	f800283a 	ret

000044ac <UsbPrintMem>:


void UsbPrintMem()
{
    44ac:	defffc04 	addi	sp,sp,-16
    44b0:	dfc00315 	stw	ra,12(sp)
    44b4:	df000215 	stw	fp,8(sp)
    44b8:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    44bc:	01414004 	movi	r5,1280
    44c0:	01000084 	movi	r4,2
    44c4:	00008e40 	call	8e4 <IO_write>
	for (i = 0; i <= 200; i += 2)
    44c8:	e03ffe15 	stw	zero,-8(fp)
    44cc:	00000e06 	br	4508 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    44d0:	0009883a 	mov	r4,zero
    44d4:	000096c0 	call	96c <IO_read>
    44d8:	10bfffcc 	andi	r2,r2,65535
    44dc:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    44e0:	e0bffe17 	ldw	r2,-8(fp)
    44e4:	10814004 	addi	r2,r2,1280
    44e8:	e1bfff17 	ldw	r6,-4(fp)
    44ec:	100b883a 	mov	r5,r2
    44f0:	010000b4 	movhi	r4,2
    44f4:	21227104 	addi	r4,r4,-30268
    44f8:	0009ef40 	call	9ef4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    44fc:	e0bffe17 	ldw	r2,-8(fp)
    4500:	10800084 	addi	r2,r2,2
    4504:	e0bffe15 	stw	r2,-8(fp)
    4508:	e0bffe17 	ldw	r2,-8(fp)
    450c:	10803250 	cmplti	r2,r2,201
    4510:	103fef1e 	bne	r2,zero,44d0 <__alt_exception_stack_pointer+0xf80044d0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    4514:	0001883a 	nop
    4518:	e037883a 	mov	sp,fp
    451c:	dfc00117 	ldw	ra,4(sp)
    4520:	df000017 	ldw	fp,0(sp)
    4524:	dec00204 	addi	sp,sp,8
    4528:	f800283a 	ret

0000452c <cos>:
    452c:	00a00034 	movhi	r2,32768
    4530:	defffa04 	addi	sp,sp,-24
    4534:	10bfffc4 	addi	r2,r2,-1
    4538:	00cffa74 	movhi	r3,16361
    453c:	dfc00515 	stw	ra,20(sp)
    4540:	2884703a 	and	r2,r5,r2
    4544:	18c87ec4 	addi	r3,r3,8699
    4548:	1880180e 	bge	r3,r2,45ac <cos+0x80>
    454c:	00dffc34 	movhi	r3,32752
    4550:	18ffffc4 	addi	r3,r3,-1
    4554:	1880060e 	bge	r3,r2,4570 <cos+0x44>
    4558:	280f883a 	mov	r7,r5
    455c:	200d883a 	mov	r6,r4
    4560:	00086500 	call	8650 <__subdf3>
    4564:	dfc00517 	ldw	ra,20(sp)
    4568:	dec00604 	addi	sp,sp,24
    456c:	f800283a 	ret
    4570:	d9800104 	addi	r6,sp,4
    4574:	00047080 	call	4708 <__ieee754_rem_pio2>
    4578:	108000cc 	andi	r2,r2,3
    457c:	00c00044 	movi	r3,1
    4580:	10c01726 	beq	r2,r3,45e0 <cos+0xb4>
    4584:	01000084 	movi	r4,2
    4588:	11000e26 	beq	r2,r4,45c4 <cos+0x98>
    458c:	10001c26 	beq	r2,zero,4600 <cos+0xd4>
    4590:	d9800317 	ldw	r6,12(sp)
    4594:	d9c00417 	ldw	r7,16(sp)
    4598:	d9000117 	ldw	r4,4(sp)
    459c:	d9400217 	ldw	r5,8(sp)
    45a0:	d8c00015 	stw	r3,0(sp)
    45a4:	00060b00 	call	60b0 <__kernel_sin>
    45a8:	003fee06 	br	4564 <__alt_exception_stack_pointer+0xf8004564>
    45ac:	000d883a 	mov	r6,zero
    45b0:	000f883a 	mov	r7,zero
    45b4:	0004e740 	call	4e74 <__kernel_cos>
    45b8:	dfc00517 	ldw	ra,20(sp)
    45bc:	dec00604 	addi	sp,sp,24
    45c0:	f800283a 	ret
    45c4:	d9800317 	ldw	r6,12(sp)
    45c8:	d9c00417 	ldw	r7,16(sp)
    45cc:	d9000117 	ldw	r4,4(sp)
    45d0:	d9400217 	ldw	r5,8(sp)
    45d4:	0004e740 	call	4e74 <__kernel_cos>
    45d8:	18e0003c 	xorhi	r3,r3,32768
    45dc:	003fe106 	br	4564 <__alt_exception_stack_pointer+0xf8004564>
    45e0:	d9800317 	ldw	r6,12(sp)
    45e4:	d9c00417 	ldw	r7,16(sp)
    45e8:	d9000117 	ldw	r4,4(sp)
    45ec:	d9400217 	ldw	r5,8(sp)
    45f0:	d8800015 	stw	r2,0(sp)
    45f4:	00060b00 	call	60b0 <__kernel_sin>
    45f8:	18e0003c 	xorhi	r3,r3,32768
    45fc:	003fd906 	br	4564 <__alt_exception_stack_pointer+0xf8004564>
    4600:	d9800317 	ldw	r6,12(sp)
    4604:	d9c00417 	ldw	r7,16(sp)
    4608:	d9000117 	ldw	r4,4(sp)
    460c:	d9400217 	ldw	r5,8(sp)
    4610:	0004e740 	call	4e74 <__kernel_cos>
    4614:	003fd306 	br	4564 <__alt_exception_stack_pointer+0xf8004564>

00004618 <sin>:
    4618:	00a00034 	movhi	r2,32768
    461c:	defffa04 	addi	sp,sp,-24
    4620:	10bfffc4 	addi	r2,r2,-1
    4624:	00cffa74 	movhi	r3,16361
    4628:	dfc00515 	stw	ra,20(sp)
    462c:	2884703a 	and	r2,r5,r2
    4630:	18c87ec4 	addi	r3,r3,8699
    4634:	1880180e 	bge	r3,r2,4698 <sin+0x80>
    4638:	00dffc34 	movhi	r3,32752
    463c:	18ffffc4 	addi	r3,r3,-1
    4640:	1880060e 	bge	r3,r2,465c <sin+0x44>
    4644:	280f883a 	mov	r7,r5
    4648:	200d883a 	mov	r6,r4
    464c:	00086500 	call	8650 <__subdf3>
    4650:	dfc00517 	ldw	ra,20(sp)
    4654:	dec00604 	addi	sp,sp,24
    4658:	f800283a 	ret
    465c:	d9800104 	addi	r6,sp,4
    4660:	00047080 	call	4708 <__ieee754_rem_pio2>
    4664:	108000cc 	andi	r2,r2,3
    4668:	00c00044 	movi	r3,1
    466c:	10c01926 	beq	r2,r3,46d4 <sin+0xbc>
    4670:	01000084 	movi	r4,2
    4674:	11000f26 	beq	r2,r4,46b4 <sin+0x9c>
    4678:	10001c26 	beq	r2,zero,46ec <sin+0xd4>
    467c:	d9800317 	ldw	r6,12(sp)
    4680:	d9c00417 	ldw	r7,16(sp)
    4684:	d9000117 	ldw	r4,4(sp)
    4688:	d9400217 	ldw	r5,8(sp)
    468c:	0004e740 	call	4e74 <__kernel_cos>
    4690:	18e0003c 	xorhi	r3,r3,32768
    4694:	003fee06 	br	4650 <__alt_exception_stack_pointer+0xf8004650>
    4698:	d8000015 	stw	zero,0(sp)
    469c:	000d883a 	mov	r6,zero
    46a0:	000f883a 	mov	r7,zero
    46a4:	00060b00 	call	60b0 <__kernel_sin>
    46a8:	dfc00517 	ldw	ra,20(sp)
    46ac:	dec00604 	addi	sp,sp,24
    46b0:	f800283a 	ret
    46b4:	d9800317 	ldw	r6,12(sp)
    46b8:	d9c00417 	ldw	r7,16(sp)
    46bc:	d9000117 	ldw	r4,4(sp)
    46c0:	d9400217 	ldw	r5,8(sp)
    46c4:	d8c00015 	stw	r3,0(sp)
    46c8:	00060b00 	call	60b0 <__kernel_sin>
    46cc:	18e0003c 	xorhi	r3,r3,32768
    46d0:	003fdf06 	br	4650 <__alt_exception_stack_pointer+0xf8004650>
    46d4:	d9800317 	ldw	r6,12(sp)
    46d8:	d9c00417 	ldw	r7,16(sp)
    46dc:	d9000117 	ldw	r4,4(sp)
    46e0:	d9400217 	ldw	r5,8(sp)
    46e4:	0004e740 	call	4e74 <__kernel_cos>
    46e8:	003fd906 	br	4650 <__alt_exception_stack_pointer+0xf8004650>
    46ec:	d9800317 	ldw	r6,12(sp)
    46f0:	d9c00417 	ldw	r7,16(sp)
    46f4:	d9000117 	ldw	r4,4(sp)
    46f8:	d9400217 	ldw	r5,8(sp)
    46fc:	d8c00015 	stw	r3,0(sp)
    4700:	00060b00 	call	60b0 <__kernel_sin>
    4704:	003fd206 	br	4650 <__alt_exception_stack_pointer+0xf8004650>

00004708 <__ieee754_rem_pio2>:
    4708:	02200034 	movhi	r8,32768
    470c:	deffea04 	addi	sp,sp,-88
    4710:	423fffc4 	addi	r8,r8,-1
    4714:	00cffa74 	movhi	r3,16361
    4718:	ddc01315 	stw	r23,76(sp)
    471c:	dc400d15 	stw	r17,52(sp)
    4720:	dfc01515 	stw	ra,84(sp)
    4724:	df001415 	stw	fp,80(sp)
    4728:	dd801215 	stw	r22,72(sp)
    472c:	dd401115 	stw	r21,68(sp)
    4730:	dd001015 	stw	r20,64(sp)
    4734:	dcc00f15 	stw	r19,60(sp)
    4738:	dc800e15 	stw	r18,56(sp)
    473c:	dc000c15 	stw	r16,48(sp)
    4740:	2a2e703a 	and	r23,r5,r8
    4744:	18c87ec4 	addi	r3,r3,8699
    4748:	2823883a 	mov	r17,r5
    474c:	1dc0790e 	bge	r3,r23,4934 <__ieee754_rem_pio2+0x22c>
    4750:	009000f4 	movhi	r2,16387
    4754:	10b65ec4 	addi	r2,r2,-9861
    4758:	3021883a 	mov	r16,r6
    475c:	2027883a 	mov	r19,r4
    4760:	15c02316 	blt	r2,r23,47f0 <__ieee754_rem_pio2+0xe8>
    4764:	01cffe74 	movhi	r7,16377
    4768:	39c87ec4 	addi	r7,r7,8699
    476c:	01951034 	movhi	r6,21568
    4770:	01417a0e 	bge	zero,r5,4d5c <__ieee754_rem_pio2+0x654>
    4774:	00086500 	call	8650 <__subdf3>
    4778:	1025883a 	mov	r18,r2
    477c:	008ffe74 	movhi	r2,16377
    4780:	10887ec4 	addi	r2,r2,8699
    4784:	1823883a 	mov	r17,r3
    4788:	b8808426 	beq	r23,r2,499c <__ieee754_rem_pio2+0x294>
    478c:	018698b4 	movhi	r6,6754
    4790:	01cf7474 	movhi	r7,15825
    4794:	3198cc44 	addi	r6,r6,25393
    4798:	39ed1844 	addi	r7,r7,-19359
    479c:	9009883a 	mov	r4,r18
    47a0:	180b883a 	mov	r5,r3
    47a4:	00086500 	call	8650 <__subdf3>
    47a8:	100d883a 	mov	r6,r2
    47ac:	180f883a 	mov	r7,r3
    47b0:	9009883a 	mov	r4,r18
    47b4:	880b883a 	mov	r5,r17
    47b8:	80800015 	stw	r2,0(r16)
    47bc:	80c00115 	stw	r3,4(r16)
    47c0:	00086500 	call	8650 <__subdf3>
    47c4:	018698b4 	movhi	r6,6754
    47c8:	01cf7474 	movhi	r7,15825
    47cc:	3198cc44 	addi	r6,r6,25393
    47d0:	39ed1844 	addi	r7,r7,-19359
    47d4:	1009883a 	mov	r4,r2
    47d8:	180b883a 	mov	r5,r3
    47dc:	00086500 	call	8650 <__subdf3>
    47e0:	80800215 	stw	r2,8(r16)
    47e4:	80c00315 	stw	r3,12(r16)
    47e8:	00800044 	movi	r2,1
    47ec:	00005606 	br	4948 <__ieee754_rem_pio2+0x240>
    47f0:	00904e74 	movhi	r2,16697
    47f4:	10887ec4 	addi	r2,r2,8699
    47f8:	15c0830e 	bge	r2,r23,4a08 <__ieee754_rem_pio2+0x300>
    47fc:	009ffc34 	movhi	r2,32752
    4800:	10bfffc4 	addi	r2,r2,-1
    4804:	15c05c16 	blt	r2,r23,4978 <__ieee754_rem_pio2+0x270>
    4808:	b829d53a 	srai	r20,r23,20
    480c:	a53efa84 	addi	r20,r20,-1046
    4810:	a024953a 	slli	r18,r20,20
    4814:	bca5c83a 	sub	r18,r23,r18
    4818:	900b883a 	mov	r5,r18
    481c:	0008f4c0 	call	8f4c <__fixdfsi>
    4820:	1009883a 	mov	r4,r2
    4824:	0008fcc0 	call	8fcc <__floatsidf>
    4828:	9809883a 	mov	r4,r19
    482c:	900b883a 	mov	r5,r18
    4830:	100d883a 	mov	r6,r2
    4834:	180f883a 	mov	r7,r3
    4838:	d8800215 	stw	r2,8(sp)
    483c:	d8c00315 	stw	r3,12(sp)
    4840:	00086500 	call	8650 <__subdf3>
    4844:	000d883a 	mov	r6,zero
    4848:	01d05c34 	movhi	r7,16752
    484c:	1009883a 	mov	r4,r2
    4850:	180b883a 	mov	r5,r3
    4854:	0007de40 	call	7de4 <__muldf3>
    4858:	180b883a 	mov	r5,r3
    485c:	1009883a 	mov	r4,r2
    4860:	182b883a 	mov	r21,r3
    4864:	102d883a 	mov	r22,r2
    4868:	0008f4c0 	call	8f4c <__fixdfsi>
    486c:	1009883a 	mov	r4,r2
    4870:	0008fcc0 	call	8fcc <__floatsidf>
    4874:	100d883a 	mov	r6,r2
    4878:	180f883a 	mov	r7,r3
    487c:	b009883a 	mov	r4,r22
    4880:	a80b883a 	mov	r5,r21
    4884:	1027883a 	mov	r19,r2
    4888:	1825883a 	mov	r18,r3
    488c:	d8800415 	stw	r2,16(sp)
    4890:	d8c00515 	stw	r3,20(sp)
    4894:	00086500 	call	8650 <__subdf3>
    4898:	000d883a 	mov	r6,zero
    489c:	01d05c34 	movhi	r7,16752
    48a0:	1009883a 	mov	r4,r2
    48a4:	180b883a 	mov	r5,r3
    48a8:	0007de40 	call	7de4 <__muldf3>
    48ac:	000d883a 	mov	r6,zero
    48b0:	000f883a 	mov	r7,zero
    48b4:	1009883a 	mov	r4,r2
    48b8:	180b883a 	mov	r5,r3
    48bc:	d8800615 	stw	r2,24(sp)
    48c0:	d8c00715 	stw	r3,28(sp)
    48c4:	0007b8c0 	call	7b8c <__eqdf2>
    48c8:	1001431e 	bne	r2,zero,4dd8 <__ieee754_rem_pio2+0x6d0>
    48cc:	000f883a 	mov	r7,zero
    48d0:	000d883a 	mov	r6,zero
    48d4:	9809883a 	mov	r4,r19
    48d8:	900b883a 	mov	r5,r18
    48dc:	0007b8c0 	call	7b8c <__eqdf2>
    48e0:	100f003a 	cmpeq	r7,r2,zero
    48e4:	00800084 	movi	r2,2
    48e8:	11cfc83a 	sub	r7,r2,r7
    48ec:	00800084 	movi	r2,2
    48f0:	d8800015 	stw	r2,0(sp)
    48f4:	008000b4 	movhi	r2,2
    48f8:	10a29604 	addi	r2,r2,-30120
    48fc:	d8800115 	stw	r2,4(sp)
    4900:	a00d883a 	mov	r6,r20
    4904:	800b883a 	mov	r5,r16
    4908:	d9000204 	addi	r4,sp,8
    490c:	00053180 	call	5318 <__kernel_rem_pio2>
    4910:	88000d0e 	bge	r17,zero,4948 <__ieee754_rem_pio2+0x240>
    4914:	81000117 	ldw	r4,4(r16)
    4918:	80c00317 	ldw	r3,12(r16)
    491c:	0085c83a 	sub	r2,zero,r2
    4920:	2120003c 	xorhi	r4,r4,32768
    4924:	18e0003c 	xorhi	r3,r3,32768
    4928:	81000115 	stw	r4,4(r16)
    492c:	80c00315 	stw	r3,12(r16)
    4930:	00000506 	br	4948 <__ieee754_rem_pio2+0x240>
    4934:	31000015 	stw	r4,0(r6)
    4938:	31400115 	stw	r5,4(r6)
    493c:	30000215 	stw	zero,8(r6)
    4940:	30000315 	stw	zero,12(r6)
    4944:	0005883a 	mov	r2,zero
    4948:	dfc01517 	ldw	ra,84(sp)
    494c:	df001417 	ldw	fp,80(sp)
    4950:	ddc01317 	ldw	r23,76(sp)
    4954:	dd801217 	ldw	r22,72(sp)
    4958:	dd401117 	ldw	r21,68(sp)
    495c:	dd001017 	ldw	r20,64(sp)
    4960:	dcc00f17 	ldw	r19,60(sp)
    4964:	dc800e17 	ldw	r18,56(sp)
    4968:	dc400d17 	ldw	r17,52(sp)
    496c:	dc000c17 	ldw	r16,48(sp)
    4970:	dec01604 	addi	sp,sp,88
    4974:	f800283a 	ret
    4978:	200d883a 	mov	r6,r4
    497c:	280f883a 	mov	r7,r5
    4980:	00086500 	call	8650 <__subdf3>
    4984:	80800215 	stw	r2,8(r16)
    4988:	80800015 	stw	r2,0(r16)
    498c:	80c00315 	stw	r3,12(r16)
    4990:	80c00115 	stw	r3,4(r16)
    4994:	0005883a 	mov	r2,zero
    4998:	003feb06 	br	4948 <__alt_exception_stack_pointer+0xf8004948>
    499c:	01cf7474 	movhi	r7,15825
    49a0:	9009883a 	mov	r4,r18
    49a4:	39ed1844 	addi	r7,r7,-19359
    49a8:	01869834 	movhi	r6,6752
    49ac:	180b883a 	mov	r5,r3
    49b0:	00086500 	call	8650 <__subdf3>
    49b4:	018b80f4 	movhi	r6,11779
    49b8:	01cee8f4 	movhi	r7,15267
    49bc:	319c1cc4 	addi	r6,r6,28787
    49c0:	39c66284 	addi	r7,r7,6538
    49c4:	1009883a 	mov	r4,r2
    49c8:	180b883a 	mov	r5,r3
    49cc:	1025883a 	mov	r18,r2
    49d0:	1823883a 	mov	r17,r3
    49d4:	00086500 	call	8650 <__subdf3>
    49d8:	100d883a 	mov	r6,r2
    49dc:	180f883a 	mov	r7,r3
    49e0:	9009883a 	mov	r4,r18
    49e4:	880b883a 	mov	r5,r17
    49e8:	80800015 	stw	r2,0(r16)
    49ec:	80c00115 	stw	r3,4(r16)
    49f0:	00086500 	call	8650 <__subdf3>
    49f4:	018b80f4 	movhi	r6,11779
    49f8:	01cee8f4 	movhi	r7,15267
    49fc:	319c1cc4 	addi	r6,r6,28787
    4a00:	39c66284 	addi	r7,r7,6538
    4a04:	003f7306 	br	47d4 <__alt_exception_stack_pointer+0xf80047d4>
    4a08:	000637c0 	call	637c <fabs>
    4a0c:	019b72b4 	movhi	r6,28106
    4a10:	01cff934 	movhi	r7,16356
    4a14:	31b220c4 	addi	r6,r6,-14205
    4a18:	39d7cc04 	addi	r7,r7,24368
    4a1c:	1009883a 	mov	r4,r2
    4a20:	180b883a 	mov	r5,r3
    4a24:	102d883a 	mov	r22,r2
    4a28:	182b883a 	mov	r21,r3
    4a2c:	0007de40 	call	7de4 <__muldf3>
    4a30:	000d883a 	mov	r6,zero
    4a34:	01cff834 	movhi	r7,16352
    4a38:	1009883a 	mov	r4,r2
    4a3c:	180b883a 	mov	r5,r3
    4a40:	00069100 	call	6910 <__adddf3>
    4a44:	180b883a 	mov	r5,r3
    4a48:	1009883a 	mov	r4,r2
    4a4c:	0008f4c0 	call	8f4c <__fixdfsi>
    4a50:	1009883a 	mov	r4,r2
    4a54:	1025883a 	mov	r18,r2
    4a58:	0008fcc0 	call	8fcc <__floatsidf>
    4a5c:	01cffe74 	movhi	r7,16377
    4a60:	39c87ec4 	addi	r7,r7,8699
    4a64:	01951034 	movhi	r6,21568
    4a68:	1009883a 	mov	r4,r2
    4a6c:	180b883a 	mov	r5,r3
    4a70:	1029883a 	mov	r20,r2
    4a74:	1827883a 	mov	r19,r3
    4a78:	0007de40 	call	7de4 <__muldf3>
    4a7c:	b009883a 	mov	r4,r22
    4a80:	a80b883a 	mov	r5,r21
    4a84:	100d883a 	mov	r6,r2
    4a88:	180f883a 	mov	r7,r3
    4a8c:	00086500 	call	8650 <__subdf3>
    4a90:	018698b4 	movhi	r6,6754
    4a94:	01cf7474 	movhi	r7,15825
    4a98:	a009883a 	mov	r4,r20
    4a9c:	3198cc44 	addi	r6,r6,25393
    4aa0:	39ed1844 	addi	r7,r7,-19359
    4aa4:	980b883a 	mov	r5,r19
    4aa8:	1039883a 	mov	fp,r2
    4aac:	d8c00815 	stw	r3,32(sp)
    4ab0:	0007de40 	call	7de4 <__muldf3>
    4ab4:	010007c4 	movi	r4,31
    4ab8:	e017883a 	mov	r11,fp
    4abc:	da800817 	ldw	r10,32(sp)
    4ac0:	102d883a 	mov	r22,r2
    4ac4:	182b883a 	mov	r21,r3
    4ac8:	24802816 	blt	r4,r18,4b6c <__ieee754_rem_pio2+0x464>
    4acc:	913fffc4 	addi	r4,r18,-1
    4ad0:	2109883a 	add	r4,r4,r4
    4ad4:	014000b4 	movhi	r5,2
    4ad8:	2109883a 	add	r4,r4,r4
    4adc:	29627604 	addi	r5,r5,-30248
    4ae0:	2909883a 	add	r4,r5,r4
    4ae4:	21000017 	ldw	r4,0(r4)
    4ae8:	b9002026 	beq	r23,r4,4b6c <__ieee754_rem_pio2+0x464>
    4aec:	100d883a 	mov	r6,r2
    4af0:	180f883a 	mov	r7,r3
    4af4:	e009883a 	mov	r4,fp
    4af8:	500b883a 	mov	r5,r10
    4afc:	da800b15 	stw	r10,44(sp)
    4b00:	df000a15 	stw	fp,40(sp)
    4b04:	00086500 	call	8650 <__subdf3>
    4b08:	da800b17 	ldw	r10,44(sp)
    4b0c:	dac00a17 	ldw	r11,40(sp)
    4b10:	1019883a 	mov	r12,r2
    4b14:	1813883a 	mov	r9,r3
    4b18:	80800015 	stw	r2,0(r16)
    4b1c:	80c00115 	stw	r3,4(r16)
    4b20:	600d883a 	mov	r6,r12
    4b24:	480f883a 	mov	r7,r9
    4b28:	5809883a 	mov	r4,r11
    4b2c:	500b883a 	mov	r5,r10
    4b30:	da400b15 	stw	r9,44(sp)
    4b34:	db000a15 	stw	r12,40(sp)
    4b38:	00086500 	call	8650 <__subdf3>
    4b3c:	b00d883a 	mov	r6,r22
    4b40:	a80f883a 	mov	r7,r21
    4b44:	1009883a 	mov	r4,r2
    4b48:	180b883a 	mov	r5,r3
    4b4c:	00086500 	call	8650 <__subdf3>
    4b50:	80800215 	stw	r2,8(r16)
    4b54:	80c00315 	stw	r3,12(r16)
    4b58:	da400b17 	ldw	r9,44(sp)
    4b5c:	db000a17 	ldw	r12,40(sp)
    4b60:	88009f16 	blt	r17,zero,4de0 <__ieee754_rem_pio2+0x6d8>
    4b64:	9005883a 	mov	r2,r18
    4b68:	003f7706 	br	4948 <__alt_exception_stack_pointer+0xf8004948>
    4b6c:	d9400817 	ldw	r5,32(sp)
    4b70:	100d883a 	mov	r6,r2
    4b74:	180f883a 	mov	r7,r3
    4b78:	e009883a 	mov	r4,fp
    4b7c:	da800b15 	stw	r10,44(sp)
    4b80:	dac00a15 	stw	r11,40(sp)
    4b84:	00086500 	call	8650 <__subdf3>
    4b88:	1019883a 	mov	r12,r2
    4b8c:	1804d53a 	srli	r2,r3,20
    4b90:	b811d53a 	srai	r8,r23,20
    4b94:	1813883a 	mov	r9,r3
    4b98:	1081ffcc 	andi	r2,r2,2047
    4b9c:	80c00115 	stw	r3,4(r16)
    4ba0:	83000015 	stw	r12,0(r16)
    4ba4:	4085c83a 	sub	r2,r8,r2
    4ba8:	00c00404 	movi	r3,16
    4bac:	da800b17 	ldw	r10,44(sp)
    4bb0:	dac00a17 	ldw	r11,40(sp)
    4bb4:	18bfda0e 	bge	r3,r2,4b20 <__alt_exception_stack_pointer+0xf8004b20>
    4bb8:	01cf7474 	movhi	r7,15825
    4bbc:	39ed1844 	addi	r7,r7,-19359
    4bc0:	01869834 	movhi	r6,6752
    4bc4:	a009883a 	mov	r4,r20
    4bc8:	980b883a 	mov	r5,r19
    4bcc:	da000a15 	stw	r8,40(sp)
    4bd0:	0007de40 	call	7de4 <__muldf3>
    4bd4:	d9400817 	ldw	r5,32(sp)
    4bd8:	100d883a 	mov	r6,r2
    4bdc:	180f883a 	mov	r7,r3
    4be0:	e009883a 	mov	r4,fp
    4be4:	102d883a 	mov	r22,r2
    4be8:	182b883a 	mov	r21,r3
    4bec:	00086500 	call	8650 <__subdf3>
    4bf0:	d9400817 	ldw	r5,32(sp)
    4bf4:	100d883a 	mov	r6,r2
    4bf8:	180f883a 	mov	r7,r3
    4bfc:	e009883a 	mov	r4,fp
    4c00:	182f883a 	mov	r23,r3
    4c04:	d8800915 	stw	r2,36(sp)
    4c08:	00086500 	call	8650 <__subdf3>
    4c0c:	b00d883a 	mov	r6,r22
    4c10:	a80f883a 	mov	r7,r21
    4c14:	1009883a 	mov	r4,r2
    4c18:	180b883a 	mov	r5,r3
    4c1c:	00086500 	call	8650 <__subdf3>
    4c20:	018b80f4 	movhi	r6,11779
    4c24:	01cee8f4 	movhi	r7,15267
    4c28:	319c1cc4 	addi	r6,r6,28787
    4c2c:	39c66284 	addi	r7,r7,6538
    4c30:	a009883a 	mov	r4,r20
    4c34:	980b883a 	mov	r5,r19
    4c38:	102d883a 	mov	r22,r2
    4c3c:	182b883a 	mov	r21,r3
    4c40:	0007de40 	call	7de4 <__muldf3>
    4c44:	b00d883a 	mov	r6,r22
    4c48:	a80f883a 	mov	r7,r21
    4c4c:	1009883a 	mov	r4,r2
    4c50:	180b883a 	mov	r5,r3
    4c54:	00086500 	call	8650 <__subdf3>
    4c58:	d9000917 	ldw	r4,36(sp)
    4c5c:	100d883a 	mov	r6,r2
    4c60:	180f883a 	mov	r7,r3
    4c64:	b80b883a 	mov	r5,r23
    4c68:	102d883a 	mov	r22,r2
    4c6c:	182b883a 	mov	r21,r3
    4c70:	00086500 	call	8650 <__subdf3>
    4c74:	1019883a 	mov	r12,r2
    4c78:	1804d53a 	srli	r2,r3,20
    4c7c:	da000a17 	ldw	r8,40(sp)
    4c80:	83000015 	stw	r12,0(r16)
    4c84:	1081ffcc 	andi	r2,r2,2047
    4c88:	4091c83a 	sub	r8,r8,r2
    4c8c:	80c00115 	stw	r3,4(r16)
    4c90:	00800c44 	movi	r2,49
    4c94:	1813883a 	mov	r9,r3
    4c98:	1200730e 	bge	r2,r8,4e68 <__ieee754_rem_pio2+0x760>
    4c9c:	01cee8f4 	movhi	r7,15267
    4ca0:	39c66284 	addi	r7,r7,6538
    4ca4:	018b8034 	movhi	r6,11776
    4ca8:	a009883a 	mov	r4,r20
    4cac:	980b883a 	mov	r5,r19
    4cb0:	0007de40 	call	7de4 <__muldf3>
    4cb4:	d9000917 	ldw	r4,36(sp)
    4cb8:	100d883a 	mov	r6,r2
    4cbc:	180f883a 	mov	r7,r3
    4cc0:	b80b883a 	mov	r5,r23
    4cc4:	102d883a 	mov	r22,r2
    4cc8:	182b883a 	mov	r21,r3
    4ccc:	00086500 	call	8650 <__subdf3>
    4cd0:	d9000917 	ldw	r4,36(sp)
    4cd4:	100d883a 	mov	r6,r2
    4cd8:	180f883a 	mov	r7,r3
    4cdc:	b80b883a 	mov	r5,r23
    4ce0:	d8c00b15 	stw	r3,44(sp)
    4ce4:	d8800a15 	stw	r2,40(sp)
    4ce8:	00086500 	call	8650 <__subdf3>
    4cec:	b00d883a 	mov	r6,r22
    4cf0:	a80f883a 	mov	r7,r21
    4cf4:	1009883a 	mov	r4,r2
    4cf8:	180b883a 	mov	r5,r3
    4cfc:	00086500 	call	8650 <__subdf3>
    4d00:	01894834 	movhi	r6,9504
    4d04:	01ce5f34 	movhi	r7,14716
    4d08:	31927044 	addi	r6,r6,18881
    4d0c:	39e0e684 	addi	r7,r7,-31846
    4d10:	a009883a 	mov	r4,r20
    4d14:	980b883a 	mov	r5,r19
    4d18:	102d883a 	mov	r22,r2
    4d1c:	182b883a 	mov	r21,r3
    4d20:	0007de40 	call	7de4 <__muldf3>
    4d24:	b00d883a 	mov	r6,r22
    4d28:	a80f883a 	mov	r7,r21
    4d2c:	1009883a 	mov	r4,r2
    4d30:	180b883a 	mov	r5,r3
    4d34:	00086500 	call	8650 <__subdf3>
    4d38:	dac00a17 	ldw	r11,40(sp)
    4d3c:	da800b17 	ldw	r10,44(sp)
    4d40:	102d883a 	mov	r22,r2
    4d44:	182b883a 	mov	r21,r3
    4d48:	100d883a 	mov	r6,r2
    4d4c:	180f883a 	mov	r7,r3
    4d50:	5809883a 	mov	r4,r11
    4d54:	500b883a 	mov	r5,r10
    4d58:	003f6a06 	br	4b04 <__alt_exception_stack_pointer+0xf8004b04>
    4d5c:	00069100 	call	6910 <__adddf3>
    4d60:	1025883a 	mov	r18,r2
    4d64:	008ffe74 	movhi	r2,16377
    4d68:	10887ec4 	addi	r2,r2,8699
    4d6c:	1823883a 	mov	r17,r3
    4d70:	b8802226 	beq	r23,r2,4dfc <__ieee754_rem_pio2+0x6f4>
    4d74:	018698b4 	movhi	r6,6754
    4d78:	01cf7474 	movhi	r7,15825
    4d7c:	3198cc44 	addi	r6,r6,25393
    4d80:	39ed1844 	addi	r7,r7,-19359
    4d84:	9009883a 	mov	r4,r18
    4d88:	180b883a 	mov	r5,r3
    4d8c:	00069100 	call	6910 <__adddf3>
    4d90:	100d883a 	mov	r6,r2
    4d94:	180f883a 	mov	r7,r3
    4d98:	9009883a 	mov	r4,r18
    4d9c:	880b883a 	mov	r5,r17
    4da0:	80800015 	stw	r2,0(r16)
    4da4:	80c00115 	stw	r3,4(r16)
    4da8:	00086500 	call	8650 <__subdf3>
    4dac:	018698b4 	movhi	r6,6754
    4db0:	01cf7474 	movhi	r7,15825
    4db4:	3198cc44 	addi	r6,r6,25393
    4db8:	39ed1844 	addi	r7,r7,-19359
    4dbc:	1009883a 	mov	r4,r2
    4dc0:	180b883a 	mov	r5,r3
    4dc4:	00069100 	call	6910 <__adddf3>
    4dc8:	80800215 	stw	r2,8(r16)
    4dcc:	80c00315 	stw	r3,12(r16)
    4dd0:	00bfffc4 	movi	r2,-1
    4dd4:	003edc06 	br	4948 <__alt_exception_stack_pointer+0xf8004948>
    4dd8:	01c000c4 	movi	r7,3
    4ddc:	003ec306 	br	48ec <__alt_exception_stack_pointer+0xf80048ec>
    4de0:	4a60003c 	xorhi	r9,r9,32768
    4de4:	18e0003c 	xorhi	r3,r3,32768
    4de8:	83000015 	stw	r12,0(r16)
    4dec:	82400115 	stw	r9,4(r16)
    4df0:	80c00315 	stw	r3,12(r16)
    4df4:	0485c83a 	sub	r2,zero,r18
    4df8:	003ed306 	br	4948 <__alt_exception_stack_pointer+0xf8004948>
    4dfc:	01cf7474 	movhi	r7,15825
    4e00:	9009883a 	mov	r4,r18
    4e04:	39ed1844 	addi	r7,r7,-19359
    4e08:	01869834 	movhi	r6,6752
    4e0c:	180b883a 	mov	r5,r3
    4e10:	00069100 	call	6910 <__adddf3>
    4e14:	018b80f4 	movhi	r6,11779
    4e18:	01cee8f4 	movhi	r7,15267
    4e1c:	319c1cc4 	addi	r6,r6,28787
    4e20:	39c66284 	addi	r7,r7,6538
    4e24:	1009883a 	mov	r4,r2
    4e28:	180b883a 	mov	r5,r3
    4e2c:	1025883a 	mov	r18,r2
    4e30:	1823883a 	mov	r17,r3
    4e34:	00069100 	call	6910 <__adddf3>
    4e38:	100d883a 	mov	r6,r2
    4e3c:	180f883a 	mov	r7,r3
    4e40:	9009883a 	mov	r4,r18
    4e44:	880b883a 	mov	r5,r17
    4e48:	80800015 	stw	r2,0(r16)
    4e4c:	80c00115 	stw	r3,4(r16)
    4e50:	00086500 	call	8650 <__subdf3>
    4e54:	018b80f4 	movhi	r6,11779
    4e58:	01cee8f4 	movhi	r7,15267
    4e5c:	319c1cc4 	addi	r6,r6,28787
    4e60:	39c66284 	addi	r7,r7,6538
    4e64:	003fd506 	br	4dbc <__alt_exception_stack_pointer+0xf8004dbc>
    4e68:	dac00917 	ldw	r11,36(sp)
    4e6c:	b815883a 	mov	r10,r23
    4e70:	003f2b06 	br	4b20 <__alt_exception_stack_pointer+0xf8004b20>

00004e74 <__kernel_cos>:
    4e74:	defff304 	addi	sp,sp,-52
    4e78:	dc000315 	stw	r16,12(sp)
    4e7c:	04200034 	movhi	r16,32768
    4e80:	843fffc4 	addi	r16,r16,-1
    4e84:	008f9034 	movhi	r2,15936
    4e88:	df000b15 	stw	fp,44(sp)
    4e8c:	ddc00a15 	stw	r23,40(sp)
    4e90:	dd800915 	stw	r22,36(sp)
    4e94:	dcc00615 	stw	r19,24(sp)
    4e98:	dfc00c15 	stw	ra,48(sp)
    4e9c:	dd400815 	stw	r21,32(sp)
    4ea0:	dd000715 	stw	r20,28(sp)
    4ea4:	dc800515 	stw	r18,20(sp)
    4ea8:	dc400415 	stw	r17,16(sp)
    4eac:	2c20703a 	and	r16,r5,r16
    4eb0:	10bfffc4 	addi	r2,r2,-1
    4eb4:	2827883a 	mov	r19,r5
    4eb8:	202d883a 	mov	r22,r4
    4ebc:	302f883a 	mov	r23,r6
    4ec0:	3839883a 	mov	fp,r7
    4ec4:	14007516 	blt	r2,r16,509c <__kernel_cos+0x228>
    4ec8:	0008f4c0 	call	8f4c <__fixdfsi>
    4ecc:	10010f26 	beq	r2,zero,530c <__kernel_cos+0x498>
    4ed0:	b00d883a 	mov	r6,r22
    4ed4:	980f883a 	mov	r7,r19
    4ed8:	b009883a 	mov	r4,r22
    4edc:	980b883a 	mov	r5,r19
    4ee0:	0007de40 	call	7de4 <__muldf3>
    4ee4:	01afa234 	movhi	r6,48776
    4ee8:	01ef6a74 	movhi	r7,48553
    4eec:	318e3504 	addi	r6,r6,14548
    4ef0:	39feba44 	addi	r7,r7,-1303
    4ef4:	1009883a 	mov	r4,r2
    4ef8:	180b883a 	mov	r5,r3
    4efc:	102b883a 	mov	r21,r2
    4f00:	1829883a 	mov	r20,r3
    4f04:	0007de40 	call	7de4 <__muldf3>
    4f08:	01af6d74 	movhi	r6,48565
    4f0c:	01cf88b4 	movhi	r7,15906
    4f10:	31ac7104 	addi	r6,r6,-20028
    4f14:	39fba784 	addi	r7,r7,-4450
    4f18:	1009883a 	mov	r4,r2
    4f1c:	180b883a 	mov	r5,r3
    4f20:	00069100 	call	6910 <__adddf3>
    4f24:	a80d883a 	mov	r6,r21
    4f28:	a00f883a 	mov	r7,r20
    4f2c:	1009883a 	mov	r4,r2
    4f30:	180b883a 	mov	r5,r3
    4f34:	0007de40 	call	7de4 <__muldf3>
    4f38:	01a02734 	movhi	r6,32924
    4f3c:	01cfa4b4 	movhi	r7,16018
    4f40:	3194ab44 	addi	r6,r6,21165
    4f44:	39df93c4 	addi	r7,r7,32335
    4f48:	1009883a 	mov	r4,r2
    4f4c:	180b883a 	mov	r5,r3
    4f50:	00086500 	call	8650 <__subdf3>
    4f54:	a80d883a 	mov	r6,r21
    4f58:	a00f883a 	mov	r7,r20
    4f5c:	1009883a 	mov	r4,r2
    4f60:	180b883a 	mov	r5,r3
    4f64:	0007de40 	call	7de4 <__muldf3>
    4f68:	018672f4 	movhi	r6,6603
    4f6c:	01cfbeb4 	movhi	r7,16122
    4f70:	31856404 	addi	r6,r6,5520
    4f74:	39c06804 	addi	r7,r7,416
    4f78:	1009883a 	mov	r4,r2
    4f7c:	180b883a 	mov	r5,r3
    4f80:	00069100 	call	6910 <__adddf3>
    4f84:	a80d883a 	mov	r6,r21
    4f88:	a00f883a 	mov	r7,r20
    4f8c:	1009883a 	mov	r4,r2
    4f90:	180b883a 	mov	r5,r3
    4f94:	0007de40 	call	7de4 <__muldf3>
    4f98:	0185b074 	movhi	r6,5825
    4f9c:	01cfd5f4 	movhi	r7,16215
    4fa0:	31945dc4 	addi	r6,r6,20855
    4fa4:	39f05b04 	addi	r7,r7,-16020
    4fa8:	1009883a 	mov	r4,r2
    4fac:	180b883a 	mov	r5,r3
    4fb0:	00086500 	call	8650 <__subdf3>
    4fb4:	a80d883a 	mov	r6,r21
    4fb8:	a00f883a 	mov	r7,r20
    4fbc:	1009883a 	mov	r4,r2
    4fc0:	180b883a 	mov	r5,r3
    4fc4:	0007de40 	call	7de4 <__muldf3>
    4fc8:	01955574 	movhi	r6,21845
    4fcc:	01cfe974 	movhi	r7,16293
    4fd0:	31955304 	addi	r6,r6,21836
    4fd4:	39d55544 	addi	r7,r7,21845
    4fd8:	1009883a 	mov	r4,r2
    4fdc:	180b883a 	mov	r5,r3
    4fe0:	00069100 	call	6910 <__adddf3>
    4fe4:	a80d883a 	mov	r6,r21
    4fe8:	a00f883a 	mov	r7,r20
    4fec:	1009883a 	mov	r4,r2
    4ff0:	180b883a 	mov	r5,r3
    4ff4:	0007de40 	call	7de4 <__muldf3>
    4ff8:	1017883a 	mov	r11,r2
    4ffc:	1815883a 	mov	r10,r3
    5000:	a809883a 	mov	r4,r21
    5004:	a00b883a 	mov	r5,r20
    5008:	000d883a 	mov	r6,zero
    500c:	01cff834 	movhi	r7,16352
    5010:	da800215 	stw	r10,8(sp)
    5014:	dac00115 	stw	r11,4(sp)
    5018:	0007de40 	call	7de4 <__muldf3>
    501c:	dac00117 	ldw	r11,4(sp)
    5020:	da800217 	ldw	r10,8(sp)
    5024:	a809883a 	mov	r4,r21
    5028:	580d883a 	mov	r6,r11
    502c:	500f883a 	mov	r7,r10
    5030:	a00b883a 	mov	r5,r20
    5034:	1023883a 	mov	r17,r2
    5038:	1821883a 	mov	r16,r3
    503c:	0007de40 	call	7de4 <__muldf3>
    5040:	b80d883a 	mov	r6,r23
    5044:	e00f883a 	mov	r7,fp
    5048:	b009883a 	mov	r4,r22
    504c:	980b883a 	mov	r5,r19
    5050:	1029883a 	mov	r20,r2
    5054:	1825883a 	mov	r18,r3
    5058:	0007de40 	call	7de4 <__muldf3>
    505c:	a009883a 	mov	r4,r20
    5060:	900b883a 	mov	r5,r18
    5064:	100d883a 	mov	r6,r2
    5068:	180f883a 	mov	r7,r3
    506c:	00086500 	call	8650 <__subdf3>
    5070:	8809883a 	mov	r4,r17
    5074:	800b883a 	mov	r5,r16
    5078:	100d883a 	mov	r6,r2
    507c:	180f883a 	mov	r7,r3
    5080:	00086500 	call	8650 <__subdf3>
    5084:	100d883a 	mov	r6,r2
    5088:	180f883a 	mov	r7,r3
    508c:	0009883a 	mov	r4,zero
    5090:	014ffc34 	movhi	r5,16368
    5094:	00086500 	call	8650 <__subdf3>
    5098:	00008b06 	br	52c8 <__kernel_cos+0x454>
    509c:	200d883a 	mov	r6,r4
    50a0:	280f883a 	mov	r7,r5
    50a4:	0007de40 	call	7de4 <__muldf3>
    50a8:	01afa234 	movhi	r6,48776
    50ac:	01ef6a74 	movhi	r7,48553
    50b0:	318e3504 	addi	r6,r6,14548
    50b4:	39feba44 	addi	r7,r7,-1303
    50b8:	1009883a 	mov	r4,r2
    50bc:	180b883a 	mov	r5,r3
    50c0:	1025883a 	mov	r18,r2
    50c4:	1823883a 	mov	r17,r3
    50c8:	0007de40 	call	7de4 <__muldf3>
    50cc:	01af6d74 	movhi	r6,48565
    50d0:	01cf88b4 	movhi	r7,15906
    50d4:	31ac7104 	addi	r6,r6,-20028
    50d8:	39fba784 	addi	r7,r7,-4450
    50dc:	1009883a 	mov	r4,r2
    50e0:	180b883a 	mov	r5,r3
    50e4:	00069100 	call	6910 <__adddf3>
    50e8:	900d883a 	mov	r6,r18
    50ec:	880f883a 	mov	r7,r17
    50f0:	1009883a 	mov	r4,r2
    50f4:	180b883a 	mov	r5,r3
    50f8:	0007de40 	call	7de4 <__muldf3>
    50fc:	01a02734 	movhi	r6,32924
    5100:	01cfa4b4 	movhi	r7,16018
    5104:	3194ab44 	addi	r6,r6,21165
    5108:	39df93c4 	addi	r7,r7,32335
    510c:	1009883a 	mov	r4,r2
    5110:	180b883a 	mov	r5,r3
    5114:	00086500 	call	8650 <__subdf3>
    5118:	900d883a 	mov	r6,r18
    511c:	880f883a 	mov	r7,r17
    5120:	1009883a 	mov	r4,r2
    5124:	180b883a 	mov	r5,r3
    5128:	0007de40 	call	7de4 <__muldf3>
    512c:	018672f4 	movhi	r6,6603
    5130:	01cfbeb4 	movhi	r7,16122
    5134:	31856404 	addi	r6,r6,5520
    5138:	39c06804 	addi	r7,r7,416
    513c:	1009883a 	mov	r4,r2
    5140:	180b883a 	mov	r5,r3
    5144:	00069100 	call	6910 <__adddf3>
    5148:	900d883a 	mov	r6,r18
    514c:	880f883a 	mov	r7,r17
    5150:	1009883a 	mov	r4,r2
    5154:	180b883a 	mov	r5,r3
    5158:	0007de40 	call	7de4 <__muldf3>
    515c:	0185b074 	movhi	r6,5825
    5160:	01cfd5f4 	movhi	r7,16215
    5164:	31945dc4 	addi	r6,r6,20855
    5168:	39f05b04 	addi	r7,r7,-16020
    516c:	1009883a 	mov	r4,r2
    5170:	180b883a 	mov	r5,r3
    5174:	00086500 	call	8650 <__subdf3>
    5178:	900d883a 	mov	r6,r18
    517c:	880f883a 	mov	r7,r17
    5180:	1009883a 	mov	r4,r2
    5184:	180b883a 	mov	r5,r3
    5188:	0007de40 	call	7de4 <__muldf3>
    518c:	01955574 	movhi	r6,21845
    5190:	01cfe974 	movhi	r7,16293
    5194:	31955304 	addi	r6,r6,21836
    5198:	39d55544 	addi	r7,r7,21845
    519c:	1009883a 	mov	r4,r2
    51a0:	180b883a 	mov	r5,r3
    51a4:	00069100 	call	6910 <__adddf3>
    51a8:	900d883a 	mov	r6,r18
    51ac:	880f883a 	mov	r7,r17
    51b0:	1009883a 	mov	r4,r2
    51b4:	180b883a 	mov	r5,r3
    51b8:	0007de40 	call	7de4 <__muldf3>
    51bc:	1013883a 	mov	r9,r2
    51c0:	1017883a 	mov	r11,r2
    51c4:	008ff4f4 	movhi	r2,16339
    51c8:	108ccc84 	addi	r2,r2,13106
    51cc:	1811883a 	mov	r8,r3
    51d0:	902b883a 	mov	r21,r18
    51d4:	8829883a 	mov	r20,r17
    51d8:	1815883a 	mov	r10,r3
    51dc:	143f880e 	bge	r2,r16,5000 <__alt_exception_stack_pointer+0xf8005000>
    51e0:	008ffa74 	movhi	r2,16361
    51e4:	14004416 	blt	r2,r16,52f8 <__kernel_cos+0x484>
    51e8:	00bff834 	movhi	r2,65504
    51ec:	80a1883a 	add	r16,r16,r2
    51f0:	000d883a 	mov	r6,zero
    51f4:	800f883a 	mov	r7,r16
    51f8:	0009883a 	mov	r4,zero
    51fc:	014ffc34 	movhi	r5,16368
    5200:	da400115 	stw	r9,4(sp)
    5204:	d8c00215 	stw	r3,8(sp)
    5208:	00086500 	call	8650 <__subdf3>
    520c:	da000217 	ldw	r8,8(sp)
    5210:	da400117 	ldw	r9,4(sp)
    5214:	102b883a 	mov	r21,r2
    5218:	d8c00015 	stw	r3,0(sp)
    521c:	9009883a 	mov	r4,r18
    5220:	880b883a 	mov	r5,r17
    5224:	000d883a 	mov	r6,zero
    5228:	01cff834 	movhi	r7,16352
    522c:	da000215 	stw	r8,8(sp)
    5230:	da400115 	stw	r9,4(sp)
    5234:	0007de40 	call	7de4 <__muldf3>
    5238:	800f883a 	mov	r7,r16
    523c:	000d883a 	mov	r6,zero
    5240:	1009883a 	mov	r4,r2
    5244:	180b883a 	mov	r5,r3
    5248:	00086500 	call	8650 <__subdf3>
    524c:	da400117 	ldw	r9,4(sp)
    5250:	da000217 	ldw	r8,8(sp)
    5254:	9009883a 	mov	r4,r18
    5258:	480d883a 	mov	r6,r9
    525c:	400f883a 	mov	r7,r8
    5260:	880b883a 	mov	r5,r17
    5264:	1029883a 	mov	r20,r2
    5268:	1821883a 	mov	r16,r3
    526c:	0007de40 	call	7de4 <__muldf3>
    5270:	b80d883a 	mov	r6,r23
    5274:	e00f883a 	mov	r7,fp
    5278:	b009883a 	mov	r4,r22
    527c:	980b883a 	mov	r5,r19
    5280:	1025883a 	mov	r18,r2
    5284:	1823883a 	mov	r17,r3
    5288:	0007de40 	call	7de4 <__muldf3>
    528c:	100d883a 	mov	r6,r2
    5290:	180f883a 	mov	r7,r3
    5294:	9009883a 	mov	r4,r18
    5298:	880b883a 	mov	r5,r17
    529c:	00086500 	call	8650 <__subdf3>
    52a0:	100d883a 	mov	r6,r2
    52a4:	180f883a 	mov	r7,r3
    52a8:	a009883a 	mov	r4,r20
    52ac:	800b883a 	mov	r5,r16
    52b0:	00086500 	call	8650 <__subdf3>
    52b4:	d9400017 	ldw	r5,0(sp)
    52b8:	100d883a 	mov	r6,r2
    52bc:	180f883a 	mov	r7,r3
    52c0:	a809883a 	mov	r4,r21
    52c4:	00086500 	call	8650 <__subdf3>
    52c8:	dfc00c17 	ldw	ra,48(sp)
    52cc:	df000b17 	ldw	fp,44(sp)
    52d0:	ddc00a17 	ldw	r23,40(sp)
    52d4:	dd800917 	ldw	r22,36(sp)
    52d8:	dd400817 	ldw	r21,32(sp)
    52dc:	dd000717 	ldw	r20,28(sp)
    52e0:	dcc00617 	ldw	r19,24(sp)
    52e4:	dc800517 	ldw	r18,20(sp)
    52e8:	dc400417 	ldw	r17,16(sp)
    52ec:	dc000317 	ldw	r16,12(sp)
    52f0:	dec00d04 	addi	sp,sp,52
    52f4:	f800283a 	ret
    52f8:	008ff9f4 	movhi	r2,16359
    52fc:	002b883a 	mov	r21,zero
    5300:	d8800015 	stw	r2,0(sp)
    5304:	040ff4b4 	movhi	r16,16338
    5308:	003fc406 	br	521c <__alt_exception_stack_pointer+0xf800521c>
    530c:	0005883a 	mov	r2,zero
    5310:	00cffc34 	movhi	r3,16368
    5314:	003fec06 	br	52c8 <__alt_exception_stack_pointer+0xf80052c8>

00005318 <__kernel_rem_pio2>:
    5318:	deff5a04 	addi	sp,sp,-664
    531c:	da00a617 	ldw	r8,664(sp)
    5320:	00c000b4 	movhi	r3,2
    5324:	18e2e804 	addi	r3,r3,-29792
    5328:	4205883a 	add	r2,r8,r8
    532c:	1085883a 	add	r2,r2,r2
    5330:	1885883a 	add	r2,r3,r2
    5334:	d9008e15 	stw	r4,568(sp)
    5338:	d9408f15 	stw	r5,572(sp)
    533c:	313fff44 	addi	r4,r6,-3
    5340:	01400604 	movi	r5,24
    5344:	dd80a215 	stw	r22,648(sp)
    5348:	dc009c15 	stw	r16,624(sp)
    534c:	dfc0a515 	stw	ra,660(sp)
    5350:	df00a415 	stw	fp,656(sp)
    5354:	ddc0a315 	stw	r23,652(sp)
    5358:	dd40a115 	stw	r21,644(sp)
    535c:	dd00a015 	stw	r20,640(sp)
    5360:	dcc09f15 	stw	r19,636(sp)
    5364:	dc809e15 	stw	r18,632(sp)
    5368:	dc409d15 	stw	r17,628(sp)
    536c:	3021883a 	mov	r16,r6
    5370:	d9c09315 	stw	r7,588(sp)
    5374:	15800017 	ldw	r22,0(r2)
    5378:	00067340 	call	6734 <__divsi3>
    537c:	da009317 	ldw	r8,588(sp)
    5380:	d8809215 	stw	r2,584(sp)
    5384:	423fffc4 	addi	r8,r8,-1
    5388:	da008d15 	stw	r8,564(sp)
    538c:	10033d16 	blt	r2,zero,6084 <__kernel_rem_pio2+0xd6c>
    5390:	da009217 	ldw	r8,584(sp)
    5394:	017ffa04 	movi	r5,-24
    5398:	42000044 	addi	r8,r8,1
    539c:	4009883a 	mov	r4,r8
    53a0:	da009515 	stw	r8,596(sp)
    53a4:	00068e80 	call	68e8 <__mulsi3>
    53a8:	da008d17 	ldw	r8,564(sp)
    53ac:	1421883a 	add	r16,r2,r16
    53b0:	d8809217 	ldw	r2,584(sp)
    53b4:	b207883a 	add	r3,r22,r8
    53b8:	dc009015 	stw	r16,576(sp)
    53bc:	1223c83a 	sub	r17,r2,r8
    53c0:	18001016 	blt	r3,zero,5404 <__kernel_rem_pio2+0xec>
    53c4:	da00a717 	ldw	r8,668(sp)
    53c8:	8c65883a 	add	r18,r17,r17
    53cc:	94a5883a 	add	r18,r18,r18
    53d0:	1c47883a 	add	r3,r3,r17
    53d4:	dcc05004 	addi	r19,sp,320
    53d8:	44a5883a 	add	r18,r8,r18
    53dc:	1c000044 	addi	r16,r3,1
    53e0:	88015316 	blt	r17,zero,5930 <__kernel_rem_pio2+0x618>
    53e4:	91000017 	ldw	r4,0(r18)
    53e8:	0008fcc0 	call	8fcc <__floatsidf>
    53ec:	98800015 	stw	r2,0(r19)
    53f0:	98c00115 	stw	r3,4(r19)
    53f4:	8c400044 	addi	r17,r17,1
    53f8:	9cc00204 	addi	r19,r19,8
    53fc:	94800104 	addi	r18,r18,4
    5400:	8c3ff71e 	bne	r17,r16,53e0 <__alt_exception_stack_pointer+0xf80053e0>
    5404:	b0002816 	blt	r22,zero,54a8 <__kernel_rem_pio2+0x190>
    5408:	da008d17 	ldw	r8,564(sp)
    540c:	b4c00044 	addi	r19,r22,1
    5410:	982690fa 	slli	r19,r19,3
    5414:	402490fa 	slli	r18,r8,3
    5418:	da008e17 	ldw	r8,568(sp)
    541c:	d8805004 	addi	r2,sp,320
    5420:	94000204 	addi	r16,r18,8
    5424:	d823883a 	mov	r17,sp
    5428:	14a5883a 	add	r18,r2,r18
    542c:	dcef883a 	add	r23,sp,r19
    5430:	4421883a 	add	r16,r8,r16
    5434:	dd809115 	stw	r22,580(sp)
    5438:	4039883a 	mov	fp,r8
    543c:	da008d17 	ldw	r8,564(sp)
    5440:	40016016 	blt	r8,zero,59c4 <__kernel_rem_pio2+0x6ac>
    5444:	e027883a 	mov	r19,fp
    5448:	9029883a 	mov	r20,r18
    544c:	002d883a 	mov	r22,zero
    5450:	002b883a 	mov	r21,zero
    5454:	a1800017 	ldw	r6,0(r20)
    5458:	a1c00117 	ldw	r7,4(r20)
    545c:	99000017 	ldw	r4,0(r19)
    5460:	99400117 	ldw	r5,4(r19)
    5464:	9cc00204 	addi	r19,r19,8
    5468:	a53ffe04 	addi	r20,r20,-8
    546c:	0007de40 	call	7de4 <__muldf3>
    5470:	b009883a 	mov	r4,r22
    5474:	a80b883a 	mov	r5,r21
    5478:	100d883a 	mov	r6,r2
    547c:	180f883a 	mov	r7,r3
    5480:	00069100 	call	6910 <__adddf3>
    5484:	102d883a 	mov	r22,r2
    5488:	182b883a 	mov	r21,r3
    548c:	9c3ff11e 	bne	r19,r16,5454 <__alt_exception_stack_pointer+0xf8005454>
    5490:	8d800015 	stw	r22,0(r17)
    5494:	8d400115 	stw	r21,4(r17)
    5498:	8c400204 	addi	r17,r17,8
    549c:	94800204 	addi	r18,r18,8
    54a0:	8dffe61e 	bne	r17,r23,543c <__alt_exception_stack_pointer+0xf800543c>
    54a4:	dd809117 	ldw	r22,580(sp)
    54a8:	00d00034 	movhi	r3,16384
    54ac:	da009317 	ldw	r8,588(sp)
    54b0:	18ffff84 	addi	r3,r3,-2
    54b4:	b0c7883a 	add	r3,r22,r3
    54b8:	18c7883a 	add	r3,r3,r3
    54bc:	402090fa 	slli	r16,r8,3
    54c0:	18c7883a 	add	r3,r3,r3
    54c4:	da007804 	addi	r8,sp,480
    54c8:	40d1883a 	add	r8,r8,r3
    54cc:	b0bfffc4 	addi	r2,r22,-1
    54d0:	da009615 	stw	r8,600(sp)
    54d4:	da008e17 	ldw	r8,568(sp)
    54d8:	1085883a 	add	r2,r2,r2
    54dc:	1085883a 	add	r2,r2,r2
    54e0:	19000104 	addi	r4,r3,4
    54e4:	d885883a 	add	r2,sp,r2
    54e8:	4421883a 	add	r16,r8,r16
    54ec:	da007804 	addi	r8,sp,480
    54f0:	4111883a 	add	r8,r8,r4
    54f4:	10807804 	addi	r2,r2,480
    54f8:	da009715 	stw	r8,604(sp)
    54fc:	b025883a 	mov	r18,r22
    5500:	d8809815 	stw	r2,608(sp)
    5504:	dd809415 	stw	r22,592(sp)
    5508:	900490fa 	slli	r2,r18,3
    550c:	d885883a 	add	r2,sp,r2
    5510:	17000017 	ldw	fp,0(r2)
    5514:	15400117 	ldw	r21,4(r2)
    5518:	04802b0e 	bge	zero,r18,55c8 <__kernel_rem_pio2+0x2b0>
    551c:	00880034 	movhi	r2,8192
    5520:	10bfffc4 	addi	r2,r2,-1
    5524:	90a9883a 	add	r20,r18,r2
    5528:	a02890fa 	slli	r20,r20,3
    552c:	dc407804 	addi	r17,sp,480
    5530:	dcfffe04 	addi	r19,sp,-8
    5534:	dd29883a 	add	r20,sp,r20
    5538:	000d883a 	mov	r6,zero
    553c:	01cf9c34 	movhi	r7,15984
    5540:	e009883a 	mov	r4,fp
    5544:	a80b883a 	mov	r5,r21
    5548:	0007de40 	call	7de4 <__muldf3>
    554c:	180b883a 	mov	r5,r3
    5550:	1009883a 	mov	r4,r2
    5554:	0008f4c0 	call	8f4c <__fixdfsi>
    5558:	1009883a 	mov	r4,r2
    555c:	0008fcc0 	call	8fcc <__floatsidf>
    5560:	000d883a 	mov	r6,zero
    5564:	01d05c34 	movhi	r7,16752
    5568:	1009883a 	mov	r4,r2
    556c:	180b883a 	mov	r5,r3
    5570:	102f883a 	mov	r23,r2
    5574:	182d883a 	mov	r22,r3
    5578:	0007de40 	call	7de4 <__muldf3>
    557c:	100d883a 	mov	r6,r2
    5580:	180f883a 	mov	r7,r3
    5584:	e009883a 	mov	r4,fp
    5588:	a80b883a 	mov	r5,r21
    558c:	00086500 	call	8650 <__subdf3>
    5590:	180b883a 	mov	r5,r3
    5594:	1009883a 	mov	r4,r2
    5598:	0008f4c0 	call	8f4c <__fixdfsi>
    559c:	a1800017 	ldw	r6,0(r20)
    55a0:	a1c00117 	ldw	r7,4(r20)
    55a4:	88800015 	stw	r2,0(r17)
    55a8:	b809883a 	mov	r4,r23
    55ac:	b00b883a 	mov	r5,r22
    55b0:	00069100 	call	6910 <__adddf3>
    55b4:	a53ffe04 	addi	r20,r20,-8
    55b8:	1039883a 	mov	fp,r2
    55bc:	182b883a 	mov	r21,r3
    55c0:	8c400104 	addi	r17,r17,4
    55c4:	a4ffdc1e 	bne	r20,r19,5538 <__alt_exception_stack_pointer+0xf8005538>
    55c8:	d9809017 	ldw	r6,576(sp)
    55cc:	a80b883a 	mov	r5,r21
    55d0:	e009883a 	mov	r4,fp
    55d4:	000657c0 	call	657c <scalbn>
    55d8:	000d883a 	mov	r6,zero
    55dc:	01cff034 	movhi	r7,16320
    55e0:	1009883a 	mov	r4,r2
    55e4:	180b883a 	mov	r5,r3
    55e8:	1027883a 	mov	r19,r2
    55ec:	1823883a 	mov	r17,r3
    55f0:	0007de40 	call	7de4 <__muldf3>
    55f4:	1009883a 	mov	r4,r2
    55f8:	180b883a 	mov	r5,r3
    55fc:	00063900 	call	6390 <floor>
    5600:	000d883a 	mov	r6,zero
    5604:	01d00834 	movhi	r7,16416
    5608:	1009883a 	mov	r4,r2
    560c:	180b883a 	mov	r5,r3
    5610:	0007de40 	call	7de4 <__muldf3>
    5614:	100d883a 	mov	r6,r2
    5618:	180f883a 	mov	r7,r3
    561c:	9809883a 	mov	r4,r19
    5620:	880b883a 	mov	r5,r17
    5624:	00086500 	call	8650 <__subdf3>
    5628:	180b883a 	mov	r5,r3
    562c:	1009883a 	mov	r4,r2
    5630:	1827883a 	mov	r19,r3
    5634:	1029883a 	mov	r20,r2
    5638:	0008f4c0 	call	8f4c <__fixdfsi>
    563c:	1009883a 	mov	r4,r2
    5640:	1023883a 	mov	r17,r2
    5644:	0008fcc0 	call	8fcc <__floatsidf>
    5648:	a009883a 	mov	r4,r20
    564c:	100d883a 	mov	r6,r2
    5650:	180f883a 	mov	r7,r3
    5654:	980b883a 	mov	r5,r19
    5658:	00086500 	call	8650 <__subdf3>
    565c:	d9009017 	ldw	r4,576(sp)
    5660:	1013883a 	mov	r9,r2
    5664:	102b883a 	mov	r21,r2
    5668:	1811883a 	mov	r8,r3
    566c:	0100b30e 	bge	zero,r4,593c <__kernel_rem_pio2+0x624>
    5670:	90bfffc4 	addi	r2,r18,-1
    5674:	1085883a 	add	r2,r2,r2
    5678:	1085883a 	add	r2,r2,r2
    567c:	d885883a 	add	r2,sp,r2
    5680:	10807804 	addi	r2,r2,480
    5684:	d9809017 	ldw	r6,576(sp)
    5688:	11400017 	ldw	r5,0(r2)
    568c:	01000604 	movi	r4,24
    5690:	2189c83a 	sub	r4,r4,r6
    5694:	290dd83a 	sra	r6,r5,r4
    5698:	d9c09017 	ldw	r7,576(sp)
    569c:	04c005c4 	movi	r19,23
    56a0:	3108983a 	sll	r4,r6,r4
    56a4:	99e7c83a 	sub	r19,r19,r7
    56a8:	89a3883a 	add	r17,r17,r6
    56ac:	2909c83a 	sub	r4,r5,r4
    56b0:	24e7d83a 	sra	r19,r4,r19
    56b4:	11000015 	stw	r4,0(r2)
    56b8:	04c02a0e 	bge	zero,r19,5764 <__kernel_rem_pio2+0x44c>
    56bc:	8c400044 	addi	r17,r17,1
    56c0:	0481570e 	bge	zero,r18,5c20 <__kernel_rem_pio2+0x908>
    56c4:	02804034 	movhi	r10,256
    56c8:	52bfffc4 	addi	r10,r10,-1
    56cc:	d8807804 	addi	r2,sp,480
    56d0:	000b883a 	mov	r5,zero
    56d4:	0029883a 	mov	r20,zero
    56d8:	01c04034 	movhi	r7,256
    56dc:	00000706 	br	56fc <__kernel_rem_pio2+0x3e4>
    56e0:	390dc83a 	sub	r6,r7,r4
    56e4:	20000226 	beq	r4,zero,56f0 <__kernel_rem_pio2+0x3d8>
    56e8:	11800015 	stw	r6,0(r2)
    56ec:	05000044 	movi	r20,1
    56f0:	29400044 	addi	r5,r5,1
    56f4:	10800104 	addi	r2,r2,4
    56f8:	2c80080e 	bge	r5,r18,571c <__kernel_rem_pio2+0x404>
    56fc:	11000017 	ldw	r4,0(r2)
    5700:	a03ff726 	beq	r20,zero,56e0 <__alt_exception_stack_pointer+0xf80056e0>
    5704:	5109c83a 	sub	r4,r10,r4
    5708:	11000015 	stw	r4,0(r2)
    570c:	29400044 	addi	r5,r5,1
    5710:	05000044 	movi	r20,1
    5714:	10800104 	addi	r2,r2,4
    5718:	2cbff816 	blt	r5,r18,56fc <__alt_exception_stack_pointer+0xf80056fc>
    571c:	d9009017 	ldw	r4,576(sp)
    5720:	01000e0e 	bge	zero,r4,575c <__kernel_rem_pio2+0x444>
    5724:	00800044 	movi	r2,1
    5728:	20808d26 	beq	r4,r2,5960 <__kernel_rem_pio2+0x648>
    572c:	00800084 	movi	r2,2
    5730:	20800a1e 	bne	r4,r2,575c <__kernel_rem_pio2+0x444>
    5734:	90bfffc4 	addi	r2,r18,-1
    5738:	1085883a 	add	r2,r2,r2
    573c:	1085883a 	add	r2,r2,r2
    5740:	d885883a 	add	r2,sp,r2
    5744:	10807804 	addi	r2,r2,480
    5748:	11400017 	ldw	r5,0(r2)
    574c:	01001034 	movhi	r4,64
    5750:	213fffc4 	addi	r4,r4,-1
    5754:	2908703a 	and	r4,r5,r4
    5758:	11000015 	stw	r4,0(r2)
    575c:	00800084 	movi	r2,2
    5760:	98805d26 	beq	r19,r2,58d8 <__kernel_rem_pio2+0x5c0>
    5764:	400b883a 	mov	r5,r8
    5768:	000d883a 	mov	r6,zero
    576c:	000f883a 	mov	r7,zero
    5770:	a809883a 	mov	r4,r21
    5774:	da009b15 	stw	r8,620(sp)
    5778:	0007b8c0 	call	7b8c <__eqdf2>
    577c:	da009b17 	ldw	r8,620(sp)
    5780:	10012b1e 	bne	r2,zero,5c30 <__kernel_rem_pio2+0x918>
    5784:	da009417 	ldw	r8,592(sp)
    5788:	917fffc4 	addi	r5,r18,-1
    578c:	2a000e16 	blt	r5,r8,57c8 <__kernel_rem_pio2+0x4b0>
    5790:	00900034 	movhi	r2,16384
    5794:	10bfffc4 	addi	r2,r2,-1
    5798:	9085883a 	add	r2,r18,r2
    579c:	1085883a 	add	r2,r2,r2
    57a0:	d9809717 	ldw	r6,604(sp)
    57a4:	1085883a 	add	r2,r2,r2
    57a8:	d9007804 	addi	r4,sp,480
    57ac:	0007883a 	mov	r3,zero
    57b0:	2085883a 	add	r2,r4,r2
    57b4:	11000017 	ldw	r4,0(r2)
    57b8:	10bfff04 	addi	r2,r2,-4
    57bc:	1906b03a 	or	r3,r3,r4
    57c0:	11bffc1e 	bne	r2,r6,57b4 <__alt_exception_stack_pointer+0xf80057b4>
    57c4:	1800821e 	bne	r3,zero,59d0 <__kernel_rem_pio2+0x6b8>
    57c8:	da009817 	ldw	r8,608(sp)
    57cc:	40800017 	ldw	r2,0(r8)
    57d0:	1001151e 	bne	r2,zero,5c28 <__kernel_rem_pio2+0x910>
    57d4:	d8809617 	ldw	r2,600(sp)
    57d8:	05000044 	movi	r20,1
    57dc:	10bfff04 	addi	r2,r2,-4
    57e0:	10c00117 	ldw	r3,4(r2)
    57e4:	a5000044 	addi	r20,r20,1
    57e8:	183ffc26 	beq	r3,zero,57dc <__alt_exception_stack_pointer+0xf80057dc>
    57ec:	9529883a 	add	r20,r18,r20
    57f0:	90800044 	addi	r2,r18,1
    57f4:	dd009115 	stw	r20,580(sp)
    57f8:	a0803216 	blt	r20,r2,58c4 <__kernel_rem_pio2+0x5ac>
    57fc:	da009317 	ldw	r8,588(sp)
    5800:	d8c09117 	ldw	r3,580(sp)
    5804:	44a3883a 	add	r17,r8,r18
    5808:	da009217 	ldw	r8,584(sp)
    580c:	882290fa 	slli	r17,r17,3
    5810:	40a5883a 	add	r18,r8,r2
    5814:	da009517 	ldw	r8,596(sp)
    5818:	100490fa 	slli	r2,r2,3
    581c:	94a5883a 	add	r18,r18,r18
    5820:	40eb883a 	add	r21,r8,r3
    5824:	da00a717 	ldw	r8,668(sp)
    5828:	ad6b883a 	add	r21,r21,r21
    582c:	94a5883a 	add	r18,r18,r18
    5830:	ad6b883a 	add	r21,r21,r21
    5834:	d8c05004 	addi	r3,sp,320
    5838:	44a5883a 	add	r18,r8,r18
    583c:	1c63883a 	add	r17,r3,r17
    5840:	d8a7883a 	add	r19,sp,r2
    5844:	456b883a 	add	r21,r8,r21
    5848:	91000017 	ldw	r4,0(r18)
    584c:	0008fcc0 	call	8fcc <__floatsidf>
    5850:	da008d17 	ldw	r8,564(sp)
    5854:	88800015 	stw	r2,0(r17)
    5858:	88c00115 	stw	r3,4(r17)
    585c:	40001b16 	blt	r8,zero,58cc <__kernel_rem_pio2+0x5b4>
    5860:	dd008e17 	ldw	r20,568(sp)
    5864:	882d883a 	mov	r22,r17
    5868:	002f883a 	mov	r23,zero
    586c:	0039883a 	mov	fp,zero
    5870:	b1800017 	ldw	r6,0(r22)
    5874:	b1c00117 	ldw	r7,4(r22)
    5878:	a1000017 	ldw	r4,0(r20)
    587c:	a1400117 	ldw	r5,4(r20)
    5880:	a5000204 	addi	r20,r20,8
    5884:	b5bffe04 	addi	r22,r22,-8
    5888:	0007de40 	call	7de4 <__muldf3>
    588c:	b809883a 	mov	r4,r23
    5890:	e00b883a 	mov	r5,fp
    5894:	100d883a 	mov	r6,r2
    5898:	180f883a 	mov	r7,r3
    589c:	00069100 	call	6910 <__adddf3>
    58a0:	102f883a 	mov	r23,r2
    58a4:	1839883a 	mov	fp,r3
    58a8:	a43ff11e 	bne	r20,r16,5870 <__alt_exception_stack_pointer+0xf8005870>
    58ac:	9dc00015 	stw	r23,0(r19)
    58b0:	9f000115 	stw	fp,4(r19)
    58b4:	94800104 	addi	r18,r18,4
    58b8:	8c400204 	addi	r17,r17,8
    58bc:	9cc00204 	addi	r19,r19,8
    58c0:	957fe11e 	bne	r18,r21,5848 <__alt_exception_stack_pointer+0xf8005848>
    58c4:	dc809117 	ldw	r18,580(sp)
    58c8:	003f0f06 	br	5508 <__alt_exception_stack_pointer+0xf8005508>
    58cc:	002f883a 	mov	r23,zero
    58d0:	0039883a 	mov	fp,zero
    58d4:	003ff506 	br	58ac <__alt_exception_stack_pointer+0xf80058ac>
    58d8:	480d883a 	mov	r6,r9
    58dc:	180f883a 	mov	r7,r3
    58e0:	0009883a 	mov	r4,zero
    58e4:	014ffc34 	movhi	r5,16368
    58e8:	00086500 	call	8650 <__subdf3>
    58ec:	102b883a 	mov	r21,r2
    58f0:	1811883a 	mov	r8,r3
    58f4:	a03f9b26 	beq	r20,zero,5764 <__alt_exception_stack_pointer+0xf8005764>
    58f8:	d9809017 	ldw	r6,576(sp)
    58fc:	0009883a 	mov	r4,zero
    5900:	014ffc34 	movhi	r5,16368
    5904:	d8c09b15 	stw	r3,620(sp)
    5908:	000657c0 	call	657c <scalbn>
    590c:	da009b17 	ldw	r8,620(sp)
    5910:	a809883a 	mov	r4,r21
    5914:	100d883a 	mov	r6,r2
    5918:	400b883a 	mov	r5,r8
    591c:	180f883a 	mov	r7,r3
    5920:	00086500 	call	8650 <__subdf3>
    5924:	102b883a 	mov	r21,r2
    5928:	1811883a 	mov	r8,r3
    592c:	003f8d06 	br	5764 <__alt_exception_stack_pointer+0xf8005764>
    5930:	0005883a 	mov	r2,zero
    5934:	0007883a 	mov	r3,zero
    5938:	003eac06 	br	53ec <__alt_exception_stack_pointer+0xf80053ec>
    593c:	d8809017 	ldw	r2,576(sp)
    5940:	1000121e 	bne	r2,zero,598c <__kernel_rem_pio2+0x674>
    5944:	90bfffc4 	addi	r2,r18,-1
    5948:	1085883a 	add	r2,r2,r2
    594c:	1085883a 	add	r2,r2,r2
    5950:	d885883a 	add	r2,sp,r2
    5954:	14c07817 	ldw	r19,480(r2)
    5958:	9827d5fa 	srai	r19,r19,23
    595c:	003f5606 	br	56b8 <__alt_exception_stack_pointer+0xf80056b8>
    5960:	90bfffc4 	addi	r2,r18,-1
    5964:	1085883a 	add	r2,r2,r2
    5968:	1085883a 	add	r2,r2,r2
    596c:	d885883a 	add	r2,sp,r2
    5970:	10807804 	addi	r2,r2,480
    5974:	11000017 	ldw	r4,0(r2)
    5978:	01402034 	movhi	r5,128
    597c:	297fffc4 	addi	r5,r5,-1
    5980:	2148703a 	and	r4,r4,r5
    5984:	11000015 	stw	r4,0(r2)
    5988:	003f7406 	br	575c <__alt_exception_stack_pointer+0xf800575c>
    598c:	4809883a 	mov	r4,r9
    5990:	180b883a 	mov	r5,r3
    5994:	000d883a 	mov	r6,zero
    5998:	01cff834 	movhi	r7,16352
    599c:	d8c09a15 	stw	r3,616(sp)
    59a0:	d8c09b15 	stw	r3,620(sp)
    59a4:	da409915 	stw	r9,612(sp)
    59a8:	0007c140 	call	7c14 <__gedf2>
    59ac:	d8c09a17 	ldw	r3,616(sp)
    59b0:	da009b17 	ldw	r8,620(sp)
    59b4:	da409917 	ldw	r9,612(sp)
    59b8:	1000920e 	bge	r2,zero,5c04 <__kernel_rem_pio2+0x8ec>
    59bc:	0027883a 	mov	r19,zero
    59c0:	003f6806 	br	5764 <__alt_exception_stack_pointer+0xf8005764>
    59c4:	002d883a 	mov	r22,zero
    59c8:	002b883a 	mov	r21,zero
    59cc:	003eb006 	br	5490 <__alt_exception_stack_pointer+0xf8005490>
    59d0:	2945883a 	add	r2,r5,r5
    59d4:	da009017 	ldw	r8,576(sp)
    59d8:	1085883a 	add	r2,r2,r2
    59dc:	d885883a 	add	r2,sp,r2
    59e0:	10807817 	ldw	r2,480(r2)
    59e4:	423ffa04 	addi	r8,r8,-24
    59e8:	dc409115 	stw	r17,580(sp)
    59ec:	dcc08d15 	stw	r19,564(sp)
    59f0:	da009015 	stw	r8,576(sp)
    59f4:	dd809417 	ldw	r22,592(sp)
    59f8:	2823883a 	mov	r17,r5
    59fc:	10000e1e 	bne	r2,zero,5a38 <__kernel_rem_pio2+0x720>
    5a00:	00900034 	movhi	r2,16384
    5a04:	10bfffc4 	addi	r2,r2,-1
    5a08:	2885883a 	add	r2,r5,r2
    5a0c:	1085883a 	add	r2,r2,r2
    5a10:	d8c07804 	addi	r3,sp,480
    5a14:	1085883a 	add	r2,r2,r2
    5a18:	1885883a 	add	r2,r3,r2
    5a1c:	4007883a 	mov	r3,r8
    5a20:	10bfff04 	addi	r2,r2,-4
    5a24:	11000117 	ldw	r4,4(r2)
    5a28:	8c7fffc4 	addi	r17,r17,-1
    5a2c:	18fffa04 	addi	r3,r3,-24
    5a30:	203ffb26 	beq	r4,zero,5a20 <__alt_exception_stack_pointer+0xf8005a20>
    5a34:	d8c09015 	stw	r3,576(sp)
    5a38:	d9809017 	ldw	r6,576(sp)
    5a3c:	0009883a 	mov	r4,zero
    5a40:	014ffc34 	movhi	r5,16368
    5a44:	000657c0 	call	657c <scalbn>
    5a48:	1029883a 	mov	r20,r2
    5a4c:	182b883a 	mov	r21,r3
    5a50:	88018416 	blt	r17,zero,6064 <__kernel_rem_pio2+0xd4c>
    5a54:	881090fa 	slli	r8,r17,3
    5a58:	d8c07804 	addi	r3,sp,480
    5a5c:	da008e15 	stw	r8,568(sp)
    5a60:	d8808e17 	ldw	r2,568(sp)
    5a64:	8c51883a 	add	r8,r17,r17
    5a68:	4211883a 	add	r8,r8,r8
    5a6c:	d8a1883a 	add	r16,sp,r2
    5a70:	1a25883a 	add	r18,r3,r8
    5a74:	da3ffe04 	addi	r8,sp,-8
    5a78:	da008c15 	stw	r8,560(sp)
    5a7c:	8039883a 	mov	fp,r16
    5a80:	91000017 	ldw	r4,0(r18)
    5a84:	e73ffe04 	addi	fp,fp,-8
    5a88:	94bfff04 	addi	r18,r18,-4
    5a8c:	0008fcc0 	call	8fcc <__floatsidf>
    5a90:	a00d883a 	mov	r6,r20
    5a94:	a80f883a 	mov	r7,r21
    5a98:	1009883a 	mov	r4,r2
    5a9c:	180b883a 	mov	r5,r3
    5aa0:	0007de40 	call	7de4 <__muldf3>
    5aa4:	a009883a 	mov	r4,r20
    5aa8:	a80b883a 	mov	r5,r21
    5aac:	e0800215 	stw	r2,8(fp)
    5ab0:	e0c00315 	stw	r3,12(fp)
    5ab4:	000d883a 	mov	r6,zero
    5ab8:	01cf9c34 	movhi	r7,15984
    5abc:	0007de40 	call	7de4 <__muldf3>
    5ac0:	da008c17 	ldw	r8,560(sp)
    5ac4:	1029883a 	mov	r20,r2
    5ac8:	182b883a 	mov	r21,r3
    5acc:	e23fec1e 	bne	fp,r8,5a80 <__alt_exception_stack_pointer+0xf8005a80>
    5ad0:	0029883a 	mov	r20,zero
    5ad4:	b0004f16 	blt	r22,zero,5c14 <__kernel_rem_pio2+0x8fc>
    5ad8:	054000b4 	movhi	r21,2
    5adc:	014ffe74 	movhi	r5,16377
    5ae0:	ad62da04 	addi	r21,r21,-29848
    5ae4:	8027883a 	mov	r19,r16
    5ae8:	01100034 	movhi	r4,16384
    5aec:	29487ec4 	addi	r5,r5,8699
    5af0:	0039883a 	mov	fp,zero
    5af4:	002f883a 	mov	r23,zero
    5af8:	0025883a 	mov	r18,zero
    5afc:	00000506 	br	5b14 <__kernel_rem_pio2+0x7fc>
    5b00:	9cc00204 	addi	r19,r19,8
    5b04:	a4800f16 	blt	r20,r18,5b44 <__kernel_rem_pio2+0x82c>
    5b08:	a9000017 	ldw	r4,0(r21)
    5b0c:	a9400117 	ldw	r5,4(r21)
    5b10:	ad400204 	addi	r21,r21,8
    5b14:	99800017 	ldw	r6,0(r19)
    5b18:	99c00117 	ldw	r7,4(r19)
    5b1c:	94800044 	addi	r18,r18,1
    5b20:	0007de40 	call	7de4 <__muldf3>
    5b24:	e009883a 	mov	r4,fp
    5b28:	b80b883a 	mov	r5,r23
    5b2c:	100d883a 	mov	r6,r2
    5b30:	180f883a 	mov	r7,r3
    5b34:	00069100 	call	6910 <__adddf3>
    5b38:	1039883a 	mov	fp,r2
    5b3c:	182f883a 	mov	r23,r3
    5b40:	b4bfef0e 	bge	r22,r18,5b00 <__alt_exception_stack_pointer+0xf8005b00>
    5b44:	a00490fa 	slli	r2,r20,3
    5b48:	da008c17 	ldw	r8,560(sp)
    5b4c:	843ffe04 	addi	r16,r16,-8
    5b50:	d885883a 	add	r2,sp,r2
    5b54:	10802804 	addi	r2,r2,160
    5b58:	17000015 	stw	fp,0(r2)
    5b5c:	15c00115 	stw	r23,4(r2)
    5b60:	a5000044 	addi	r20,r20,1
    5b64:	823fdb1e 	bne	r16,r8,5ad4 <__alt_exception_stack_pointer+0xf8005ad4>
    5b68:	da00a617 	ldw	r8,664(sp)
    5b6c:	00800084 	movi	r2,2
    5b70:	12006616 	blt	r2,r8,5d0c <__kernel_rem_pio2+0x9f4>
    5b74:	0200de16 	blt	zero,r8,5ef0 <__kernel_rem_pio2+0xbd8>
    5b78:	4000141e 	bne	r8,zero,5bcc <__kernel_rem_pio2+0x8b4>
    5b7c:	da008e17 	ldw	r8,568(sp)
    5b80:	d8802804 	addi	r2,sp,160
    5b84:	0007883a 	mov	r3,zero
    5b88:	1225883a 	add	r18,r2,r8
    5b8c:	043fffc4 	movi	r16,-1
    5b90:	0005883a 	mov	r2,zero
    5b94:	91800017 	ldw	r6,0(r18)
    5b98:	91c00117 	ldw	r7,4(r18)
    5b9c:	1009883a 	mov	r4,r2
    5ba0:	180b883a 	mov	r5,r3
    5ba4:	8c7fffc4 	addi	r17,r17,-1
    5ba8:	00069100 	call	6910 <__adddf3>
    5bac:	94bffe04 	addi	r18,r18,-8
    5bb0:	8c3ff81e 	bne	r17,r16,5b94 <__alt_exception_stack_pointer+0xf8005b94>
    5bb4:	da008d17 	ldw	r8,564(sp)
    5bb8:	40000126 	beq	r8,zero,5bc0 <__kernel_rem_pio2+0x8a8>
    5bbc:	18e0003c 	xorhi	r3,r3,32768
    5bc0:	da008f17 	ldw	r8,572(sp)
    5bc4:	40800015 	stw	r2,0(r8)
    5bc8:	40c00115 	stw	r3,4(r8)
    5bcc:	da009117 	ldw	r8,580(sp)
    5bd0:	408001cc 	andi	r2,r8,7
    5bd4:	dfc0a517 	ldw	ra,660(sp)
    5bd8:	df00a417 	ldw	fp,656(sp)
    5bdc:	ddc0a317 	ldw	r23,652(sp)
    5be0:	dd80a217 	ldw	r22,648(sp)
    5be4:	dd40a117 	ldw	r21,644(sp)
    5be8:	dd00a017 	ldw	r20,640(sp)
    5bec:	dcc09f17 	ldw	r19,636(sp)
    5bf0:	dc809e17 	ldw	r18,632(sp)
    5bf4:	dc409d17 	ldw	r17,628(sp)
    5bf8:	dc009c17 	ldw	r16,624(sp)
    5bfc:	dec0a604 	addi	sp,sp,664
    5c00:	f800283a 	ret
    5c04:	8c400044 	addi	r17,r17,1
    5c08:	04810d0e 	bge	zero,r18,6040 <__kernel_rem_pio2+0xd28>
    5c0c:	04c00084 	movi	r19,2
    5c10:	003eac06 	br	56c4 <__alt_exception_stack_pointer+0xf80056c4>
    5c14:	0039883a 	mov	fp,zero
    5c18:	002f883a 	mov	r23,zero
    5c1c:	003fc906 	br	5b44 <__alt_exception_stack_pointer+0xf8005b44>
    5c20:	0029883a 	mov	r20,zero
    5c24:	003ebd06 	br	571c <__alt_exception_stack_pointer+0xf800571c>
    5c28:	05000044 	movi	r20,1
    5c2c:	003eef06 	br	57ec <__alt_exception_stack_pointer+0xf80057ec>
    5c30:	4029883a 	mov	r20,r8
    5c34:	da009017 	ldw	r8,576(sp)
    5c38:	a809883a 	mov	r4,r21
    5c3c:	a00b883a 	mov	r5,r20
    5c40:	020dc83a 	sub	r6,zero,r8
    5c44:	dc409115 	stw	r17,580(sp)
    5c48:	dd809417 	ldw	r22,592(sp)
    5c4c:	dcc08d15 	stw	r19,564(sp)
    5c50:	000657c0 	call	657c <scalbn>
    5c54:	000d883a 	mov	r6,zero
    5c58:	01d05c34 	movhi	r7,16752
    5c5c:	1009883a 	mov	r4,r2
    5c60:	180b883a 	mov	r5,r3
    5c64:	102b883a 	mov	r21,r2
    5c68:	1823883a 	mov	r17,r3
    5c6c:	0007c140 	call	7c14 <__gedf2>
    5c70:	1000e916 	blt	r2,zero,6018 <__kernel_rem_pio2+0xd00>
    5c74:	000d883a 	mov	r6,zero
    5c78:	01cf9c34 	movhi	r7,15984
    5c7c:	880b883a 	mov	r5,r17
    5c80:	a809883a 	mov	r4,r21
    5c84:	0007de40 	call	7de4 <__muldf3>
    5c88:	180b883a 	mov	r5,r3
    5c8c:	1009883a 	mov	r4,r2
    5c90:	0008f4c0 	call	8f4c <__fixdfsi>
    5c94:	1029883a 	mov	r20,r2
    5c98:	9485883a 	add	r2,r18,r18
    5c9c:	1085883a 	add	r2,r2,r2
    5ca0:	a009883a 	mov	r4,r20
    5ca4:	d8a1883a 	add	r16,sp,r2
    5ca8:	0008fcc0 	call	8fcc <__floatsidf>
    5cac:	000d883a 	mov	r6,zero
    5cb0:	01d05c34 	movhi	r7,16752
    5cb4:	1009883a 	mov	r4,r2
    5cb8:	180b883a 	mov	r5,r3
    5cbc:	0007de40 	call	7de4 <__muldf3>
    5cc0:	880b883a 	mov	r5,r17
    5cc4:	100d883a 	mov	r6,r2
    5cc8:	180f883a 	mov	r7,r3
    5ccc:	a809883a 	mov	r4,r21
    5cd0:	00086500 	call	8650 <__subdf3>
    5cd4:	180b883a 	mov	r5,r3
    5cd8:	1009883a 	mov	r4,r2
    5cdc:	0008f4c0 	call	8f4c <__fixdfsi>
    5ce0:	da009017 	ldw	r8,576(sp)
    5ce4:	94400044 	addi	r17,r18,1
    5ce8:	8c47883a 	add	r3,r17,r17
    5cec:	84007804 	addi	r16,r16,480
    5cf0:	18c7883a 	add	r3,r3,r3
    5cf4:	80800015 	stw	r2,0(r16)
    5cf8:	d8c7883a 	add	r3,sp,r3
    5cfc:	42000604 	addi	r8,r8,24
    5d00:	da009015 	stw	r8,576(sp)
    5d04:	1d007815 	stw	r20,480(r3)
    5d08:	003f4b06 	br	5a38 <__alt_exception_stack_pointer+0xf8005a38>
    5d0c:	da00a617 	ldw	r8,664(sp)
    5d10:	008000c4 	movi	r2,3
    5d14:	40bfad1e 	bne	r8,r2,5bcc <__alt_exception_stack_pointer+0xf8005bcc>
    5d18:	0440bc0e 	bge	zero,r17,600c <__kernel_rem_pio2+0xcf4>
    5d1c:	da008e17 	ldw	r8,568(sp)
    5d20:	882090fa 	slli	r16,r17,3
    5d24:	dd402804 	addi	r21,sp,160
    5d28:	da05883a 	add	r2,sp,r8
    5d2c:	10802804 	addi	r2,r2,160
    5d30:	15c00017 	ldw	r23,0(r2)
    5d34:	15800117 	ldw	r22,4(r2)
    5d38:	8029883a 	mov	r20,r16
    5d3c:	843ffe04 	addi	r16,r16,-8
    5d40:	ac21883a 	add	r16,r21,r16
    5d44:	ad29883a 	add	r20,r21,r20
    5d48:	dac02604 	addi	r11,sp,152
    5d4c:	8811883a 	mov	r8,r17
    5d50:	84400017 	ldw	r17,0(r16)
    5d54:	87000117 	ldw	fp,4(r16)
    5d58:	b80d883a 	mov	r6,r23
    5d5c:	b00f883a 	mov	r7,r22
    5d60:	8809883a 	mov	r4,r17
    5d64:	e00b883a 	mov	r5,fp
    5d68:	da009b15 	stw	r8,620(sp)
    5d6c:	dac09915 	stw	r11,612(sp)
    5d70:	00069100 	call	6910 <__adddf3>
    5d74:	100d883a 	mov	r6,r2
    5d78:	180f883a 	mov	r7,r3
    5d7c:	8809883a 	mov	r4,r17
    5d80:	e00b883a 	mov	r5,fp
    5d84:	1027883a 	mov	r19,r2
    5d88:	1825883a 	mov	r18,r3
    5d8c:	00086500 	call	8650 <__subdf3>
    5d90:	b80d883a 	mov	r6,r23
    5d94:	b00f883a 	mov	r7,r22
    5d98:	1009883a 	mov	r4,r2
    5d9c:	180b883a 	mov	r5,r3
    5da0:	00069100 	call	6910 <__adddf3>
    5da4:	dac09917 	ldw	r11,612(sp)
    5da8:	a0800015 	stw	r2,0(r20)
    5dac:	a0c00115 	stw	r3,4(r20)
    5db0:	84c00015 	stw	r19,0(r16)
    5db4:	84800115 	stw	r18,4(r16)
    5db8:	843ffe04 	addi	r16,r16,-8
    5dbc:	a53ffe04 	addi	r20,r20,-8
    5dc0:	982f883a 	mov	r23,r19
    5dc4:	902d883a 	mov	r22,r18
    5dc8:	da009b17 	ldw	r8,620(sp)
    5dcc:	5c3fe01e 	bne	r11,r16,5d50 <__alt_exception_stack_pointer+0xf8005d50>
    5dd0:	00800044 	movi	r2,1
    5dd4:	12008d0e 	bge	r2,r8,600c <__kernel_rem_pio2+0xcf4>
    5dd8:	402090fa 	slli	r16,r8,3
    5ddc:	da008e17 	ldw	r8,568(sp)
    5de0:	8023883a 	mov	r17,r16
    5de4:	da05883a 	add	r2,sp,r8
    5de8:	10802804 	addi	r2,r2,160
    5dec:	15800017 	ldw	r22,0(r2)
    5df0:	15000117 	ldw	r20,4(r2)
    5df4:	ac63883a 	add	r17,r21,r17
    5df8:	843ffe04 	addi	r16,r16,-8
    5dfc:	ac21883a 	add	r16,r21,r16
    5e00:	8825883a 	mov	r18,r17
    5e04:	8811883a 	mov	r8,r17
    5e08:	84400017 	ldw	r17,0(r16)
    5e0c:	87000117 	ldw	fp,4(r16)
    5e10:	b009883a 	mov	r4,r22
    5e14:	a00b883a 	mov	r5,r20
    5e18:	880d883a 	mov	r6,r17
    5e1c:	e00f883a 	mov	r7,fp
    5e20:	da009b15 	stw	r8,620(sp)
    5e24:	00069100 	call	6910 <__adddf3>
    5e28:	100d883a 	mov	r6,r2
    5e2c:	180f883a 	mov	r7,r3
    5e30:	8809883a 	mov	r4,r17
    5e34:	e00b883a 	mov	r5,fp
    5e38:	102f883a 	mov	r23,r2
    5e3c:	1827883a 	mov	r19,r3
    5e40:	00086500 	call	8650 <__subdf3>
    5e44:	b00d883a 	mov	r6,r22
    5e48:	a00f883a 	mov	r7,r20
    5e4c:	1009883a 	mov	r4,r2
    5e50:	180b883a 	mov	r5,r3
    5e54:	00069100 	call	6910 <__adddf3>
    5e58:	90800015 	stw	r2,0(r18)
    5e5c:	90c00115 	stw	r3,4(r18)
    5e60:	85c00015 	stw	r23,0(r16)
    5e64:	84c00115 	stw	r19,4(r16)
    5e68:	843ffe04 	addi	r16,r16,-8
    5e6c:	94bffe04 	addi	r18,r18,-8
    5e70:	b82d883a 	mov	r22,r23
    5e74:	9829883a 	mov	r20,r19
    5e78:	da009b17 	ldw	r8,620(sp)
    5e7c:	ac3fe21e 	bne	r21,r16,5e08 <__alt_exception_stack_pointer+0xf8005e08>
    5e80:	4023883a 	mov	r17,r8
    5e84:	dc002a04 	addi	r16,sp,168
    5e88:	0005883a 	mov	r2,zero
    5e8c:	0007883a 	mov	r3,zero
    5e90:	89800017 	ldw	r6,0(r17)
    5e94:	89c00117 	ldw	r7,4(r17)
    5e98:	1009883a 	mov	r4,r2
    5e9c:	8c7ffe04 	addi	r17,r17,-8
    5ea0:	180b883a 	mov	r5,r3
    5ea4:	00069100 	call	6910 <__adddf3>
    5ea8:	847ff91e 	bne	r16,r17,5e90 <__alt_exception_stack_pointer+0xf8005e90>
    5eac:	da008d17 	ldw	r8,564(sp)
    5eb0:	40004726 	beq	r8,zero,5fd0 <__kernel_rem_pio2+0xcb8>
    5eb4:	d9002b17 	ldw	r4,172(sp)
    5eb8:	d9402917 	ldw	r5,164(sp)
    5ebc:	d9802a17 	ldw	r6,168(sp)
    5ec0:	da008f17 	ldw	r8,572(sp)
    5ec4:	d9c02817 	ldw	r7,160(sp)
    5ec8:	2960003c 	xorhi	r5,r5,32768
    5ecc:	2120003c 	xorhi	r4,r4,32768
    5ed0:	18e0003c 	xorhi	r3,r3,32768
    5ed4:	41c00015 	stw	r7,0(r8)
    5ed8:	41400115 	stw	r5,4(r8)
    5edc:	41800215 	stw	r6,8(r8)
    5ee0:	41000315 	stw	r4,12(r8)
    5ee4:	40800415 	stw	r2,16(r8)
    5ee8:	40c00515 	stw	r3,20(r8)
    5eec:	003f3706 	br	5bcc <__alt_exception_stack_pointer+0xf8005bcc>
    5ef0:	da008e17 	ldw	r8,568(sp)
    5ef4:	d8802804 	addi	r2,sp,160
    5ef8:	dc002604 	addi	r16,sp,152
    5efc:	1225883a 	add	r18,r2,r8
    5f00:	0007883a 	mov	r3,zero
    5f04:	0005883a 	mov	r2,zero
    5f08:	91800017 	ldw	r6,0(r18)
    5f0c:	91c00117 	ldw	r7,4(r18)
    5f10:	1009883a 	mov	r4,r2
    5f14:	94bffe04 	addi	r18,r18,-8
    5f18:	180b883a 	mov	r5,r3
    5f1c:	00069100 	call	6910 <__adddf3>
    5f20:	943ff91e 	bne	r18,r16,5f08 <__alt_exception_stack_pointer+0xf8005f08>
    5f24:	da008d17 	ldw	r8,564(sp)
    5f28:	d9002817 	ldw	r4,160(sp)
    5f2c:	d9402917 	ldw	r5,164(sp)
    5f30:	40001a26 	beq	r8,zero,5f9c <__kernel_rem_pio2+0xc84>
    5f34:	da008f17 	ldw	r8,572(sp)
    5f38:	19a0003c 	xorhi	r6,r3,32768
    5f3c:	180f883a 	mov	r7,r3
    5f40:	41800115 	stw	r6,4(r8)
    5f44:	40800015 	stw	r2,0(r8)
    5f48:	100d883a 	mov	r6,r2
    5f4c:	00086500 	call	8650 <__subdf3>
    5f50:	04400c0e 	bge	zero,r17,5f84 <__kernel_rem_pio2+0xc6c>
    5f54:	dc002a04 	addi	r16,sp,168
    5f58:	04800044 	movi	r18,1
    5f5c:	81800017 	ldw	r6,0(r16)
    5f60:	81c00117 	ldw	r7,4(r16)
    5f64:	1009883a 	mov	r4,r2
    5f68:	180b883a 	mov	r5,r3
    5f6c:	94800044 	addi	r18,r18,1
    5f70:	00069100 	call	6910 <__adddf3>
    5f74:	84000204 	addi	r16,r16,8
    5f78:	8cbff80e 	bge	r17,r18,5f5c <__alt_exception_stack_pointer+0xf8005f5c>
    5f7c:	da008d17 	ldw	r8,564(sp)
    5f80:	40004226 	beq	r8,zero,608c <__kernel_rem_pio2+0xd74>
    5f84:	da008f17 	ldw	r8,572(sp)
    5f88:	1009883a 	mov	r4,r2
    5f8c:	18a0003c 	xorhi	r2,r3,32768
    5f90:	41000215 	stw	r4,8(r8)
    5f94:	40800315 	stw	r2,12(r8)
    5f98:	003f0c06 	br	5bcc <__alt_exception_stack_pointer+0xf8005bcc>
    5f9c:	da008f17 	ldw	r8,572(sp)
    5fa0:	100d883a 	mov	r6,r2
    5fa4:	180f883a 	mov	r7,r3
    5fa8:	40800015 	stw	r2,0(r8)
    5fac:	40c00115 	stw	r3,4(r8)
    5fb0:	00086500 	call	8650 <__subdf3>
    5fb4:	047fe716 	blt	zero,r17,5f54 <__alt_exception_stack_pointer+0xf8005f54>
    5fb8:	da008f17 	ldw	r8,572(sp)
    5fbc:	1009883a 	mov	r4,r2
    5fc0:	1805883a 	mov	r2,r3
    5fc4:	41000215 	stw	r4,8(r8)
    5fc8:	40800315 	stw	r2,12(r8)
    5fcc:	003eff06 	br	5bcc <__alt_exception_stack_pointer+0xf8005bcc>
    5fd0:	da008f17 	ldw	r8,572(sp)
    5fd4:	d9802817 	ldw	r6,160(sp)
    5fd8:	d9402a17 	ldw	r5,168(sp)
    5fdc:	d9002b17 	ldw	r4,172(sp)
    5fe0:	41800015 	stw	r6,0(r8)
    5fe4:	d9802917 	ldw	r6,164(sp)
    5fe8:	41400215 	stw	r5,8(r8)
    5fec:	41000315 	stw	r4,12(r8)
    5ff0:	41800115 	stw	r6,4(r8)
    5ff4:	40800415 	stw	r2,16(r8)
    5ff8:	40c00515 	stw	r3,20(r8)
    5ffc:	003ef306 	br	5bcc <__alt_exception_stack_pointer+0xf8005bcc>
    6000:	da00a617 	ldw	r8,664(sp)
    6004:	008000c4 	movi	r2,3
    6008:	40bef01e 	bne	r8,r2,5bcc <__alt_exception_stack_pointer+0xf8005bcc>
    600c:	0005883a 	mov	r2,zero
    6010:	0007883a 	mov	r3,zero
    6014:	003fa506 	br	5eac <__alt_exception_stack_pointer+0xf8005eac>
    6018:	9485883a 	add	r2,r18,r18
    601c:	1085883a 	add	r2,r2,r2
    6020:	d8a1883a 	add	r16,sp,r2
    6024:	880b883a 	mov	r5,r17
    6028:	a809883a 	mov	r4,r21
    602c:	84007804 	addi	r16,r16,480
    6030:	0008f4c0 	call	8f4c <__fixdfsi>
    6034:	80800015 	stw	r2,0(r16)
    6038:	9023883a 	mov	r17,r18
    603c:	003e7e06 	br	5a38 <__alt_exception_stack_pointer+0xf8005a38>
    6040:	a80d883a 	mov	r6,r21
    6044:	400f883a 	mov	r7,r8
    6048:	0009883a 	mov	r4,zero
    604c:	014ffc34 	movhi	r5,16368
    6050:	00086500 	call	8650 <__subdf3>
    6054:	102b883a 	mov	r21,r2
    6058:	1811883a 	mov	r8,r3
    605c:	04c00084 	movi	r19,2
    6060:	003dc006 	br	5764 <__alt_exception_stack_pointer+0xf8005764>
    6064:	da00a617 	ldw	r8,664(sp)
    6068:	00800084 	movi	r2,2
    606c:	123fe416 	blt	r2,r8,6000 <__alt_exception_stack_pointer+0xf8006000>
    6070:	02000c16 	blt	zero,r8,60a4 <__kernel_rem_pio2+0xd8c>
    6074:	403ed51e 	bne	r8,zero,5bcc <__alt_exception_stack_pointer+0xf8005bcc>
    6078:	0005883a 	mov	r2,zero
    607c:	0007883a 	mov	r3,zero
    6080:	003ecc06 	br	5bb4 <__alt_exception_stack_pointer+0xf8005bb4>
    6084:	d8009215 	stw	zero,584(sp)
    6088:	003cc106 	br	5390 <__alt_exception_stack_pointer+0xf8005390>
    608c:	da008f17 	ldw	r8,572(sp)
    6090:	1009883a 	mov	r4,r2
    6094:	1805883a 	mov	r2,r3
    6098:	41000215 	stw	r4,8(r8)
    609c:	40800315 	stw	r2,12(r8)
    60a0:	003eca06 	br	5bcc <__alt_exception_stack_pointer+0xf8005bcc>
    60a4:	0005883a 	mov	r2,zero
    60a8:	0007883a 	mov	r3,zero
    60ac:	003f9d06 	br	5f24 <__alt_exception_stack_pointer+0xf8005f24>

000060b0 <__kernel_sin>:
    60b0:	00a00034 	movhi	r2,32768
    60b4:	defff404 	addi	sp,sp,-48
    60b8:	10bfffc4 	addi	r2,r2,-1
    60bc:	00cf9034 	movhi	r3,15936
    60c0:	ddc00915 	stw	r23,36(sp)
    60c4:	dd800815 	stw	r22,32(sp)
    60c8:	dc400315 	stw	r17,12(sp)
    60cc:	dc000215 	stw	r16,8(sp)
    60d0:	dfc00b15 	stw	ra,44(sp)
    60d4:	df000a15 	stw	fp,40(sp)
    60d8:	dd400715 	stw	r21,28(sp)
    60dc:	dd000615 	stw	r20,24(sp)
    60e0:	dcc00515 	stw	r19,20(sp)
    60e4:	dc800415 	stw	r18,16(sp)
    60e8:	2884703a 	and	r2,r5,r2
    60ec:	18ffffc4 	addi	r3,r3,-1
    60f0:	2821883a 	mov	r16,r5
    60f4:	2023883a 	mov	r17,r4
    60f8:	302f883a 	mov	r23,r6
    60fc:	382d883a 	mov	r22,r7
    6100:	18800216 	blt	r3,r2,610c <__kernel_sin+0x5c>
    6104:	0008f4c0 	call	8f4c <__fixdfsi>
    6108:	10009926 	beq	r2,zero,6370 <__kernel_sin+0x2c0>
    610c:	880d883a 	mov	r6,r17
    6110:	800f883a 	mov	r7,r16
    6114:	8809883a 	mov	r4,r17
    6118:	800b883a 	mov	r5,r16
    611c:	0007de40 	call	7de4 <__muldf3>
    6120:	100d883a 	mov	r6,r2
    6124:	180f883a 	mov	r7,r3
    6128:	8809883a 	mov	r4,r17
    612c:	800b883a 	mov	r5,r16
    6130:	1027883a 	mov	r19,r2
    6134:	1825883a 	mov	r18,r3
    6138:	0007de40 	call	7de4 <__muldf3>
    613c:	0196b434 	movhi	r6,23248
    6140:	01cf79b4 	movhi	r7,15846
    6144:	31b55f04 	addi	r6,r6,-10884
    6148:	39f64e84 	addi	r7,r7,-9926
    614c:	9809883a 	mov	r4,r19
    6150:	900b883a 	mov	r5,r18
    6154:	102b883a 	mov	r21,r2
    6158:	1829883a 	mov	r20,r3
    615c:	0007de40 	call	7de4 <__muldf3>
    6160:	01a28b34 	movhi	r6,35372
    6164:	01cf96f4 	movhi	r7,15963
    6168:	31a73ac4 	addi	r6,r6,-25365
    616c:	39f97984 	addi	r7,r7,-6682
    6170:	1009883a 	mov	r4,r2
    6174:	180b883a 	mov	r5,r3
    6178:	00086500 	call	8650 <__subdf3>
    617c:	980d883a 	mov	r6,r19
    6180:	900f883a 	mov	r7,r18
    6184:	1009883a 	mov	r4,r2
    6188:	180b883a 	mov	r5,r3
    618c:	0007de40 	call	7de4 <__muldf3>
    6190:	0195ecb4 	movhi	r6,22450
    6194:	01cfb1f4 	movhi	r7,16071
    6198:	31bf9f44 	addi	r6,r6,-387
    619c:	39c778c4 	addi	r7,r7,7651
    61a0:	1009883a 	mov	r4,r2
    61a4:	180b883a 	mov	r5,r3
    61a8:	00069100 	call	6910 <__adddf3>
    61ac:	980d883a 	mov	r6,r19
    61b0:	900f883a 	mov	r7,r18
    61b4:	1009883a 	mov	r4,r2
    61b8:	180b883a 	mov	r5,r3
    61bc:	0007de40 	call	7de4 <__muldf3>
    61c0:	01867074 	movhi	r6,6593
    61c4:	01cfcab4 	movhi	r7,16170
    61c8:	31987544 	addi	r6,r6,25045
    61cc:	39c06804 	addi	r7,r7,416
    61d0:	1009883a 	mov	r4,r2
    61d4:	180b883a 	mov	r5,r3
    61d8:	00086500 	call	8650 <__subdf3>
    61dc:	980d883a 	mov	r6,r19
    61e0:	900f883a 	mov	r7,r18
    61e4:	1009883a 	mov	r4,r2
    61e8:	180b883a 	mov	r5,r3
    61ec:	0007de40 	call	7de4 <__muldf3>
    61f0:	01844474 	movhi	r6,4369
    61f4:	01cfe074 	movhi	r7,16257
    61f8:	31be2984 	addi	r6,r6,-1882
    61fc:	39c44444 	addi	r7,r7,4369
    6200:	1009883a 	mov	r4,r2
    6204:	180b883a 	mov	r5,r3
    6208:	00069100 	call	6910 <__adddf3>
    620c:	1011883a 	mov	r8,r2
    6210:	d8800c17 	ldw	r2,48(sp)
    6214:	1839883a 	mov	fp,r3
    6218:	10003e26 	beq	r2,zero,6314 <__kernel_sin+0x264>
    621c:	000d883a 	mov	r6,zero
    6220:	01cff834 	movhi	r7,16352
    6224:	b809883a 	mov	r4,r23
    6228:	b00b883a 	mov	r5,r22
    622c:	da000015 	stw	r8,0(sp)
    6230:	0007de40 	call	7de4 <__muldf3>
    6234:	da000017 	ldw	r8,0(sp)
    6238:	e00f883a 	mov	r7,fp
    623c:	a809883a 	mov	r4,r21
    6240:	400d883a 	mov	r6,r8
    6244:	a00b883a 	mov	r5,r20
    6248:	d8c00115 	stw	r3,4(sp)
    624c:	d8800015 	stw	r2,0(sp)
    6250:	0007de40 	call	7de4 <__muldf3>
    6254:	da800017 	ldw	r10,0(sp)
    6258:	da400117 	ldw	r9,4(sp)
    625c:	100d883a 	mov	r6,r2
    6260:	5009883a 	mov	r4,r10
    6264:	480b883a 	mov	r5,r9
    6268:	180f883a 	mov	r7,r3
    626c:	00086500 	call	8650 <__subdf3>
    6270:	980d883a 	mov	r6,r19
    6274:	900f883a 	mov	r7,r18
    6278:	1009883a 	mov	r4,r2
    627c:	180b883a 	mov	r5,r3
    6280:	0007de40 	call	7de4 <__muldf3>
    6284:	b80d883a 	mov	r6,r23
    6288:	b00f883a 	mov	r7,r22
    628c:	1009883a 	mov	r4,r2
    6290:	180b883a 	mov	r5,r3
    6294:	00086500 	call	8650 <__subdf3>
    6298:	01955574 	movhi	r6,21845
    629c:	01cff174 	movhi	r7,16325
    62a0:	31955244 	addi	r6,r6,21833
    62a4:	39d55544 	addi	r7,r7,21845
    62a8:	a809883a 	mov	r4,r21
    62ac:	a00b883a 	mov	r5,r20
    62b0:	1027883a 	mov	r19,r2
    62b4:	1825883a 	mov	r18,r3
    62b8:	0007de40 	call	7de4 <__muldf3>
    62bc:	100d883a 	mov	r6,r2
    62c0:	180f883a 	mov	r7,r3
    62c4:	9809883a 	mov	r4,r19
    62c8:	900b883a 	mov	r5,r18
    62cc:	00069100 	call	6910 <__adddf3>
    62d0:	100d883a 	mov	r6,r2
    62d4:	180f883a 	mov	r7,r3
    62d8:	8809883a 	mov	r4,r17
    62dc:	800b883a 	mov	r5,r16
    62e0:	00086500 	call	8650 <__subdf3>
    62e4:	dfc00b17 	ldw	ra,44(sp)
    62e8:	df000a17 	ldw	fp,40(sp)
    62ec:	ddc00917 	ldw	r23,36(sp)
    62f0:	dd800817 	ldw	r22,32(sp)
    62f4:	dd400717 	ldw	r21,28(sp)
    62f8:	dd000617 	ldw	r20,24(sp)
    62fc:	dcc00517 	ldw	r19,20(sp)
    6300:	dc800417 	ldw	r18,16(sp)
    6304:	dc400317 	ldw	r17,12(sp)
    6308:	dc000217 	ldw	r16,8(sp)
    630c:	dec00c04 	addi	sp,sp,48
    6310:	f800283a 	ret
    6314:	400d883a 	mov	r6,r8
    6318:	9809883a 	mov	r4,r19
    631c:	900b883a 	mov	r5,r18
    6320:	180f883a 	mov	r7,r3
    6324:	0007de40 	call	7de4 <__muldf3>
    6328:	01955574 	movhi	r6,21845
    632c:	01cff174 	movhi	r7,16325
    6330:	31955244 	addi	r6,r6,21833
    6334:	39d55544 	addi	r7,r7,21845
    6338:	1009883a 	mov	r4,r2
    633c:	180b883a 	mov	r5,r3
    6340:	00086500 	call	8650 <__subdf3>
    6344:	a80d883a 	mov	r6,r21
    6348:	a00f883a 	mov	r7,r20
    634c:	1009883a 	mov	r4,r2
    6350:	180b883a 	mov	r5,r3
    6354:	0007de40 	call	7de4 <__muldf3>
    6358:	880d883a 	mov	r6,r17
    635c:	800f883a 	mov	r7,r16
    6360:	1009883a 	mov	r4,r2
    6364:	180b883a 	mov	r5,r3
    6368:	00069100 	call	6910 <__adddf3>
    636c:	003fdd06 	br	62e4 <__alt_exception_stack_pointer+0xf80062e4>
    6370:	8805883a 	mov	r2,r17
    6374:	8007883a 	mov	r3,r16
    6378:	003fda06 	br	62e4 <__alt_exception_stack_pointer+0xf80062e4>

0000637c <fabs>:
    637c:	00e00034 	movhi	r3,32768
    6380:	18ffffc4 	addi	r3,r3,-1
    6384:	2005883a 	mov	r2,r4
    6388:	28c6703a 	and	r3,r5,r3
    638c:	f800283a 	ret

00006390 <floor>:
    6390:	2811d53a 	srai	r8,r5,20
    6394:	defffa04 	addi	sp,sp,-24
    6398:	dcc00315 	stw	r19,12(sp)
    639c:	4201ffcc 	andi	r8,r8,2047
    63a0:	dc800215 	stw	r18,8(sp)
    63a4:	dc400115 	stw	r17,4(sp)
    63a8:	dc000015 	stw	r16,0(sp)
    63ac:	dfc00515 	stw	ra,20(sp)
    63b0:	dd000415 	stw	r20,16(sp)
    63b4:	44bf0044 	addi	r18,r8,-1023
    63b8:	018004c4 	movi	r6,19
    63bc:	2821883a 	mov	r16,r5
    63c0:	2005883a 	mov	r2,r4
    63c4:	280f883a 	mov	r7,r5
    63c8:	2827883a 	mov	r19,r5
    63cc:	2023883a 	mov	r17,r4
    63d0:	34801916 	blt	r6,r18,6438 <floor+0xa8>
    63d4:	90003c16 	blt	r18,zero,64c8 <floor+0x138>
    63d8:	05000434 	movhi	r20,16
    63dc:	a53fffc4 	addi	r20,r20,-1
    63e0:	a4a9d83a 	sra	r20,r20,r18
    63e4:	2d0c703a 	and	r6,r5,r20
    63e8:	310cb03a 	or	r6,r6,r4
    63ec:	30001626 	beq	r6,zero,6448 <floor+0xb8>
    63f0:	01a20034 	movhi	r6,34816
    63f4:	01df8e34 	movhi	r7,32312
    63f8:	319d6704 	addi	r6,r6,30108
    63fc:	39f90f04 	addi	r7,r7,-7108
    6400:	00069100 	call	6910 <__adddf3>
    6404:	000d883a 	mov	r6,zero
    6408:	000f883a 	mov	r7,zero
    640c:	1009883a 	mov	r4,r2
    6410:	180b883a 	mov	r5,r3
    6414:	0007c140 	call	7c14 <__gedf2>
    6418:	0080040e 	bge	zero,r2,642c <floor+0x9c>
    641c:	80003c16 	blt	r16,zero,6510 <floor+0x180>
    6420:	0520303a 	nor	r16,zero,r20
    6424:	84e0703a 	and	r16,r16,r19
    6428:	0023883a 	mov	r17,zero
    642c:	8805883a 	mov	r2,r17
    6430:	8007883a 	mov	r3,r16
    6434:	00000506 	br	644c <floor+0xbc>
    6438:	01800cc4 	movi	r6,51
    643c:	34800b0e 	bge	r6,r18,646c <floor+0xdc>
    6440:	01810004 	movi	r6,1024
    6444:	91802f26 	beq	r18,r6,6504 <floor+0x174>
    6448:	3807883a 	mov	r3,r7
    644c:	dfc00517 	ldw	ra,20(sp)
    6450:	dd000417 	ldw	r20,16(sp)
    6454:	dcc00317 	ldw	r19,12(sp)
    6458:	dc800217 	ldw	r18,8(sp)
    645c:	dc400117 	ldw	r17,4(sp)
    6460:	dc000017 	ldw	r16,0(sp)
    6464:	dec00604 	addi	sp,sp,24
    6468:	f800283a 	ret
    646c:	423efb44 	addi	r8,r8,-1043
    6470:	053fffc4 	movi	r20,-1
    6474:	a228d83a 	srl	r20,r20,r8
    6478:	250c703a 	and	r6,r4,r20
    647c:	303ff226 	beq	r6,zero,6448 <__alt_exception_stack_pointer+0xf8006448>
    6480:	01a20034 	movhi	r6,34816
    6484:	01df8e34 	movhi	r7,32312
    6488:	319d6704 	addi	r6,r6,30108
    648c:	39f90f04 	addi	r7,r7,-7108
    6490:	00069100 	call	6910 <__adddf3>
    6494:	000d883a 	mov	r6,zero
    6498:	000f883a 	mov	r7,zero
    649c:	1009883a 	mov	r4,r2
    64a0:	180b883a 	mov	r5,r3
    64a4:	0007c140 	call	7c14 <__gedf2>
    64a8:	00bfe00e 	bge	zero,r2,642c <__alt_exception_stack_pointer+0xf800642c>
    64ac:	80001c16 	blt	r16,zero,6520 <floor+0x190>
    64b0:	0510303a 	nor	r8,zero,r20
    64b4:	9821883a 	mov	r16,r19
    64b8:	8a22703a 	and	r17,r17,r8
    64bc:	8805883a 	mov	r2,r17
    64c0:	8007883a 	mov	r3,r16
    64c4:	003fe106 	br	644c <__alt_exception_stack_pointer+0xf800644c>
    64c8:	01a20034 	movhi	r6,34816
    64cc:	01df8e34 	movhi	r7,32312
    64d0:	319d6704 	addi	r6,r6,30108
    64d4:	39f90f04 	addi	r7,r7,-7108
    64d8:	00069100 	call	6910 <__adddf3>
    64dc:	000d883a 	mov	r6,zero
    64e0:	000f883a 	mov	r7,zero
    64e4:	1009883a 	mov	r4,r2
    64e8:	180b883a 	mov	r5,r3
    64ec:	0007c140 	call	7c14 <__gedf2>
    64f0:	00bfce0e 	bge	zero,r2,642c <__alt_exception_stack_pointer+0xf800642c>
    64f4:	80001516 	blt	r16,zero,654c <floor+0x1bc>
    64f8:	0023883a 	mov	r17,zero
    64fc:	0021883a 	mov	r16,zero
    6500:	003fca06 	br	642c <__alt_exception_stack_pointer+0xf800642c>
    6504:	200d883a 	mov	r6,r4
    6508:	00069100 	call	6910 <__adddf3>
    650c:	003fcf06 	br	644c <__alt_exception_stack_pointer+0xf800644c>
    6510:	00800434 	movhi	r2,16
    6514:	14a5d83a 	sra	r18,r2,r18
    6518:	84a7883a 	add	r19,r16,r18
    651c:	003fc006 	br	6420 <__alt_exception_stack_pointer+0xf8006420>
    6520:	00800504 	movi	r2,20
    6524:	90801326 	beq	r18,r2,6574 <floor+0x1e4>
    6528:	00800d04 	movi	r2,52
    652c:	14a5c83a 	sub	r18,r2,r18
    6530:	00800044 	movi	r2,1
    6534:	1484983a 	sll	r2,r2,r18
    6538:	1445883a 	add	r2,r2,r17
    653c:	14400b2e 	bgeu	r2,r17,656c <floor+0x1dc>
    6540:	84c00044 	addi	r19,r16,1
    6544:	1023883a 	mov	r17,r2
    6548:	003fd906 	br	64b0 <__alt_exception_stack_pointer+0xf80064b0>
    654c:	00a00034 	movhi	r2,32768
    6550:	10bfffc4 	addi	r2,r2,-1
    6554:	8084703a 	and	r2,r16,r2
    6558:	1462b03a 	or	r17,r2,r17
    655c:	883fb326 	beq	r17,zero,642c <__alt_exception_stack_pointer+0xf800642c>
    6560:	0023883a 	mov	r17,zero
    6564:	042ffc34 	movhi	r16,49136
    6568:	003fb006 	br	642c <__alt_exception_stack_pointer+0xf800642c>
    656c:	1023883a 	mov	r17,r2
    6570:	003fcf06 	br	64b0 <__alt_exception_stack_pointer+0xf80064b0>
    6574:	84c00044 	addi	r19,r16,1
    6578:	003fcd06 	br	64b0 <__alt_exception_stack_pointer+0xf80064b0>

0000657c <scalbn>:
    657c:	2a1ffc2c 	andhi	r8,r5,32752
    6580:	4011d53a 	srai	r8,r8,20
    6584:	defffe04 	addi	sp,sp,-8
    6588:	dc000015 	stw	r16,0(sp)
    658c:	dfc00115 	stw	ra,4(sp)
    6590:	280f883a 	mov	r7,r5
    6594:	2015883a 	mov	r10,r4
    6598:	3021883a 	mov	r16,r6
    659c:	40001e1e 	bne	r8,zero,6618 <scalbn+0x9c>
    65a0:	00a00034 	movhi	r2,32768
    65a4:	10bfffc4 	addi	r2,r2,-1
    65a8:	2884703a 	and	r2,r5,r2
    65ac:	1104b03a 	or	r2,r2,r4
    65b0:	10002226 	beq	r2,zero,663c <scalbn+0xc0>
    65b4:	01d0d434 	movhi	r7,17232
    65b8:	000d883a 	mov	r6,zero
    65bc:	0007de40 	call	7de4 <__muldf3>
    65c0:	013ffff4 	movhi	r4,65535
    65c4:	210f2c04 	addi	r4,r4,15536
    65c8:	1015883a 	mov	r10,r2
    65cc:	180f883a 	mov	r7,r3
    65d0:	81002a16 	blt	r16,r4,667c <scalbn+0x100>
    65d4:	191ffc2c 	andhi	r4,r3,32752
    65d8:	2009d53a 	srai	r4,r4,20
    65dc:	223ff284 	addi	r8,r4,-54
    65e0:	8211883a 	add	r8,r16,r8
    65e4:	0081ff84 	movi	r2,2046
    65e8:	12002f16 	blt	r2,r8,66a8 <scalbn+0x12c>
    65ec:	0200190e 	bge	zero,r8,6654 <scalbn+0xd8>
    65f0:	4010953a 	slli	r8,r8,20
    65f4:	01600434 	movhi	r5,32784
    65f8:	297fffc4 	addi	r5,r5,-1
    65fc:	194e703a 	and	r7,r3,r5
    6600:	5005883a 	mov	r2,r10
    6604:	3a06b03a 	or	r3,r7,r8
    6608:	dfc00117 	ldw	ra,4(sp)
    660c:	dc000017 	ldw	r16,0(sp)
    6610:	dec00204 	addi	sp,sp,8
    6614:	f800283a 	ret
    6618:	0081ffc4 	movi	r2,2047
    661c:	2807883a 	mov	r3,r5
    6620:	40bfef1e 	bne	r8,r2,65e0 <__alt_exception_stack_pointer+0xf80065e0>
    6624:	200d883a 	mov	r6,r4
    6628:	00069100 	call	6910 <__adddf3>
    662c:	dfc00117 	ldw	ra,4(sp)
    6630:	dc000017 	ldw	r16,0(sp)
    6634:	dec00204 	addi	sp,sp,8
    6638:	f800283a 	ret
    663c:	2005883a 	mov	r2,r4
    6640:	2807883a 	mov	r3,r5
    6644:	dfc00117 	ldw	ra,4(sp)
    6648:	dc000017 	ldw	r16,0(sp)
    664c:	dec00204 	addi	sp,sp,8
    6650:	f800283a 	ret
    6654:	00bff2c4 	movi	r2,-53
    6658:	4080240e 	bge	r8,r2,66ec <scalbn+0x170>
    665c:	00b0d414 	movui	r2,50000
    6660:	14001116 	blt	r2,r16,66a8 <scalbn+0x12c>
    6664:	0130be74 	movhi	r4,49913
    6668:	01406974 	movhi	r5,421
    666c:	213cd644 	addi	r4,r4,-3239
    6670:	295b87c4 	addi	r5,r5,28191
    6674:	500d883a 	mov	r6,r10
    6678:	00067180 	call	6718 <copysign>
    667c:	01b0be74 	movhi	r6,49913
    6680:	01c06974 	movhi	r7,421
    6684:	31bcd644 	addi	r6,r6,-3239
    6688:	39db87c4 	addi	r7,r7,28191
    668c:	1009883a 	mov	r4,r2
    6690:	180b883a 	mov	r5,r3
    6694:	0007de40 	call	7de4 <__muldf3>
    6698:	dfc00117 	ldw	ra,4(sp)
    669c:	dc000017 	ldw	r16,0(sp)
    66a0:	dec00204 	addi	sp,sp,8
    66a4:	f800283a 	ret
    66a8:	01220034 	movhi	r4,34816
    66ac:	015f8e34 	movhi	r5,32312
    66b0:	500d883a 	mov	r6,r10
    66b4:	211d6704 	addi	r4,r4,30108
    66b8:	29790f04 	addi	r5,r5,-7108
    66bc:	00067180 	call	6718 <copysign>
    66c0:	01a20034 	movhi	r6,34816
    66c4:	01df8e34 	movhi	r7,32312
    66c8:	319d6704 	addi	r6,r6,30108
    66cc:	39f90f04 	addi	r7,r7,-7108
    66d0:	1009883a 	mov	r4,r2
    66d4:	180b883a 	mov	r5,r3
    66d8:	0007de40 	call	7de4 <__muldf3>
    66dc:	dfc00117 	ldw	ra,4(sp)
    66e0:	dc000017 	ldw	r16,0(sp)
    66e4:	dec00204 	addi	sp,sp,8
    66e8:	f800283a 	ret
    66ec:	42000d84 	addi	r8,r8,54
    66f0:	4012953a 	slli	r9,r8,20
    66f4:	01e00434 	movhi	r7,32784
    66f8:	39ffffc4 	addi	r7,r7,-1
    66fc:	19ca703a 	and	r5,r3,r7
    6700:	000d883a 	mov	r6,zero
    6704:	01cf2434 	movhi	r7,15504
    6708:	5009883a 	mov	r4,r10
    670c:	494ab03a 	or	r5,r9,r5
    6710:	0007de40 	call	7de4 <__muldf3>
    6714:	003fbc06 	br	6608 <__alt_exception_stack_pointer+0xf8006608>

00006718 <copysign>:
    6718:	2005883a 	mov	r2,r4
    671c:	01200034 	movhi	r4,32768
    6720:	213fffc4 	addi	r4,r4,-1
    6724:	38e0002c 	andhi	r3,r7,32768
    6728:	290a703a 	and	r5,r5,r4
    672c:	28c6b03a 	or	r3,r5,r3
    6730:	f800283a 	ret

00006734 <__divsi3>:
    6734:	20001b16 	blt	r4,zero,67a4 <__divsi3+0x70>
    6738:	000f883a 	mov	r7,zero
    673c:	28001616 	blt	r5,zero,6798 <__divsi3+0x64>
    6740:	200d883a 	mov	r6,r4
    6744:	29001a2e 	bgeu	r5,r4,67b0 <__divsi3+0x7c>
    6748:	00800804 	movi	r2,32
    674c:	00c00044 	movi	r3,1
    6750:	00000106 	br	6758 <__divsi3+0x24>
    6754:	10000d26 	beq	r2,zero,678c <__divsi3+0x58>
    6758:	294b883a 	add	r5,r5,r5
    675c:	10bfffc4 	addi	r2,r2,-1
    6760:	18c7883a 	add	r3,r3,r3
    6764:	293ffb36 	bltu	r5,r4,6754 <__alt_exception_stack_pointer+0xf8006754>
    6768:	0005883a 	mov	r2,zero
    676c:	18000726 	beq	r3,zero,678c <__divsi3+0x58>
    6770:	0005883a 	mov	r2,zero
    6774:	31400236 	bltu	r6,r5,6780 <__divsi3+0x4c>
    6778:	314dc83a 	sub	r6,r6,r5
    677c:	10c4b03a 	or	r2,r2,r3
    6780:	1806d07a 	srli	r3,r3,1
    6784:	280ad07a 	srli	r5,r5,1
    6788:	183ffa1e 	bne	r3,zero,6774 <__alt_exception_stack_pointer+0xf8006774>
    678c:	38000126 	beq	r7,zero,6794 <__divsi3+0x60>
    6790:	0085c83a 	sub	r2,zero,r2
    6794:	f800283a 	ret
    6798:	014bc83a 	sub	r5,zero,r5
    679c:	39c0005c 	xori	r7,r7,1
    67a0:	003fe706 	br	6740 <__alt_exception_stack_pointer+0xf8006740>
    67a4:	0109c83a 	sub	r4,zero,r4
    67a8:	01c00044 	movi	r7,1
    67ac:	003fe306 	br	673c <__alt_exception_stack_pointer+0xf800673c>
    67b0:	00c00044 	movi	r3,1
    67b4:	003fee06 	br	6770 <__alt_exception_stack_pointer+0xf8006770>

000067b8 <__modsi3>:
    67b8:	20001716 	blt	r4,zero,6818 <__modsi3+0x60>
    67bc:	000f883a 	mov	r7,zero
    67c0:	2005883a 	mov	r2,r4
    67c4:	28001216 	blt	r5,zero,6810 <__modsi3+0x58>
    67c8:	2900162e 	bgeu	r5,r4,6824 <__modsi3+0x6c>
    67cc:	01800804 	movi	r6,32
    67d0:	00c00044 	movi	r3,1
    67d4:	00000106 	br	67dc <__modsi3+0x24>
    67d8:	30000a26 	beq	r6,zero,6804 <__modsi3+0x4c>
    67dc:	294b883a 	add	r5,r5,r5
    67e0:	31bfffc4 	addi	r6,r6,-1
    67e4:	18c7883a 	add	r3,r3,r3
    67e8:	293ffb36 	bltu	r5,r4,67d8 <__alt_exception_stack_pointer+0xf80067d8>
    67ec:	18000526 	beq	r3,zero,6804 <__modsi3+0x4c>
    67f0:	1806d07a 	srli	r3,r3,1
    67f4:	11400136 	bltu	r2,r5,67fc <__modsi3+0x44>
    67f8:	1145c83a 	sub	r2,r2,r5
    67fc:	280ad07a 	srli	r5,r5,1
    6800:	183ffb1e 	bne	r3,zero,67f0 <__alt_exception_stack_pointer+0xf80067f0>
    6804:	38000126 	beq	r7,zero,680c <__modsi3+0x54>
    6808:	0085c83a 	sub	r2,zero,r2
    680c:	f800283a 	ret
    6810:	014bc83a 	sub	r5,zero,r5
    6814:	003fec06 	br	67c8 <__alt_exception_stack_pointer+0xf80067c8>
    6818:	0109c83a 	sub	r4,zero,r4
    681c:	01c00044 	movi	r7,1
    6820:	003fe706 	br	67c0 <__alt_exception_stack_pointer+0xf80067c0>
    6824:	00c00044 	movi	r3,1
    6828:	003ff106 	br	67f0 <__alt_exception_stack_pointer+0xf80067f0>

0000682c <__udivsi3>:
    682c:	200d883a 	mov	r6,r4
    6830:	2900152e 	bgeu	r5,r4,6888 <__udivsi3+0x5c>
    6834:	28001416 	blt	r5,zero,6888 <__udivsi3+0x5c>
    6838:	00800804 	movi	r2,32
    683c:	00c00044 	movi	r3,1
    6840:	00000206 	br	684c <__udivsi3+0x20>
    6844:	10000e26 	beq	r2,zero,6880 <__udivsi3+0x54>
    6848:	28000516 	blt	r5,zero,6860 <__udivsi3+0x34>
    684c:	294b883a 	add	r5,r5,r5
    6850:	10bfffc4 	addi	r2,r2,-1
    6854:	18c7883a 	add	r3,r3,r3
    6858:	293ffa36 	bltu	r5,r4,6844 <__alt_exception_stack_pointer+0xf8006844>
    685c:	18000826 	beq	r3,zero,6880 <__udivsi3+0x54>
    6860:	0005883a 	mov	r2,zero
    6864:	31400236 	bltu	r6,r5,6870 <__udivsi3+0x44>
    6868:	314dc83a 	sub	r6,r6,r5
    686c:	10c4b03a 	or	r2,r2,r3
    6870:	1806d07a 	srli	r3,r3,1
    6874:	280ad07a 	srli	r5,r5,1
    6878:	183ffa1e 	bne	r3,zero,6864 <__alt_exception_stack_pointer+0xf8006864>
    687c:	f800283a 	ret
    6880:	0005883a 	mov	r2,zero
    6884:	f800283a 	ret
    6888:	00c00044 	movi	r3,1
    688c:	003ff406 	br	6860 <__alt_exception_stack_pointer+0xf8006860>

00006890 <__umodsi3>:
    6890:	2005883a 	mov	r2,r4
    6894:	2900122e 	bgeu	r5,r4,68e0 <__umodsi3+0x50>
    6898:	28001116 	blt	r5,zero,68e0 <__umodsi3+0x50>
    689c:	01800804 	movi	r6,32
    68a0:	00c00044 	movi	r3,1
    68a4:	00000206 	br	68b0 <__umodsi3+0x20>
    68a8:	30000c26 	beq	r6,zero,68dc <__umodsi3+0x4c>
    68ac:	28000516 	blt	r5,zero,68c4 <__umodsi3+0x34>
    68b0:	294b883a 	add	r5,r5,r5
    68b4:	31bfffc4 	addi	r6,r6,-1
    68b8:	18c7883a 	add	r3,r3,r3
    68bc:	293ffa36 	bltu	r5,r4,68a8 <__alt_exception_stack_pointer+0xf80068a8>
    68c0:	18000626 	beq	r3,zero,68dc <__umodsi3+0x4c>
    68c4:	1806d07a 	srli	r3,r3,1
    68c8:	11400136 	bltu	r2,r5,68d0 <__umodsi3+0x40>
    68cc:	1145c83a 	sub	r2,r2,r5
    68d0:	280ad07a 	srli	r5,r5,1
    68d4:	183ffb1e 	bne	r3,zero,68c4 <__alt_exception_stack_pointer+0xf80068c4>
    68d8:	f800283a 	ret
    68dc:	f800283a 	ret
    68e0:	00c00044 	movi	r3,1
    68e4:	003ff706 	br	68c4 <__alt_exception_stack_pointer+0xf80068c4>

000068e8 <__mulsi3>:
    68e8:	0005883a 	mov	r2,zero
    68ec:	20000726 	beq	r4,zero,690c <__mulsi3+0x24>
    68f0:	20c0004c 	andi	r3,r4,1
    68f4:	2008d07a 	srli	r4,r4,1
    68f8:	18000126 	beq	r3,zero,6900 <__mulsi3+0x18>
    68fc:	1145883a 	add	r2,r2,r5
    6900:	294b883a 	add	r5,r5,r5
    6904:	203ffa1e 	bne	r4,zero,68f0 <__alt_exception_stack_pointer+0xf80068f0>
    6908:	f800283a 	ret
    690c:	f800283a 	ret

00006910 <__adddf3>:
    6910:	02c00434 	movhi	r11,16
    6914:	5affffc4 	addi	r11,r11,-1
    6918:	2806d7fa 	srli	r3,r5,31
    691c:	2ad4703a 	and	r10,r5,r11
    6920:	3ad2703a 	and	r9,r7,r11
    6924:	3804d53a 	srli	r2,r7,20
    6928:	3018d77a 	srli	r12,r6,29
    692c:	280ad53a 	srli	r5,r5,20
    6930:	501490fa 	slli	r10,r10,3
    6934:	2010d77a 	srli	r8,r4,29
    6938:	481290fa 	slli	r9,r9,3
    693c:	380ed7fa 	srli	r7,r7,31
    6940:	defffb04 	addi	sp,sp,-20
    6944:	dc800215 	stw	r18,8(sp)
    6948:	dc400115 	stw	r17,4(sp)
    694c:	dc000015 	stw	r16,0(sp)
    6950:	dfc00415 	stw	ra,16(sp)
    6954:	dcc00315 	stw	r19,12(sp)
    6958:	1c803fcc 	andi	r18,r3,255
    695c:	2c01ffcc 	andi	r16,r5,2047
    6960:	5210b03a 	or	r8,r10,r8
    6964:	202290fa 	slli	r17,r4,3
    6968:	1081ffcc 	andi	r2,r2,2047
    696c:	4b12b03a 	or	r9,r9,r12
    6970:	300c90fa 	slli	r6,r6,3
    6974:	91c07526 	beq	r18,r7,6b4c <__adddf3+0x23c>
    6978:	8087c83a 	sub	r3,r16,r2
    697c:	00c0ab0e 	bge	zero,r3,6c2c <__adddf3+0x31c>
    6980:	10002a1e 	bne	r2,zero,6a2c <__adddf3+0x11c>
    6984:	4984b03a 	or	r2,r9,r6
    6988:	1000961e 	bne	r2,zero,6be4 <__adddf3+0x2d4>
    698c:	888001cc 	andi	r2,r17,7
    6990:	10000726 	beq	r2,zero,69b0 <__adddf3+0xa0>
    6994:	888003cc 	andi	r2,r17,15
    6998:	00c00104 	movi	r3,4
    699c:	10c00426 	beq	r2,r3,69b0 <__adddf3+0xa0>
    69a0:	88c7883a 	add	r3,r17,r3
    69a4:	1c63803a 	cmpltu	r17,r3,r17
    69a8:	4451883a 	add	r8,r8,r17
    69ac:	1823883a 	mov	r17,r3
    69b0:	4080202c 	andhi	r2,r8,128
    69b4:	10005926 	beq	r2,zero,6b1c <__adddf3+0x20c>
    69b8:	84000044 	addi	r16,r16,1
    69bc:	0081ffc4 	movi	r2,2047
    69c0:	8080ba26 	beq	r16,r2,6cac <__adddf3+0x39c>
    69c4:	00bfe034 	movhi	r2,65408
    69c8:	10bfffc4 	addi	r2,r2,-1
    69cc:	4090703a 	and	r8,r8,r2
    69d0:	4004977a 	slli	r2,r8,29
    69d4:	4010927a 	slli	r8,r8,9
    69d8:	8822d0fa 	srli	r17,r17,3
    69dc:	8401ffcc 	andi	r16,r16,2047
    69e0:	4010d33a 	srli	r8,r8,12
    69e4:	9007883a 	mov	r3,r18
    69e8:	1444b03a 	or	r2,r2,r17
    69ec:	8401ffcc 	andi	r16,r16,2047
    69f0:	8020953a 	slli	r16,r16,20
    69f4:	18c03fcc 	andi	r3,r3,255
    69f8:	01000434 	movhi	r4,16
    69fc:	213fffc4 	addi	r4,r4,-1
    6a00:	180697fa 	slli	r3,r3,31
    6a04:	4110703a 	and	r8,r8,r4
    6a08:	4410b03a 	or	r8,r8,r16
    6a0c:	40c6b03a 	or	r3,r8,r3
    6a10:	dfc00417 	ldw	ra,16(sp)
    6a14:	dcc00317 	ldw	r19,12(sp)
    6a18:	dc800217 	ldw	r18,8(sp)
    6a1c:	dc400117 	ldw	r17,4(sp)
    6a20:	dc000017 	ldw	r16,0(sp)
    6a24:	dec00504 	addi	sp,sp,20
    6a28:	f800283a 	ret
    6a2c:	0081ffc4 	movi	r2,2047
    6a30:	80bfd626 	beq	r16,r2,698c <__alt_exception_stack_pointer+0xf800698c>
    6a34:	4a402034 	orhi	r9,r9,128
    6a38:	00800e04 	movi	r2,56
    6a3c:	10c09f16 	blt	r2,r3,6cbc <__adddf3+0x3ac>
    6a40:	008007c4 	movi	r2,31
    6a44:	10c0c216 	blt	r2,r3,6d50 <__adddf3+0x440>
    6a48:	00800804 	movi	r2,32
    6a4c:	10c5c83a 	sub	r2,r2,r3
    6a50:	488a983a 	sll	r5,r9,r2
    6a54:	30c8d83a 	srl	r4,r6,r3
    6a58:	3084983a 	sll	r2,r6,r2
    6a5c:	48c6d83a 	srl	r3,r9,r3
    6a60:	290cb03a 	or	r6,r5,r4
    6a64:	1004c03a 	cmpne	r2,r2,zero
    6a68:	308cb03a 	or	r6,r6,r2
    6a6c:	898dc83a 	sub	r6,r17,r6
    6a70:	89a3803a 	cmpltu	r17,r17,r6
    6a74:	40d1c83a 	sub	r8,r8,r3
    6a78:	4451c83a 	sub	r8,r8,r17
    6a7c:	3023883a 	mov	r17,r6
    6a80:	4080202c 	andhi	r2,r8,128
    6a84:	10002326 	beq	r2,zero,6b14 <__adddf3+0x204>
    6a88:	04c02034 	movhi	r19,128
    6a8c:	9cffffc4 	addi	r19,r19,-1
    6a90:	44e6703a 	and	r19,r8,r19
    6a94:	98007626 	beq	r19,zero,6c70 <__adddf3+0x360>
    6a98:	9809883a 	mov	r4,r19
    6a9c:	00094080 	call	9408 <__clzsi2>
    6aa0:	10fffe04 	addi	r3,r2,-8
    6aa4:	010007c4 	movi	r4,31
    6aa8:	20c07716 	blt	r4,r3,6c88 <__adddf3+0x378>
    6aac:	00800804 	movi	r2,32
    6ab0:	10c5c83a 	sub	r2,r2,r3
    6ab4:	8884d83a 	srl	r2,r17,r2
    6ab8:	98d0983a 	sll	r8,r19,r3
    6abc:	88e2983a 	sll	r17,r17,r3
    6ac0:	1204b03a 	or	r2,r2,r8
    6ac4:	1c007416 	blt	r3,r16,6c98 <__adddf3+0x388>
    6ac8:	1c21c83a 	sub	r16,r3,r16
    6acc:	82000044 	addi	r8,r16,1
    6ad0:	00c007c4 	movi	r3,31
    6ad4:	1a009116 	blt	r3,r8,6d1c <__adddf3+0x40c>
    6ad8:	00c00804 	movi	r3,32
    6adc:	1a07c83a 	sub	r3,r3,r8
    6ae0:	8a08d83a 	srl	r4,r17,r8
    6ae4:	88e2983a 	sll	r17,r17,r3
    6ae8:	10c6983a 	sll	r3,r2,r3
    6aec:	1210d83a 	srl	r8,r2,r8
    6af0:	8804c03a 	cmpne	r2,r17,zero
    6af4:	1906b03a 	or	r3,r3,r4
    6af8:	18a2b03a 	or	r17,r3,r2
    6afc:	0021883a 	mov	r16,zero
    6b00:	003fa206 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6b04:	1890b03a 	or	r8,r3,r2
    6b08:	40017d26 	beq	r8,zero,7100 <__adddf3+0x7f0>
    6b0c:	1011883a 	mov	r8,r2
    6b10:	1823883a 	mov	r17,r3
    6b14:	888001cc 	andi	r2,r17,7
    6b18:	103f9e1e 	bne	r2,zero,6994 <__alt_exception_stack_pointer+0xf8006994>
    6b1c:	4004977a 	slli	r2,r8,29
    6b20:	8822d0fa 	srli	r17,r17,3
    6b24:	4010d0fa 	srli	r8,r8,3
    6b28:	9007883a 	mov	r3,r18
    6b2c:	1444b03a 	or	r2,r2,r17
    6b30:	0101ffc4 	movi	r4,2047
    6b34:	81002426 	beq	r16,r4,6bc8 <__adddf3+0x2b8>
    6b38:	8120703a 	and	r16,r16,r4
    6b3c:	01000434 	movhi	r4,16
    6b40:	213fffc4 	addi	r4,r4,-1
    6b44:	4110703a 	and	r8,r8,r4
    6b48:	003fa806 	br	69ec <__alt_exception_stack_pointer+0xf80069ec>
    6b4c:	8089c83a 	sub	r4,r16,r2
    6b50:	01005e0e 	bge	zero,r4,6ccc <__adddf3+0x3bc>
    6b54:	10002b26 	beq	r2,zero,6c04 <__adddf3+0x2f4>
    6b58:	0081ffc4 	movi	r2,2047
    6b5c:	80bf8b26 	beq	r16,r2,698c <__alt_exception_stack_pointer+0xf800698c>
    6b60:	4a402034 	orhi	r9,r9,128
    6b64:	00800e04 	movi	r2,56
    6b68:	1100a40e 	bge	r2,r4,6dfc <__adddf3+0x4ec>
    6b6c:	498cb03a 	or	r6,r9,r6
    6b70:	300ac03a 	cmpne	r5,r6,zero
    6b74:	0013883a 	mov	r9,zero
    6b78:	2c4b883a 	add	r5,r5,r17
    6b7c:	2c63803a 	cmpltu	r17,r5,r17
    6b80:	4a11883a 	add	r8,r9,r8
    6b84:	8a11883a 	add	r8,r17,r8
    6b88:	2823883a 	mov	r17,r5
    6b8c:	4080202c 	andhi	r2,r8,128
    6b90:	103fe026 	beq	r2,zero,6b14 <__alt_exception_stack_pointer+0xf8006b14>
    6b94:	84000044 	addi	r16,r16,1
    6b98:	0081ffc4 	movi	r2,2047
    6b9c:	8080d226 	beq	r16,r2,6ee8 <__adddf3+0x5d8>
    6ba0:	00bfe034 	movhi	r2,65408
    6ba4:	10bfffc4 	addi	r2,r2,-1
    6ba8:	4090703a 	and	r8,r8,r2
    6bac:	880ad07a 	srli	r5,r17,1
    6bb0:	400897fa 	slli	r4,r8,31
    6bb4:	88c0004c 	andi	r3,r17,1
    6bb8:	28e2b03a 	or	r17,r5,r3
    6bbc:	4010d07a 	srli	r8,r8,1
    6bc0:	2462b03a 	or	r17,r4,r17
    6bc4:	003f7106 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6bc8:	4088b03a 	or	r4,r8,r2
    6bcc:	20014526 	beq	r4,zero,70e4 <__adddf3+0x7d4>
    6bd0:	01000434 	movhi	r4,16
    6bd4:	42000234 	orhi	r8,r8,8
    6bd8:	213fffc4 	addi	r4,r4,-1
    6bdc:	4110703a 	and	r8,r8,r4
    6be0:	003f8206 	br	69ec <__alt_exception_stack_pointer+0xf80069ec>
    6be4:	18ffffc4 	addi	r3,r3,-1
    6be8:	1800491e 	bne	r3,zero,6d10 <__adddf3+0x400>
    6bec:	898bc83a 	sub	r5,r17,r6
    6bf0:	8963803a 	cmpltu	r17,r17,r5
    6bf4:	4251c83a 	sub	r8,r8,r9
    6bf8:	4451c83a 	sub	r8,r8,r17
    6bfc:	2823883a 	mov	r17,r5
    6c00:	003f9f06 	br	6a80 <__alt_exception_stack_pointer+0xf8006a80>
    6c04:	4984b03a 	or	r2,r9,r6
    6c08:	103f6026 	beq	r2,zero,698c <__alt_exception_stack_pointer+0xf800698c>
    6c0c:	213fffc4 	addi	r4,r4,-1
    6c10:	2000931e 	bne	r4,zero,6e60 <__adddf3+0x550>
    6c14:	898d883a 	add	r6,r17,r6
    6c18:	3463803a 	cmpltu	r17,r6,r17
    6c1c:	4251883a 	add	r8,r8,r9
    6c20:	8a11883a 	add	r8,r17,r8
    6c24:	3023883a 	mov	r17,r6
    6c28:	003fd806 	br	6b8c <__alt_exception_stack_pointer+0xf8006b8c>
    6c2c:	1800541e 	bne	r3,zero,6d80 <__adddf3+0x470>
    6c30:	80800044 	addi	r2,r16,1
    6c34:	1081ffcc 	andi	r2,r2,2047
    6c38:	00c00044 	movi	r3,1
    6c3c:	1880a00e 	bge	r3,r2,6ec0 <__adddf3+0x5b0>
    6c40:	8989c83a 	sub	r4,r17,r6
    6c44:	8905803a 	cmpltu	r2,r17,r4
    6c48:	4267c83a 	sub	r19,r8,r9
    6c4c:	98a7c83a 	sub	r19,r19,r2
    6c50:	9880202c 	andhi	r2,r19,128
    6c54:	10006326 	beq	r2,zero,6de4 <__adddf3+0x4d4>
    6c58:	3463c83a 	sub	r17,r6,r17
    6c5c:	4a07c83a 	sub	r3,r9,r8
    6c60:	344d803a 	cmpltu	r6,r6,r17
    6c64:	19a7c83a 	sub	r19,r3,r6
    6c68:	3825883a 	mov	r18,r7
    6c6c:	983f8a1e 	bne	r19,zero,6a98 <__alt_exception_stack_pointer+0xf8006a98>
    6c70:	8809883a 	mov	r4,r17
    6c74:	00094080 	call	9408 <__clzsi2>
    6c78:	10800804 	addi	r2,r2,32
    6c7c:	10fffe04 	addi	r3,r2,-8
    6c80:	010007c4 	movi	r4,31
    6c84:	20ff890e 	bge	r4,r3,6aac <__alt_exception_stack_pointer+0xf8006aac>
    6c88:	10bff604 	addi	r2,r2,-40
    6c8c:	8884983a 	sll	r2,r17,r2
    6c90:	0023883a 	mov	r17,zero
    6c94:	1c3f8c0e 	bge	r3,r16,6ac8 <__alt_exception_stack_pointer+0xf8006ac8>
    6c98:	023fe034 	movhi	r8,65408
    6c9c:	423fffc4 	addi	r8,r8,-1
    6ca0:	80e1c83a 	sub	r16,r16,r3
    6ca4:	1210703a 	and	r8,r2,r8
    6ca8:	003f3806 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6cac:	9007883a 	mov	r3,r18
    6cb0:	0011883a 	mov	r8,zero
    6cb4:	0005883a 	mov	r2,zero
    6cb8:	003f4c06 	br	69ec <__alt_exception_stack_pointer+0xf80069ec>
    6cbc:	498cb03a 	or	r6,r9,r6
    6cc0:	300cc03a 	cmpne	r6,r6,zero
    6cc4:	0007883a 	mov	r3,zero
    6cc8:	003f6806 	br	6a6c <__alt_exception_stack_pointer+0xf8006a6c>
    6ccc:	20009c1e 	bne	r4,zero,6f40 <__adddf3+0x630>
    6cd0:	80800044 	addi	r2,r16,1
    6cd4:	1141ffcc 	andi	r5,r2,2047
    6cd8:	01000044 	movi	r4,1
    6cdc:	2140670e 	bge	r4,r5,6e7c <__adddf3+0x56c>
    6ce0:	0101ffc4 	movi	r4,2047
    6ce4:	11007f26 	beq	r2,r4,6ee4 <__adddf3+0x5d4>
    6ce8:	898d883a 	add	r6,r17,r6
    6cec:	4247883a 	add	r3,r8,r9
    6cf0:	3451803a 	cmpltu	r8,r6,r17
    6cf4:	40d1883a 	add	r8,r8,r3
    6cf8:	402297fa 	slli	r17,r8,31
    6cfc:	300cd07a 	srli	r6,r6,1
    6d00:	4010d07a 	srli	r8,r8,1
    6d04:	1021883a 	mov	r16,r2
    6d08:	89a2b03a 	or	r17,r17,r6
    6d0c:	003f1f06 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6d10:	0081ffc4 	movi	r2,2047
    6d14:	80bf481e 	bne	r16,r2,6a38 <__alt_exception_stack_pointer+0xf8006a38>
    6d18:	003f1c06 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6d1c:	843ff844 	addi	r16,r16,-31
    6d20:	01000804 	movi	r4,32
    6d24:	1406d83a 	srl	r3,r2,r16
    6d28:	41005026 	beq	r8,r4,6e6c <__adddf3+0x55c>
    6d2c:	01001004 	movi	r4,64
    6d30:	2211c83a 	sub	r8,r4,r8
    6d34:	1204983a 	sll	r2,r2,r8
    6d38:	88a2b03a 	or	r17,r17,r2
    6d3c:	8822c03a 	cmpne	r17,r17,zero
    6d40:	1c62b03a 	or	r17,r3,r17
    6d44:	0011883a 	mov	r8,zero
    6d48:	0021883a 	mov	r16,zero
    6d4c:	003f7106 	br	6b14 <__alt_exception_stack_pointer+0xf8006b14>
    6d50:	193ff804 	addi	r4,r3,-32
    6d54:	00800804 	movi	r2,32
    6d58:	4908d83a 	srl	r4,r9,r4
    6d5c:	18804526 	beq	r3,r2,6e74 <__adddf3+0x564>
    6d60:	00801004 	movi	r2,64
    6d64:	10c5c83a 	sub	r2,r2,r3
    6d68:	4886983a 	sll	r3,r9,r2
    6d6c:	198cb03a 	or	r6,r3,r6
    6d70:	300cc03a 	cmpne	r6,r6,zero
    6d74:	218cb03a 	or	r6,r4,r6
    6d78:	0007883a 	mov	r3,zero
    6d7c:	003f3b06 	br	6a6c <__alt_exception_stack_pointer+0xf8006a6c>
    6d80:	80002a26 	beq	r16,zero,6e2c <__adddf3+0x51c>
    6d84:	0101ffc4 	movi	r4,2047
    6d88:	11006826 	beq	r2,r4,6f2c <__adddf3+0x61c>
    6d8c:	00c7c83a 	sub	r3,zero,r3
    6d90:	42002034 	orhi	r8,r8,128
    6d94:	01000e04 	movi	r4,56
    6d98:	20c07c16 	blt	r4,r3,6f8c <__adddf3+0x67c>
    6d9c:	010007c4 	movi	r4,31
    6da0:	20c0da16 	blt	r4,r3,710c <__adddf3+0x7fc>
    6da4:	01000804 	movi	r4,32
    6da8:	20c9c83a 	sub	r4,r4,r3
    6dac:	4114983a 	sll	r10,r8,r4
    6db0:	88cad83a 	srl	r5,r17,r3
    6db4:	8908983a 	sll	r4,r17,r4
    6db8:	40c6d83a 	srl	r3,r8,r3
    6dbc:	5162b03a 	or	r17,r10,r5
    6dc0:	2008c03a 	cmpne	r4,r4,zero
    6dc4:	8922b03a 	or	r17,r17,r4
    6dc8:	3463c83a 	sub	r17,r6,r17
    6dcc:	48c7c83a 	sub	r3,r9,r3
    6dd0:	344d803a 	cmpltu	r6,r6,r17
    6dd4:	1991c83a 	sub	r8,r3,r6
    6dd8:	1021883a 	mov	r16,r2
    6ddc:	3825883a 	mov	r18,r7
    6de0:	003f2706 	br	6a80 <__alt_exception_stack_pointer+0xf8006a80>
    6de4:	24d0b03a 	or	r8,r4,r19
    6de8:	40001b1e 	bne	r8,zero,6e58 <__adddf3+0x548>
    6dec:	0005883a 	mov	r2,zero
    6df0:	0007883a 	mov	r3,zero
    6df4:	0021883a 	mov	r16,zero
    6df8:	003f4d06 	br	6b30 <__alt_exception_stack_pointer+0xf8006b30>
    6dfc:	008007c4 	movi	r2,31
    6e00:	11003c16 	blt	r2,r4,6ef4 <__adddf3+0x5e4>
    6e04:	00800804 	movi	r2,32
    6e08:	1105c83a 	sub	r2,r2,r4
    6e0c:	488e983a 	sll	r7,r9,r2
    6e10:	310ad83a 	srl	r5,r6,r4
    6e14:	3084983a 	sll	r2,r6,r2
    6e18:	4912d83a 	srl	r9,r9,r4
    6e1c:	394ab03a 	or	r5,r7,r5
    6e20:	1004c03a 	cmpne	r2,r2,zero
    6e24:	288ab03a 	or	r5,r5,r2
    6e28:	003f5306 	br	6b78 <__alt_exception_stack_pointer+0xf8006b78>
    6e2c:	4448b03a 	or	r4,r8,r17
    6e30:	20003e26 	beq	r4,zero,6f2c <__adddf3+0x61c>
    6e34:	00c6303a 	nor	r3,zero,r3
    6e38:	18003a1e 	bne	r3,zero,6f24 <__adddf3+0x614>
    6e3c:	3463c83a 	sub	r17,r6,r17
    6e40:	4a07c83a 	sub	r3,r9,r8
    6e44:	344d803a 	cmpltu	r6,r6,r17
    6e48:	1991c83a 	sub	r8,r3,r6
    6e4c:	1021883a 	mov	r16,r2
    6e50:	3825883a 	mov	r18,r7
    6e54:	003f0a06 	br	6a80 <__alt_exception_stack_pointer+0xf8006a80>
    6e58:	2023883a 	mov	r17,r4
    6e5c:	003f0d06 	br	6a94 <__alt_exception_stack_pointer+0xf8006a94>
    6e60:	0081ffc4 	movi	r2,2047
    6e64:	80bf3f1e 	bne	r16,r2,6b64 <__alt_exception_stack_pointer+0xf8006b64>
    6e68:	003ec806 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6e6c:	0005883a 	mov	r2,zero
    6e70:	003fb106 	br	6d38 <__alt_exception_stack_pointer+0xf8006d38>
    6e74:	0007883a 	mov	r3,zero
    6e78:	003fbc06 	br	6d6c <__alt_exception_stack_pointer+0xf8006d6c>
    6e7c:	4444b03a 	or	r2,r8,r17
    6e80:	8000871e 	bne	r16,zero,70a0 <__adddf3+0x790>
    6e84:	1000ba26 	beq	r2,zero,7170 <__adddf3+0x860>
    6e88:	4984b03a 	or	r2,r9,r6
    6e8c:	103ebf26 	beq	r2,zero,698c <__alt_exception_stack_pointer+0xf800698c>
    6e90:	8985883a 	add	r2,r17,r6
    6e94:	4247883a 	add	r3,r8,r9
    6e98:	1451803a 	cmpltu	r8,r2,r17
    6e9c:	40d1883a 	add	r8,r8,r3
    6ea0:	40c0202c 	andhi	r3,r8,128
    6ea4:	1023883a 	mov	r17,r2
    6ea8:	183f1a26 	beq	r3,zero,6b14 <__alt_exception_stack_pointer+0xf8006b14>
    6eac:	00bfe034 	movhi	r2,65408
    6eb0:	10bfffc4 	addi	r2,r2,-1
    6eb4:	2021883a 	mov	r16,r4
    6eb8:	4090703a 	and	r8,r8,r2
    6ebc:	003eb306 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6ec0:	4444b03a 	or	r2,r8,r17
    6ec4:	8000291e 	bne	r16,zero,6f6c <__adddf3+0x65c>
    6ec8:	10004b1e 	bne	r2,zero,6ff8 <__adddf3+0x6e8>
    6ecc:	4990b03a 	or	r8,r9,r6
    6ed0:	40008b26 	beq	r8,zero,7100 <__adddf3+0x7f0>
    6ed4:	4811883a 	mov	r8,r9
    6ed8:	3023883a 	mov	r17,r6
    6edc:	3825883a 	mov	r18,r7
    6ee0:	003eaa06 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6ee4:	1021883a 	mov	r16,r2
    6ee8:	0011883a 	mov	r8,zero
    6eec:	0005883a 	mov	r2,zero
    6ef0:	003f0f06 	br	6b30 <__alt_exception_stack_pointer+0xf8006b30>
    6ef4:	217ff804 	addi	r5,r4,-32
    6ef8:	00800804 	movi	r2,32
    6efc:	494ad83a 	srl	r5,r9,r5
    6f00:	20807d26 	beq	r4,r2,70f8 <__adddf3+0x7e8>
    6f04:	00801004 	movi	r2,64
    6f08:	1109c83a 	sub	r4,r2,r4
    6f0c:	4912983a 	sll	r9,r9,r4
    6f10:	498cb03a 	or	r6,r9,r6
    6f14:	300cc03a 	cmpne	r6,r6,zero
    6f18:	298ab03a 	or	r5,r5,r6
    6f1c:	0013883a 	mov	r9,zero
    6f20:	003f1506 	br	6b78 <__alt_exception_stack_pointer+0xf8006b78>
    6f24:	0101ffc4 	movi	r4,2047
    6f28:	113f9a1e 	bne	r2,r4,6d94 <__alt_exception_stack_pointer+0xf8006d94>
    6f2c:	4811883a 	mov	r8,r9
    6f30:	3023883a 	mov	r17,r6
    6f34:	1021883a 	mov	r16,r2
    6f38:	3825883a 	mov	r18,r7
    6f3c:	003e9306 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6f40:	8000161e 	bne	r16,zero,6f9c <__adddf3+0x68c>
    6f44:	444ab03a 	or	r5,r8,r17
    6f48:	28005126 	beq	r5,zero,7090 <__adddf3+0x780>
    6f4c:	0108303a 	nor	r4,zero,r4
    6f50:	20004d1e 	bne	r4,zero,7088 <__adddf3+0x778>
    6f54:	89a3883a 	add	r17,r17,r6
    6f58:	4253883a 	add	r9,r8,r9
    6f5c:	898d803a 	cmpltu	r6,r17,r6
    6f60:	3251883a 	add	r8,r6,r9
    6f64:	1021883a 	mov	r16,r2
    6f68:	003f0806 	br	6b8c <__alt_exception_stack_pointer+0xf8006b8c>
    6f6c:	1000301e 	bne	r2,zero,7030 <__adddf3+0x720>
    6f70:	4984b03a 	or	r2,r9,r6
    6f74:	10007126 	beq	r2,zero,713c <__adddf3+0x82c>
    6f78:	4811883a 	mov	r8,r9
    6f7c:	3023883a 	mov	r17,r6
    6f80:	3825883a 	mov	r18,r7
    6f84:	0401ffc4 	movi	r16,2047
    6f88:	003e8006 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    6f8c:	4462b03a 	or	r17,r8,r17
    6f90:	8822c03a 	cmpne	r17,r17,zero
    6f94:	0007883a 	mov	r3,zero
    6f98:	003f8b06 	br	6dc8 <__alt_exception_stack_pointer+0xf8006dc8>
    6f9c:	0141ffc4 	movi	r5,2047
    6fa0:	11403b26 	beq	r2,r5,7090 <__adddf3+0x780>
    6fa4:	0109c83a 	sub	r4,zero,r4
    6fa8:	42002034 	orhi	r8,r8,128
    6fac:	01400e04 	movi	r5,56
    6fb0:	29006716 	blt	r5,r4,7150 <__adddf3+0x840>
    6fb4:	014007c4 	movi	r5,31
    6fb8:	29007016 	blt	r5,r4,717c <__adddf3+0x86c>
    6fbc:	01400804 	movi	r5,32
    6fc0:	290bc83a 	sub	r5,r5,r4
    6fc4:	4154983a 	sll	r10,r8,r5
    6fc8:	890ed83a 	srl	r7,r17,r4
    6fcc:	894a983a 	sll	r5,r17,r5
    6fd0:	4108d83a 	srl	r4,r8,r4
    6fd4:	51e2b03a 	or	r17,r10,r7
    6fd8:	280ac03a 	cmpne	r5,r5,zero
    6fdc:	8962b03a 	or	r17,r17,r5
    6fe0:	89a3883a 	add	r17,r17,r6
    6fe4:	2253883a 	add	r9,r4,r9
    6fe8:	898d803a 	cmpltu	r6,r17,r6
    6fec:	3251883a 	add	r8,r6,r9
    6ff0:	1021883a 	mov	r16,r2
    6ff4:	003ee506 	br	6b8c <__alt_exception_stack_pointer+0xf8006b8c>
    6ff8:	4984b03a 	or	r2,r9,r6
    6ffc:	103e6326 	beq	r2,zero,698c <__alt_exception_stack_pointer+0xf800698c>
    7000:	8987c83a 	sub	r3,r17,r6
    7004:	88c9803a 	cmpltu	r4,r17,r3
    7008:	4245c83a 	sub	r2,r8,r9
    700c:	1105c83a 	sub	r2,r2,r4
    7010:	1100202c 	andhi	r4,r2,128
    7014:	203ebb26 	beq	r4,zero,6b04 <__alt_exception_stack_pointer+0xf8006b04>
    7018:	3463c83a 	sub	r17,r6,r17
    701c:	4a07c83a 	sub	r3,r9,r8
    7020:	344d803a 	cmpltu	r6,r6,r17
    7024:	1991c83a 	sub	r8,r3,r6
    7028:	3825883a 	mov	r18,r7
    702c:	003e5706 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    7030:	4984b03a 	or	r2,r9,r6
    7034:	10002e26 	beq	r2,zero,70f0 <__adddf3+0x7e0>
    7038:	4004d0fa 	srli	r2,r8,3
    703c:	8822d0fa 	srli	r17,r17,3
    7040:	4010977a 	slli	r8,r8,29
    7044:	10c0022c 	andhi	r3,r2,8
    7048:	4462b03a 	or	r17,r8,r17
    704c:	18000826 	beq	r3,zero,7070 <__adddf3+0x760>
    7050:	4808d0fa 	srli	r4,r9,3
    7054:	20c0022c 	andhi	r3,r4,8
    7058:	1800051e 	bne	r3,zero,7070 <__adddf3+0x760>
    705c:	300cd0fa 	srli	r6,r6,3
    7060:	4806977a 	slli	r3,r9,29
    7064:	2005883a 	mov	r2,r4
    7068:	3825883a 	mov	r18,r7
    706c:	19a2b03a 	or	r17,r3,r6
    7070:	8810d77a 	srli	r8,r17,29
    7074:	100490fa 	slli	r2,r2,3
    7078:	882290fa 	slli	r17,r17,3
    707c:	0401ffc4 	movi	r16,2047
    7080:	4090b03a 	or	r8,r8,r2
    7084:	003e4106 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    7088:	0141ffc4 	movi	r5,2047
    708c:	117fc71e 	bne	r2,r5,6fac <__alt_exception_stack_pointer+0xf8006fac>
    7090:	4811883a 	mov	r8,r9
    7094:	3023883a 	mov	r17,r6
    7098:	1021883a 	mov	r16,r2
    709c:	003e3b06 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    70a0:	10002f26 	beq	r2,zero,7160 <__adddf3+0x850>
    70a4:	4984b03a 	or	r2,r9,r6
    70a8:	10001126 	beq	r2,zero,70f0 <__adddf3+0x7e0>
    70ac:	4004d0fa 	srli	r2,r8,3
    70b0:	8822d0fa 	srli	r17,r17,3
    70b4:	4010977a 	slli	r8,r8,29
    70b8:	10c0022c 	andhi	r3,r2,8
    70bc:	4462b03a 	or	r17,r8,r17
    70c0:	183feb26 	beq	r3,zero,7070 <__alt_exception_stack_pointer+0xf8007070>
    70c4:	4808d0fa 	srli	r4,r9,3
    70c8:	20c0022c 	andhi	r3,r4,8
    70cc:	183fe81e 	bne	r3,zero,7070 <__alt_exception_stack_pointer+0xf8007070>
    70d0:	300cd0fa 	srli	r6,r6,3
    70d4:	4806977a 	slli	r3,r9,29
    70d8:	2005883a 	mov	r2,r4
    70dc:	19a2b03a 	or	r17,r3,r6
    70e0:	003fe306 	br	7070 <__alt_exception_stack_pointer+0xf8007070>
    70e4:	0011883a 	mov	r8,zero
    70e8:	0005883a 	mov	r2,zero
    70ec:	003e3f06 	br	69ec <__alt_exception_stack_pointer+0xf80069ec>
    70f0:	0401ffc4 	movi	r16,2047
    70f4:	003e2506 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    70f8:	0013883a 	mov	r9,zero
    70fc:	003f8406 	br	6f10 <__alt_exception_stack_pointer+0xf8006f10>
    7100:	0005883a 	mov	r2,zero
    7104:	0007883a 	mov	r3,zero
    7108:	003e8906 	br	6b30 <__alt_exception_stack_pointer+0xf8006b30>
    710c:	197ff804 	addi	r5,r3,-32
    7110:	01000804 	movi	r4,32
    7114:	414ad83a 	srl	r5,r8,r5
    7118:	19002426 	beq	r3,r4,71ac <__adddf3+0x89c>
    711c:	01001004 	movi	r4,64
    7120:	20c7c83a 	sub	r3,r4,r3
    7124:	40c6983a 	sll	r3,r8,r3
    7128:	1c46b03a 	or	r3,r3,r17
    712c:	1806c03a 	cmpne	r3,r3,zero
    7130:	28e2b03a 	or	r17,r5,r3
    7134:	0007883a 	mov	r3,zero
    7138:	003f2306 	br	6dc8 <__alt_exception_stack_pointer+0xf8006dc8>
    713c:	0007883a 	mov	r3,zero
    7140:	5811883a 	mov	r8,r11
    7144:	00bfffc4 	movi	r2,-1
    7148:	0401ffc4 	movi	r16,2047
    714c:	003e7806 	br	6b30 <__alt_exception_stack_pointer+0xf8006b30>
    7150:	4462b03a 	or	r17,r8,r17
    7154:	8822c03a 	cmpne	r17,r17,zero
    7158:	0009883a 	mov	r4,zero
    715c:	003fa006 	br	6fe0 <__alt_exception_stack_pointer+0xf8006fe0>
    7160:	4811883a 	mov	r8,r9
    7164:	3023883a 	mov	r17,r6
    7168:	0401ffc4 	movi	r16,2047
    716c:	003e0706 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    7170:	4811883a 	mov	r8,r9
    7174:	3023883a 	mov	r17,r6
    7178:	003e0406 	br	698c <__alt_exception_stack_pointer+0xf800698c>
    717c:	21fff804 	addi	r7,r4,-32
    7180:	01400804 	movi	r5,32
    7184:	41ced83a 	srl	r7,r8,r7
    7188:	21400a26 	beq	r4,r5,71b4 <__adddf3+0x8a4>
    718c:	01401004 	movi	r5,64
    7190:	2909c83a 	sub	r4,r5,r4
    7194:	4108983a 	sll	r4,r8,r4
    7198:	2448b03a 	or	r4,r4,r17
    719c:	2008c03a 	cmpne	r4,r4,zero
    71a0:	3922b03a 	or	r17,r7,r4
    71a4:	0009883a 	mov	r4,zero
    71a8:	003f8d06 	br	6fe0 <__alt_exception_stack_pointer+0xf8006fe0>
    71ac:	0007883a 	mov	r3,zero
    71b0:	003fdd06 	br	7128 <__alt_exception_stack_pointer+0xf8007128>
    71b4:	0009883a 	mov	r4,zero
    71b8:	003ff706 	br	7198 <__alt_exception_stack_pointer+0xf8007198>

000071bc <__divdf3>:
    71bc:	defff004 	addi	sp,sp,-64
    71c0:	dc800815 	stw	r18,32(sp)
    71c4:	2824d53a 	srli	r18,r5,20
    71c8:	dd800c15 	stw	r22,48(sp)
    71cc:	282cd7fa 	srli	r22,r5,31
    71d0:	dc000615 	stw	r16,24(sp)
    71d4:	04000434 	movhi	r16,16
    71d8:	843fffc4 	addi	r16,r16,-1
    71dc:	dfc00f15 	stw	ra,60(sp)
    71e0:	df000e15 	stw	fp,56(sp)
    71e4:	ddc00d15 	stw	r23,52(sp)
    71e8:	dd400b15 	stw	r21,44(sp)
    71ec:	dd000a15 	stw	r20,40(sp)
    71f0:	dcc00915 	stw	r19,36(sp)
    71f4:	dc400715 	stw	r17,28(sp)
    71f8:	9481ffcc 	andi	r18,r18,2047
    71fc:	2c20703a 	and	r16,r5,r16
    7200:	b2003fcc 	andi	r8,r22,255
    7204:	90006126 	beq	r18,zero,738c <__divdf3+0x1d0>
    7208:	0081ffc4 	movi	r2,2047
    720c:	202b883a 	mov	r21,r4
    7210:	90803726 	beq	r18,r2,72f0 <__divdf3+0x134>
    7214:	80800434 	orhi	r2,r16,16
    7218:	100490fa 	slli	r2,r2,3
    721c:	2020d77a 	srli	r16,r4,29
    7220:	202a90fa 	slli	r21,r4,3
    7224:	94bf0044 	addi	r18,r18,-1023
    7228:	80a0b03a 	or	r16,r16,r2
    722c:	0013883a 	mov	r9,zero
    7230:	000b883a 	mov	r5,zero
    7234:	3806d53a 	srli	r3,r7,20
    7238:	382ed7fa 	srli	r23,r7,31
    723c:	04400434 	movhi	r17,16
    7240:	8c7fffc4 	addi	r17,r17,-1
    7244:	18c1ffcc 	andi	r3,r3,2047
    7248:	3029883a 	mov	r20,r6
    724c:	3c62703a 	and	r17,r7,r17
    7250:	bf003fcc 	andi	fp,r23,255
    7254:	18006e26 	beq	r3,zero,7410 <__divdf3+0x254>
    7258:	0081ffc4 	movi	r2,2047
    725c:	18806626 	beq	r3,r2,73f8 <__divdf3+0x23c>
    7260:	88800434 	orhi	r2,r17,16
    7264:	100490fa 	slli	r2,r2,3
    7268:	3022d77a 	srli	r17,r6,29
    726c:	302890fa 	slli	r20,r6,3
    7270:	18ff0044 	addi	r3,r3,-1023
    7274:	88a2b03a 	or	r17,r17,r2
    7278:	000f883a 	mov	r7,zero
    727c:	b5e6f03a 	xor	r19,r22,r23
    7280:	3a4cb03a 	or	r6,r7,r9
    7284:	008003c4 	movi	r2,15
    7288:	9809883a 	mov	r4,r19
    728c:	90c7c83a 	sub	r3,r18,r3
    7290:	9cc03fcc 	andi	r19,r19,255
    7294:	11809636 	bltu	r2,r6,74f0 <__divdf3+0x334>
    7298:	300c90ba 	slli	r6,r6,2
    729c:	00800034 	movhi	r2,0
    72a0:	109cac04 	addi	r2,r2,29360
    72a4:	308d883a 	add	r6,r6,r2
    72a8:	30800017 	ldw	r2,0(r6)
    72ac:	1000683a 	jmp	r2
    72b0:	000074f0 	cmpltui	zero,zero,467
    72b4:	00007328 	cmpgeui	zero,zero,460
    72b8:	000074e0 	cmpeqi	zero,zero,467
    72bc:	0000731c 	xori	zero,zero,460
    72c0:	000074e0 	cmpeqi	zero,zero,467
    72c4:	000074b4 	movhi	zero,466
    72c8:	000074e0 	cmpeqi	zero,zero,467
    72cc:	0000731c 	xori	zero,zero,460
    72d0:	00007328 	cmpgeui	zero,zero,460
    72d4:	00007328 	cmpgeui	zero,zero,460
    72d8:	000074b4 	movhi	zero,466
    72dc:	0000731c 	xori	zero,zero,460
    72e0:	0000730c 	andi	zero,zero,460
    72e4:	0000730c 	andi	zero,zero,460
    72e8:	0000730c 	andi	zero,zero,460
    72ec:	00007878 	rdprs	zero,zero,481
    72f0:	2404b03a 	or	r2,r4,r16
    72f4:	10006c1e 	bne	r2,zero,74a8 <__divdf3+0x2ec>
    72f8:	02400204 	movi	r9,8
    72fc:	0021883a 	mov	r16,zero
    7300:	002b883a 	mov	r21,zero
    7304:	01400084 	movi	r5,2
    7308:	003fca06 	br	7234 <__alt_exception_stack_pointer+0xf8007234>
    730c:	8023883a 	mov	r17,r16
    7310:	a829883a 	mov	r20,r21
    7314:	4039883a 	mov	fp,r8
    7318:	280f883a 	mov	r7,r5
    731c:	00800084 	movi	r2,2
    7320:	3881601e 	bne	r7,r2,78a4 <__divdf3+0x6e8>
    7324:	e027883a 	mov	r19,fp
    7328:	9900004c 	andi	r4,r19,1
    732c:	0081ffc4 	movi	r2,2047
    7330:	0021883a 	mov	r16,zero
    7334:	002b883a 	mov	r21,zero
    7338:	1004953a 	slli	r2,r2,20
    733c:	20c03fcc 	andi	r3,r4,255
    7340:	01400434 	movhi	r5,16
    7344:	297fffc4 	addi	r5,r5,-1
    7348:	180697fa 	slli	r3,r3,31
    734c:	8160703a 	and	r16,r16,r5
    7350:	80a0b03a 	or	r16,r16,r2
    7354:	80c6b03a 	or	r3,r16,r3
    7358:	a805883a 	mov	r2,r21
    735c:	dfc00f17 	ldw	ra,60(sp)
    7360:	df000e17 	ldw	fp,56(sp)
    7364:	ddc00d17 	ldw	r23,52(sp)
    7368:	dd800c17 	ldw	r22,48(sp)
    736c:	dd400b17 	ldw	r21,44(sp)
    7370:	dd000a17 	ldw	r20,40(sp)
    7374:	dcc00917 	ldw	r19,36(sp)
    7378:	dc800817 	ldw	r18,32(sp)
    737c:	dc400717 	ldw	r17,28(sp)
    7380:	dc000617 	ldw	r16,24(sp)
    7384:	dec01004 	addi	sp,sp,64
    7388:	f800283a 	ret
    738c:	2404b03a 	or	r2,r4,r16
    7390:	2023883a 	mov	r17,r4
    7394:	10003f26 	beq	r2,zero,7494 <__divdf3+0x2d8>
    7398:	80015e26 	beq	r16,zero,7914 <__divdf3+0x758>
    739c:	8009883a 	mov	r4,r16
    73a0:	d9800215 	stw	r6,8(sp)
    73a4:	d9c00515 	stw	r7,20(sp)
    73a8:	da000415 	stw	r8,16(sp)
    73ac:	00094080 	call	9408 <__clzsi2>
    73b0:	d9800217 	ldw	r6,8(sp)
    73b4:	d9c00517 	ldw	r7,20(sp)
    73b8:	da000417 	ldw	r8,16(sp)
    73bc:	113ffd44 	addi	r4,r2,-11
    73c0:	00c00704 	movi	r3,28
    73c4:	19014f16 	blt	r3,r4,7904 <__divdf3+0x748>
    73c8:	00c00744 	movi	r3,29
    73cc:	157ffe04 	addi	r21,r2,-8
    73d0:	1907c83a 	sub	r3,r3,r4
    73d4:	8560983a 	sll	r16,r16,r21
    73d8:	88c6d83a 	srl	r3,r17,r3
    73dc:	8d6a983a 	sll	r21,r17,r21
    73e0:	1c20b03a 	or	r16,r3,r16
    73e4:	1080fcc4 	addi	r2,r2,1011
    73e8:	00a5c83a 	sub	r18,zero,r2
    73ec:	0013883a 	mov	r9,zero
    73f0:	000b883a 	mov	r5,zero
    73f4:	003f8f06 	br	7234 <__alt_exception_stack_pointer+0xf8007234>
    73f8:	3444b03a 	or	r2,r6,r17
    73fc:	1000231e 	bne	r2,zero,748c <__divdf3+0x2d0>
    7400:	0023883a 	mov	r17,zero
    7404:	0029883a 	mov	r20,zero
    7408:	01c00084 	movi	r7,2
    740c:	003f9b06 	br	727c <__alt_exception_stack_pointer+0xf800727c>
    7410:	3444b03a 	or	r2,r6,r17
    7414:	10001926 	beq	r2,zero,747c <__divdf3+0x2c0>
    7418:	88014b26 	beq	r17,zero,7948 <__divdf3+0x78c>
    741c:	8809883a 	mov	r4,r17
    7420:	d9400115 	stw	r5,4(sp)
    7424:	d9800215 	stw	r6,8(sp)
    7428:	da000415 	stw	r8,16(sp)
    742c:	da400315 	stw	r9,12(sp)
    7430:	00094080 	call	9408 <__clzsi2>
    7434:	d9400117 	ldw	r5,4(sp)
    7438:	d9800217 	ldw	r6,8(sp)
    743c:	da000417 	ldw	r8,16(sp)
    7440:	da400317 	ldw	r9,12(sp)
    7444:	113ffd44 	addi	r4,r2,-11
    7448:	00c00704 	movi	r3,28
    744c:	19013a16 	blt	r3,r4,7938 <__divdf3+0x77c>
    7450:	00c00744 	movi	r3,29
    7454:	153ffe04 	addi	r20,r2,-8
    7458:	1907c83a 	sub	r3,r3,r4
    745c:	8d22983a 	sll	r17,r17,r20
    7460:	30c6d83a 	srl	r3,r6,r3
    7464:	3528983a 	sll	r20,r6,r20
    7468:	1c62b03a 	or	r17,r3,r17
    746c:	1080fcc4 	addi	r2,r2,1011
    7470:	0087c83a 	sub	r3,zero,r2
    7474:	000f883a 	mov	r7,zero
    7478:	003f8006 	br	727c <__alt_exception_stack_pointer+0xf800727c>
    747c:	0023883a 	mov	r17,zero
    7480:	0029883a 	mov	r20,zero
    7484:	01c00044 	movi	r7,1
    7488:	003f7c06 	br	727c <__alt_exception_stack_pointer+0xf800727c>
    748c:	01c000c4 	movi	r7,3
    7490:	003f7a06 	br	727c <__alt_exception_stack_pointer+0xf800727c>
    7494:	02400104 	movi	r9,4
    7498:	0021883a 	mov	r16,zero
    749c:	002b883a 	mov	r21,zero
    74a0:	01400044 	movi	r5,1
    74a4:	003f6306 	br	7234 <__alt_exception_stack_pointer+0xf8007234>
    74a8:	02400304 	movi	r9,12
    74ac:	014000c4 	movi	r5,3
    74b0:	003f6006 	br	7234 <__alt_exception_stack_pointer+0xf8007234>
    74b4:	04000434 	movhi	r16,16
    74b8:	0009883a 	mov	r4,zero
    74bc:	843fffc4 	addi	r16,r16,-1
    74c0:	057fffc4 	movi	r21,-1
    74c4:	0081ffc4 	movi	r2,2047
    74c8:	003f9b06 	br	7338 <__alt_exception_stack_pointer+0xf8007338>
    74cc:	00c00044 	movi	r3,1
    74d0:	1887c83a 	sub	r3,r3,r2
    74d4:	01000e04 	movi	r4,56
    74d8:	20c1530e 	bge	r4,r3,7a28 <__divdf3+0x86c>
    74dc:	9900004c 	andi	r4,r19,1
    74e0:	0005883a 	mov	r2,zero
    74e4:	0021883a 	mov	r16,zero
    74e8:	002b883a 	mov	r21,zero
    74ec:	003f9206 	br	7338 <__alt_exception_stack_pointer+0xf8007338>
    74f0:	8c012e36 	bltu	r17,r16,79ac <__divdf3+0x7f0>
    74f4:	84412c26 	beq	r16,r17,79a8 <__divdf3+0x7ec>
    74f8:	a82f883a 	mov	r23,r21
    74fc:	18ffffc4 	addi	r3,r3,-1
    7500:	002b883a 	mov	r21,zero
    7504:	a004d63a 	srli	r2,r20,24
    7508:	8822923a 	slli	r17,r17,8
    750c:	a028923a 	slli	r20,r20,8
    7510:	8009883a 	mov	r4,r16
    7514:	88acb03a 	or	r22,r17,r2
    7518:	dd000015 	stw	r20,0(sp)
    751c:	b028d43a 	srli	r20,r22,16
    7520:	d8c00215 	stw	r3,8(sp)
    7524:	b4bfffcc 	andi	r18,r22,65535
    7528:	a00b883a 	mov	r5,r20
    752c:	000682c0 	call	682c <__udivsi3>
    7530:	100b883a 	mov	r5,r2
    7534:	9009883a 	mov	r4,r18
    7538:	1023883a 	mov	r17,r2
    753c:	00068e80 	call	68e8 <__mulsi3>
    7540:	8009883a 	mov	r4,r16
    7544:	a00b883a 	mov	r5,r20
    7548:	1039883a 	mov	fp,r2
    754c:	00068900 	call	6890 <__umodsi3>
    7550:	1004943a 	slli	r2,r2,16
    7554:	b808d43a 	srli	r4,r23,16
    7558:	d8c00217 	ldw	r3,8(sp)
    755c:	2084b03a 	or	r2,r4,r2
    7560:	1700062e 	bgeu	r2,fp,757c <__divdf3+0x3c0>
    7564:	1585883a 	add	r2,r2,r22
    7568:	893fffc4 	addi	r4,r17,-1
    756c:	15811d36 	bltu	r2,r22,79e4 <__divdf3+0x828>
    7570:	17011c2e 	bgeu	r2,fp,79e4 <__divdf3+0x828>
    7574:	8c7fff84 	addi	r17,r17,-2
    7578:	1585883a 	add	r2,r2,r22
    757c:	1739c83a 	sub	fp,r2,fp
    7580:	a00b883a 	mov	r5,r20
    7584:	e009883a 	mov	r4,fp
    7588:	d8c00215 	stw	r3,8(sp)
    758c:	000682c0 	call	682c <__udivsi3>
    7590:	100b883a 	mov	r5,r2
    7594:	9009883a 	mov	r4,r18
    7598:	1021883a 	mov	r16,r2
    759c:	00068e80 	call	68e8 <__mulsi3>
    75a0:	a00b883a 	mov	r5,r20
    75a4:	e009883a 	mov	r4,fp
    75a8:	d8800415 	stw	r2,16(sp)
    75ac:	00068900 	call	6890 <__umodsi3>
    75b0:	1004943a 	slli	r2,r2,16
    75b4:	da000417 	ldw	r8,16(sp)
    75b8:	bdffffcc 	andi	r23,r23,65535
    75bc:	b884b03a 	or	r2,r23,r2
    75c0:	d8c00217 	ldw	r3,8(sp)
    75c4:	1200062e 	bgeu	r2,r8,75e0 <__divdf3+0x424>
    75c8:	1585883a 	add	r2,r2,r22
    75cc:	813fffc4 	addi	r4,r16,-1
    75d0:	15810236 	bltu	r2,r22,79dc <__divdf3+0x820>
    75d4:	1201012e 	bgeu	r2,r8,79dc <__divdf3+0x820>
    75d8:	843fff84 	addi	r16,r16,-2
    75dc:	1585883a 	add	r2,r2,r22
    75e0:	8822943a 	slli	r17,r17,16
    75e4:	d9800017 	ldw	r6,0(sp)
    75e8:	1211c83a 	sub	r8,r2,r8
    75ec:	8c22b03a 	or	r17,r17,r16
    75f0:	373fffcc 	andi	fp,r6,65535
    75f4:	8abfffcc 	andi	r10,r17,65535
    75f8:	8820d43a 	srli	r16,r17,16
    75fc:	5009883a 	mov	r4,r10
    7600:	e00b883a 	mov	r5,fp
    7604:	302ed43a 	srli	r23,r6,16
    7608:	d8c00215 	stw	r3,8(sp)
    760c:	da000415 	stw	r8,16(sp)
    7610:	da800115 	stw	r10,4(sp)
    7614:	00068e80 	call	68e8 <__mulsi3>
    7618:	800b883a 	mov	r5,r16
    761c:	e009883a 	mov	r4,fp
    7620:	d8800515 	stw	r2,20(sp)
    7624:	00068e80 	call	68e8 <__mulsi3>
    7628:	8009883a 	mov	r4,r16
    762c:	b80b883a 	mov	r5,r23
    7630:	d8800315 	stw	r2,12(sp)
    7634:	00068e80 	call	68e8 <__mulsi3>
    7638:	da800117 	ldw	r10,4(sp)
    763c:	b80b883a 	mov	r5,r23
    7640:	1021883a 	mov	r16,r2
    7644:	5009883a 	mov	r4,r10
    7648:	00068e80 	call	68e8 <__mulsi3>
    764c:	d9c00517 	ldw	r7,20(sp)
    7650:	da400317 	ldw	r9,12(sp)
    7654:	d8c00217 	ldw	r3,8(sp)
    7658:	3808d43a 	srli	r4,r7,16
    765c:	1245883a 	add	r2,r2,r9
    7660:	da000417 	ldw	r8,16(sp)
    7664:	2085883a 	add	r2,r4,r2
    7668:	1240022e 	bgeu	r2,r9,7674 <__divdf3+0x4b8>
    766c:	01000074 	movhi	r4,1
    7670:	8121883a 	add	r16,r16,r4
    7674:	1008d43a 	srli	r4,r2,16
    7678:	1004943a 	slli	r2,r2,16
    767c:	39ffffcc 	andi	r7,r7,65535
    7680:	2409883a 	add	r4,r4,r16
    7684:	11c5883a 	add	r2,r2,r7
    7688:	4100bb36 	bltu	r8,r4,7978 <__divdf3+0x7bc>
    768c:	4100d726 	beq	r8,r4,79ec <__divdf3+0x830>
    7690:	4109c83a 	sub	r4,r8,r4
    7694:	a8a1c83a 	sub	r16,r21,r2
    7698:	ac2b803a 	cmpltu	r21,r21,r16
    769c:	256bc83a 	sub	r21,r4,r21
    76a0:	b540d926 	beq	r22,r21,7a08 <__divdf3+0x84c>
    76a4:	a00b883a 	mov	r5,r20
    76a8:	a809883a 	mov	r4,r21
    76ac:	d8c00215 	stw	r3,8(sp)
    76b0:	000682c0 	call	682c <__udivsi3>
    76b4:	100b883a 	mov	r5,r2
    76b8:	9009883a 	mov	r4,r18
    76bc:	d8800515 	stw	r2,20(sp)
    76c0:	00068e80 	call	68e8 <__mulsi3>
    76c4:	a809883a 	mov	r4,r21
    76c8:	a00b883a 	mov	r5,r20
    76cc:	d8800415 	stw	r2,16(sp)
    76d0:	00068900 	call	6890 <__umodsi3>
    76d4:	1004943a 	slli	r2,r2,16
    76d8:	8008d43a 	srli	r4,r16,16
    76dc:	da000417 	ldw	r8,16(sp)
    76e0:	d8c00217 	ldw	r3,8(sp)
    76e4:	2084b03a 	or	r2,r4,r2
    76e8:	d9c00517 	ldw	r7,20(sp)
    76ec:	1200062e 	bgeu	r2,r8,7708 <__divdf3+0x54c>
    76f0:	1585883a 	add	r2,r2,r22
    76f4:	393fffc4 	addi	r4,r7,-1
    76f8:	1580c536 	bltu	r2,r22,7a10 <__divdf3+0x854>
    76fc:	1200c42e 	bgeu	r2,r8,7a10 <__divdf3+0x854>
    7700:	39ffff84 	addi	r7,r7,-2
    7704:	1585883a 	add	r2,r2,r22
    7708:	122bc83a 	sub	r21,r2,r8
    770c:	a00b883a 	mov	r5,r20
    7710:	a809883a 	mov	r4,r21
    7714:	d8c00215 	stw	r3,8(sp)
    7718:	d9c00515 	stw	r7,20(sp)
    771c:	000682c0 	call	682c <__udivsi3>
    7720:	9009883a 	mov	r4,r18
    7724:	100b883a 	mov	r5,r2
    7728:	d8800415 	stw	r2,16(sp)
    772c:	00068e80 	call	68e8 <__mulsi3>
    7730:	a809883a 	mov	r4,r21
    7734:	a00b883a 	mov	r5,r20
    7738:	1025883a 	mov	r18,r2
    773c:	00068900 	call	6890 <__umodsi3>
    7740:	1004943a 	slli	r2,r2,16
    7744:	813fffcc 	andi	r4,r16,65535
    7748:	d8c00217 	ldw	r3,8(sp)
    774c:	20a0b03a 	or	r16,r4,r2
    7750:	d9c00517 	ldw	r7,20(sp)
    7754:	da000417 	ldw	r8,16(sp)
    7758:	8480062e 	bgeu	r16,r18,7774 <__divdf3+0x5b8>
    775c:	85a1883a 	add	r16,r16,r22
    7760:	40bfffc4 	addi	r2,r8,-1
    7764:	8580ac36 	bltu	r16,r22,7a18 <__divdf3+0x85c>
    7768:	8480ab2e 	bgeu	r16,r18,7a18 <__divdf3+0x85c>
    776c:	423fff84 	addi	r8,r8,-2
    7770:	85a1883a 	add	r16,r16,r22
    7774:	3804943a 	slli	r2,r7,16
    7778:	84a1c83a 	sub	r16,r16,r18
    777c:	e009883a 	mov	r4,fp
    7780:	1228b03a 	or	r20,r2,r8
    7784:	a1ffffcc 	andi	r7,r20,65535
    7788:	a024d43a 	srli	r18,r20,16
    778c:	380b883a 	mov	r5,r7
    7790:	d8c00215 	stw	r3,8(sp)
    7794:	d9c00515 	stw	r7,20(sp)
    7798:	00068e80 	call	68e8 <__mulsi3>
    779c:	900b883a 	mov	r5,r18
    77a0:	e009883a 	mov	r4,fp
    77a4:	102b883a 	mov	r21,r2
    77a8:	00068e80 	call	68e8 <__mulsi3>
    77ac:	900b883a 	mov	r5,r18
    77b0:	b809883a 	mov	r4,r23
    77b4:	1039883a 	mov	fp,r2
    77b8:	00068e80 	call	68e8 <__mulsi3>
    77bc:	d9c00517 	ldw	r7,20(sp)
    77c0:	b80b883a 	mov	r5,r23
    77c4:	1025883a 	mov	r18,r2
    77c8:	3809883a 	mov	r4,r7
    77cc:	00068e80 	call	68e8 <__mulsi3>
    77d0:	a808d43a 	srli	r4,r21,16
    77d4:	1705883a 	add	r2,r2,fp
    77d8:	d8c00217 	ldw	r3,8(sp)
    77dc:	2085883a 	add	r2,r4,r2
    77e0:	1700022e 	bgeu	r2,fp,77ec <__divdf3+0x630>
    77e4:	01000074 	movhi	r4,1
    77e8:	9125883a 	add	r18,r18,r4
    77ec:	1008d43a 	srli	r4,r2,16
    77f0:	1004943a 	slli	r2,r2,16
    77f4:	ad7fffcc 	andi	r21,r21,65535
    77f8:	2489883a 	add	r4,r4,r18
    77fc:	1545883a 	add	r2,r2,r21
    7800:	81003836 	bltu	r16,r4,78e4 <__divdf3+0x728>
    7804:	81003626 	beq	r16,r4,78e0 <__divdf3+0x724>
    7808:	a5000054 	ori	r20,r20,1
    780c:	1880ffc4 	addi	r2,r3,1023
    7810:	00bf2e0e 	bge	zero,r2,74cc <__alt_exception_stack_pointer+0xf80074cc>
    7814:	a10001cc 	andi	r4,r20,7
    7818:	20000726 	beq	r4,zero,7838 <__divdf3+0x67c>
    781c:	a10003cc 	andi	r4,r20,15
    7820:	01400104 	movi	r5,4
    7824:	21400426 	beq	r4,r5,7838 <__divdf3+0x67c>
    7828:	a149883a 	add	r4,r20,r5
    782c:	2529803a 	cmpltu	r20,r4,r20
    7830:	8d23883a 	add	r17,r17,r20
    7834:	2029883a 	mov	r20,r4
    7838:	8900402c 	andhi	r4,r17,256
    783c:	20000426 	beq	r4,zero,7850 <__divdf3+0x694>
    7840:	18810004 	addi	r2,r3,1024
    7844:	00ffc034 	movhi	r3,65280
    7848:	18ffffc4 	addi	r3,r3,-1
    784c:	88e2703a 	and	r17,r17,r3
    7850:	00c1ff84 	movi	r3,2046
    7854:	18beb416 	blt	r3,r2,7328 <__alt_exception_stack_pointer+0xf8007328>
    7858:	a028d0fa 	srli	r20,r20,3
    785c:	882a977a 	slli	r21,r17,29
    7860:	8820927a 	slli	r16,r17,9
    7864:	1081ffcc 	andi	r2,r2,2047
    7868:	ad2ab03a 	or	r21,r21,r20
    786c:	8020d33a 	srli	r16,r16,12
    7870:	9900004c 	andi	r4,r19,1
    7874:	003eb006 	br	7338 <__alt_exception_stack_pointer+0xf8007338>
    7878:	8080022c 	andhi	r2,r16,8
    787c:	10001226 	beq	r2,zero,78c8 <__divdf3+0x70c>
    7880:	8880022c 	andhi	r2,r17,8
    7884:	1000101e 	bne	r2,zero,78c8 <__divdf3+0x70c>
    7888:	00800434 	movhi	r2,16
    788c:	8c000234 	orhi	r16,r17,8
    7890:	10bfffc4 	addi	r2,r2,-1
    7894:	b809883a 	mov	r4,r23
    7898:	80a0703a 	and	r16,r16,r2
    789c:	a02b883a 	mov	r21,r20
    78a0:	003f0806 	br	74c4 <__alt_exception_stack_pointer+0xf80074c4>
    78a4:	008000c4 	movi	r2,3
    78a8:	3880b126 	beq	r7,r2,7b70 <__divdf3+0x9b4>
    78ac:	00800044 	movi	r2,1
    78b0:	38805b1e 	bne	r7,r2,7a20 <__divdf3+0x864>
    78b4:	e009883a 	mov	r4,fp
    78b8:	0005883a 	mov	r2,zero
    78bc:	0021883a 	mov	r16,zero
    78c0:	002b883a 	mov	r21,zero
    78c4:	003e9c06 	br	7338 <__alt_exception_stack_pointer+0xf8007338>
    78c8:	00800434 	movhi	r2,16
    78cc:	84000234 	orhi	r16,r16,8
    78d0:	10bfffc4 	addi	r2,r2,-1
    78d4:	b009883a 	mov	r4,r22
    78d8:	80a0703a 	and	r16,r16,r2
    78dc:	003ef906 	br	74c4 <__alt_exception_stack_pointer+0xf80074c4>
    78e0:	103fca26 	beq	r2,zero,780c <__alt_exception_stack_pointer+0xf800780c>
    78e4:	b421883a 	add	r16,r22,r16
    78e8:	a17fffc4 	addi	r5,r20,-1
    78ec:	8580422e 	bgeu	r16,r22,79f8 <__divdf3+0x83c>
    78f0:	2829883a 	mov	r20,r5
    78f4:	813fc41e 	bne	r16,r4,7808 <__alt_exception_stack_pointer+0xf8007808>
    78f8:	d9800017 	ldw	r6,0(sp)
    78fc:	30bfc21e 	bne	r6,r2,7808 <__alt_exception_stack_pointer+0xf8007808>
    7900:	003fc206 	br	780c <__alt_exception_stack_pointer+0xf800780c>
    7904:	143ff604 	addi	r16,r2,-40
    7908:	8c20983a 	sll	r16,r17,r16
    790c:	002b883a 	mov	r21,zero
    7910:	003eb406 	br	73e4 <__alt_exception_stack_pointer+0xf80073e4>
    7914:	d9800215 	stw	r6,8(sp)
    7918:	d9c00515 	stw	r7,20(sp)
    791c:	da000415 	stw	r8,16(sp)
    7920:	00094080 	call	9408 <__clzsi2>
    7924:	10800804 	addi	r2,r2,32
    7928:	da000417 	ldw	r8,16(sp)
    792c:	d9c00517 	ldw	r7,20(sp)
    7930:	d9800217 	ldw	r6,8(sp)
    7934:	003ea106 	br	73bc <__alt_exception_stack_pointer+0xf80073bc>
    7938:	147ff604 	addi	r17,r2,-40
    793c:	3462983a 	sll	r17,r6,r17
    7940:	0029883a 	mov	r20,zero
    7944:	003ec906 	br	746c <__alt_exception_stack_pointer+0xf800746c>
    7948:	3009883a 	mov	r4,r6
    794c:	d9400115 	stw	r5,4(sp)
    7950:	d9800215 	stw	r6,8(sp)
    7954:	da000415 	stw	r8,16(sp)
    7958:	da400315 	stw	r9,12(sp)
    795c:	00094080 	call	9408 <__clzsi2>
    7960:	10800804 	addi	r2,r2,32
    7964:	da400317 	ldw	r9,12(sp)
    7968:	da000417 	ldw	r8,16(sp)
    796c:	d9800217 	ldw	r6,8(sp)
    7970:	d9400117 	ldw	r5,4(sp)
    7974:	003eb306 	br	7444 <__alt_exception_stack_pointer+0xf8007444>
    7978:	d9800017 	ldw	r6,0(sp)
    797c:	a9ab883a 	add	r21,r21,r6
    7980:	a98b803a 	cmpltu	r5,r21,r6
    7984:	2d8b883a 	add	r5,r5,r22
    7988:	2a11883a 	add	r8,r5,r8
    798c:	897fffc4 	addi	r5,r17,-1
    7990:	b2000c2e 	bgeu	r22,r8,79c4 <__divdf3+0x808>
    7994:	41003f36 	bltu	r8,r4,7a94 <__divdf3+0x8d8>
    7998:	22006c26 	beq	r4,r8,7b4c <__divdf3+0x990>
    799c:	4109c83a 	sub	r4,r8,r4
    79a0:	2823883a 	mov	r17,r5
    79a4:	003f3b06 	br	7694 <__alt_exception_stack_pointer+0xf8007694>
    79a8:	ad3ed336 	bltu	r21,r20,74f8 <__alt_exception_stack_pointer+0xf80074f8>
    79ac:	a804d07a 	srli	r2,r21,1
    79b0:	802e97fa 	slli	r23,r16,31
    79b4:	a82a97fa 	slli	r21,r21,31
    79b8:	8020d07a 	srli	r16,r16,1
    79bc:	b8aeb03a 	or	r23,r23,r2
    79c0:	003ed006 	br	7504 <__alt_exception_stack_pointer+0xf8007504>
    79c4:	b23ff51e 	bne	r22,r8,799c <__alt_exception_stack_pointer+0xf800799c>
    79c8:	d9800017 	ldw	r6,0(sp)
    79cc:	a9bff12e 	bgeu	r21,r6,7994 <__alt_exception_stack_pointer+0xf8007994>
    79d0:	b109c83a 	sub	r4,r22,r4
    79d4:	2823883a 	mov	r17,r5
    79d8:	003f2e06 	br	7694 <__alt_exception_stack_pointer+0xf8007694>
    79dc:	2021883a 	mov	r16,r4
    79e0:	003eff06 	br	75e0 <__alt_exception_stack_pointer+0xf80075e0>
    79e4:	2023883a 	mov	r17,r4
    79e8:	003ee406 	br	757c <__alt_exception_stack_pointer+0xf800757c>
    79ec:	a8bfe236 	bltu	r21,r2,7978 <__alt_exception_stack_pointer+0xf8007978>
    79f0:	0009883a 	mov	r4,zero
    79f4:	003f2706 	br	7694 <__alt_exception_stack_pointer+0xf8007694>
    79f8:	81002d36 	bltu	r16,r4,7ab0 <__divdf3+0x8f4>
    79fc:	24005626 	beq	r4,r16,7b58 <__divdf3+0x99c>
    7a00:	2829883a 	mov	r20,r5
    7a04:	003f8006 	br	7808 <__alt_exception_stack_pointer+0xf8007808>
    7a08:	053fffc4 	movi	r20,-1
    7a0c:	003f7f06 	br	780c <__alt_exception_stack_pointer+0xf800780c>
    7a10:	200f883a 	mov	r7,r4
    7a14:	003f3c06 	br	7708 <__alt_exception_stack_pointer+0xf8007708>
    7a18:	1011883a 	mov	r8,r2
    7a1c:	003f5506 	br	7774 <__alt_exception_stack_pointer+0xf8007774>
    7a20:	e027883a 	mov	r19,fp
    7a24:	003f7906 	br	780c <__alt_exception_stack_pointer+0xf800780c>
    7a28:	010007c4 	movi	r4,31
    7a2c:	20c02816 	blt	r4,r3,7ad0 <__divdf3+0x914>
    7a30:	00800804 	movi	r2,32
    7a34:	10c5c83a 	sub	r2,r2,r3
    7a38:	888a983a 	sll	r5,r17,r2
    7a3c:	a0c8d83a 	srl	r4,r20,r3
    7a40:	a084983a 	sll	r2,r20,r2
    7a44:	88e2d83a 	srl	r17,r17,r3
    7a48:	2906b03a 	or	r3,r5,r4
    7a4c:	1004c03a 	cmpne	r2,r2,zero
    7a50:	1886b03a 	or	r3,r3,r2
    7a54:	188001cc 	andi	r2,r3,7
    7a58:	10000726 	beq	r2,zero,7a78 <__divdf3+0x8bc>
    7a5c:	188003cc 	andi	r2,r3,15
    7a60:	01000104 	movi	r4,4
    7a64:	11000426 	beq	r2,r4,7a78 <__divdf3+0x8bc>
    7a68:	1805883a 	mov	r2,r3
    7a6c:	10c00104 	addi	r3,r2,4
    7a70:	1885803a 	cmpltu	r2,r3,r2
    7a74:	88a3883a 	add	r17,r17,r2
    7a78:	8880202c 	andhi	r2,r17,128
    7a7c:	10002926 	beq	r2,zero,7b24 <__divdf3+0x968>
    7a80:	9900004c 	andi	r4,r19,1
    7a84:	00800044 	movi	r2,1
    7a88:	0021883a 	mov	r16,zero
    7a8c:	002b883a 	mov	r21,zero
    7a90:	003e2906 	br	7338 <__alt_exception_stack_pointer+0xf8007338>
    7a94:	d9800017 	ldw	r6,0(sp)
    7a98:	8c7fff84 	addi	r17,r17,-2
    7a9c:	a9ab883a 	add	r21,r21,r6
    7aa0:	a98b803a 	cmpltu	r5,r21,r6
    7aa4:	2d8b883a 	add	r5,r5,r22
    7aa8:	2a11883a 	add	r8,r5,r8
    7aac:	003ef806 	br	7690 <__alt_exception_stack_pointer+0xf8007690>
    7ab0:	d9800017 	ldw	r6,0(sp)
    7ab4:	318f883a 	add	r7,r6,r6
    7ab8:	398b803a 	cmpltu	r5,r7,r6
    7abc:	2d8d883a 	add	r6,r5,r22
    7ac0:	81a1883a 	add	r16,r16,r6
    7ac4:	a17fff84 	addi	r5,r20,-2
    7ac8:	d9c00015 	stw	r7,0(sp)
    7acc:	003f8806 	br	78f0 <__alt_exception_stack_pointer+0xf80078f0>
    7ad0:	013ff844 	movi	r4,-31
    7ad4:	2085c83a 	sub	r2,r4,r2
    7ad8:	8888d83a 	srl	r4,r17,r2
    7adc:	00800804 	movi	r2,32
    7ae0:	18802126 	beq	r3,r2,7b68 <__divdf3+0x9ac>
    7ae4:	04001004 	movi	r16,64
    7ae8:	80c7c83a 	sub	r3,r16,r3
    7aec:	88e0983a 	sll	r16,r17,r3
    7af0:	8504b03a 	or	r2,r16,r20
    7af4:	1004c03a 	cmpne	r2,r2,zero
    7af8:	2084b03a 	or	r2,r4,r2
    7afc:	144001cc 	andi	r17,r2,7
    7b00:	88000d1e 	bne	r17,zero,7b38 <__divdf3+0x97c>
    7b04:	0021883a 	mov	r16,zero
    7b08:	102ad0fa 	srli	r21,r2,3
    7b0c:	9900004c 	andi	r4,r19,1
    7b10:	0005883a 	mov	r2,zero
    7b14:	ac6ab03a 	or	r21,r21,r17
    7b18:	003e0706 	br	7338 <__alt_exception_stack_pointer+0xf8007338>
    7b1c:	1007883a 	mov	r3,r2
    7b20:	0023883a 	mov	r17,zero
    7b24:	8820927a 	slli	r16,r17,9
    7b28:	1805883a 	mov	r2,r3
    7b2c:	8822977a 	slli	r17,r17,29
    7b30:	8020d33a 	srli	r16,r16,12
    7b34:	003ff406 	br	7b08 <__alt_exception_stack_pointer+0xf8007b08>
    7b38:	10c003cc 	andi	r3,r2,15
    7b3c:	01000104 	movi	r4,4
    7b40:	193ff626 	beq	r3,r4,7b1c <__alt_exception_stack_pointer+0xf8007b1c>
    7b44:	0023883a 	mov	r17,zero
    7b48:	003fc806 	br	7a6c <__alt_exception_stack_pointer+0xf8007a6c>
    7b4c:	a8bfd136 	bltu	r21,r2,7a94 <__alt_exception_stack_pointer+0xf8007a94>
    7b50:	2823883a 	mov	r17,r5
    7b54:	003fa606 	br	79f0 <__alt_exception_stack_pointer+0xf80079f0>
    7b58:	d9800017 	ldw	r6,0(sp)
    7b5c:	30bfd436 	bltu	r6,r2,7ab0 <__alt_exception_stack_pointer+0xf8007ab0>
    7b60:	2829883a 	mov	r20,r5
    7b64:	003f6406 	br	78f8 <__alt_exception_stack_pointer+0xf80078f8>
    7b68:	0021883a 	mov	r16,zero
    7b6c:	003fe006 	br	7af0 <__alt_exception_stack_pointer+0xf8007af0>
    7b70:	00800434 	movhi	r2,16
    7b74:	8c000234 	orhi	r16,r17,8
    7b78:	10bfffc4 	addi	r2,r2,-1
    7b7c:	e009883a 	mov	r4,fp
    7b80:	80a0703a 	and	r16,r16,r2
    7b84:	a02b883a 	mov	r21,r20
    7b88:	003e4e06 	br	74c4 <__alt_exception_stack_pointer+0xf80074c4>

00007b8c <__eqdf2>:
    7b8c:	2804d53a 	srli	r2,r5,20
    7b90:	3806d53a 	srli	r3,r7,20
    7b94:	02000434 	movhi	r8,16
    7b98:	423fffc4 	addi	r8,r8,-1
    7b9c:	1081ffcc 	andi	r2,r2,2047
    7ba0:	0281ffc4 	movi	r10,2047
    7ba4:	2a12703a 	and	r9,r5,r8
    7ba8:	18c1ffcc 	andi	r3,r3,2047
    7bac:	3a10703a 	and	r8,r7,r8
    7bb0:	280ad7fa 	srli	r5,r5,31
    7bb4:	380ed7fa 	srli	r7,r7,31
    7bb8:	12801026 	beq	r2,r10,7bfc <__eqdf2+0x70>
    7bbc:	0281ffc4 	movi	r10,2047
    7bc0:	1a800a26 	beq	r3,r10,7bec <__eqdf2+0x60>
    7bc4:	10c00226 	beq	r2,r3,7bd0 <__eqdf2+0x44>
    7bc8:	00800044 	movi	r2,1
    7bcc:	f800283a 	ret
    7bd0:	4a3ffd1e 	bne	r9,r8,7bc8 <__alt_exception_stack_pointer+0xf8007bc8>
    7bd4:	21bffc1e 	bne	r4,r6,7bc8 <__alt_exception_stack_pointer+0xf8007bc8>
    7bd8:	29c00c26 	beq	r5,r7,7c0c <__eqdf2+0x80>
    7bdc:	103ffa1e 	bne	r2,zero,7bc8 <__alt_exception_stack_pointer+0xf8007bc8>
    7be0:	2244b03a 	or	r2,r4,r9
    7be4:	1004c03a 	cmpne	r2,r2,zero
    7be8:	f800283a 	ret
    7bec:	3214b03a 	or	r10,r6,r8
    7bf0:	503ff426 	beq	r10,zero,7bc4 <__alt_exception_stack_pointer+0xf8007bc4>
    7bf4:	00800044 	movi	r2,1
    7bf8:	f800283a 	ret
    7bfc:	2254b03a 	or	r10,r4,r9
    7c00:	503fee26 	beq	r10,zero,7bbc <__alt_exception_stack_pointer+0xf8007bbc>
    7c04:	00800044 	movi	r2,1
    7c08:	f800283a 	ret
    7c0c:	0005883a 	mov	r2,zero
    7c10:	f800283a 	ret

00007c14 <__gedf2>:
    7c14:	2804d53a 	srli	r2,r5,20
    7c18:	3806d53a 	srli	r3,r7,20
    7c1c:	02000434 	movhi	r8,16
    7c20:	423fffc4 	addi	r8,r8,-1
    7c24:	1081ffcc 	andi	r2,r2,2047
    7c28:	0241ffc4 	movi	r9,2047
    7c2c:	2a14703a 	and	r10,r5,r8
    7c30:	18c1ffcc 	andi	r3,r3,2047
    7c34:	3a10703a 	and	r8,r7,r8
    7c38:	280ad7fa 	srli	r5,r5,31
    7c3c:	380ed7fa 	srli	r7,r7,31
    7c40:	12401d26 	beq	r2,r9,7cb8 <__gedf2+0xa4>
    7c44:	0241ffc4 	movi	r9,2047
    7c48:	1a401226 	beq	r3,r9,7c94 <__gedf2+0x80>
    7c4c:	1000081e 	bne	r2,zero,7c70 <__gedf2+0x5c>
    7c50:	2296b03a 	or	r11,r4,r10
    7c54:	5813003a 	cmpeq	r9,r11,zero
    7c58:	1800091e 	bne	r3,zero,7c80 <__gedf2+0x6c>
    7c5c:	3218b03a 	or	r12,r6,r8
    7c60:	6000071e 	bne	r12,zero,7c80 <__gedf2+0x6c>
    7c64:	0005883a 	mov	r2,zero
    7c68:	5800101e 	bne	r11,zero,7cac <__gedf2+0x98>
    7c6c:	f800283a 	ret
    7c70:	18000c1e 	bne	r3,zero,7ca4 <__gedf2+0x90>
    7c74:	3212b03a 	or	r9,r6,r8
    7c78:	48000c26 	beq	r9,zero,7cac <__gedf2+0x98>
    7c7c:	0013883a 	mov	r9,zero
    7c80:	39c03fcc 	andi	r7,r7,255
    7c84:	48000826 	beq	r9,zero,7ca8 <__gedf2+0x94>
    7c88:	38000926 	beq	r7,zero,7cb0 <__gedf2+0x9c>
    7c8c:	00800044 	movi	r2,1
    7c90:	f800283a 	ret
    7c94:	3212b03a 	or	r9,r6,r8
    7c98:	483fec26 	beq	r9,zero,7c4c <__alt_exception_stack_pointer+0xf8007c4c>
    7c9c:	00bfff84 	movi	r2,-2
    7ca0:	f800283a 	ret
    7ca4:	39c03fcc 	andi	r7,r7,255
    7ca8:	29c00626 	beq	r5,r7,7cc4 <__gedf2+0xb0>
    7cac:	283ff726 	beq	r5,zero,7c8c <__alt_exception_stack_pointer+0xf8007c8c>
    7cb0:	00bfffc4 	movi	r2,-1
    7cb4:	f800283a 	ret
    7cb8:	2292b03a 	or	r9,r4,r10
    7cbc:	483fe126 	beq	r9,zero,7c44 <__alt_exception_stack_pointer+0xf8007c44>
    7cc0:	003ff606 	br	7c9c <__alt_exception_stack_pointer+0xf8007c9c>
    7cc4:	18bff916 	blt	r3,r2,7cac <__alt_exception_stack_pointer+0xf8007cac>
    7cc8:	10c00316 	blt	r2,r3,7cd8 <__gedf2+0xc4>
    7ccc:	42bff736 	bltu	r8,r10,7cac <__alt_exception_stack_pointer+0xf8007cac>
    7cd0:	52000326 	beq	r10,r8,7ce0 <__gedf2+0xcc>
    7cd4:	5200042e 	bgeu	r10,r8,7ce8 <__gedf2+0xd4>
    7cd8:	283fec1e 	bne	r5,zero,7c8c <__alt_exception_stack_pointer+0xf8007c8c>
    7cdc:	003ff406 	br	7cb0 <__alt_exception_stack_pointer+0xf8007cb0>
    7ce0:	313ff236 	bltu	r6,r4,7cac <__alt_exception_stack_pointer+0xf8007cac>
    7ce4:	21bffc36 	bltu	r4,r6,7cd8 <__alt_exception_stack_pointer+0xf8007cd8>
    7ce8:	0005883a 	mov	r2,zero
    7cec:	f800283a 	ret

00007cf0 <__ledf2>:
    7cf0:	2804d53a 	srli	r2,r5,20
    7cf4:	3810d53a 	srli	r8,r7,20
    7cf8:	00c00434 	movhi	r3,16
    7cfc:	18ffffc4 	addi	r3,r3,-1
    7d00:	1081ffcc 	andi	r2,r2,2047
    7d04:	0241ffc4 	movi	r9,2047
    7d08:	28d4703a 	and	r10,r5,r3
    7d0c:	4201ffcc 	andi	r8,r8,2047
    7d10:	38c6703a 	and	r3,r7,r3
    7d14:	280ad7fa 	srli	r5,r5,31
    7d18:	380ed7fa 	srli	r7,r7,31
    7d1c:	12401f26 	beq	r2,r9,7d9c <__ledf2+0xac>
    7d20:	0241ffc4 	movi	r9,2047
    7d24:	42401426 	beq	r8,r9,7d78 <__ledf2+0x88>
    7d28:	1000091e 	bne	r2,zero,7d50 <__ledf2+0x60>
    7d2c:	2296b03a 	or	r11,r4,r10
    7d30:	5813003a 	cmpeq	r9,r11,zero
    7d34:	29403fcc 	andi	r5,r5,255
    7d38:	40000a1e 	bne	r8,zero,7d64 <__ledf2+0x74>
    7d3c:	30d8b03a 	or	r12,r6,r3
    7d40:	6000081e 	bne	r12,zero,7d64 <__ledf2+0x74>
    7d44:	0005883a 	mov	r2,zero
    7d48:	5800111e 	bne	r11,zero,7d90 <__ledf2+0xa0>
    7d4c:	f800283a 	ret
    7d50:	29403fcc 	andi	r5,r5,255
    7d54:	40000c1e 	bne	r8,zero,7d88 <__ledf2+0x98>
    7d58:	30d2b03a 	or	r9,r6,r3
    7d5c:	48000c26 	beq	r9,zero,7d90 <__ledf2+0xa0>
    7d60:	0013883a 	mov	r9,zero
    7d64:	39c03fcc 	andi	r7,r7,255
    7d68:	48000826 	beq	r9,zero,7d8c <__ledf2+0x9c>
    7d6c:	38001126 	beq	r7,zero,7db4 <__ledf2+0xc4>
    7d70:	00800044 	movi	r2,1
    7d74:	f800283a 	ret
    7d78:	30d2b03a 	or	r9,r6,r3
    7d7c:	483fea26 	beq	r9,zero,7d28 <__alt_exception_stack_pointer+0xf8007d28>
    7d80:	00800084 	movi	r2,2
    7d84:	f800283a 	ret
    7d88:	39c03fcc 	andi	r7,r7,255
    7d8c:	39400726 	beq	r7,r5,7dac <__ledf2+0xbc>
    7d90:	2800081e 	bne	r5,zero,7db4 <__ledf2+0xc4>
    7d94:	00800044 	movi	r2,1
    7d98:	f800283a 	ret
    7d9c:	2292b03a 	or	r9,r4,r10
    7da0:	483fdf26 	beq	r9,zero,7d20 <__alt_exception_stack_pointer+0xf8007d20>
    7da4:	00800084 	movi	r2,2
    7da8:	f800283a 	ret
    7dac:	4080030e 	bge	r8,r2,7dbc <__ledf2+0xcc>
    7db0:	383fef26 	beq	r7,zero,7d70 <__alt_exception_stack_pointer+0xf8007d70>
    7db4:	00bfffc4 	movi	r2,-1
    7db8:	f800283a 	ret
    7dbc:	123feb16 	blt	r2,r8,7d6c <__alt_exception_stack_pointer+0xf8007d6c>
    7dc0:	1abff336 	bltu	r3,r10,7d90 <__alt_exception_stack_pointer+0xf8007d90>
    7dc4:	50c00326 	beq	r10,r3,7dd4 <__ledf2+0xe4>
    7dc8:	50c0042e 	bgeu	r10,r3,7ddc <__ledf2+0xec>
    7dcc:	283fe81e 	bne	r5,zero,7d70 <__alt_exception_stack_pointer+0xf8007d70>
    7dd0:	003ff806 	br	7db4 <__alt_exception_stack_pointer+0xf8007db4>
    7dd4:	313fee36 	bltu	r6,r4,7d90 <__alt_exception_stack_pointer+0xf8007d90>
    7dd8:	21bffc36 	bltu	r4,r6,7dcc <__alt_exception_stack_pointer+0xf8007dcc>
    7ddc:	0005883a 	mov	r2,zero
    7de0:	f800283a 	ret

00007de4 <__muldf3>:
    7de4:	deffee04 	addi	sp,sp,-72
    7de8:	dd000c15 	stw	r20,48(sp)
    7dec:	2828d53a 	srli	r20,r5,20
    7df0:	ddc00f15 	stw	r23,60(sp)
    7df4:	282ed7fa 	srli	r23,r5,31
    7df8:	dc000815 	stw	r16,32(sp)
    7dfc:	04000434 	movhi	r16,16
    7e00:	dcc00b15 	stw	r19,44(sp)
    7e04:	843fffc4 	addi	r16,r16,-1
    7e08:	dfc01115 	stw	ra,68(sp)
    7e0c:	df001015 	stw	fp,64(sp)
    7e10:	dd800e15 	stw	r22,56(sp)
    7e14:	dd400d15 	stw	r21,52(sp)
    7e18:	dc800a15 	stw	r18,40(sp)
    7e1c:	dc400915 	stw	r17,36(sp)
    7e20:	a501ffcc 	andi	r20,r20,2047
    7e24:	2c20703a 	and	r16,r5,r16
    7e28:	b827883a 	mov	r19,r23
    7e2c:	ba403fcc 	andi	r9,r23,255
    7e30:	a0006026 	beq	r20,zero,7fb4 <__muldf3+0x1d0>
    7e34:	0081ffc4 	movi	r2,2047
    7e38:	202d883a 	mov	r22,r4
    7e3c:	a0803626 	beq	r20,r2,7f18 <__muldf3+0x134>
    7e40:	84000434 	orhi	r16,r16,16
    7e44:	200ad77a 	srli	r5,r4,29
    7e48:	800490fa 	slli	r2,r16,3
    7e4c:	202c90fa 	slli	r22,r4,3
    7e50:	a53f0044 	addi	r20,r20,-1023
    7e54:	28a0b03a 	or	r16,r5,r2
    7e58:	002b883a 	mov	r21,zero
    7e5c:	000b883a 	mov	r5,zero
    7e60:	3804d53a 	srli	r2,r7,20
    7e64:	3838d7fa 	srli	fp,r7,31
    7e68:	04400434 	movhi	r17,16
    7e6c:	8c7fffc4 	addi	r17,r17,-1
    7e70:	1081ffcc 	andi	r2,r2,2047
    7e74:	3025883a 	mov	r18,r6
    7e78:	3c62703a 	and	r17,r7,r17
    7e7c:	e2803fcc 	andi	r10,fp,255
    7e80:	10006d26 	beq	r2,zero,8038 <__muldf3+0x254>
    7e84:	00c1ffc4 	movi	r3,2047
    7e88:	10c06526 	beq	r2,r3,8020 <__muldf3+0x23c>
    7e8c:	8c400434 	orhi	r17,r17,16
    7e90:	300ed77a 	srli	r7,r6,29
    7e94:	880690fa 	slli	r3,r17,3
    7e98:	302490fa 	slli	r18,r6,3
    7e9c:	10bf0044 	addi	r2,r2,-1023
    7ea0:	38e2b03a 	or	r17,r7,r3
    7ea4:	000f883a 	mov	r7,zero
    7ea8:	a087883a 	add	r3,r20,r2
    7eac:	010003c4 	movi	r4,15
    7eb0:	3d44b03a 	or	r2,r7,r21
    7eb4:	e5ccf03a 	xor	r6,fp,r23
    7eb8:	1a000044 	addi	r8,r3,1
    7ebc:	20809b36 	bltu	r4,r2,812c <__muldf3+0x348>
    7ec0:	100490ba 	slli	r2,r2,2
    7ec4:	01000034 	movhi	r4,0
    7ec8:	211fb604 	addi	r4,r4,32472
    7ecc:	1105883a 	add	r2,r2,r4
    7ed0:	10800017 	ldw	r2,0(r2)
    7ed4:	1000683a 	jmp	r2
    7ed8:	0000812c 	andhi	zero,zero,516
    7edc:	00007f38 	rdprs	zero,zero,508
    7ee0:	00007f38 	rdprs	zero,zero,508
    7ee4:	00007f34 	movhi	zero,508
    7ee8:	00008108 	cmpgei	zero,zero,516
    7eec:	00008108 	cmpgei	zero,zero,516
    7ef0:	000080f0 	cmpltui	zero,zero,515
    7ef4:	00007f34 	movhi	zero,508
    7ef8:	00008108 	cmpgei	zero,zero,516
    7efc:	000080f0 	cmpltui	zero,zero,515
    7f00:	00008108 	cmpgei	zero,zero,516
    7f04:	00007f34 	movhi	zero,508
    7f08:	00008118 	cmpnei	zero,zero,516
    7f0c:	00008118 	cmpnei	zero,zero,516
    7f10:	00008118 	cmpnei	zero,zero,516
    7f14:	00008478 	rdprs	zero,zero,529
    7f18:	2404b03a 	or	r2,r4,r16
    7f1c:	1000711e 	bne	r2,zero,80e4 <__muldf3+0x300>
    7f20:	05400204 	movi	r21,8
    7f24:	0021883a 	mov	r16,zero
    7f28:	002d883a 	mov	r22,zero
    7f2c:	01400084 	movi	r5,2
    7f30:	003fcb06 	br	7e60 <__alt_exception_stack_pointer+0xf8007e60>
    7f34:	500d883a 	mov	r6,r10
    7f38:	00800084 	movi	r2,2
    7f3c:	38805926 	beq	r7,r2,80a4 <__muldf3+0x2c0>
    7f40:	008000c4 	movi	r2,3
    7f44:	3881bb26 	beq	r7,r2,8634 <__muldf3+0x850>
    7f48:	00800044 	movi	r2,1
    7f4c:	3881961e 	bne	r7,r2,85a8 <__muldf3+0x7c4>
    7f50:	3027883a 	mov	r19,r6
    7f54:	0005883a 	mov	r2,zero
    7f58:	0021883a 	mov	r16,zero
    7f5c:	002d883a 	mov	r22,zero
    7f60:	1004953a 	slli	r2,r2,20
    7f64:	98c03fcc 	andi	r3,r19,255
    7f68:	04400434 	movhi	r17,16
    7f6c:	8c7fffc4 	addi	r17,r17,-1
    7f70:	180697fa 	slli	r3,r3,31
    7f74:	8460703a 	and	r16,r16,r17
    7f78:	80a0b03a 	or	r16,r16,r2
    7f7c:	80c6b03a 	or	r3,r16,r3
    7f80:	b005883a 	mov	r2,r22
    7f84:	dfc01117 	ldw	ra,68(sp)
    7f88:	df001017 	ldw	fp,64(sp)
    7f8c:	ddc00f17 	ldw	r23,60(sp)
    7f90:	dd800e17 	ldw	r22,56(sp)
    7f94:	dd400d17 	ldw	r21,52(sp)
    7f98:	dd000c17 	ldw	r20,48(sp)
    7f9c:	dcc00b17 	ldw	r19,44(sp)
    7fa0:	dc800a17 	ldw	r18,40(sp)
    7fa4:	dc400917 	ldw	r17,36(sp)
    7fa8:	dc000817 	ldw	r16,32(sp)
    7fac:	dec01204 	addi	sp,sp,72
    7fb0:	f800283a 	ret
    7fb4:	2404b03a 	or	r2,r4,r16
    7fb8:	202b883a 	mov	r21,r4
    7fbc:	10004426 	beq	r2,zero,80d0 <__muldf3+0x2ec>
    7fc0:	80015126 	beq	r16,zero,8508 <__muldf3+0x724>
    7fc4:	8009883a 	mov	r4,r16
    7fc8:	d9800715 	stw	r6,28(sp)
    7fcc:	d9c00215 	stw	r7,8(sp)
    7fd0:	da400415 	stw	r9,16(sp)
    7fd4:	00094080 	call	9408 <__clzsi2>
    7fd8:	d9800717 	ldw	r6,28(sp)
    7fdc:	d9c00217 	ldw	r7,8(sp)
    7fe0:	da400417 	ldw	r9,16(sp)
    7fe4:	113ffd44 	addi	r4,r2,-11
    7fe8:	00c00704 	movi	r3,28
    7fec:	19014216 	blt	r3,r4,84f8 <__muldf3+0x714>
    7ff0:	00c00744 	movi	r3,29
    7ff4:	15bffe04 	addi	r22,r2,-8
    7ff8:	1907c83a 	sub	r3,r3,r4
    7ffc:	85a0983a 	sll	r16,r16,r22
    8000:	a8c6d83a 	srl	r3,r21,r3
    8004:	adac983a 	sll	r22,r21,r22
    8008:	1c20b03a 	or	r16,r3,r16
    800c:	1080fcc4 	addi	r2,r2,1011
    8010:	00a9c83a 	sub	r20,zero,r2
    8014:	002b883a 	mov	r21,zero
    8018:	000b883a 	mov	r5,zero
    801c:	003f9006 	br	7e60 <__alt_exception_stack_pointer+0xf8007e60>
    8020:	3446b03a 	or	r3,r6,r17
    8024:	1800281e 	bne	r3,zero,80c8 <__muldf3+0x2e4>
    8028:	0023883a 	mov	r17,zero
    802c:	0025883a 	mov	r18,zero
    8030:	01c00084 	movi	r7,2
    8034:	003f9c06 	br	7ea8 <__alt_exception_stack_pointer+0xf8007ea8>
    8038:	3446b03a 	or	r3,r6,r17
    803c:	18001e26 	beq	r3,zero,80b8 <__muldf3+0x2d4>
    8040:	88012126 	beq	r17,zero,84c8 <__muldf3+0x6e4>
    8044:	8809883a 	mov	r4,r17
    8048:	d9400215 	stw	r5,8(sp)
    804c:	d9800715 	stw	r6,28(sp)
    8050:	da400415 	stw	r9,16(sp)
    8054:	da800315 	stw	r10,12(sp)
    8058:	00094080 	call	9408 <__clzsi2>
    805c:	d9400217 	ldw	r5,8(sp)
    8060:	d9800717 	ldw	r6,28(sp)
    8064:	da400417 	ldw	r9,16(sp)
    8068:	da800317 	ldw	r10,12(sp)
    806c:	113ffd44 	addi	r4,r2,-11
    8070:	00c00704 	movi	r3,28
    8074:	19011016 	blt	r3,r4,84b8 <__muldf3+0x6d4>
    8078:	00c00744 	movi	r3,29
    807c:	14bffe04 	addi	r18,r2,-8
    8080:	1907c83a 	sub	r3,r3,r4
    8084:	8ca2983a 	sll	r17,r17,r18
    8088:	30c6d83a 	srl	r3,r6,r3
    808c:	34a4983a 	sll	r18,r6,r18
    8090:	1c62b03a 	or	r17,r3,r17
    8094:	1080fcc4 	addi	r2,r2,1011
    8098:	0085c83a 	sub	r2,zero,r2
    809c:	000f883a 	mov	r7,zero
    80a0:	003f8106 	br	7ea8 <__alt_exception_stack_pointer+0xf8007ea8>
    80a4:	3027883a 	mov	r19,r6
    80a8:	0081ffc4 	movi	r2,2047
    80ac:	0021883a 	mov	r16,zero
    80b0:	002d883a 	mov	r22,zero
    80b4:	003faa06 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    80b8:	0023883a 	mov	r17,zero
    80bc:	0025883a 	mov	r18,zero
    80c0:	01c00044 	movi	r7,1
    80c4:	003f7806 	br	7ea8 <__alt_exception_stack_pointer+0xf8007ea8>
    80c8:	01c000c4 	movi	r7,3
    80cc:	003f7606 	br	7ea8 <__alt_exception_stack_pointer+0xf8007ea8>
    80d0:	05400104 	movi	r21,4
    80d4:	0021883a 	mov	r16,zero
    80d8:	002d883a 	mov	r22,zero
    80dc:	01400044 	movi	r5,1
    80e0:	003f5f06 	br	7e60 <__alt_exception_stack_pointer+0xf8007e60>
    80e4:	05400304 	movi	r21,12
    80e8:	014000c4 	movi	r5,3
    80ec:	003f5c06 	br	7e60 <__alt_exception_stack_pointer+0xf8007e60>
    80f0:	04000434 	movhi	r16,16
    80f4:	0027883a 	mov	r19,zero
    80f8:	843fffc4 	addi	r16,r16,-1
    80fc:	05bfffc4 	movi	r22,-1
    8100:	0081ffc4 	movi	r2,2047
    8104:	003f9606 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    8108:	8023883a 	mov	r17,r16
    810c:	b025883a 	mov	r18,r22
    8110:	280f883a 	mov	r7,r5
    8114:	003f8806 	br	7f38 <__alt_exception_stack_pointer+0xf8007f38>
    8118:	8023883a 	mov	r17,r16
    811c:	b025883a 	mov	r18,r22
    8120:	480d883a 	mov	r6,r9
    8124:	280f883a 	mov	r7,r5
    8128:	003f8306 	br	7f38 <__alt_exception_stack_pointer+0xf8007f38>
    812c:	b026d43a 	srli	r19,r22,16
    8130:	902ed43a 	srli	r23,r18,16
    8134:	b5bfffcc 	andi	r22,r22,65535
    8138:	94bfffcc 	andi	r18,r18,65535
    813c:	b00b883a 	mov	r5,r22
    8140:	9009883a 	mov	r4,r18
    8144:	d8c00515 	stw	r3,20(sp)
    8148:	d9800715 	stw	r6,28(sp)
    814c:	da000615 	stw	r8,24(sp)
    8150:	00068e80 	call	68e8 <__mulsi3>
    8154:	980b883a 	mov	r5,r19
    8158:	9009883a 	mov	r4,r18
    815c:	1029883a 	mov	r20,r2
    8160:	00068e80 	call	68e8 <__mulsi3>
    8164:	b80b883a 	mov	r5,r23
    8168:	9809883a 	mov	r4,r19
    816c:	102b883a 	mov	r21,r2
    8170:	00068e80 	call	68e8 <__mulsi3>
    8174:	b809883a 	mov	r4,r23
    8178:	b00b883a 	mov	r5,r22
    817c:	1039883a 	mov	fp,r2
    8180:	00068e80 	call	68e8 <__mulsi3>
    8184:	a008d43a 	srli	r4,r20,16
    8188:	1545883a 	add	r2,r2,r21
    818c:	d8c00517 	ldw	r3,20(sp)
    8190:	2085883a 	add	r2,r4,r2
    8194:	d9800717 	ldw	r6,28(sp)
    8198:	da000617 	ldw	r8,24(sp)
    819c:	1540022e 	bgeu	r2,r21,81a8 <__muldf3+0x3c4>
    81a0:	01000074 	movhi	r4,1
    81a4:	e139883a 	add	fp,fp,r4
    81a8:	100e943a 	slli	r7,r2,16
    81ac:	1004d43a 	srli	r2,r2,16
    81b0:	882ad43a 	srli	r21,r17,16
    81b4:	a53fffcc 	andi	r20,r20,65535
    81b8:	8c7fffcc 	andi	r17,r17,65535
    81bc:	3d29883a 	add	r20,r7,r20
    81c0:	b00b883a 	mov	r5,r22
    81c4:	8809883a 	mov	r4,r17
    81c8:	d8c00515 	stw	r3,20(sp)
    81cc:	d9800715 	stw	r6,28(sp)
    81d0:	da000615 	stw	r8,24(sp)
    81d4:	dd000115 	stw	r20,4(sp)
    81d8:	d8800015 	stw	r2,0(sp)
    81dc:	00068e80 	call	68e8 <__mulsi3>
    81e0:	980b883a 	mov	r5,r19
    81e4:	8809883a 	mov	r4,r17
    81e8:	d8800215 	stw	r2,8(sp)
    81ec:	00068e80 	call	68e8 <__mulsi3>
    81f0:	9809883a 	mov	r4,r19
    81f4:	a80b883a 	mov	r5,r21
    81f8:	1029883a 	mov	r20,r2
    81fc:	00068e80 	call	68e8 <__mulsi3>
    8200:	b00b883a 	mov	r5,r22
    8204:	a809883a 	mov	r4,r21
    8208:	d8800415 	stw	r2,16(sp)
    820c:	00068e80 	call	68e8 <__mulsi3>
    8210:	d9c00217 	ldw	r7,8(sp)
    8214:	1505883a 	add	r2,r2,r20
    8218:	d8c00517 	ldw	r3,20(sp)
    821c:	3826d43a 	srli	r19,r7,16
    8220:	d9800717 	ldw	r6,28(sp)
    8224:	da000617 	ldw	r8,24(sp)
    8228:	9885883a 	add	r2,r19,r2
    822c:	da400417 	ldw	r9,16(sp)
    8230:	1500022e 	bgeu	r2,r20,823c <__muldf3+0x458>
    8234:	01000074 	movhi	r4,1
    8238:	4913883a 	add	r9,r9,r4
    823c:	1028d43a 	srli	r20,r2,16
    8240:	1004943a 	slli	r2,r2,16
    8244:	802cd43a 	srli	r22,r16,16
    8248:	843fffcc 	andi	r16,r16,65535
    824c:	3cffffcc 	andi	r19,r7,65535
    8250:	9009883a 	mov	r4,r18
    8254:	800b883a 	mov	r5,r16
    8258:	a269883a 	add	r20,r20,r9
    825c:	d8c00515 	stw	r3,20(sp)
    8260:	d9800715 	stw	r6,28(sp)
    8264:	da000615 	stw	r8,24(sp)
    8268:	14e7883a 	add	r19,r2,r19
    826c:	00068e80 	call	68e8 <__mulsi3>
    8270:	9009883a 	mov	r4,r18
    8274:	b00b883a 	mov	r5,r22
    8278:	d8800315 	stw	r2,12(sp)
    827c:	00068e80 	call	68e8 <__mulsi3>
    8280:	b809883a 	mov	r4,r23
    8284:	b00b883a 	mov	r5,r22
    8288:	d8800215 	stw	r2,8(sp)
    828c:	00068e80 	call	68e8 <__mulsi3>
    8290:	b80b883a 	mov	r5,r23
    8294:	8009883a 	mov	r4,r16
    8298:	d8800415 	stw	r2,16(sp)
    829c:	00068e80 	call	68e8 <__mulsi3>
    82a0:	da800317 	ldw	r10,12(sp)
    82a4:	d9c00217 	ldw	r7,8(sp)
    82a8:	d9000017 	ldw	r4,0(sp)
    82ac:	502ed43a 	srli	r23,r10,16
    82b0:	11c5883a 	add	r2,r2,r7
    82b4:	24e5883a 	add	r18,r4,r19
    82b8:	b885883a 	add	r2,r23,r2
    82bc:	d8c00517 	ldw	r3,20(sp)
    82c0:	d9800717 	ldw	r6,28(sp)
    82c4:	da000617 	ldw	r8,24(sp)
    82c8:	da400417 	ldw	r9,16(sp)
    82cc:	11c0022e 	bgeu	r2,r7,82d8 <__muldf3+0x4f4>
    82d0:	01000074 	movhi	r4,1
    82d4:	4913883a 	add	r9,r9,r4
    82d8:	100ed43a 	srli	r7,r2,16
    82dc:	1004943a 	slli	r2,r2,16
    82e0:	55ffffcc 	andi	r23,r10,65535
    82e4:	3a53883a 	add	r9,r7,r9
    82e8:	8809883a 	mov	r4,r17
    82ec:	800b883a 	mov	r5,r16
    82f0:	d8c00515 	stw	r3,20(sp)
    82f4:	d9800715 	stw	r6,28(sp)
    82f8:	da000615 	stw	r8,24(sp)
    82fc:	da400415 	stw	r9,16(sp)
    8300:	15ef883a 	add	r23,r2,r23
    8304:	00068e80 	call	68e8 <__mulsi3>
    8308:	8809883a 	mov	r4,r17
    830c:	b00b883a 	mov	r5,r22
    8310:	d8800215 	stw	r2,8(sp)
    8314:	00068e80 	call	68e8 <__mulsi3>
    8318:	b00b883a 	mov	r5,r22
    831c:	a809883a 	mov	r4,r21
    8320:	d8800315 	stw	r2,12(sp)
    8324:	00068e80 	call	68e8 <__mulsi3>
    8328:	8009883a 	mov	r4,r16
    832c:	a80b883a 	mov	r5,r21
    8330:	1023883a 	mov	r17,r2
    8334:	00068e80 	call	68e8 <__mulsi3>
    8338:	d9c00217 	ldw	r7,8(sp)
    833c:	da800317 	ldw	r10,12(sp)
    8340:	d8c00517 	ldw	r3,20(sp)
    8344:	3808d43a 	srli	r4,r7,16
    8348:	1285883a 	add	r2,r2,r10
    834c:	d9800717 	ldw	r6,28(sp)
    8350:	2085883a 	add	r2,r4,r2
    8354:	da000617 	ldw	r8,24(sp)
    8358:	da400417 	ldw	r9,16(sp)
    835c:	1280022e 	bgeu	r2,r10,8368 <__muldf3+0x584>
    8360:	01000074 	movhi	r4,1
    8364:	8923883a 	add	r17,r17,r4
    8368:	1008943a 	slli	r4,r2,16
    836c:	39ffffcc 	andi	r7,r7,65535
    8370:	e4b9883a 	add	fp,fp,r18
    8374:	21cf883a 	add	r7,r4,r7
    8378:	e4e7803a 	cmpltu	r19,fp,r19
    837c:	3d0f883a 	add	r7,r7,r20
    8380:	bf39883a 	add	fp,r23,fp
    8384:	99c9883a 	add	r4,r19,r7
    8388:	e5ef803a 	cmpltu	r23,fp,r23
    838c:	490b883a 	add	r5,r9,r4
    8390:	1004d43a 	srli	r2,r2,16
    8394:	b965883a 	add	r18,r23,r5
    8398:	24c9803a 	cmpltu	r4,r4,r19
    839c:	3d29803a 	cmpltu	r20,r7,r20
    83a0:	a128b03a 	or	r20,r20,r4
    83a4:	95ef803a 	cmpltu	r23,r18,r23
    83a8:	2a53803a 	cmpltu	r9,r5,r9
    83ac:	a0a9883a 	add	r20,r20,r2
    83b0:	4deeb03a 	or	r23,r9,r23
    83b4:	a5ef883a 	add	r23,r20,r23
    83b8:	bc63883a 	add	r17,r23,r17
    83bc:	e004927a 	slli	r2,fp,9
    83c0:	d9000117 	ldw	r4,4(sp)
    83c4:	882e927a 	slli	r23,r17,9
    83c8:	9022d5fa 	srli	r17,r18,23
    83cc:	e038d5fa 	srli	fp,fp,23
    83d0:	1104b03a 	or	r2,r2,r4
    83d4:	9024927a 	slli	r18,r18,9
    83d8:	1004c03a 	cmpne	r2,r2,zero
    83dc:	bc62b03a 	or	r17,r23,r17
    83e0:	1738b03a 	or	fp,r2,fp
    83e4:	8880402c 	andhi	r2,r17,256
    83e8:	e4a4b03a 	or	r18,fp,r18
    83ec:	10000726 	beq	r2,zero,840c <__muldf3+0x628>
    83f0:	9006d07a 	srli	r3,r18,1
    83f4:	880497fa 	slli	r2,r17,31
    83f8:	9480004c 	andi	r18,r18,1
    83fc:	8822d07a 	srli	r17,r17,1
    8400:	1ca4b03a 	or	r18,r3,r18
    8404:	14a4b03a 	or	r18,r2,r18
    8408:	4007883a 	mov	r3,r8
    840c:	1880ffc4 	addi	r2,r3,1023
    8410:	0080460e 	bge	zero,r2,852c <__muldf3+0x748>
    8414:	910001cc 	andi	r4,r18,7
    8418:	20000726 	beq	r4,zero,8438 <__muldf3+0x654>
    841c:	910003cc 	andi	r4,r18,15
    8420:	01400104 	movi	r5,4
    8424:	21400426 	beq	r4,r5,8438 <__muldf3+0x654>
    8428:	9149883a 	add	r4,r18,r5
    842c:	24a5803a 	cmpltu	r18,r4,r18
    8430:	8ca3883a 	add	r17,r17,r18
    8434:	2025883a 	mov	r18,r4
    8438:	8900402c 	andhi	r4,r17,256
    843c:	20000426 	beq	r4,zero,8450 <__muldf3+0x66c>
    8440:	18810004 	addi	r2,r3,1024
    8444:	00ffc034 	movhi	r3,65280
    8448:	18ffffc4 	addi	r3,r3,-1
    844c:	88e2703a 	and	r17,r17,r3
    8450:	00c1ff84 	movi	r3,2046
    8454:	18bf1316 	blt	r3,r2,80a4 <__alt_exception_stack_pointer+0xf80080a4>
    8458:	882c977a 	slli	r22,r17,29
    845c:	9024d0fa 	srli	r18,r18,3
    8460:	8822927a 	slli	r17,r17,9
    8464:	1081ffcc 	andi	r2,r2,2047
    8468:	b4acb03a 	or	r22,r22,r18
    846c:	8820d33a 	srli	r16,r17,12
    8470:	3027883a 	mov	r19,r6
    8474:	003eba06 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    8478:	8080022c 	andhi	r2,r16,8
    847c:	10000926 	beq	r2,zero,84a4 <__muldf3+0x6c0>
    8480:	8880022c 	andhi	r2,r17,8
    8484:	1000071e 	bne	r2,zero,84a4 <__muldf3+0x6c0>
    8488:	00800434 	movhi	r2,16
    848c:	8c000234 	orhi	r16,r17,8
    8490:	10bfffc4 	addi	r2,r2,-1
    8494:	e027883a 	mov	r19,fp
    8498:	80a0703a 	and	r16,r16,r2
    849c:	902d883a 	mov	r22,r18
    84a0:	003f1706 	br	8100 <__alt_exception_stack_pointer+0xf8008100>
    84a4:	00800434 	movhi	r2,16
    84a8:	84000234 	orhi	r16,r16,8
    84ac:	10bfffc4 	addi	r2,r2,-1
    84b0:	80a0703a 	and	r16,r16,r2
    84b4:	003f1206 	br	8100 <__alt_exception_stack_pointer+0xf8008100>
    84b8:	147ff604 	addi	r17,r2,-40
    84bc:	3462983a 	sll	r17,r6,r17
    84c0:	0025883a 	mov	r18,zero
    84c4:	003ef306 	br	8094 <__alt_exception_stack_pointer+0xf8008094>
    84c8:	3009883a 	mov	r4,r6
    84cc:	d9400215 	stw	r5,8(sp)
    84d0:	d9800715 	stw	r6,28(sp)
    84d4:	da400415 	stw	r9,16(sp)
    84d8:	da800315 	stw	r10,12(sp)
    84dc:	00094080 	call	9408 <__clzsi2>
    84e0:	10800804 	addi	r2,r2,32
    84e4:	da800317 	ldw	r10,12(sp)
    84e8:	da400417 	ldw	r9,16(sp)
    84ec:	d9800717 	ldw	r6,28(sp)
    84f0:	d9400217 	ldw	r5,8(sp)
    84f4:	003edd06 	br	806c <__alt_exception_stack_pointer+0xf800806c>
    84f8:	143ff604 	addi	r16,r2,-40
    84fc:	ac20983a 	sll	r16,r21,r16
    8500:	002d883a 	mov	r22,zero
    8504:	003ec106 	br	800c <__alt_exception_stack_pointer+0xf800800c>
    8508:	d9800715 	stw	r6,28(sp)
    850c:	d9c00215 	stw	r7,8(sp)
    8510:	da400415 	stw	r9,16(sp)
    8514:	00094080 	call	9408 <__clzsi2>
    8518:	10800804 	addi	r2,r2,32
    851c:	da400417 	ldw	r9,16(sp)
    8520:	d9c00217 	ldw	r7,8(sp)
    8524:	d9800717 	ldw	r6,28(sp)
    8528:	003eae06 	br	7fe4 <__alt_exception_stack_pointer+0xf8007fe4>
    852c:	00c00044 	movi	r3,1
    8530:	1887c83a 	sub	r3,r3,r2
    8534:	01000e04 	movi	r4,56
    8538:	20fe8516 	blt	r4,r3,7f50 <__alt_exception_stack_pointer+0xf8007f50>
    853c:	010007c4 	movi	r4,31
    8540:	20c01b16 	blt	r4,r3,85b0 <__muldf3+0x7cc>
    8544:	00800804 	movi	r2,32
    8548:	10c5c83a 	sub	r2,r2,r3
    854c:	888a983a 	sll	r5,r17,r2
    8550:	90c8d83a 	srl	r4,r18,r3
    8554:	9084983a 	sll	r2,r18,r2
    8558:	88e2d83a 	srl	r17,r17,r3
    855c:	2906b03a 	or	r3,r5,r4
    8560:	1004c03a 	cmpne	r2,r2,zero
    8564:	1886b03a 	or	r3,r3,r2
    8568:	188001cc 	andi	r2,r3,7
    856c:	10000726 	beq	r2,zero,858c <__muldf3+0x7a8>
    8570:	188003cc 	andi	r2,r3,15
    8574:	01000104 	movi	r4,4
    8578:	11000426 	beq	r2,r4,858c <__muldf3+0x7a8>
    857c:	1805883a 	mov	r2,r3
    8580:	10c00104 	addi	r3,r2,4
    8584:	1885803a 	cmpltu	r2,r3,r2
    8588:	88a3883a 	add	r17,r17,r2
    858c:	8880202c 	andhi	r2,r17,128
    8590:	10001c26 	beq	r2,zero,8604 <__muldf3+0x820>
    8594:	3027883a 	mov	r19,r6
    8598:	00800044 	movi	r2,1
    859c:	0021883a 	mov	r16,zero
    85a0:	002d883a 	mov	r22,zero
    85a4:	003e6e06 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    85a8:	4007883a 	mov	r3,r8
    85ac:	003f9706 	br	840c <__alt_exception_stack_pointer+0xf800840c>
    85b0:	017ff844 	movi	r5,-31
    85b4:	2885c83a 	sub	r2,r5,r2
    85b8:	888ad83a 	srl	r5,r17,r2
    85bc:	00800804 	movi	r2,32
    85c0:	18801a26 	beq	r3,r2,862c <__muldf3+0x848>
    85c4:	01001004 	movi	r4,64
    85c8:	20c7c83a 	sub	r3,r4,r3
    85cc:	88e2983a 	sll	r17,r17,r3
    85d0:	8ca4b03a 	or	r18,r17,r18
    85d4:	9004c03a 	cmpne	r2,r18,zero
    85d8:	2884b03a 	or	r2,r5,r2
    85dc:	144001cc 	andi	r17,r2,7
    85e0:	88000d1e 	bne	r17,zero,8618 <__muldf3+0x834>
    85e4:	0021883a 	mov	r16,zero
    85e8:	102cd0fa 	srli	r22,r2,3
    85ec:	3027883a 	mov	r19,r6
    85f0:	0005883a 	mov	r2,zero
    85f4:	b46cb03a 	or	r22,r22,r17
    85f8:	003e5906 	br	7f60 <__alt_exception_stack_pointer+0xf8007f60>
    85fc:	1007883a 	mov	r3,r2
    8600:	0023883a 	mov	r17,zero
    8604:	8820927a 	slli	r16,r17,9
    8608:	1805883a 	mov	r2,r3
    860c:	8822977a 	slli	r17,r17,29
    8610:	8020d33a 	srli	r16,r16,12
    8614:	003ff406 	br	85e8 <__alt_exception_stack_pointer+0xf80085e8>
    8618:	10c003cc 	andi	r3,r2,15
    861c:	01000104 	movi	r4,4
    8620:	193ff626 	beq	r3,r4,85fc <__alt_exception_stack_pointer+0xf80085fc>
    8624:	0023883a 	mov	r17,zero
    8628:	003fd506 	br	8580 <__alt_exception_stack_pointer+0xf8008580>
    862c:	0023883a 	mov	r17,zero
    8630:	003fe706 	br	85d0 <__alt_exception_stack_pointer+0xf80085d0>
    8634:	00800434 	movhi	r2,16
    8638:	8c000234 	orhi	r16,r17,8
    863c:	10bfffc4 	addi	r2,r2,-1
    8640:	3027883a 	mov	r19,r6
    8644:	80a0703a 	and	r16,r16,r2
    8648:	902d883a 	mov	r22,r18
    864c:	003eac06 	br	8100 <__alt_exception_stack_pointer+0xf8008100>

00008650 <__subdf3>:
    8650:	02000434 	movhi	r8,16
    8654:	423fffc4 	addi	r8,r8,-1
    8658:	defffb04 	addi	sp,sp,-20
    865c:	2a14703a 	and	r10,r5,r8
    8660:	3812d53a 	srli	r9,r7,20
    8664:	3a10703a 	and	r8,r7,r8
    8668:	2006d77a 	srli	r3,r4,29
    866c:	3004d77a 	srli	r2,r6,29
    8670:	dc000015 	stw	r16,0(sp)
    8674:	501490fa 	slli	r10,r10,3
    8678:	2820d53a 	srli	r16,r5,20
    867c:	401090fa 	slli	r8,r8,3
    8680:	dc800215 	stw	r18,8(sp)
    8684:	dc400115 	stw	r17,4(sp)
    8688:	dfc00415 	stw	ra,16(sp)
    868c:	202290fa 	slli	r17,r4,3
    8690:	dcc00315 	stw	r19,12(sp)
    8694:	4a41ffcc 	andi	r9,r9,2047
    8698:	0101ffc4 	movi	r4,2047
    869c:	2824d7fa 	srli	r18,r5,31
    86a0:	8401ffcc 	andi	r16,r16,2047
    86a4:	50c6b03a 	or	r3,r10,r3
    86a8:	380ed7fa 	srli	r7,r7,31
    86ac:	408ab03a 	or	r5,r8,r2
    86b0:	300c90fa 	slli	r6,r6,3
    86b4:	49009626 	beq	r9,r4,8910 <__subdf3+0x2c0>
    86b8:	39c0005c 	xori	r7,r7,1
    86bc:	8245c83a 	sub	r2,r16,r9
    86c0:	3c807426 	beq	r7,r18,8894 <__subdf3+0x244>
    86c4:	0080af0e 	bge	zero,r2,8984 <__subdf3+0x334>
    86c8:	48002a1e 	bne	r9,zero,8774 <__subdf3+0x124>
    86cc:	2988b03a 	or	r4,r5,r6
    86d0:	20009a1e 	bne	r4,zero,893c <__subdf3+0x2ec>
    86d4:	888001cc 	andi	r2,r17,7
    86d8:	10000726 	beq	r2,zero,86f8 <__subdf3+0xa8>
    86dc:	888003cc 	andi	r2,r17,15
    86e0:	01000104 	movi	r4,4
    86e4:	11000426 	beq	r2,r4,86f8 <__subdf3+0xa8>
    86e8:	890b883a 	add	r5,r17,r4
    86ec:	2c63803a 	cmpltu	r17,r5,r17
    86f0:	1c47883a 	add	r3,r3,r17
    86f4:	2823883a 	mov	r17,r5
    86f8:	1880202c 	andhi	r2,r3,128
    86fc:	10005926 	beq	r2,zero,8864 <__subdf3+0x214>
    8700:	84000044 	addi	r16,r16,1
    8704:	0081ffc4 	movi	r2,2047
    8708:	8080be26 	beq	r16,r2,8a04 <__subdf3+0x3b4>
    870c:	017fe034 	movhi	r5,65408
    8710:	297fffc4 	addi	r5,r5,-1
    8714:	1946703a 	and	r3,r3,r5
    8718:	1804977a 	slli	r2,r3,29
    871c:	1806927a 	slli	r3,r3,9
    8720:	8822d0fa 	srli	r17,r17,3
    8724:	8401ffcc 	andi	r16,r16,2047
    8728:	180ad33a 	srli	r5,r3,12
    872c:	9100004c 	andi	r4,r18,1
    8730:	1444b03a 	or	r2,r2,r17
    8734:	80c1ffcc 	andi	r3,r16,2047
    8738:	1820953a 	slli	r16,r3,20
    873c:	20c03fcc 	andi	r3,r4,255
    8740:	180897fa 	slli	r4,r3,31
    8744:	00c00434 	movhi	r3,16
    8748:	18ffffc4 	addi	r3,r3,-1
    874c:	28c6703a 	and	r3,r5,r3
    8750:	1c06b03a 	or	r3,r3,r16
    8754:	1906b03a 	or	r3,r3,r4
    8758:	dfc00417 	ldw	ra,16(sp)
    875c:	dcc00317 	ldw	r19,12(sp)
    8760:	dc800217 	ldw	r18,8(sp)
    8764:	dc400117 	ldw	r17,4(sp)
    8768:	dc000017 	ldw	r16,0(sp)
    876c:	dec00504 	addi	sp,sp,20
    8770:	f800283a 	ret
    8774:	0101ffc4 	movi	r4,2047
    8778:	813fd626 	beq	r16,r4,86d4 <__alt_exception_stack_pointer+0xf80086d4>
    877c:	29402034 	orhi	r5,r5,128
    8780:	01000e04 	movi	r4,56
    8784:	2080a316 	blt	r4,r2,8a14 <__subdf3+0x3c4>
    8788:	010007c4 	movi	r4,31
    878c:	2080c616 	blt	r4,r2,8aa8 <__subdf3+0x458>
    8790:	01000804 	movi	r4,32
    8794:	2089c83a 	sub	r4,r4,r2
    8798:	2910983a 	sll	r8,r5,r4
    879c:	308ed83a 	srl	r7,r6,r2
    87a0:	3108983a 	sll	r4,r6,r4
    87a4:	2884d83a 	srl	r2,r5,r2
    87a8:	41ccb03a 	or	r6,r8,r7
    87ac:	2008c03a 	cmpne	r4,r4,zero
    87b0:	310cb03a 	or	r6,r6,r4
    87b4:	898dc83a 	sub	r6,r17,r6
    87b8:	89a3803a 	cmpltu	r17,r17,r6
    87bc:	1887c83a 	sub	r3,r3,r2
    87c0:	1c47c83a 	sub	r3,r3,r17
    87c4:	3023883a 	mov	r17,r6
    87c8:	1880202c 	andhi	r2,r3,128
    87cc:	10002326 	beq	r2,zero,885c <__subdf3+0x20c>
    87d0:	04c02034 	movhi	r19,128
    87d4:	9cffffc4 	addi	r19,r19,-1
    87d8:	1ce6703a 	and	r19,r3,r19
    87dc:	98007a26 	beq	r19,zero,89c8 <__subdf3+0x378>
    87e0:	9809883a 	mov	r4,r19
    87e4:	00094080 	call	9408 <__clzsi2>
    87e8:	113ffe04 	addi	r4,r2,-8
    87ec:	00c007c4 	movi	r3,31
    87f0:	19007b16 	blt	r3,r4,89e0 <__subdf3+0x390>
    87f4:	00800804 	movi	r2,32
    87f8:	1105c83a 	sub	r2,r2,r4
    87fc:	8884d83a 	srl	r2,r17,r2
    8800:	9906983a 	sll	r3,r19,r4
    8804:	8922983a 	sll	r17,r17,r4
    8808:	10c4b03a 	or	r2,r2,r3
    880c:	24007816 	blt	r4,r16,89f0 <__subdf3+0x3a0>
    8810:	2421c83a 	sub	r16,r4,r16
    8814:	80c00044 	addi	r3,r16,1
    8818:	010007c4 	movi	r4,31
    881c:	20c09516 	blt	r4,r3,8a74 <__subdf3+0x424>
    8820:	01400804 	movi	r5,32
    8824:	28cbc83a 	sub	r5,r5,r3
    8828:	88c8d83a 	srl	r4,r17,r3
    882c:	8962983a 	sll	r17,r17,r5
    8830:	114a983a 	sll	r5,r2,r5
    8834:	10c6d83a 	srl	r3,r2,r3
    8838:	8804c03a 	cmpne	r2,r17,zero
    883c:	290ab03a 	or	r5,r5,r4
    8840:	28a2b03a 	or	r17,r5,r2
    8844:	0021883a 	mov	r16,zero
    8848:	003fa206 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    884c:	2090b03a 	or	r8,r4,r2
    8850:	40018e26 	beq	r8,zero,8e8c <__subdf3+0x83c>
    8854:	1007883a 	mov	r3,r2
    8858:	2023883a 	mov	r17,r4
    885c:	888001cc 	andi	r2,r17,7
    8860:	103f9e1e 	bne	r2,zero,86dc <__alt_exception_stack_pointer+0xf80086dc>
    8864:	1804977a 	slli	r2,r3,29
    8868:	8822d0fa 	srli	r17,r17,3
    886c:	1810d0fa 	srli	r8,r3,3
    8870:	9100004c 	andi	r4,r18,1
    8874:	1444b03a 	or	r2,r2,r17
    8878:	00c1ffc4 	movi	r3,2047
    887c:	80c02826 	beq	r16,r3,8920 <__subdf3+0x2d0>
    8880:	01400434 	movhi	r5,16
    8884:	297fffc4 	addi	r5,r5,-1
    8888:	80e0703a 	and	r16,r16,r3
    888c:	414a703a 	and	r5,r8,r5
    8890:	003fa806 	br	8734 <__alt_exception_stack_pointer+0xf8008734>
    8894:	0080630e 	bge	zero,r2,8a24 <__subdf3+0x3d4>
    8898:	48003026 	beq	r9,zero,895c <__subdf3+0x30c>
    889c:	0101ffc4 	movi	r4,2047
    88a0:	813f8c26 	beq	r16,r4,86d4 <__alt_exception_stack_pointer+0xf80086d4>
    88a4:	29402034 	orhi	r5,r5,128
    88a8:	01000e04 	movi	r4,56
    88ac:	2080a90e 	bge	r4,r2,8b54 <__subdf3+0x504>
    88b0:	298cb03a 	or	r6,r5,r6
    88b4:	3012c03a 	cmpne	r9,r6,zero
    88b8:	0005883a 	mov	r2,zero
    88bc:	4c53883a 	add	r9,r9,r17
    88c0:	4c63803a 	cmpltu	r17,r9,r17
    88c4:	10c7883a 	add	r3,r2,r3
    88c8:	88c7883a 	add	r3,r17,r3
    88cc:	4823883a 	mov	r17,r9
    88d0:	1880202c 	andhi	r2,r3,128
    88d4:	1000d026 	beq	r2,zero,8c18 <__subdf3+0x5c8>
    88d8:	84000044 	addi	r16,r16,1
    88dc:	0081ffc4 	movi	r2,2047
    88e0:	8080fe26 	beq	r16,r2,8cdc <__subdf3+0x68c>
    88e4:	00bfe034 	movhi	r2,65408
    88e8:	10bfffc4 	addi	r2,r2,-1
    88ec:	1886703a 	and	r3,r3,r2
    88f0:	880ad07a 	srli	r5,r17,1
    88f4:	180497fa 	slli	r2,r3,31
    88f8:	8900004c 	andi	r4,r17,1
    88fc:	2922b03a 	or	r17,r5,r4
    8900:	1806d07a 	srli	r3,r3,1
    8904:	1462b03a 	or	r17,r2,r17
    8908:	3825883a 	mov	r18,r7
    890c:	003f7106 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8910:	2984b03a 	or	r2,r5,r6
    8914:	103f6826 	beq	r2,zero,86b8 <__alt_exception_stack_pointer+0xf80086b8>
    8918:	39c03fcc 	andi	r7,r7,255
    891c:	003f6706 	br	86bc <__alt_exception_stack_pointer+0xf80086bc>
    8920:	4086b03a 	or	r3,r8,r2
    8924:	18015226 	beq	r3,zero,8e70 <__subdf3+0x820>
    8928:	00c00434 	movhi	r3,16
    892c:	41400234 	orhi	r5,r8,8
    8930:	18ffffc4 	addi	r3,r3,-1
    8934:	28ca703a 	and	r5,r5,r3
    8938:	003f7e06 	br	8734 <__alt_exception_stack_pointer+0xf8008734>
    893c:	10bfffc4 	addi	r2,r2,-1
    8940:	1000491e 	bne	r2,zero,8a68 <__subdf3+0x418>
    8944:	898fc83a 	sub	r7,r17,r6
    8948:	89e3803a 	cmpltu	r17,r17,r7
    894c:	1947c83a 	sub	r3,r3,r5
    8950:	1c47c83a 	sub	r3,r3,r17
    8954:	3823883a 	mov	r17,r7
    8958:	003f9b06 	br	87c8 <__alt_exception_stack_pointer+0xf80087c8>
    895c:	2988b03a 	or	r4,r5,r6
    8960:	203f5c26 	beq	r4,zero,86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8964:	10bfffc4 	addi	r2,r2,-1
    8968:	1000931e 	bne	r2,zero,8bb8 <__subdf3+0x568>
    896c:	898d883a 	add	r6,r17,r6
    8970:	3463803a 	cmpltu	r17,r6,r17
    8974:	1947883a 	add	r3,r3,r5
    8978:	88c7883a 	add	r3,r17,r3
    897c:	3023883a 	mov	r17,r6
    8980:	003fd306 	br	88d0 <__alt_exception_stack_pointer+0xf80088d0>
    8984:	1000541e 	bne	r2,zero,8ad8 <__subdf3+0x488>
    8988:	80800044 	addi	r2,r16,1
    898c:	1081ffcc 	andi	r2,r2,2047
    8990:	01000044 	movi	r4,1
    8994:	2080a20e 	bge	r4,r2,8c20 <__subdf3+0x5d0>
    8998:	8989c83a 	sub	r4,r17,r6
    899c:	8905803a 	cmpltu	r2,r17,r4
    89a0:	1967c83a 	sub	r19,r3,r5
    89a4:	98a7c83a 	sub	r19,r19,r2
    89a8:	9880202c 	andhi	r2,r19,128
    89ac:	10006326 	beq	r2,zero,8b3c <__subdf3+0x4ec>
    89b0:	3463c83a 	sub	r17,r6,r17
    89b4:	28c7c83a 	sub	r3,r5,r3
    89b8:	344d803a 	cmpltu	r6,r6,r17
    89bc:	19a7c83a 	sub	r19,r3,r6
    89c0:	3825883a 	mov	r18,r7
    89c4:	983f861e 	bne	r19,zero,87e0 <__alt_exception_stack_pointer+0xf80087e0>
    89c8:	8809883a 	mov	r4,r17
    89cc:	00094080 	call	9408 <__clzsi2>
    89d0:	10800804 	addi	r2,r2,32
    89d4:	113ffe04 	addi	r4,r2,-8
    89d8:	00c007c4 	movi	r3,31
    89dc:	193f850e 	bge	r3,r4,87f4 <__alt_exception_stack_pointer+0xf80087f4>
    89e0:	10bff604 	addi	r2,r2,-40
    89e4:	8884983a 	sll	r2,r17,r2
    89e8:	0023883a 	mov	r17,zero
    89ec:	243f880e 	bge	r4,r16,8810 <__alt_exception_stack_pointer+0xf8008810>
    89f0:	00ffe034 	movhi	r3,65408
    89f4:	18ffffc4 	addi	r3,r3,-1
    89f8:	8121c83a 	sub	r16,r16,r4
    89fc:	10c6703a 	and	r3,r2,r3
    8a00:	003f3406 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8a04:	9100004c 	andi	r4,r18,1
    8a08:	000b883a 	mov	r5,zero
    8a0c:	0005883a 	mov	r2,zero
    8a10:	003f4806 	br	8734 <__alt_exception_stack_pointer+0xf8008734>
    8a14:	298cb03a 	or	r6,r5,r6
    8a18:	300cc03a 	cmpne	r6,r6,zero
    8a1c:	0005883a 	mov	r2,zero
    8a20:	003f6406 	br	87b4 <__alt_exception_stack_pointer+0xf80087b4>
    8a24:	10009a1e 	bne	r2,zero,8c90 <__subdf3+0x640>
    8a28:	82400044 	addi	r9,r16,1
    8a2c:	4881ffcc 	andi	r2,r9,2047
    8a30:	02800044 	movi	r10,1
    8a34:	5080670e 	bge	r10,r2,8bd4 <__subdf3+0x584>
    8a38:	0081ffc4 	movi	r2,2047
    8a3c:	4880af26 	beq	r9,r2,8cfc <__subdf3+0x6ac>
    8a40:	898d883a 	add	r6,r17,r6
    8a44:	1945883a 	add	r2,r3,r5
    8a48:	3447803a 	cmpltu	r3,r6,r17
    8a4c:	1887883a 	add	r3,r3,r2
    8a50:	182297fa 	slli	r17,r3,31
    8a54:	300cd07a 	srli	r6,r6,1
    8a58:	1806d07a 	srli	r3,r3,1
    8a5c:	4821883a 	mov	r16,r9
    8a60:	89a2b03a 	or	r17,r17,r6
    8a64:	003f1b06 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8a68:	0101ffc4 	movi	r4,2047
    8a6c:	813f441e 	bne	r16,r4,8780 <__alt_exception_stack_pointer+0xf8008780>
    8a70:	003f1806 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8a74:	843ff844 	addi	r16,r16,-31
    8a78:	01400804 	movi	r5,32
    8a7c:	1408d83a 	srl	r4,r2,r16
    8a80:	19405026 	beq	r3,r5,8bc4 <__subdf3+0x574>
    8a84:	01401004 	movi	r5,64
    8a88:	28c7c83a 	sub	r3,r5,r3
    8a8c:	10c4983a 	sll	r2,r2,r3
    8a90:	88a2b03a 	or	r17,r17,r2
    8a94:	8822c03a 	cmpne	r17,r17,zero
    8a98:	2462b03a 	or	r17,r4,r17
    8a9c:	0007883a 	mov	r3,zero
    8aa0:	0021883a 	mov	r16,zero
    8aa4:	003f6d06 	br	885c <__alt_exception_stack_pointer+0xf800885c>
    8aa8:	11fff804 	addi	r7,r2,-32
    8aac:	01000804 	movi	r4,32
    8ab0:	29ced83a 	srl	r7,r5,r7
    8ab4:	11004526 	beq	r2,r4,8bcc <__subdf3+0x57c>
    8ab8:	01001004 	movi	r4,64
    8abc:	2089c83a 	sub	r4,r4,r2
    8ac0:	2904983a 	sll	r2,r5,r4
    8ac4:	118cb03a 	or	r6,r2,r6
    8ac8:	300cc03a 	cmpne	r6,r6,zero
    8acc:	398cb03a 	or	r6,r7,r6
    8ad0:	0005883a 	mov	r2,zero
    8ad4:	003f3706 	br	87b4 <__alt_exception_stack_pointer+0xf80087b4>
    8ad8:	80002a26 	beq	r16,zero,8b84 <__subdf3+0x534>
    8adc:	0101ffc4 	movi	r4,2047
    8ae0:	49006626 	beq	r9,r4,8c7c <__subdf3+0x62c>
    8ae4:	0085c83a 	sub	r2,zero,r2
    8ae8:	18c02034 	orhi	r3,r3,128
    8aec:	01000e04 	movi	r4,56
    8af0:	20807e16 	blt	r4,r2,8cec <__subdf3+0x69c>
    8af4:	010007c4 	movi	r4,31
    8af8:	2080e716 	blt	r4,r2,8e98 <__subdf3+0x848>
    8afc:	01000804 	movi	r4,32
    8b00:	2089c83a 	sub	r4,r4,r2
    8b04:	1914983a 	sll	r10,r3,r4
    8b08:	8890d83a 	srl	r8,r17,r2
    8b0c:	8908983a 	sll	r4,r17,r4
    8b10:	1884d83a 	srl	r2,r3,r2
    8b14:	5222b03a 	or	r17,r10,r8
    8b18:	2006c03a 	cmpne	r3,r4,zero
    8b1c:	88e2b03a 	or	r17,r17,r3
    8b20:	3463c83a 	sub	r17,r6,r17
    8b24:	2885c83a 	sub	r2,r5,r2
    8b28:	344d803a 	cmpltu	r6,r6,r17
    8b2c:	1187c83a 	sub	r3,r2,r6
    8b30:	4821883a 	mov	r16,r9
    8b34:	3825883a 	mov	r18,r7
    8b38:	003f2306 	br	87c8 <__alt_exception_stack_pointer+0xf80087c8>
    8b3c:	24d0b03a 	or	r8,r4,r19
    8b40:	40001b1e 	bne	r8,zero,8bb0 <__subdf3+0x560>
    8b44:	0005883a 	mov	r2,zero
    8b48:	0009883a 	mov	r4,zero
    8b4c:	0021883a 	mov	r16,zero
    8b50:	003f4906 	br	8878 <__alt_exception_stack_pointer+0xf8008878>
    8b54:	010007c4 	movi	r4,31
    8b58:	20803a16 	blt	r4,r2,8c44 <__subdf3+0x5f4>
    8b5c:	01000804 	movi	r4,32
    8b60:	2089c83a 	sub	r4,r4,r2
    8b64:	2912983a 	sll	r9,r5,r4
    8b68:	3090d83a 	srl	r8,r6,r2
    8b6c:	3108983a 	sll	r4,r6,r4
    8b70:	2884d83a 	srl	r2,r5,r2
    8b74:	4a12b03a 	or	r9,r9,r8
    8b78:	2008c03a 	cmpne	r4,r4,zero
    8b7c:	4912b03a 	or	r9,r9,r4
    8b80:	003f4e06 	br	88bc <__alt_exception_stack_pointer+0xf80088bc>
    8b84:	1c48b03a 	or	r4,r3,r17
    8b88:	20003c26 	beq	r4,zero,8c7c <__subdf3+0x62c>
    8b8c:	0084303a 	nor	r2,zero,r2
    8b90:	1000381e 	bne	r2,zero,8c74 <__subdf3+0x624>
    8b94:	3463c83a 	sub	r17,r6,r17
    8b98:	28c5c83a 	sub	r2,r5,r3
    8b9c:	344d803a 	cmpltu	r6,r6,r17
    8ba0:	1187c83a 	sub	r3,r2,r6
    8ba4:	4821883a 	mov	r16,r9
    8ba8:	3825883a 	mov	r18,r7
    8bac:	003f0606 	br	87c8 <__alt_exception_stack_pointer+0xf80087c8>
    8bb0:	2023883a 	mov	r17,r4
    8bb4:	003f0906 	br	87dc <__alt_exception_stack_pointer+0xf80087dc>
    8bb8:	0101ffc4 	movi	r4,2047
    8bbc:	813f3a1e 	bne	r16,r4,88a8 <__alt_exception_stack_pointer+0xf80088a8>
    8bc0:	003ec406 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8bc4:	0005883a 	mov	r2,zero
    8bc8:	003fb106 	br	8a90 <__alt_exception_stack_pointer+0xf8008a90>
    8bcc:	0005883a 	mov	r2,zero
    8bd0:	003fbc06 	br	8ac4 <__alt_exception_stack_pointer+0xf8008ac4>
    8bd4:	1c44b03a 	or	r2,r3,r17
    8bd8:	80008e1e 	bne	r16,zero,8e14 <__subdf3+0x7c4>
    8bdc:	1000c826 	beq	r2,zero,8f00 <__subdf3+0x8b0>
    8be0:	2984b03a 	or	r2,r5,r6
    8be4:	103ebb26 	beq	r2,zero,86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8be8:	8989883a 	add	r4,r17,r6
    8bec:	1945883a 	add	r2,r3,r5
    8bf0:	2447803a 	cmpltu	r3,r4,r17
    8bf4:	1887883a 	add	r3,r3,r2
    8bf8:	1880202c 	andhi	r2,r3,128
    8bfc:	2023883a 	mov	r17,r4
    8c00:	103f1626 	beq	r2,zero,885c <__alt_exception_stack_pointer+0xf800885c>
    8c04:	00bfe034 	movhi	r2,65408
    8c08:	10bfffc4 	addi	r2,r2,-1
    8c0c:	5021883a 	mov	r16,r10
    8c10:	1886703a 	and	r3,r3,r2
    8c14:	003eaf06 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8c18:	3825883a 	mov	r18,r7
    8c1c:	003f0f06 	br	885c <__alt_exception_stack_pointer+0xf800885c>
    8c20:	1c44b03a 	or	r2,r3,r17
    8c24:	8000251e 	bne	r16,zero,8cbc <__subdf3+0x66c>
    8c28:	1000661e 	bne	r2,zero,8dc4 <__subdf3+0x774>
    8c2c:	2990b03a 	or	r8,r5,r6
    8c30:	40009626 	beq	r8,zero,8e8c <__subdf3+0x83c>
    8c34:	2807883a 	mov	r3,r5
    8c38:	3023883a 	mov	r17,r6
    8c3c:	3825883a 	mov	r18,r7
    8c40:	003ea406 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8c44:	127ff804 	addi	r9,r2,-32
    8c48:	01000804 	movi	r4,32
    8c4c:	2a52d83a 	srl	r9,r5,r9
    8c50:	11008c26 	beq	r2,r4,8e84 <__subdf3+0x834>
    8c54:	01001004 	movi	r4,64
    8c58:	2085c83a 	sub	r2,r4,r2
    8c5c:	2884983a 	sll	r2,r5,r2
    8c60:	118cb03a 	or	r6,r2,r6
    8c64:	300cc03a 	cmpne	r6,r6,zero
    8c68:	4992b03a 	or	r9,r9,r6
    8c6c:	0005883a 	mov	r2,zero
    8c70:	003f1206 	br	88bc <__alt_exception_stack_pointer+0xf80088bc>
    8c74:	0101ffc4 	movi	r4,2047
    8c78:	493f9c1e 	bne	r9,r4,8aec <__alt_exception_stack_pointer+0xf8008aec>
    8c7c:	2807883a 	mov	r3,r5
    8c80:	3023883a 	mov	r17,r6
    8c84:	4821883a 	mov	r16,r9
    8c88:	3825883a 	mov	r18,r7
    8c8c:	003e9106 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8c90:	80001f1e 	bne	r16,zero,8d10 <__subdf3+0x6c0>
    8c94:	1c48b03a 	or	r4,r3,r17
    8c98:	20005a26 	beq	r4,zero,8e04 <__subdf3+0x7b4>
    8c9c:	0084303a 	nor	r2,zero,r2
    8ca0:	1000561e 	bne	r2,zero,8dfc <__subdf3+0x7ac>
    8ca4:	89a3883a 	add	r17,r17,r6
    8ca8:	1945883a 	add	r2,r3,r5
    8cac:	898d803a 	cmpltu	r6,r17,r6
    8cb0:	3087883a 	add	r3,r6,r2
    8cb4:	4821883a 	mov	r16,r9
    8cb8:	003f0506 	br	88d0 <__alt_exception_stack_pointer+0xf80088d0>
    8cbc:	10002b1e 	bne	r2,zero,8d6c <__subdf3+0x71c>
    8cc0:	2984b03a 	or	r2,r5,r6
    8cc4:	10008026 	beq	r2,zero,8ec8 <__subdf3+0x878>
    8cc8:	2807883a 	mov	r3,r5
    8ccc:	3023883a 	mov	r17,r6
    8cd0:	3825883a 	mov	r18,r7
    8cd4:	0401ffc4 	movi	r16,2047
    8cd8:	003e7e06 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8cdc:	3809883a 	mov	r4,r7
    8ce0:	0011883a 	mov	r8,zero
    8ce4:	0005883a 	mov	r2,zero
    8ce8:	003ee306 	br	8878 <__alt_exception_stack_pointer+0xf8008878>
    8cec:	1c62b03a 	or	r17,r3,r17
    8cf0:	8822c03a 	cmpne	r17,r17,zero
    8cf4:	0005883a 	mov	r2,zero
    8cf8:	003f8906 	br	8b20 <__alt_exception_stack_pointer+0xf8008b20>
    8cfc:	3809883a 	mov	r4,r7
    8d00:	4821883a 	mov	r16,r9
    8d04:	0011883a 	mov	r8,zero
    8d08:	0005883a 	mov	r2,zero
    8d0c:	003eda06 	br	8878 <__alt_exception_stack_pointer+0xf8008878>
    8d10:	0101ffc4 	movi	r4,2047
    8d14:	49003b26 	beq	r9,r4,8e04 <__subdf3+0x7b4>
    8d18:	0085c83a 	sub	r2,zero,r2
    8d1c:	18c02034 	orhi	r3,r3,128
    8d20:	01000e04 	movi	r4,56
    8d24:	20806e16 	blt	r4,r2,8ee0 <__subdf3+0x890>
    8d28:	010007c4 	movi	r4,31
    8d2c:	20807716 	blt	r4,r2,8f0c <__subdf3+0x8bc>
    8d30:	01000804 	movi	r4,32
    8d34:	2089c83a 	sub	r4,r4,r2
    8d38:	1914983a 	sll	r10,r3,r4
    8d3c:	8890d83a 	srl	r8,r17,r2
    8d40:	8908983a 	sll	r4,r17,r4
    8d44:	1884d83a 	srl	r2,r3,r2
    8d48:	5222b03a 	or	r17,r10,r8
    8d4c:	2006c03a 	cmpne	r3,r4,zero
    8d50:	88e2b03a 	or	r17,r17,r3
    8d54:	89a3883a 	add	r17,r17,r6
    8d58:	1145883a 	add	r2,r2,r5
    8d5c:	898d803a 	cmpltu	r6,r17,r6
    8d60:	3087883a 	add	r3,r6,r2
    8d64:	4821883a 	mov	r16,r9
    8d68:	003ed906 	br	88d0 <__alt_exception_stack_pointer+0xf80088d0>
    8d6c:	2984b03a 	or	r2,r5,r6
    8d70:	10004226 	beq	r2,zero,8e7c <__subdf3+0x82c>
    8d74:	1808d0fa 	srli	r4,r3,3
    8d78:	8822d0fa 	srli	r17,r17,3
    8d7c:	1806977a 	slli	r3,r3,29
    8d80:	2080022c 	andhi	r2,r4,8
    8d84:	1c62b03a 	or	r17,r3,r17
    8d88:	10000826 	beq	r2,zero,8dac <__subdf3+0x75c>
    8d8c:	2812d0fa 	srli	r9,r5,3
    8d90:	4880022c 	andhi	r2,r9,8
    8d94:	1000051e 	bne	r2,zero,8dac <__subdf3+0x75c>
    8d98:	300cd0fa 	srli	r6,r6,3
    8d9c:	2804977a 	slli	r2,r5,29
    8da0:	4809883a 	mov	r4,r9
    8da4:	3825883a 	mov	r18,r7
    8da8:	11a2b03a 	or	r17,r2,r6
    8dac:	8806d77a 	srli	r3,r17,29
    8db0:	200890fa 	slli	r4,r4,3
    8db4:	882290fa 	slli	r17,r17,3
    8db8:	0401ffc4 	movi	r16,2047
    8dbc:	1906b03a 	or	r3,r3,r4
    8dc0:	003e4406 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8dc4:	2984b03a 	or	r2,r5,r6
    8dc8:	103e4226 	beq	r2,zero,86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8dcc:	8989c83a 	sub	r4,r17,r6
    8dd0:	8911803a 	cmpltu	r8,r17,r4
    8dd4:	1945c83a 	sub	r2,r3,r5
    8dd8:	1205c83a 	sub	r2,r2,r8
    8ddc:	1200202c 	andhi	r8,r2,128
    8de0:	403e9a26 	beq	r8,zero,884c <__alt_exception_stack_pointer+0xf800884c>
    8de4:	3463c83a 	sub	r17,r6,r17
    8de8:	28c5c83a 	sub	r2,r5,r3
    8dec:	344d803a 	cmpltu	r6,r6,r17
    8df0:	1187c83a 	sub	r3,r2,r6
    8df4:	3825883a 	mov	r18,r7
    8df8:	003e3606 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8dfc:	0101ffc4 	movi	r4,2047
    8e00:	493fc71e 	bne	r9,r4,8d20 <__alt_exception_stack_pointer+0xf8008d20>
    8e04:	2807883a 	mov	r3,r5
    8e08:	3023883a 	mov	r17,r6
    8e0c:	4821883a 	mov	r16,r9
    8e10:	003e3006 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8e14:	10003626 	beq	r2,zero,8ef0 <__subdf3+0x8a0>
    8e18:	2984b03a 	or	r2,r5,r6
    8e1c:	10001726 	beq	r2,zero,8e7c <__subdf3+0x82c>
    8e20:	1808d0fa 	srli	r4,r3,3
    8e24:	8822d0fa 	srli	r17,r17,3
    8e28:	1806977a 	slli	r3,r3,29
    8e2c:	2080022c 	andhi	r2,r4,8
    8e30:	1c62b03a 	or	r17,r3,r17
    8e34:	10000726 	beq	r2,zero,8e54 <__subdf3+0x804>
    8e38:	2812d0fa 	srli	r9,r5,3
    8e3c:	4880022c 	andhi	r2,r9,8
    8e40:	1000041e 	bne	r2,zero,8e54 <__subdf3+0x804>
    8e44:	300cd0fa 	srli	r6,r6,3
    8e48:	2804977a 	slli	r2,r5,29
    8e4c:	4809883a 	mov	r4,r9
    8e50:	11a2b03a 	or	r17,r2,r6
    8e54:	8806d77a 	srli	r3,r17,29
    8e58:	200890fa 	slli	r4,r4,3
    8e5c:	882290fa 	slli	r17,r17,3
    8e60:	3825883a 	mov	r18,r7
    8e64:	1906b03a 	or	r3,r3,r4
    8e68:	0401ffc4 	movi	r16,2047
    8e6c:	003e1906 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8e70:	000b883a 	mov	r5,zero
    8e74:	0005883a 	mov	r2,zero
    8e78:	003e2e06 	br	8734 <__alt_exception_stack_pointer+0xf8008734>
    8e7c:	0401ffc4 	movi	r16,2047
    8e80:	003e1406 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8e84:	0005883a 	mov	r2,zero
    8e88:	003f7506 	br	8c60 <__alt_exception_stack_pointer+0xf8008c60>
    8e8c:	0005883a 	mov	r2,zero
    8e90:	0009883a 	mov	r4,zero
    8e94:	003e7806 	br	8878 <__alt_exception_stack_pointer+0xf8008878>
    8e98:	123ff804 	addi	r8,r2,-32
    8e9c:	01000804 	movi	r4,32
    8ea0:	1a10d83a 	srl	r8,r3,r8
    8ea4:	11002526 	beq	r2,r4,8f3c <__subdf3+0x8ec>
    8ea8:	01001004 	movi	r4,64
    8eac:	2085c83a 	sub	r2,r4,r2
    8eb0:	1884983a 	sll	r2,r3,r2
    8eb4:	1444b03a 	or	r2,r2,r17
    8eb8:	1004c03a 	cmpne	r2,r2,zero
    8ebc:	40a2b03a 	or	r17,r8,r2
    8ec0:	0005883a 	mov	r2,zero
    8ec4:	003f1606 	br	8b20 <__alt_exception_stack_pointer+0xf8008b20>
    8ec8:	02000434 	movhi	r8,16
    8ecc:	0009883a 	mov	r4,zero
    8ed0:	423fffc4 	addi	r8,r8,-1
    8ed4:	00bfffc4 	movi	r2,-1
    8ed8:	0401ffc4 	movi	r16,2047
    8edc:	003e6606 	br	8878 <__alt_exception_stack_pointer+0xf8008878>
    8ee0:	1c62b03a 	or	r17,r3,r17
    8ee4:	8822c03a 	cmpne	r17,r17,zero
    8ee8:	0005883a 	mov	r2,zero
    8eec:	003f9906 	br	8d54 <__alt_exception_stack_pointer+0xf8008d54>
    8ef0:	2807883a 	mov	r3,r5
    8ef4:	3023883a 	mov	r17,r6
    8ef8:	0401ffc4 	movi	r16,2047
    8efc:	003df506 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8f00:	2807883a 	mov	r3,r5
    8f04:	3023883a 	mov	r17,r6
    8f08:	003df206 	br	86d4 <__alt_exception_stack_pointer+0xf80086d4>
    8f0c:	123ff804 	addi	r8,r2,-32
    8f10:	01000804 	movi	r4,32
    8f14:	1a10d83a 	srl	r8,r3,r8
    8f18:	11000a26 	beq	r2,r4,8f44 <__subdf3+0x8f4>
    8f1c:	01001004 	movi	r4,64
    8f20:	2085c83a 	sub	r2,r4,r2
    8f24:	1884983a 	sll	r2,r3,r2
    8f28:	1444b03a 	or	r2,r2,r17
    8f2c:	1004c03a 	cmpne	r2,r2,zero
    8f30:	40a2b03a 	or	r17,r8,r2
    8f34:	0005883a 	mov	r2,zero
    8f38:	003f8606 	br	8d54 <__alt_exception_stack_pointer+0xf8008d54>
    8f3c:	0005883a 	mov	r2,zero
    8f40:	003fdc06 	br	8eb4 <__alt_exception_stack_pointer+0xf8008eb4>
    8f44:	0005883a 	mov	r2,zero
    8f48:	003ff706 	br	8f28 <__alt_exception_stack_pointer+0xf8008f28>

00008f4c <__fixdfsi>:
    8f4c:	280cd53a 	srli	r6,r5,20
    8f50:	00c00434 	movhi	r3,16
    8f54:	18ffffc4 	addi	r3,r3,-1
    8f58:	3181ffcc 	andi	r6,r6,2047
    8f5c:	01c0ff84 	movi	r7,1022
    8f60:	28c6703a 	and	r3,r5,r3
    8f64:	280ad7fa 	srli	r5,r5,31
    8f68:	3980120e 	bge	r7,r6,8fb4 <__fixdfsi+0x68>
    8f6c:	00810744 	movi	r2,1053
    8f70:	11800c16 	blt	r2,r6,8fa4 <__fixdfsi+0x58>
    8f74:	00810cc4 	movi	r2,1075
    8f78:	1185c83a 	sub	r2,r2,r6
    8f7c:	01c007c4 	movi	r7,31
    8f80:	18c00434 	orhi	r3,r3,16
    8f84:	38800d16 	blt	r7,r2,8fbc <__fixdfsi+0x70>
    8f88:	31befb44 	addi	r6,r6,-1043
    8f8c:	2084d83a 	srl	r2,r4,r2
    8f90:	1986983a 	sll	r3,r3,r6
    8f94:	1884b03a 	or	r2,r3,r2
    8f98:	28000726 	beq	r5,zero,8fb8 <__fixdfsi+0x6c>
    8f9c:	0085c83a 	sub	r2,zero,r2
    8fa0:	f800283a 	ret
    8fa4:	00a00034 	movhi	r2,32768
    8fa8:	10bfffc4 	addi	r2,r2,-1
    8fac:	2885883a 	add	r2,r5,r2
    8fb0:	f800283a 	ret
    8fb4:	0005883a 	mov	r2,zero
    8fb8:	f800283a 	ret
    8fbc:	008104c4 	movi	r2,1043
    8fc0:	1185c83a 	sub	r2,r2,r6
    8fc4:	1884d83a 	srl	r2,r3,r2
    8fc8:	003ff306 	br	8f98 <__alt_exception_stack_pointer+0xf8008f98>

00008fcc <__floatsidf>:
    8fcc:	defffd04 	addi	sp,sp,-12
    8fd0:	dfc00215 	stw	ra,8(sp)
    8fd4:	dc400115 	stw	r17,4(sp)
    8fd8:	dc000015 	stw	r16,0(sp)
    8fdc:	20002b26 	beq	r4,zero,908c <__floatsidf+0xc0>
    8fe0:	2023883a 	mov	r17,r4
    8fe4:	2020d7fa 	srli	r16,r4,31
    8fe8:	20002d16 	blt	r4,zero,90a0 <__floatsidf+0xd4>
    8fec:	8809883a 	mov	r4,r17
    8ff0:	00094080 	call	9408 <__clzsi2>
    8ff4:	01410784 	movi	r5,1054
    8ff8:	288bc83a 	sub	r5,r5,r2
    8ffc:	01010cc4 	movi	r4,1075
    9000:	2149c83a 	sub	r4,r4,r5
    9004:	00c007c4 	movi	r3,31
    9008:	1900160e 	bge	r3,r4,9064 <__floatsidf+0x98>
    900c:	00c104c4 	movi	r3,1043
    9010:	1947c83a 	sub	r3,r3,r5
    9014:	88c6983a 	sll	r3,r17,r3
    9018:	00800434 	movhi	r2,16
    901c:	10bfffc4 	addi	r2,r2,-1
    9020:	1886703a 	and	r3,r3,r2
    9024:	2941ffcc 	andi	r5,r5,2047
    9028:	800d883a 	mov	r6,r16
    902c:	0005883a 	mov	r2,zero
    9030:	280a953a 	slli	r5,r5,20
    9034:	31803fcc 	andi	r6,r6,255
    9038:	01000434 	movhi	r4,16
    903c:	300c97fa 	slli	r6,r6,31
    9040:	213fffc4 	addi	r4,r4,-1
    9044:	1906703a 	and	r3,r3,r4
    9048:	1946b03a 	or	r3,r3,r5
    904c:	1986b03a 	or	r3,r3,r6
    9050:	dfc00217 	ldw	ra,8(sp)
    9054:	dc400117 	ldw	r17,4(sp)
    9058:	dc000017 	ldw	r16,0(sp)
    905c:	dec00304 	addi	sp,sp,12
    9060:	f800283a 	ret
    9064:	00c002c4 	movi	r3,11
    9068:	1887c83a 	sub	r3,r3,r2
    906c:	88c6d83a 	srl	r3,r17,r3
    9070:	8904983a 	sll	r2,r17,r4
    9074:	01000434 	movhi	r4,16
    9078:	213fffc4 	addi	r4,r4,-1
    907c:	2941ffcc 	andi	r5,r5,2047
    9080:	1906703a 	and	r3,r3,r4
    9084:	800d883a 	mov	r6,r16
    9088:	003fe906 	br	9030 <__alt_exception_stack_pointer+0xf8009030>
    908c:	000d883a 	mov	r6,zero
    9090:	000b883a 	mov	r5,zero
    9094:	0007883a 	mov	r3,zero
    9098:	0005883a 	mov	r2,zero
    909c:	003fe406 	br	9030 <__alt_exception_stack_pointer+0xf8009030>
    90a0:	0123c83a 	sub	r17,zero,r4
    90a4:	003fd106 	br	8fec <__alt_exception_stack_pointer+0xf8008fec>

000090a8 <__floatunsidf>:
    90a8:	defffe04 	addi	sp,sp,-8
    90ac:	dc000015 	stw	r16,0(sp)
    90b0:	dfc00115 	stw	ra,4(sp)
    90b4:	2021883a 	mov	r16,r4
    90b8:	20002226 	beq	r4,zero,9144 <__floatunsidf+0x9c>
    90bc:	00094080 	call	9408 <__clzsi2>
    90c0:	01010784 	movi	r4,1054
    90c4:	2089c83a 	sub	r4,r4,r2
    90c8:	01810cc4 	movi	r6,1075
    90cc:	310dc83a 	sub	r6,r6,r4
    90d0:	00c007c4 	movi	r3,31
    90d4:	1980120e 	bge	r3,r6,9120 <__floatunsidf+0x78>
    90d8:	00c104c4 	movi	r3,1043
    90dc:	1907c83a 	sub	r3,r3,r4
    90e0:	80ca983a 	sll	r5,r16,r3
    90e4:	00800434 	movhi	r2,16
    90e8:	10bfffc4 	addi	r2,r2,-1
    90ec:	2101ffcc 	andi	r4,r4,2047
    90f0:	0021883a 	mov	r16,zero
    90f4:	288a703a 	and	r5,r5,r2
    90f8:	2008953a 	slli	r4,r4,20
    90fc:	00c00434 	movhi	r3,16
    9100:	18ffffc4 	addi	r3,r3,-1
    9104:	28c6703a 	and	r3,r5,r3
    9108:	8005883a 	mov	r2,r16
    910c:	1906b03a 	or	r3,r3,r4
    9110:	dfc00117 	ldw	ra,4(sp)
    9114:	dc000017 	ldw	r16,0(sp)
    9118:	dec00204 	addi	sp,sp,8
    911c:	f800283a 	ret
    9120:	00c002c4 	movi	r3,11
    9124:	188bc83a 	sub	r5,r3,r2
    9128:	814ad83a 	srl	r5,r16,r5
    912c:	00c00434 	movhi	r3,16
    9130:	18ffffc4 	addi	r3,r3,-1
    9134:	81a0983a 	sll	r16,r16,r6
    9138:	2101ffcc 	andi	r4,r4,2047
    913c:	28ca703a 	and	r5,r5,r3
    9140:	003fed06 	br	90f8 <__alt_exception_stack_pointer+0xf80090f8>
    9144:	0009883a 	mov	r4,zero
    9148:	000b883a 	mov	r5,zero
    914c:	003fea06 	br	90f8 <__alt_exception_stack_pointer+0xf80090f8>

00009150 <__extendsfdf2>:
    9150:	200ad5fa 	srli	r5,r4,23
    9154:	defffd04 	addi	sp,sp,-12
    9158:	dc400115 	stw	r17,4(sp)
    915c:	29403fcc 	andi	r5,r5,255
    9160:	29800044 	addi	r6,r5,1
    9164:	04402034 	movhi	r17,128
    9168:	dc000015 	stw	r16,0(sp)
    916c:	8c7fffc4 	addi	r17,r17,-1
    9170:	dfc00215 	stw	ra,8(sp)
    9174:	31803fcc 	andi	r6,r6,255
    9178:	00800044 	movi	r2,1
    917c:	8922703a 	and	r17,r17,r4
    9180:	2020d7fa 	srli	r16,r4,31
    9184:	1180110e 	bge	r2,r6,91cc <__extendsfdf2+0x7c>
    9188:	880cd0fa 	srli	r6,r17,3
    918c:	8822977a 	slli	r17,r17,29
    9190:	2940e004 	addi	r5,r5,896
    9194:	2941ffcc 	andi	r5,r5,2047
    9198:	2804953a 	slli	r2,r5,20
    919c:	01400434 	movhi	r5,16
    91a0:	800697fa 	slli	r3,r16,31
    91a4:	297fffc4 	addi	r5,r5,-1
    91a8:	314a703a 	and	r5,r6,r5
    91ac:	288ab03a 	or	r5,r5,r2
    91b0:	28c6b03a 	or	r3,r5,r3
    91b4:	8805883a 	mov	r2,r17
    91b8:	dfc00217 	ldw	ra,8(sp)
    91bc:	dc400117 	ldw	r17,4(sp)
    91c0:	dc000017 	ldw	r16,0(sp)
    91c4:	dec00304 	addi	sp,sp,12
    91c8:	f800283a 	ret
    91cc:	2800111e 	bne	r5,zero,9214 <__extendsfdf2+0xc4>
    91d0:	88001c26 	beq	r17,zero,9244 <__extendsfdf2+0xf4>
    91d4:	8809883a 	mov	r4,r17
    91d8:	00094080 	call	9408 <__clzsi2>
    91dc:	00c00284 	movi	r3,10
    91e0:	18801b16 	blt	r3,r2,9250 <__extendsfdf2+0x100>
    91e4:	018002c4 	movi	r6,11
    91e8:	308dc83a 	sub	r6,r6,r2
    91ec:	11000544 	addi	r4,r2,21
    91f0:	8986d83a 	srl	r3,r17,r6
    91f4:	8922983a 	sll	r17,r17,r4
    91f8:	0180e244 	movi	r6,905
    91fc:	01400434 	movhi	r5,16
    9200:	3085c83a 	sub	r2,r6,r2
    9204:	297fffc4 	addi	r5,r5,-1
    9208:	194c703a 	and	r6,r3,r5
    920c:	1141ffcc 	andi	r5,r2,2047
    9210:	003fe006 	br	9194 <__alt_exception_stack_pointer+0xf8009194>
    9214:	88000826 	beq	r17,zero,9238 <__extendsfdf2+0xe8>
    9218:	880cd0fa 	srli	r6,r17,3
    921c:	00800434 	movhi	r2,16
    9220:	10bfffc4 	addi	r2,r2,-1
    9224:	31800234 	orhi	r6,r6,8
    9228:	8822977a 	slli	r17,r17,29
    922c:	308c703a 	and	r6,r6,r2
    9230:	0141ffc4 	movi	r5,2047
    9234:	003fd706 	br	9194 <__alt_exception_stack_pointer+0xf8009194>
    9238:	0141ffc4 	movi	r5,2047
    923c:	000d883a 	mov	r6,zero
    9240:	003fd406 	br	9194 <__alt_exception_stack_pointer+0xf8009194>
    9244:	000b883a 	mov	r5,zero
    9248:	000d883a 	mov	r6,zero
    924c:	003fd106 	br	9194 <__alt_exception_stack_pointer+0xf8009194>
    9250:	11bffd44 	addi	r6,r2,-11
    9254:	8986983a 	sll	r3,r17,r6
    9258:	0023883a 	mov	r17,zero
    925c:	003fe606 	br	91f8 <__alt_exception_stack_pointer+0xf80091f8>

00009260 <__truncdfsf2>:
    9260:	2810d53a 	srli	r8,r5,20
    9264:	01c00434 	movhi	r7,16
    9268:	39ffffc4 	addi	r7,r7,-1
    926c:	29ce703a 	and	r7,r5,r7
    9270:	4201ffcc 	andi	r8,r8,2047
    9274:	380e90fa 	slli	r7,r7,3
    9278:	200cd77a 	srli	r6,r4,29
    927c:	42400044 	addi	r9,r8,1
    9280:	4a41ffcc 	andi	r9,r9,2047
    9284:	00c00044 	movi	r3,1
    9288:	280ad7fa 	srli	r5,r5,31
    928c:	31ceb03a 	or	r7,r6,r7
    9290:	200490fa 	slli	r2,r4,3
    9294:	1a40230e 	bge	r3,r9,9324 <__truncdfsf2+0xc4>
    9298:	40ff2004 	addi	r3,r8,-896
    929c:	01803f84 	movi	r6,254
    92a0:	30c01516 	blt	r6,r3,92f8 <__truncdfsf2+0x98>
    92a4:	00c0380e 	bge	zero,r3,9388 <__truncdfsf2+0x128>
    92a8:	200c91ba 	slli	r6,r4,6
    92ac:	380e90fa 	slli	r7,r7,3
    92b0:	1004d77a 	srli	r2,r2,29
    92b4:	300cc03a 	cmpne	r6,r6,zero
    92b8:	31ccb03a 	or	r6,r6,r7
    92bc:	308cb03a 	or	r6,r6,r2
    92c0:	308001cc 	andi	r2,r6,7
    92c4:	10000426 	beq	r2,zero,92d8 <__truncdfsf2+0x78>
    92c8:	308003cc 	andi	r2,r6,15
    92cc:	01000104 	movi	r4,4
    92d0:	11000126 	beq	r2,r4,92d8 <__truncdfsf2+0x78>
    92d4:	31800104 	addi	r6,r6,4
    92d8:	3081002c 	andhi	r2,r6,1024
    92dc:	10001626 	beq	r2,zero,9338 <__truncdfsf2+0xd8>
    92e0:	18c00044 	addi	r3,r3,1
    92e4:	00803fc4 	movi	r2,255
    92e8:	18800326 	beq	r3,r2,92f8 <__truncdfsf2+0x98>
    92ec:	300c91ba 	slli	r6,r6,6
    92f0:	300cd27a 	srli	r6,r6,9
    92f4:	00000206 	br	9300 <__truncdfsf2+0xa0>
    92f8:	00ffffc4 	movi	r3,-1
    92fc:	000d883a 	mov	r6,zero
    9300:	18c03fcc 	andi	r3,r3,255
    9304:	180895fa 	slli	r4,r3,23
    9308:	00c02034 	movhi	r3,128
    930c:	280a97fa 	slli	r5,r5,31
    9310:	18ffffc4 	addi	r3,r3,-1
    9314:	30c6703a 	and	r3,r6,r3
    9318:	1906b03a 	or	r3,r3,r4
    931c:	1944b03a 	or	r2,r3,r5
    9320:	f800283a 	ret
    9324:	40000b1e 	bne	r8,zero,9354 <__truncdfsf2+0xf4>
    9328:	388cb03a 	or	r6,r7,r2
    932c:	0007883a 	mov	r3,zero
    9330:	30000426 	beq	r6,zero,9344 <__truncdfsf2+0xe4>
    9334:	01800144 	movi	r6,5
    9338:	00803fc4 	movi	r2,255
    933c:	300cd0fa 	srli	r6,r6,3
    9340:	18800a26 	beq	r3,r2,936c <__truncdfsf2+0x10c>
    9344:	00802034 	movhi	r2,128
    9348:	10bfffc4 	addi	r2,r2,-1
    934c:	308c703a 	and	r6,r6,r2
    9350:	003feb06 	br	9300 <__alt_exception_stack_pointer+0xf8009300>
    9354:	3888b03a 	or	r4,r7,r2
    9358:	203fe726 	beq	r4,zero,92f8 <__alt_exception_stack_pointer+0xf80092f8>
    935c:	380c90fa 	slli	r6,r7,3
    9360:	00c03fc4 	movi	r3,255
    9364:	31808034 	orhi	r6,r6,512
    9368:	003fd506 	br	92c0 <__alt_exception_stack_pointer+0xf80092c0>
    936c:	303fe226 	beq	r6,zero,92f8 <__alt_exception_stack_pointer+0xf80092f8>
    9370:	00802034 	movhi	r2,128
    9374:	31801034 	orhi	r6,r6,64
    9378:	10bfffc4 	addi	r2,r2,-1
    937c:	00ffffc4 	movi	r3,-1
    9380:	308c703a 	and	r6,r6,r2
    9384:	003fde06 	br	9300 <__alt_exception_stack_pointer+0xf8009300>
    9388:	013ffa44 	movi	r4,-23
    938c:	19000e16 	blt	r3,r4,93c8 <__truncdfsf2+0x168>
    9390:	01000784 	movi	r4,30
    9394:	20c9c83a 	sub	r4,r4,r3
    9398:	018007c4 	movi	r6,31
    939c:	39c02034 	orhi	r7,r7,128
    93a0:	31000b16 	blt	r6,r4,93d0 <__truncdfsf2+0x170>
    93a4:	423f2084 	addi	r8,r8,-894
    93a8:	120c983a 	sll	r6,r2,r8
    93ac:	3a0e983a 	sll	r7,r7,r8
    93b0:	1104d83a 	srl	r2,r2,r4
    93b4:	300cc03a 	cmpne	r6,r6,zero
    93b8:	31ceb03a 	or	r7,r6,r7
    93bc:	388cb03a 	or	r6,r7,r2
    93c0:	0007883a 	mov	r3,zero
    93c4:	003fbe06 	br	92c0 <__alt_exception_stack_pointer+0xf80092c0>
    93c8:	0007883a 	mov	r3,zero
    93cc:	003fd906 	br	9334 <__alt_exception_stack_pointer+0xf8009334>
    93d0:	01bfff84 	movi	r6,-2
    93d4:	30cdc83a 	sub	r6,r6,r3
    93d8:	00c00804 	movi	r3,32
    93dc:	398cd83a 	srl	r6,r7,r6
    93e0:	20c00726 	beq	r4,r3,9400 <__truncdfsf2+0x1a0>
    93e4:	423f2884 	addi	r8,r8,-862
    93e8:	3a0e983a 	sll	r7,r7,r8
    93ec:	3884b03a 	or	r2,r7,r2
    93f0:	1004c03a 	cmpne	r2,r2,zero
    93f4:	118cb03a 	or	r6,r2,r6
    93f8:	0007883a 	mov	r3,zero
    93fc:	003fb006 	br	92c0 <__alt_exception_stack_pointer+0xf80092c0>
    9400:	000f883a 	mov	r7,zero
    9404:	003ff906 	br	93ec <__alt_exception_stack_pointer+0xf80093ec>

00009408 <__clzsi2>:
    9408:	00bfffd4 	movui	r2,65535
    940c:	11000536 	bltu	r2,r4,9424 <__clzsi2+0x1c>
    9410:	00803fc4 	movi	r2,255
    9414:	11000f36 	bltu	r2,r4,9454 <__clzsi2+0x4c>
    9418:	00800804 	movi	r2,32
    941c:	0007883a 	mov	r3,zero
    9420:	00000506 	br	9438 <__clzsi2+0x30>
    9424:	00804034 	movhi	r2,256
    9428:	10bfffc4 	addi	r2,r2,-1
    942c:	11000c2e 	bgeu	r2,r4,9460 <__clzsi2+0x58>
    9430:	00800204 	movi	r2,8
    9434:	00c00604 	movi	r3,24
    9438:	20c8d83a 	srl	r4,r4,r3
    943c:	00c000b4 	movhi	r3,2
    9440:	18e2ec04 	addi	r3,r3,-29776
    9444:	1909883a 	add	r4,r3,r4
    9448:	20c00003 	ldbu	r3,0(r4)
    944c:	10c5c83a 	sub	r2,r2,r3
    9450:	f800283a 	ret
    9454:	00800604 	movi	r2,24
    9458:	00c00204 	movi	r3,8
    945c:	003ff606 	br	9438 <__alt_exception_stack_pointer+0xf8009438>
    9460:	00800404 	movi	r2,16
    9464:	1007883a 	mov	r3,r2
    9468:	003ff306 	br	9438 <__alt_exception_stack_pointer+0xf8009438>

0000946c <clock>:
    946c:	008000b4 	movhi	r2,2
    9470:	10ac8004 	addi	r2,r2,-19968
    9474:	11000017 	ldw	r4,0(r2)
    9478:	defffb04 	addi	sp,sp,-20
    947c:	d80b883a 	mov	r5,sp
    9480:	dfc00415 	stw	ra,16(sp)
    9484:	000a0f00 	call	a0f0 <_times_r>
    9488:	00ffffc4 	movi	r3,-1
    948c:	10c00726 	beq	r2,r3,94ac <clock+0x40>
    9490:	d8c00017 	ldw	r3,0(sp)
    9494:	d8800117 	ldw	r2,4(sp)
    9498:	1885883a 	add	r2,r3,r2
    949c:	d8c00217 	ldw	r3,8(sp)
    94a0:	10c7883a 	add	r3,r2,r3
    94a4:	d8800317 	ldw	r2,12(sp)
    94a8:	1885883a 	add	r2,r3,r2
    94ac:	dfc00417 	ldw	ra,16(sp)
    94b0:	dec00504 	addi	sp,sp,20
    94b4:	f800283a 	ret

000094b8 <fcvt>:
    94b8:	defffd04 	addi	sp,sp,-12
    94bc:	d8800317 	ldw	r2,12(sp)
    94c0:	d8000115 	stw	zero,4(sp)
    94c4:	dfc00215 	stw	ra,8(sp)
    94c8:	d8800015 	stw	r2,0(sp)
    94cc:	000e0900 	call	e090 <fcvtbuf>
    94d0:	dfc00217 	ldw	ra,8(sp)
    94d4:	dec00304 	addi	sp,sp,12
    94d8:	f800283a 	ret

000094dc <fcvtf>:
    94dc:	defffa04 	addi	sp,sp,-24
    94e0:	dfc00515 	stw	ra,20(sp)
    94e4:	dc800415 	stw	r18,16(sp)
    94e8:	dc400315 	stw	r17,12(sp)
    94ec:	3025883a 	mov	r18,r6
    94f0:	3823883a 	mov	r17,r7
    94f4:	dc000215 	stw	r16,8(sp)
    94f8:	2821883a 	mov	r16,r5
    94fc:	00091500 	call	9150 <__extendsfdf2>
    9500:	900f883a 	mov	r7,r18
    9504:	d8000115 	stw	zero,4(sp)
    9508:	dc400015 	stw	r17,0(sp)
    950c:	800d883a 	mov	r6,r16
    9510:	1009883a 	mov	r4,r2
    9514:	180b883a 	mov	r5,r3
    9518:	000e0900 	call	e090 <fcvtbuf>
    951c:	dfc00517 	ldw	ra,20(sp)
    9520:	dc800417 	ldw	r18,16(sp)
    9524:	dc400317 	ldw	r17,12(sp)
    9528:	dc000217 	ldw	r16,8(sp)
    952c:	dec00604 	addi	sp,sp,24
    9530:	f800283a 	ret

00009534 <ecvt>:
    9534:	defffd04 	addi	sp,sp,-12
    9538:	d8800317 	ldw	r2,12(sp)
    953c:	d8000115 	stw	zero,4(sp)
    9540:	dfc00215 	stw	ra,8(sp)
    9544:	d8800015 	stw	r2,0(sp)
    9548:	000e2340 	call	e234 <ecvtbuf>
    954c:	dfc00217 	ldw	ra,8(sp)
    9550:	dec00304 	addi	sp,sp,12
    9554:	f800283a 	ret

00009558 <ecvtf>:
    9558:	defffa04 	addi	sp,sp,-24
    955c:	dfc00515 	stw	ra,20(sp)
    9560:	dc800415 	stw	r18,16(sp)
    9564:	dc400315 	stw	r17,12(sp)
    9568:	3025883a 	mov	r18,r6
    956c:	3823883a 	mov	r17,r7
    9570:	dc000215 	stw	r16,8(sp)
    9574:	2821883a 	mov	r16,r5
    9578:	00091500 	call	9150 <__extendsfdf2>
    957c:	900f883a 	mov	r7,r18
    9580:	d8000115 	stw	zero,4(sp)
    9584:	dc400015 	stw	r17,0(sp)
    9588:	800d883a 	mov	r6,r16
    958c:	1009883a 	mov	r4,r2
    9590:	180b883a 	mov	r5,r3
    9594:	000e2340 	call	e234 <ecvtbuf>
    9598:	dfc00517 	ldw	ra,20(sp)
    959c:	dc800417 	ldw	r18,16(sp)
    95a0:	dc400317 	ldw	r17,12(sp)
    95a4:	dc000217 	ldw	r16,8(sp)
    95a8:	dec00604 	addi	sp,sp,24
    95ac:	f800283a 	ret

000095b0 <gcvt>:
    95b0:	defff804 	addi	sp,sp,-32
    95b4:	dc400415 	stw	r17,16(sp)
    95b8:	dc000315 	stw	r16,12(sp)
    95bc:	3023883a 	mov	r17,r6
    95c0:	3821883a 	mov	r16,r7
    95c4:	000d883a 	mov	r6,zero
    95c8:	000f883a 	mov	r7,zero
    95cc:	dcc00615 	stw	r19,24(sp)
    95d0:	dc800515 	stw	r18,20(sp)
    95d4:	dfc00715 	stw	ra,28(sp)
    95d8:	2027883a 	mov	r19,r4
    95dc:	2825883a 	mov	r18,r5
    95e0:	0007cf00 	call	7cf0 <__ledf2>
    95e4:	10001516 	blt	r2,zero,963c <gcvt+0x8c>
    95e8:	8005883a 	mov	r2,r16
    95ec:	00c000b4 	movhi	r3,2
    95f0:	18ec8004 	addi	r3,r3,-19968
    95f4:	d8000215 	stw	zero,8(sp)
    95f8:	19000017 	ldw	r4,0(r3)
    95fc:	00c019c4 	movi	r3,103
    9600:	d8c00115 	stw	r3,4(sp)
    9604:	d8800015 	stw	r2,0(sp)
    9608:	880f883a 	mov	r7,r17
    960c:	980b883a 	mov	r5,r19
    9610:	900d883a 	mov	r6,r18
    9614:	000e3740 	call	e374 <_gcvt>
    9618:	10000126 	beq	r2,zero,9620 <gcvt+0x70>
    961c:	8005883a 	mov	r2,r16
    9620:	dfc00717 	ldw	ra,28(sp)
    9624:	dcc00617 	ldw	r19,24(sp)
    9628:	dc800517 	ldw	r18,20(sp)
    962c:	dc400417 	ldw	r17,16(sp)
    9630:	dc000317 	ldw	r16,12(sp)
    9634:	dec00804 	addi	sp,sp,32
    9638:	f800283a 	ret
    963c:	00800b44 	movi	r2,45
    9640:	80800005 	stb	r2,0(r16)
    9644:	8c7fffc4 	addi	r17,r17,-1
    9648:	80800044 	addi	r2,r16,1
    964c:	003fe706 	br	95ec <__alt_exception_stack_pointer+0xf80095ec>

00009650 <gcvtf>:
    9650:	defffd04 	addi	sp,sp,-12
    9654:	dc400115 	stw	r17,4(sp)
    9658:	dc000015 	stw	r16,0(sp)
    965c:	3023883a 	mov	r17,r6
    9660:	2821883a 	mov	r16,r5
    9664:	dfc00215 	stw	ra,8(sp)
    9668:	00091500 	call	9150 <__extendsfdf2>
    966c:	880f883a 	mov	r7,r17
    9670:	800d883a 	mov	r6,r16
    9674:	1009883a 	mov	r4,r2
    9678:	180b883a 	mov	r5,r3
    967c:	dfc00217 	ldw	ra,8(sp)
    9680:	dc400117 	ldw	r17,4(sp)
    9684:	dc000017 	ldw	r16,0(sp)
    9688:	dec00304 	addi	sp,sp,12
    968c:	00095b01 	jmpi	95b0 <gcvt>

00009690 <malloc>:
    9690:	008000b4 	movhi	r2,2
    9694:	10ac8004 	addi	r2,r2,-19968
    9698:	200b883a 	mov	r5,r4
    969c:	11000017 	ldw	r4,0(r2)
    96a0:	00096b81 	jmpi	96b8 <_malloc_r>

000096a4 <free>:
    96a4:	008000b4 	movhi	r2,2
    96a8:	10ac8004 	addi	r2,r2,-19968
    96ac:	200b883a 	mov	r5,r4
    96b0:	11000017 	ldw	r4,0(r2)
    96b4:	000f1641 	jmpi	f164 <_free_r>

000096b8 <_malloc_r>:
    96b8:	defff504 	addi	sp,sp,-44
    96bc:	dc800315 	stw	r18,12(sp)
    96c0:	dfc00a15 	stw	ra,40(sp)
    96c4:	df000915 	stw	fp,36(sp)
    96c8:	ddc00815 	stw	r23,32(sp)
    96cc:	dd800715 	stw	r22,28(sp)
    96d0:	dd400615 	stw	r21,24(sp)
    96d4:	dd000515 	stw	r20,20(sp)
    96d8:	dcc00415 	stw	r19,16(sp)
    96dc:	dc400215 	stw	r17,8(sp)
    96e0:	dc000115 	stw	r16,4(sp)
    96e4:	288002c4 	addi	r2,r5,11
    96e8:	00c00584 	movi	r3,22
    96ec:	2025883a 	mov	r18,r4
    96f0:	18807f2e 	bgeu	r3,r2,98f0 <_malloc_r+0x238>
    96f4:	047ffe04 	movi	r17,-8
    96f8:	1462703a 	and	r17,r2,r17
    96fc:	8800a316 	blt	r17,zero,998c <_malloc_r+0x2d4>
    9700:	8940a236 	bltu	r17,r5,998c <_malloc_r+0x2d4>
    9704:	0014e940 	call	14e94 <__malloc_lock>
    9708:	00807dc4 	movi	r2,503
    970c:	1441e92e 	bgeu	r2,r17,9eb4 <_malloc_r+0x7fc>
    9710:	8804d27a 	srli	r2,r17,9
    9714:	1000a126 	beq	r2,zero,999c <_malloc_r+0x2e4>
    9718:	00c00104 	movi	r3,4
    971c:	18811e36 	bltu	r3,r2,9b98 <_malloc_r+0x4e0>
    9720:	8804d1ba 	srli	r2,r17,6
    9724:	12000e44 	addi	r8,r2,57
    9728:	11c00e04 	addi	r7,r2,56
    972c:	4209883a 	add	r4,r8,r8
    9730:	04c000b4 	movhi	r19,2
    9734:	2109883a 	add	r4,r4,r4
    9738:	9ce67e04 	addi	r19,r19,-26120
    973c:	2109883a 	add	r4,r4,r4
    9740:	9909883a 	add	r4,r19,r4
    9744:	24000117 	ldw	r16,4(r4)
    9748:	213ffe04 	addi	r4,r4,-8
    974c:	24009726 	beq	r4,r16,99ac <_malloc_r+0x2f4>
    9750:	80800117 	ldw	r2,4(r16)
    9754:	01bfff04 	movi	r6,-4
    9758:	014003c4 	movi	r5,15
    975c:	1184703a 	and	r2,r2,r6
    9760:	1447c83a 	sub	r3,r2,r17
    9764:	28c00716 	blt	r5,r3,9784 <_malloc_r+0xcc>
    9768:	1800920e 	bge	r3,zero,99b4 <_malloc_r+0x2fc>
    976c:	84000317 	ldw	r16,12(r16)
    9770:	24008e26 	beq	r4,r16,99ac <_malloc_r+0x2f4>
    9774:	80800117 	ldw	r2,4(r16)
    9778:	1184703a 	and	r2,r2,r6
    977c:	1447c83a 	sub	r3,r2,r17
    9780:	28fff90e 	bge	r5,r3,9768 <__alt_exception_stack_pointer+0xf8009768>
    9784:	3809883a 	mov	r4,r7
    9788:	018000b4 	movhi	r6,2
    978c:	9c000417 	ldw	r16,16(r19)
    9790:	31a67e04 	addi	r6,r6,-26120
    9794:	32000204 	addi	r8,r6,8
    9798:	82013426 	beq	r16,r8,9c6c <_malloc_r+0x5b4>
    979c:	80c00117 	ldw	r3,4(r16)
    97a0:	00bfff04 	movi	r2,-4
    97a4:	188e703a 	and	r7,r3,r2
    97a8:	3c45c83a 	sub	r2,r7,r17
    97ac:	00c003c4 	movi	r3,15
    97b0:	18811f16 	blt	r3,r2,9c30 <_malloc_r+0x578>
    97b4:	32000515 	stw	r8,20(r6)
    97b8:	32000415 	stw	r8,16(r6)
    97bc:	10007f0e 	bge	r2,zero,99bc <_malloc_r+0x304>
    97c0:	00807fc4 	movi	r2,511
    97c4:	11c0fd36 	bltu	r2,r7,9bbc <_malloc_r+0x504>
    97c8:	3806d0fa 	srli	r3,r7,3
    97cc:	01c00044 	movi	r7,1
    97d0:	30800117 	ldw	r2,4(r6)
    97d4:	19400044 	addi	r5,r3,1
    97d8:	294b883a 	add	r5,r5,r5
    97dc:	1807d0ba 	srai	r3,r3,2
    97e0:	294b883a 	add	r5,r5,r5
    97e4:	294b883a 	add	r5,r5,r5
    97e8:	298b883a 	add	r5,r5,r6
    97ec:	38c6983a 	sll	r3,r7,r3
    97f0:	29c00017 	ldw	r7,0(r5)
    97f4:	2a7ffe04 	addi	r9,r5,-8
    97f8:	1886b03a 	or	r3,r3,r2
    97fc:	82400315 	stw	r9,12(r16)
    9800:	81c00215 	stw	r7,8(r16)
    9804:	30c00115 	stw	r3,4(r6)
    9808:	2c000015 	stw	r16,0(r5)
    980c:	3c000315 	stw	r16,12(r7)
    9810:	2005d0ba 	srai	r2,r4,2
    9814:	01400044 	movi	r5,1
    9818:	288a983a 	sll	r5,r5,r2
    981c:	19406f36 	bltu	r3,r5,99dc <_malloc_r+0x324>
    9820:	28c4703a 	and	r2,r5,r3
    9824:	10000a1e 	bne	r2,zero,9850 <_malloc_r+0x198>
    9828:	00bfff04 	movi	r2,-4
    982c:	294b883a 	add	r5,r5,r5
    9830:	2088703a 	and	r4,r4,r2
    9834:	28c4703a 	and	r2,r5,r3
    9838:	21000104 	addi	r4,r4,4
    983c:	1000041e 	bne	r2,zero,9850 <_malloc_r+0x198>
    9840:	294b883a 	add	r5,r5,r5
    9844:	28c4703a 	and	r2,r5,r3
    9848:	21000104 	addi	r4,r4,4
    984c:	103ffc26 	beq	r2,zero,9840 <__alt_exception_stack_pointer+0xf8009840>
    9850:	02bfff04 	movi	r10,-4
    9854:	024003c4 	movi	r9,15
    9858:	21800044 	addi	r6,r4,1
    985c:	318d883a 	add	r6,r6,r6
    9860:	318d883a 	add	r6,r6,r6
    9864:	318d883a 	add	r6,r6,r6
    9868:	998d883a 	add	r6,r19,r6
    986c:	333ffe04 	addi	r12,r6,-8
    9870:	2017883a 	mov	r11,r4
    9874:	31800104 	addi	r6,r6,4
    9878:	34000017 	ldw	r16,0(r6)
    987c:	31fffd04 	addi	r7,r6,-12
    9880:	81c0041e 	bne	r16,r7,9894 <_malloc_r+0x1dc>
    9884:	0000fb06 	br	9c74 <_malloc_r+0x5bc>
    9888:	1801030e 	bge	r3,zero,9c98 <_malloc_r+0x5e0>
    988c:	84000317 	ldw	r16,12(r16)
    9890:	81c0f826 	beq	r16,r7,9c74 <_malloc_r+0x5bc>
    9894:	80800117 	ldw	r2,4(r16)
    9898:	1284703a 	and	r2,r2,r10
    989c:	1447c83a 	sub	r3,r2,r17
    98a0:	48fff90e 	bge	r9,r3,9888 <__alt_exception_stack_pointer+0xf8009888>
    98a4:	80800317 	ldw	r2,12(r16)
    98a8:	81000217 	ldw	r4,8(r16)
    98ac:	89400054 	ori	r5,r17,1
    98b0:	81400115 	stw	r5,4(r16)
    98b4:	20800315 	stw	r2,12(r4)
    98b8:	11000215 	stw	r4,8(r2)
    98bc:	8463883a 	add	r17,r16,r17
    98c0:	9c400515 	stw	r17,20(r19)
    98c4:	9c400415 	stw	r17,16(r19)
    98c8:	18800054 	ori	r2,r3,1
    98cc:	88800115 	stw	r2,4(r17)
    98d0:	8a000315 	stw	r8,12(r17)
    98d4:	8a000215 	stw	r8,8(r17)
    98d8:	88e3883a 	add	r17,r17,r3
    98dc:	88c00015 	stw	r3,0(r17)
    98e0:	9009883a 	mov	r4,r18
    98e4:	0014eb80 	call	14eb8 <__malloc_unlock>
    98e8:	80800204 	addi	r2,r16,8
    98ec:	00001b06 	br	995c <_malloc_r+0x2a4>
    98f0:	04400404 	movi	r17,16
    98f4:	89402536 	bltu	r17,r5,998c <_malloc_r+0x2d4>
    98f8:	0014e940 	call	14e94 <__malloc_lock>
    98fc:	00800184 	movi	r2,6
    9900:	01000084 	movi	r4,2
    9904:	04c000b4 	movhi	r19,2
    9908:	1085883a 	add	r2,r2,r2
    990c:	9ce67e04 	addi	r19,r19,-26120
    9910:	1085883a 	add	r2,r2,r2
    9914:	9885883a 	add	r2,r19,r2
    9918:	14000117 	ldw	r16,4(r2)
    991c:	10fffe04 	addi	r3,r2,-8
    9920:	80c0d926 	beq	r16,r3,9c88 <_malloc_r+0x5d0>
    9924:	80c00117 	ldw	r3,4(r16)
    9928:	81000317 	ldw	r4,12(r16)
    992c:	00bfff04 	movi	r2,-4
    9930:	1884703a 	and	r2,r3,r2
    9934:	81400217 	ldw	r5,8(r16)
    9938:	8085883a 	add	r2,r16,r2
    993c:	10c00117 	ldw	r3,4(r2)
    9940:	29000315 	stw	r4,12(r5)
    9944:	21400215 	stw	r5,8(r4)
    9948:	18c00054 	ori	r3,r3,1
    994c:	10c00115 	stw	r3,4(r2)
    9950:	9009883a 	mov	r4,r18
    9954:	0014eb80 	call	14eb8 <__malloc_unlock>
    9958:	80800204 	addi	r2,r16,8
    995c:	dfc00a17 	ldw	ra,40(sp)
    9960:	df000917 	ldw	fp,36(sp)
    9964:	ddc00817 	ldw	r23,32(sp)
    9968:	dd800717 	ldw	r22,28(sp)
    996c:	dd400617 	ldw	r21,24(sp)
    9970:	dd000517 	ldw	r20,20(sp)
    9974:	dcc00417 	ldw	r19,16(sp)
    9978:	dc800317 	ldw	r18,12(sp)
    997c:	dc400217 	ldw	r17,8(sp)
    9980:	dc000117 	ldw	r16,4(sp)
    9984:	dec00b04 	addi	sp,sp,44
    9988:	f800283a 	ret
    998c:	00800304 	movi	r2,12
    9990:	90800015 	stw	r2,0(r18)
    9994:	0005883a 	mov	r2,zero
    9998:	003ff006 	br	995c <__alt_exception_stack_pointer+0xf800995c>
    999c:	01002004 	movi	r4,128
    99a0:	02001004 	movi	r8,64
    99a4:	01c00fc4 	movi	r7,63
    99a8:	003f6106 	br	9730 <__alt_exception_stack_pointer+0xf8009730>
    99ac:	4009883a 	mov	r4,r8
    99b0:	003f7506 	br	9788 <__alt_exception_stack_pointer+0xf8009788>
    99b4:	81000317 	ldw	r4,12(r16)
    99b8:	003fde06 	br	9934 <__alt_exception_stack_pointer+0xf8009934>
    99bc:	81c5883a 	add	r2,r16,r7
    99c0:	11400117 	ldw	r5,4(r2)
    99c4:	9009883a 	mov	r4,r18
    99c8:	29400054 	ori	r5,r5,1
    99cc:	11400115 	stw	r5,4(r2)
    99d0:	0014eb80 	call	14eb8 <__malloc_unlock>
    99d4:	80800204 	addi	r2,r16,8
    99d8:	003fe006 	br	995c <__alt_exception_stack_pointer+0xf800995c>
    99dc:	9c000217 	ldw	r16,8(r19)
    99e0:	00bfff04 	movi	r2,-4
    99e4:	85800117 	ldw	r22,4(r16)
    99e8:	b0ac703a 	and	r22,r22,r2
    99ec:	b4400336 	bltu	r22,r17,99fc <_malloc_r+0x344>
    99f0:	b445c83a 	sub	r2,r22,r17
    99f4:	00c003c4 	movi	r3,15
    99f8:	18805d16 	blt	r3,r2,9b70 <_malloc_r+0x4b8>
    99fc:	05c000b4 	movhi	r23,2
    9a00:	008000b4 	movhi	r2,2
    9a04:	10b57504 	addi	r2,r2,-10796
    9a08:	bdec8104 	addi	r23,r23,-19964
    9a0c:	15400017 	ldw	r21,0(r2)
    9a10:	b8c00017 	ldw	r3,0(r23)
    9a14:	00bfffc4 	movi	r2,-1
    9a18:	858d883a 	add	r6,r16,r22
    9a1c:	8d6b883a 	add	r21,r17,r21
    9a20:	1880ea26 	beq	r3,r2,9dcc <_malloc_r+0x714>
    9a24:	ad4403c4 	addi	r21,r21,4111
    9a28:	00bc0004 	movi	r2,-4096
    9a2c:	a8aa703a 	and	r21,r21,r2
    9a30:	a80b883a 	mov	r5,r21
    9a34:	9009883a 	mov	r4,r18
    9a38:	d9800015 	stw	r6,0(sp)
    9a3c:	000a0040 	call	a004 <_sbrk_r>
    9a40:	1029883a 	mov	r20,r2
    9a44:	00bfffc4 	movi	r2,-1
    9a48:	d9800017 	ldw	r6,0(sp)
    9a4c:	a080e826 	beq	r20,r2,9df0 <_malloc_r+0x738>
    9a50:	a180a636 	bltu	r20,r6,9cec <_malloc_r+0x634>
    9a54:	070000b4 	movhi	fp,2
    9a58:	e7358104 	addi	fp,fp,-10748
    9a5c:	e0800017 	ldw	r2,0(fp)
    9a60:	a887883a 	add	r3,r21,r2
    9a64:	e0c00015 	stw	r3,0(fp)
    9a68:	3500e626 	beq	r6,r20,9e04 <_malloc_r+0x74c>
    9a6c:	b9000017 	ldw	r4,0(r23)
    9a70:	00bfffc4 	movi	r2,-1
    9a74:	2080ee26 	beq	r4,r2,9e30 <_malloc_r+0x778>
    9a78:	a185c83a 	sub	r2,r20,r6
    9a7c:	10c5883a 	add	r2,r2,r3
    9a80:	e0800015 	stw	r2,0(fp)
    9a84:	a0c001cc 	andi	r3,r20,7
    9a88:	1800bc26 	beq	r3,zero,9d7c <_malloc_r+0x6c4>
    9a8c:	a0e9c83a 	sub	r20,r20,r3
    9a90:	00840204 	movi	r2,4104
    9a94:	a5000204 	addi	r20,r20,8
    9a98:	10c7c83a 	sub	r3,r2,r3
    9a9c:	a545883a 	add	r2,r20,r21
    9aa0:	1083ffcc 	andi	r2,r2,4095
    9aa4:	18abc83a 	sub	r21,r3,r2
    9aa8:	a80b883a 	mov	r5,r21
    9aac:	9009883a 	mov	r4,r18
    9ab0:	000a0040 	call	a004 <_sbrk_r>
    9ab4:	00ffffc4 	movi	r3,-1
    9ab8:	10c0e126 	beq	r2,r3,9e40 <_malloc_r+0x788>
    9abc:	1505c83a 	sub	r2,r2,r20
    9ac0:	1545883a 	add	r2,r2,r21
    9ac4:	10800054 	ori	r2,r2,1
    9ac8:	e0c00017 	ldw	r3,0(fp)
    9acc:	9d000215 	stw	r20,8(r19)
    9ad0:	a0800115 	stw	r2,4(r20)
    9ad4:	a8c7883a 	add	r3,r21,r3
    9ad8:	e0c00015 	stw	r3,0(fp)
    9adc:	84c00e26 	beq	r16,r19,9b18 <_malloc_r+0x460>
    9ae0:	018003c4 	movi	r6,15
    9ae4:	3580a72e 	bgeu	r6,r22,9d84 <_malloc_r+0x6cc>
    9ae8:	81400117 	ldw	r5,4(r16)
    9aec:	013ffe04 	movi	r4,-8
    9af0:	b0bffd04 	addi	r2,r22,-12
    9af4:	1104703a 	and	r2,r2,r4
    9af8:	2900004c 	andi	r4,r5,1
    9afc:	2088b03a 	or	r4,r4,r2
    9b00:	81000115 	stw	r4,4(r16)
    9b04:	01400144 	movi	r5,5
    9b08:	8089883a 	add	r4,r16,r2
    9b0c:	21400115 	stw	r5,4(r4)
    9b10:	21400215 	stw	r5,8(r4)
    9b14:	3080cd36 	bltu	r6,r2,9e4c <_malloc_r+0x794>
    9b18:	008000b4 	movhi	r2,2
    9b1c:	10b57404 	addi	r2,r2,-10800
    9b20:	11000017 	ldw	r4,0(r2)
    9b24:	20c0012e 	bgeu	r4,r3,9b2c <_malloc_r+0x474>
    9b28:	10c00015 	stw	r3,0(r2)
    9b2c:	008000b4 	movhi	r2,2
    9b30:	10b57304 	addi	r2,r2,-10804
    9b34:	11000017 	ldw	r4,0(r2)
    9b38:	9c000217 	ldw	r16,8(r19)
    9b3c:	20c0012e 	bgeu	r4,r3,9b44 <_malloc_r+0x48c>
    9b40:	10c00015 	stw	r3,0(r2)
    9b44:	80c00117 	ldw	r3,4(r16)
    9b48:	00bfff04 	movi	r2,-4
    9b4c:	1886703a 	and	r3,r3,r2
    9b50:	1c45c83a 	sub	r2,r3,r17
    9b54:	1c400236 	bltu	r3,r17,9b60 <_malloc_r+0x4a8>
    9b58:	00c003c4 	movi	r3,15
    9b5c:	18800416 	blt	r3,r2,9b70 <_malloc_r+0x4b8>
    9b60:	9009883a 	mov	r4,r18
    9b64:	0014eb80 	call	14eb8 <__malloc_unlock>
    9b68:	0005883a 	mov	r2,zero
    9b6c:	003f7b06 	br	995c <__alt_exception_stack_pointer+0xf800995c>
    9b70:	88c00054 	ori	r3,r17,1
    9b74:	80c00115 	stw	r3,4(r16)
    9b78:	8463883a 	add	r17,r16,r17
    9b7c:	10800054 	ori	r2,r2,1
    9b80:	9c400215 	stw	r17,8(r19)
    9b84:	88800115 	stw	r2,4(r17)
    9b88:	9009883a 	mov	r4,r18
    9b8c:	0014eb80 	call	14eb8 <__malloc_unlock>
    9b90:	80800204 	addi	r2,r16,8
    9b94:	003f7106 	br	995c <__alt_exception_stack_pointer+0xf800995c>
    9b98:	00c00504 	movi	r3,20
    9b9c:	18804a2e 	bgeu	r3,r2,9cc8 <_malloc_r+0x610>
    9ba0:	00c01504 	movi	r3,84
    9ba4:	18806e36 	bltu	r3,r2,9d60 <_malloc_r+0x6a8>
    9ba8:	8804d33a 	srli	r2,r17,12
    9bac:	12001bc4 	addi	r8,r2,111
    9bb0:	11c01b84 	addi	r7,r2,110
    9bb4:	4209883a 	add	r4,r8,r8
    9bb8:	003edd06 	br	9730 <__alt_exception_stack_pointer+0xf8009730>
    9bbc:	3804d27a 	srli	r2,r7,9
    9bc0:	00c00104 	movi	r3,4
    9bc4:	1880442e 	bgeu	r3,r2,9cd8 <_malloc_r+0x620>
    9bc8:	00c00504 	movi	r3,20
    9bcc:	18808136 	bltu	r3,r2,9dd4 <_malloc_r+0x71c>
    9bd0:	11401704 	addi	r5,r2,92
    9bd4:	10c016c4 	addi	r3,r2,91
    9bd8:	294b883a 	add	r5,r5,r5
    9bdc:	294b883a 	add	r5,r5,r5
    9be0:	294b883a 	add	r5,r5,r5
    9be4:	994b883a 	add	r5,r19,r5
    9be8:	28800017 	ldw	r2,0(r5)
    9bec:	018000b4 	movhi	r6,2
    9bf0:	297ffe04 	addi	r5,r5,-8
    9bf4:	31a67e04 	addi	r6,r6,-26120
    9bf8:	28806526 	beq	r5,r2,9d90 <_malloc_r+0x6d8>
    9bfc:	01bfff04 	movi	r6,-4
    9c00:	10c00117 	ldw	r3,4(r2)
    9c04:	1986703a 	and	r3,r3,r6
    9c08:	38c0022e 	bgeu	r7,r3,9c14 <_malloc_r+0x55c>
    9c0c:	10800217 	ldw	r2,8(r2)
    9c10:	28bffb1e 	bne	r5,r2,9c00 <__alt_exception_stack_pointer+0xf8009c00>
    9c14:	11400317 	ldw	r5,12(r2)
    9c18:	98c00117 	ldw	r3,4(r19)
    9c1c:	81400315 	stw	r5,12(r16)
    9c20:	80800215 	stw	r2,8(r16)
    9c24:	2c000215 	stw	r16,8(r5)
    9c28:	14000315 	stw	r16,12(r2)
    9c2c:	003ef806 	br	9810 <__alt_exception_stack_pointer+0xf8009810>
    9c30:	88c00054 	ori	r3,r17,1
    9c34:	80c00115 	stw	r3,4(r16)
    9c38:	8463883a 	add	r17,r16,r17
    9c3c:	34400515 	stw	r17,20(r6)
    9c40:	34400415 	stw	r17,16(r6)
    9c44:	10c00054 	ori	r3,r2,1
    9c48:	8a000315 	stw	r8,12(r17)
    9c4c:	8a000215 	stw	r8,8(r17)
    9c50:	88c00115 	stw	r3,4(r17)
    9c54:	88a3883a 	add	r17,r17,r2
    9c58:	88800015 	stw	r2,0(r17)
    9c5c:	9009883a 	mov	r4,r18
    9c60:	0014eb80 	call	14eb8 <__malloc_unlock>
    9c64:	80800204 	addi	r2,r16,8
    9c68:	003f3c06 	br	995c <__alt_exception_stack_pointer+0xf800995c>
    9c6c:	30c00117 	ldw	r3,4(r6)
    9c70:	003ee706 	br	9810 <__alt_exception_stack_pointer+0xf8009810>
    9c74:	5ac00044 	addi	r11,r11,1
    9c78:	588000cc 	andi	r2,r11,3
    9c7c:	31800204 	addi	r6,r6,8
    9c80:	103efd1e 	bne	r2,zero,9878 <__alt_exception_stack_pointer+0xf8009878>
    9c84:	00002406 	br	9d18 <_malloc_r+0x660>
    9c88:	14000317 	ldw	r16,12(r2)
    9c8c:	143f251e 	bne	r2,r16,9924 <__alt_exception_stack_pointer+0xf8009924>
    9c90:	21000084 	addi	r4,r4,2
    9c94:	003ebc06 	br	9788 <__alt_exception_stack_pointer+0xf8009788>
    9c98:	8085883a 	add	r2,r16,r2
    9c9c:	10c00117 	ldw	r3,4(r2)
    9ca0:	81000317 	ldw	r4,12(r16)
    9ca4:	81400217 	ldw	r5,8(r16)
    9ca8:	18c00054 	ori	r3,r3,1
    9cac:	10c00115 	stw	r3,4(r2)
    9cb0:	29000315 	stw	r4,12(r5)
    9cb4:	21400215 	stw	r5,8(r4)
    9cb8:	9009883a 	mov	r4,r18
    9cbc:	0014eb80 	call	14eb8 <__malloc_unlock>
    9cc0:	80800204 	addi	r2,r16,8
    9cc4:	003f2506 	br	995c <__alt_exception_stack_pointer+0xf800995c>
    9cc8:	12001704 	addi	r8,r2,92
    9ccc:	11c016c4 	addi	r7,r2,91
    9cd0:	4209883a 	add	r4,r8,r8
    9cd4:	003e9606 	br	9730 <__alt_exception_stack_pointer+0xf8009730>
    9cd8:	3804d1ba 	srli	r2,r7,6
    9cdc:	11400e44 	addi	r5,r2,57
    9ce0:	10c00e04 	addi	r3,r2,56
    9ce4:	294b883a 	add	r5,r5,r5
    9ce8:	003fbc06 	br	9bdc <__alt_exception_stack_pointer+0xf8009bdc>
    9cec:	84ff5926 	beq	r16,r19,9a54 <__alt_exception_stack_pointer+0xf8009a54>
    9cf0:	008000b4 	movhi	r2,2
    9cf4:	10a67e04 	addi	r2,r2,-26120
    9cf8:	14000217 	ldw	r16,8(r2)
    9cfc:	00bfff04 	movi	r2,-4
    9d00:	80c00117 	ldw	r3,4(r16)
    9d04:	1886703a 	and	r3,r3,r2
    9d08:	003f9106 	br	9b50 <__alt_exception_stack_pointer+0xf8009b50>
    9d0c:	60800217 	ldw	r2,8(r12)
    9d10:	213fffc4 	addi	r4,r4,-1
    9d14:	1300651e 	bne	r2,r12,9eac <_malloc_r+0x7f4>
    9d18:	208000cc 	andi	r2,r4,3
    9d1c:	633ffe04 	addi	r12,r12,-8
    9d20:	103ffa1e 	bne	r2,zero,9d0c <__alt_exception_stack_pointer+0xf8009d0c>
    9d24:	98800117 	ldw	r2,4(r19)
    9d28:	0146303a 	nor	r3,zero,r5
    9d2c:	1884703a 	and	r2,r3,r2
    9d30:	98800115 	stw	r2,4(r19)
    9d34:	294b883a 	add	r5,r5,r5
    9d38:	117f2836 	bltu	r2,r5,99dc <__alt_exception_stack_pointer+0xf80099dc>
    9d3c:	283f2726 	beq	r5,zero,99dc <__alt_exception_stack_pointer+0xf80099dc>
    9d40:	2886703a 	and	r3,r5,r2
    9d44:	5809883a 	mov	r4,r11
    9d48:	183ec31e 	bne	r3,zero,9858 <__alt_exception_stack_pointer+0xf8009858>
    9d4c:	294b883a 	add	r5,r5,r5
    9d50:	2886703a 	and	r3,r5,r2
    9d54:	21000104 	addi	r4,r4,4
    9d58:	183ffc26 	beq	r3,zero,9d4c <__alt_exception_stack_pointer+0xf8009d4c>
    9d5c:	003ebe06 	br	9858 <__alt_exception_stack_pointer+0xf8009858>
    9d60:	00c05504 	movi	r3,340
    9d64:	18801236 	bltu	r3,r2,9db0 <_malloc_r+0x6f8>
    9d68:	8804d3fa 	srli	r2,r17,15
    9d6c:	12001e04 	addi	r8,r2,120
    9d70:	11c01dc4 	addi	r7,r2,119
    9d74:	4209883a 	add	r4,r8,r8
    9d78:	003e6d06 	br	9730 <__alt_exception_stack_pointer+0xf8009730>
    9d7c:	00c40004 	movi	r3,4096
    9d80:	003f4606 	br	9a9c <__alt_exception_stack_pointer+0xf8009a9c>
    9d84:	00800044 	movi	r2,1
    9d88:	a0800115 	stw	r2,4(r20)
    9d8c:	003f7406 	br	9b60 <__alt_exception_stack_pointer+0xf8009b60>
    9d90:	1805d0ba 	srai	r2,r3,2
    9d94:	01c00044 	movi	r7,1
    9d98:	30c00117 	ldw	r3,4(r6)
    9d9c:	388e983a 	sll	r7,r7,r2
    9da0:	2805883a 	mov	r2,r5
    9da4:	38c6b03a 	or	r3,r7,r3
    9da8:	30c00115 	stw	r3,4(r6)
    9dac:	003f9b06 	br	9c1c <__alt_exception_stack_pointer+0xf8009c1c>
    9db0:	00c15504 	movi	r3,1364
    9db4:	18801a36 	bltu	r3,r2,9e20 <_malloc_r+0x768>
    9db8:	8804d4ba 	srli	r2,r17,18
    9dbc:	12001f44 	addi	r8,r2,125
    9dc0:	11c01f04 	addi	r7,r2,124
    9dc4:	4209883a 	add	r4,r8,r8
    9dc8:	003e5906 	br	9730 <__alt_exception_stack_pointer+0xf8009730>
    9dcc:	ad400404 	addi	r21,r21,16
    9dd0:	003f1706 	br	9a30 <__alt_exception_stack_pointer+0xf8009a30>
    9dd4:	00c01504 	movi	r3,84
    9dd8:	18802336 	bltu	r3,r2,9e68 <_malloc_r+0x7b0>
    9ddc:	3804d33a 	srli	r2,r7,12
    9de0:	11401bc4 	addi	r5,r2,111
    9de4:	10c01b84 	addi	r3,r2,110
    9de8:	294b883a 	add	r5,r5,r5
    9dec:	003f7b06 	br	9bdc <__alt_exception_stack_pointer+0xf8009bdc>
    9df0:	9c000217 	ldw	r16,8(r19)
    9df4:	00bfff04 	movi	r2,-4
    9df8:	80c00117 	ldw	r3,4(r16)
    9dfc:	1886703a 	and	r3,r3,r2
    9e00:	003f5306 	br	9b50 <__alt_exception_stack_pointer+0xf8009b50>
    9e04:	3083ffcc 	andi	r2,r6,4095
    9e08:	103f181e 	bne	r2,zero,9a6c <__alt_exception_stack_pointer+0xf8009a6c>
    9e0c:	99000217 	ldw	r4,8(r19)
    9e10:	b545883a 	add	r2,r22,r21
    9e14:	10800054 	ori	r2,r2,1
    9e18:	20800115 	stw	r2,4(r4)
    9e1c:	003f3e06 	br	9b18 <__alt_exception_stack_pointer+0xf8009b18>
    9e20:	01003f84 	movi	r4,254
    9e24:	02001fc4 	movi	r8,127
    9e28:	01c01f84 	movi	r7,126
    9e2c:	003e4006 	br	9730 <__alt_exception_stack_pointer+0xf8009730>
    9e30:	008000b4 	movhi	r2,2
    9e34:	10ac8104 	addi	r2,r2,-19964
    9e38:	15000015 	stw	r20,0(r2)
    9e3c:	003f1106 	br	9a84 <__alt_exception_stack_pointer+0xf8009a84>
    9e40:	00800044 	movi	r2,1
    9e44:	002b883a 	mov	r21,zero
    9e48:	003f1f06 	br	9ac8 <__alt_exception_stack_pointer+0xf8009ac8>
    9e4c:	81400204 	addi	r5,r16,8
    9e50:	9009883a 	mov	r4,r18
    9e54:	000f1640 	call	f164 <_free_r>
    9e58:	008000b4 	movhi	r2,2
    9e5c:	10b58104 	addi	r2,r2,-10748
    9e60:	10c00017 	ldw	r3,0(r2)
    9e64:	003f2c06 	br	9b18 <__alt_exception_stack_pointer+0xf8009b18>
    9e68:	00c05504 	movi	r3,340
    9e6c:	18800536 	bltu	r3,r2,9e84 <_malloc_r+0x7cc>
    9e70:	3804d3fa 	srli	r2,r7,15
    9e74:	11401e04 	addi	r5,r2,120
    9e78:	10c01dc4 	addi	r3,r2,119
    9e7c:	294b883a 	add	r5,r5,r5
    9e80:	003f5606 	br	9bdc <__alt_exception_stack_pointer+0xf8009bdc>
    9e84:	00c15504 	movi	r3,1364
    9e88:	18800536 	bltu	r3,r2,9ea0 <_malloc_r+0x7e8>
    9e8c:	3804d4ba 	srli	r2,r7,18
    9e90:	11401f44 	addi	r5,r2,125
    9e94:	10c01f04 	addi	r3,r2,124
    9e98:	294b883a 	add	r5,r5,r5
    9e9c:	003f4f06 	br	9bdc <__alt_exception_stack_pointer+0xf8009bdc>
    9ea0:	01403f84 	movi	r5,254
    9ea4:	00c01f84 	movi	r3,126
    9ea8:	003f4c06 	br	9bdc <__alt_exception_stack_pointer+0xf8009bdc>
    9eac:	98800117 	ldw	r2,4(r19)
    9eb0:	003fa006 	br	9d34 <__alt_exception_stack_pointer+0xf8009d34>
    9eb4:	8808d0fa 	srli	r4,r17,3
    9eb8:	20800044 	addi	r2,r4,1
    9ebc:	1085883a 	add	r2,r2,r2
    9ec0:	003e9006 	br	9904 <__alt_exception_stack_pointer+0xf8009904>

00009ec4 <_printf_r>:
    9ec4:	defffd04 	addi	sp,sp,-12
    9ec8:	2805883a 	mov	r2,r5
    9ecc:	dfc00015 	stw	ra,0(sp)
    9ed0:	d9800115 	stw	r6,4(sp)
    9ed4:	d9c00215 	stw	r7,8(sp)
    9ed8:	21400217 	ldw	r5,8(r4)
    9edc:	d9c00104 	addi	r7,sp,4
    9ee0:	100d883a 	mov	r6,r2
    9ee4:	000a0f80 	call	a0f8 <___vfprintf_internal_r>
    9ee8:	dfc00017 	ldw	ra,0(sp)
    9eec:	dec00304 	addi	sp,sp,12
    9ef0:	f800283a 	ret

00009ef4 <printf>:
    9ef4:	defffc04 	addi	sp,sp,-16
    9ef8:	dfc00015 	stw	ra,0(sp)
    9efc:	d9400115 	stw	r5,4(sp)
    9f00:	d9800215 	stw	r6,8(sp)
    9f04:	d9c00315 	stw	r7,12(sp)
    9f08:	008000b4 	movhi	r2,2
    9f0c:	10ac8004 	addi	r2,r2,-19968
    9f10:	10800017 	ldw	r2,0(r2)
    9f14:	200b883a 	mov	r5,r4
    9f18:	d9800104 	addi	r6,sp,4
    9f1c:	11000217 	ldw	r4,8(r2)
    9f20:	000c3d40 	call	c3d4 <__vfprintf_internal>
    9f24:	dfc00017 	ldw	ra,0(sp)
    9f28:	dec00404 	addi	sp,sp,16
    9f2c:	f800283a 	ret

00009f30 <_puts_r>:
    9f30:	defff604 	addi	sp,sp,-40
    9f34:	dc000715 	stw	r16,28(sp)
    9f38:	2021883a 	mov	r16,r4
    9f3c:	2809883a 	mov	r4,r5
    9f40:	dc400815 	stw	r17,32(sp)
    9f44:	dfc00915 	stw	ra,36(sp)
    9f48:	2823883a 	mov	r17,r5
    9f4c:	000a0580 	call	a058 <strlen>
    9f50:	10c00044 	addi	r3,r2,1
    9f54:	d8800115 	stw	r2,4(sp)
    9f58:	008000b4 	movhi	r2,2
    9f5c:	10a32d04 	addi	r2,r2,-29516
    9f60:	d8800215 	stw	r2,8(sp)
    9f64:	00800044 	movi	r2,1
    9f68:	d8800315 	stw	r2,12(sp)
    9f6c:	00800084 	movi	r2,2
    9f70:	dc400015 	stw	r17,0(sp)
    9f74:	d8c00615 	stw	r3,24(sp)
    9f78:	dec00415 	stw	sp,16(sp)
    9f7c:	d8800515 	stw	r2,20(sp)
    9f80:	80000226 	beq	r16,zero,9f8c <_puts_r+0x5c>
    9f84:	80800e17 	ldw	r2,56(r16)
    9f88:	10001426 	beq	r2,zero,9fdc <_puts_r+0xac>
    9f8c:	81400217 	ldw	r5,8(r16)
    9f90:	2880030b 	ldhu	r2,12(r5)
    9f94:	10c8000c 	andi	r3,r2,8192
    9f98:	1800061e 	bne	r3,zero,9fb4 <_puts_r+0x84>
    9f9c:	29001917 	ldw	r4,100(r5)
    9fa0:	00f7ffc4 	movi	r3,-8193
    9fa4:	10880014 	ori	r2,r2,8192
    9fa8:	20c6703a 	and	r3,r4,r3
    9fac:	2880030d 	sth	r2,12(r5)
    9fb0:	28c01915 	stw	r3,100(r5)
    9fb4:	d9800404 	addi	r6,sp,16
    9fb8:	8009883a 	mov	r4,r16
    9fbc:	000f4740 	call	f474 <__sfvwrite_r>
    9fc0:	1000091e 	bne	r2,zero,9fe8 <_puts_r+0xb8>
    9fc4:	00800284 	movi	r2,10
    9fc8:	dfc00917 	ldw	ra,36(sp)
    9fcc:	dc400817 	ldw	r17,32(sp)
    9fd0:	dc000717 	ldw	r16,28(sp)
    9fd4:	dec00a04 	addi	sp,sp,40
    9fd8:	f800283a 	ret
    9fdc:	8009883a 	mov	r4,r16
    9fe0:	000eff00 	call	eff0 <__sinit>
    9fe4:	003fe906 	br	9f8c <__alt_exception_stack_pointer+0xf8009f8c>
    9fe8:	00bfffc4 	movi	r2,-1
    9fec:	003ff606 	br	9fc8 <__alt_exception_stack_pointer+0xf8009fc8>

00009ff0 <puts>:
    9ff0:	008000b4 	movhi	r2,2
    9ff4:	10ac8004 	addi	r2,r2,-19968
    9ff8:	200b883a 	mov	r5,r4
    9ffc:	11000017 	ldw	r4,0(r2)
    a000:	0009f301 	jmpi	9f30 <_puts_r>

0000a004 <_sbrk_r>:
    a004:	defffd04 	addi	sp,sp,-12
    a008:	dc000015 	stw	r16,0(sp)
    a00c:	040000b4 	movhi	r16,2
    a010:	dc400115 	stw	r17,4(sp)
    a014:	84357604 	addi	r16,r16,-10792
    a018:	2023883a 	mov	r17,r4
    a01c:	2809883a 	mov	r4,r5
    a020:	dfc00215 	stw	ra,8(sp)
    a024:	80000015 	stw	zero,0(r16)
    a028:	00150a00 	call	150a0 <sbrk>
    a02c:	00ffffc4 	movi	r3,-1
    a030:	10c00526 	beq	r2,r3,a048 <_sbrk_r+0x44>
    a034:	dfc00217 	ldw	ra,8(sp)
    a038:	dc400117 	ldw	r17,4(sp)
    a03c:	dc000017 	ldw	r16,0(sp)
    a040:	dec00304 	addi	sp,sp,12
    a044:	f800283a 	ret
    a048:	80c00017 	ldw	r3,0(r16)
    a04c:	183ff926 	beq	r3,zero,a034 <__alt_exception_stack_pointer+0xf800a034>
    a050:	88c00015 	stw	r3,0(r17)
    a054:	003ff706 	br	a034 <__alt_exception_stack_pointer+0xf800a034>

0000a058 <strlen>:
    a058:	208000cc 	andi	r2,r4,3
    a05c:	10002026 	beq	r2,zero,a0e0 <strlen+0x88>
    a060:	20800007 	ldb	r2,0(r4)
    a064:	10002026 	beq	r2,zero,a0e8 <strlen+0x90>
    a068:	2005883a 	mov	r2,r4
    a06c:	00000206 	br	a078 <strlen+0x20>
    a070:	10c00007 	ldb	r3,0(r2)
    a074:	18001826 	beq	r3,zero,a0d8 <strlen+0x80>
    a078:	10800044 	addi	r2,r2,1
    a07c:	10c000cc 	andi	r3,r2,3
    a080:	183ffb1e 	bne	r3,zero,a070 <__alt_exception_stack_pointer+0xf800a070>
    a084:	10c00017 	ldw	r3,0(r2)
    a088:	01ffbff4 	movhi	r7,65279
    a08c:	39ffbfc4 	addi	r7,r7,-257
    a090:	00ca303a 	nor	r5,zero,r3
    a094:	01a02074 	movhi	r6,32897
    a098:	19c7883a 	add	r3,r3,r7
    a09c:	31a02004 	addi	r6,r6,-32640
    a0a0:	1946703a 	and	r3,r3,r5
    a0a4:	1986703a 	and	r3,r3,r6
    a0a8:	1800091e 	bne	r3,zero,a0d0 <strlen+0x78>
    a0ac:	10800104 	addi	r2,r2,4
    a0b0:	10c00017 	ldw	r3,0(r2)
    a0b4:	19cb883a 	add	r5,r3,r7
    a0b8:	00c6303a 	nor	r3,zero,r3
    a0bc:	28c6703a 	and	r3,r5,r3
    a0c0:	1986703a 	and	r3,r3,r6
    a0c4:	183ff926 	beq	r3,zero,a0ac <__alt_exception_stack_pointer+0xf800a0ac>
    a0c8:	00000106 	br	a0d0 <strlen+0x78>
    a0cc:	10800044 	addi	r2,r2,1
    a0d0:	10c00007 	ldb	r3,0(r2)
    a0d4:	183ffd1e 	bne	r3,zero,a0cc <__alt_exception_stack_pointer+0xf800a0cc>
    a0d8:	1105c83a 	sub	r2,r2,r4
    a0dc:	f800283a 	ret
    a0e0:	2005883a 	mov	r2,r4
    a0e4:	003fe706 	br	a084 <__alt_exception_stack_pointer+0xf800a084>
    a0e8:	0005883a 	mov	r2,zero
    a0ec:	f800283a 	ret

0000a0f0 <_times_r>:
    a0f0:	2809883a 	mov	r4,r5
    a0f4:	001518c1 	jmpi	1518c <times>

0000a0f8 <___vfprintf_internal_r>:
    a0f8:	deffb804 	addi	sp,sp,-288
    a0fc:	dfc04715 	stw	ra,284(sp)
    a100:	ddc04515 	stw	r23,276(sp)
    a104:	dd404315 	stw	r21,268(sp)
    a108:	d9002d15 	stw	r4,180(sp)
    a10c:	282f883a 	mov	r23,r5
    a110:	302b883a 	mov	r21,r6
    a114:	d9c02e15 	stw	r7,184(sp)
    a118:	df004615 	stw	fp,280(sp)
    a11c:	dd804415 	stw	r22,272(sp)
    a120:	dd004215 	stw	r20,264(sp)
    a124:	dcc04115 	stw	r19,260(sp)
    a128:	dc804015 	stw	r18,256(sp)
    a12c:	dc403f15 	stw	r17,252(sp)
    a130:	dc003e15 	stw	r16,248(sp)
    a134:	000fb700 	call	fb70 <_localeconv_r>
    a138:	10800017 	ldw	r2,0(r2)
    a13c:	1009883a 	mov	r4,r2
    a140:	d8803415 	stw	r2,208(sp)
    a144:	000a0580 	call	a058 <strlen>
    a148:	d8803715 	stw	r2,220(sp)
    a14c:	d8802d17 	ldw	r2,180(sp)
    a150:	10000226 	beq	r2,zero,a15c <___vfprintf_internal_r+0x64>
    a154:	10800e17 	ldw	r2,56(r2)
    a158:	1000fb26 	beq	r2,zero,a548 <___vfprintf_internal_r+0x450>
    a15c:	b880030b 	ldhu	r2,12(r23)
    a160:	10c8000c 	andi	r3,r2,8192
    a164:	1800061e 	bne	r3,zero,a180 <___vfprintf_internal_r+0x88>
    a168:	b9001917 	ldw	r4,100(r23)
    a16c:	00f7ffc4 	movi	r3,-8193
    a170:	10880014 	ori	r2,r2,8192
    a174:	20c6703a 	and	r3,r4,r3
    a178:	b880030d 	sth	r2,12(r23)
    a17c:	b8c01915 	stw	r3,100(r23)
    a180:	10c0020c 	andi	r3,r2,8
    a184:	1800c326 	beq	r3,zero,a494 <___vfprintf_internal_r+0x39c>
    a188:	b8c00417 	ldw	r3,16(r23)
    a18c:	1800c126 	beq	r3,zero,a494 <___vfprintf_internal_r+0x39c>
    a190:	1080068c 	andi	r2,r2,26
    a194:	00c00284 	movi	r3,10
    a198:	10c0c626 	beq	r2,r3,a4b4 <___vfprintf_internal_r+0x3bc>
    a19c:	d8c00404 	addi	r3,sp,16
    a1a0:	050000b4 	movhi	r20,2
    a1a4:	d9001e04 	addi	r4,sp,120
    a1a8:	a5233e84 	addi	r20,r20,-29446
    a1ac:	d8c01e15 	stw	r3,120(sp)
    a1b0:	d8002015 	stw	zero,128(sp)
    a1b4:	d8001f15 	stw	zero,124(sp)
    a1b8:	d8003315 	stw	zero,204(sp)
    a1bc:	d8003615 	stw	zero,216(sp)
    a1c0:	d8003815 	stw	zero,224(sp)
    a1c4:	1811883a 	mov	r8,r3
    a1c8:	d8003915 	stw	zero,228(sp)
    a1cc:	d8003a15 	stw	zero,232(sp)
    a1d0:	d8002f15 	stw	zero,188(sp)
    a1d4:	d9002815 	stw	r4,160(sp)
    a1d8:	a8800007 	ldb	r2,0(r21)
    a1dc:	10028b26 	beq	r2,zero,ac0c <___vfprintf_internal_r+0xb14>
    a1e0:	00c00944 	movi	r3,37
    a1e4:	a823883a 	mov	r17,r21
    a1e8:	10c0021e 	bne	r2,r3,a1f4 <___vfprintf_internal_r+0xfc>
    a1ec:	00001406 	br	a240 <___vfprintf_internal_r+0x148>
    a1f0:	10c00326 	beq	r2,r3,a200 <___vfprintf_internal_r+0x108>
    a1f4:	8c400044 	addi	r17,r17,1
    a1f8:	88800007 	ldb	r2,0(r17)
    a1fc:	103ffc1e 	bne	r2,zero,a1f0 <__alt_exception_stack_pointer+0xf800a1f0>
    a200:	8d61c83a 	sub	r16,r17,r21
    a204:	80000e26 	beq	r16,zero,a240 <___vfprintf_internal_r+0x148>
    a208:	d8c02017 	ldw	r3,128(sp)
    a20c:	d8801f17 	ldw	r2,124(sp)
    a210:	45400015 	stw	r21,0(r8)
    a214:	1c07883a 	add	r3,r3,r16
    a218:	10800044 	addi	r2,r2,1
    a21c:	d8c02015 	stw	r3,128(sp)
    a220:	44000115 	stw	r16,4(r8)
    a224:	d8801f15 	stw	r2,124(sp)
    a228:	00c001c4 	movi	r3,7
    a22c:	1880a916 	blt	r3,r2,a4d4 <___vfprintf_internal_r+0x3dc>
    a230:	42000204 	addi	r8,r8,8
    a234:	d9402f17 	ldw	r5,188(sp)
    a238:	2c0b883a 	add	r5,r5,r16
    a23c:	d9402f15 	stw	r5,188(sp)
    a240:	88800007 	ldb	r2,0(r17)
    a244:	1000aa26 	beq	r2,zero,a4f0 <___vfprintf_internal_r+0x3f8>
    a248:	8d400044 	addi	r21,r17,1
    a24c:	8c400047 	ldb	r17,1(r17)
    a250:	0021883a 	mov	r16,zero
    a254:	00bfffc4 	movi	r2,-1
    a258:	0025883a 	mov	r18,zero
    a25c:	dc002905 	stb	r16,164(sp)
    a260:	d8002785 	stb	zero,158(sp)
    a264:	d8002b05 	stb	zero,172(sp)
    a268:	d8802a15 	stw	r2,168(sp)
    a26c:	d8003115 	stw	zero,196(sp)
    a270:	04c01604 	movi	r19,88
    a274:	05800244 	movi	r22,9
    a278:	9021883a 	mov	r16,r18
    a27c:	4039883a 	mov	fp,r8
    a280:	ad400044 	addi	r21,r21,1
    a284:	88bff804 	addi	r2,r17,-32
    a288:	98833236 	bltu	r19,r2,af54 <___vfprintf_internal_r+0xe5c>
    a28c:	100490ba 	slli	r2,r2,2
    a290:	00c00074 	movhi	r3,1
    a294:	18e8a904 	addi	r3,r3,-23900
    a298:	10c5883a 	add	r2,r2,r3
    a29c:	10800017 	ldw	r2,0(r2)
    a2a0:	1000683a 	jmp	r2
    a2a4:	0000ae4c 	andi	zero,zero,697
    a2a8:	0000af54 	movui	zero,701
    a2ac:	0000af54 	movui	zero,701
    a2b0:	0000ae6c 	andhi	zero,zero,697
    a2b4:	0000af54 	movui	zero,701
    a2b8:	0000af54 	movui	zero,701
    a2bc:	0000af54 	movui	zero,701
    a2c0:	0000af54 	movui	zero,701
    a2c4:	0000af54 	movui	zero,701
    a2c8:	0000af54 	movui	zero,701
    a2cc:	0000a554 	movui	zero,661
    a2d0:	0000ad5c 	xori	zero,zero,693
    a2d4:	0000af54 	movui	zero,701
    a2d8:	0000a418 	cmpnei	zero,zero,656
    a2dc:	0000a578 	rdprs	zero,zero,661
    a2e0:	0000af54 	movui	zero,701
    a2e4:	0000a5c8 	cmpgei	zero,zero,663
    a2e8:	0000a5d4 	movui	zero,663
    a2ec:	0000a5d4 	movui	zero,663
    a2f0:	0000a5d4 	movui	zero,663
    a2f4:	0000a5d4 	movui	zero,663
    a2f8:	0000a5d4 	movui	zero,663
    a2fc:	0000a5d4 	movui	zero,663
    a300:	0000a5d4 	movui	zero,663
    a304:	0000a5d4 	movui	zero,663
    a308:	0000a5d4 	movui	zero,663
    a30c:	0000af54 	movui	zero,701
    a310:	0000af54 	movui	zero,701
    a314:	0000af54 	movui	zero,701
    a318:	0000af54 	movui	zero,701
    a31c:	0000af54 	movui	zero,701
    a320:	0000af54 	movui	zero,701
    a324:	0000af54 	movui	zero,701
    a328:	0000af54 	movui	zero,701
    a32c:	0000af54 	movui	zero,701
    a330:	0000af54 	movui	zero,701
    a334:	0000a610 	cmplti	zero,zero,664
    a338:	0000a6d8 	cmpnei	zero,zero,667
    a33c:	0000af54 	movui	zero,701
    a340:	0000a6d8 	cmpnei	zero,zero,667
    a344:	0000af54 	movui	zero,701
    a348:	0000af54 	movui	zero,701
    a34c:	0000af54 	movui	zero,701
    a350:	0000af54 	movui	zero,701
    a354:	0000a784 	movi	zero,670
    a358:	0000af54 	movui	zero,701
    a35c:	0000af54 	movui	zero,701
    a360:	0000a790 	cmplti	zero,zero,670
    a364:	0000af54 	movui	zero,701
    a368:	0000af54 	movui	zero,701
    a36c:	0000af54 	movui	zero,701
    a370:	0000af54 	movui	zero,701
    a374:	0000af54 	movui	zero,701
    a378:	0000ac14 	movui	zero,688
    a37c:	0000af54 	movui	zero,701
    a380:	0000af54 	movui	zero,701
    a384:	0000ac80 	call	ac8 <loop_keyboard+0xdc>
    a388:	0000af54 	movui	zero,701
    a38c:	0000af54 	movui	zero,701
    a390:	0000af54 	movui	zero,701
    a394:	0000af54 	movui	zero,701
    a398:	0000af54 	movui	zero,701
    a39c:	0000af54 	movui	zero,701
    a3a0:	0000af54 	movui	zero,701
    a3a4:	0000af54 	movui	zero,701
    a3a8:	0000af54 	movui	zero,701
    a3ac:	0000af54 	movui	zero,701
    a3b0:	0000aef8 	rdprs	zero,zero,699
    a3b4:	0000ae78 	rdprs	zero,zero,697
    a3b8:	0000a6d8 	cmpnei	zero,zero,667
    a3bc:	0000a6d8 	cmpnei	zero,zero,667
    a3c0:	0000a6d8 	cmpnei	zero,zero,667
    a3c4:	0000ae98 	cmpnei	zero,zero,698
    a3c8:	0000ae78 	rdprs	zero,zero,697
    a3cc:	0000af54 	movui	zero,701
    a3d0:	0000af54 	movui	zero,701
    a3d4:	0000aea4 	muli	zero,zero,698
    a3d8:	0000af54 	movui	zero,701
    a3dc:	0000aeb8 	rdprs	zero,zero,698
    a3e0:	0000ad3c 	xorhi	zero,zero,692
    a3e4:	0000a424 	muli	zero,zero,656
    a3e8:	0000ad74 	movhi	zero,693
    a3ec:	0000af54 	movui	zero,701
    a3f0:	0000ad80 	call	ad8 <loop_keyboard+0xec>
    a3f4:	0000af54 	movui	zero,701
    a3f8:	0000ade4 	muli	zero,zero,695
    a3fc:	0000af54 	movui	zero,701
    a400:	0000af54 	movui	zero,701
    a404:	0000ae04 	movi	zero,696
    a408:	d8c03117 	ldw	r3,196(sp)
    a40c:	d8802e15 	stw	r2,184(sp)
    a410:	00c7c83a 	sub	r3,zero,r3
    a414:	d8c03115 	stw	r3,196(sp)
    a418:	84000114 	ori	r16,r16,4
    a41c:	ac400007 	ldb	r17,0(r21)
    a420:	003f9706 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    a424:	00800c04 	movi	r2,48
    a428:	d8802705 	stb	r2,156(sp)
    a42c:	00801e04 	movi	r2,120
    a430:	d8802745 	stb	r2,157(sp)
    a434:	d9002a17 	ldw	r4,168(sp)
    a438:	d8802e17 	ldw	r2,184(sp)
    a43c:	d8002785 	stb	zero,158(sp)
    a440:	e011883a 	mov	r8,fp
    a444:	10c00104 	addi	r3,r2,4
    a448:	14c00017 	ldw	r19,0(r2)
    a44c:	002d883a 	mov	r22,zero
    a450:	80800094 	ori	r2,r16,2
    a454:	2002ca16 	blt	r4,zero,af80 <___vfprintf_internal_r+0xe88>
    a458:	00bfdfc4 	movi	r2,-129
    a45c:	80a4703a 	and	r18,r16,r2
    a460:	d8c02e15 	stw	r3,184(sp)
    a464:	94800094 	ori	r18,r18,2
    a468:	9802b41e 	bne	r19,zero,af3c <___vfprintf_internal_r+0xe44>
    a46c:	014000b4 	movhi	r5,2
    a470:	29633704 	addi	r5,r5,-29476
    a474:	d9403915 	stw	r5,228(sp)
    a478:	04401e04 	movi	r17,120
    a47c:	d8802a17 	ldw	r2,168(sp)
    a480:	0039883a 	mov	fp,zero
    a484:	1001fa26 	beq	r2,zero,ac70 <___vfprintf_internal_r+0xb78>
    a488:	0027883a 	mov	r19,zero
    a48c:	002d883a 	mov	r22,zero
    a490:	00021906 	br	acf8 <___vfprintf_internal_r+0xc00>
    a494:	d9002d17 	ldw	r4,180(sp)
    a498:	b80b883a 	mov	r5,r23
    a49c:	000c4ac0 	call	c4ac <__swsetup_r>
    a4a0:	1005dc1e 	bne	r2,zero,bc14 <___vfprintf_internal_r+0x1b1c>
    a4a4:	b880030b 	ldhu	r2,12(r23)
    a4a8:	00c00284 	movi	r3,10
    a4ac:	1080068c 	andi	r2,r2,26
    a4b0:	10ff3a1e 	bne	r2,r3,a19c <__alt_exception_stack_pointer+0xf800a19c>
    a4b4:	b880038f 	ldh	r2,14(r23)
    a4b8:	103f3816 	blt	r2,zero,a19c <__alt_exception_stack_pointer+0xf800a19c>
    a4bc:	d9c02e17 	ldw	r7,184(sp)
    a4c0:	d9002d17 	ldw	r4,180(sp)
    a4c4:	a80d883a 	mov	r6,r21
    a4c8:	b80b883a 	mov	r5,r23
    a4cc:	000c3f00 	call	c3f0 <__sbprintf>
    a4d0:	00001106 	br	a518 <___vfprintf_internal_r+0x420>
    a4d4:	d9002d17 	ldw	r4,180(sp)
    a4d8:	d9801e04 	addi	r6,sp,120
    a4dc:	b80b883a 	mov	r5,r23
    a4e0:	0011c400 	call	11c40 <__sprint_r>
    a4e4:	1000081e 	bne	r2,zero,a508 <___vfprintf_internal_r+0x410>
    a4e8:	da000404 	addi	r8,sp,16
    a4ec:	003f5106 	br	a234 <__alt_exception_stack_pointer+0xf800a234>
    a4f0:	d8802017 	ldw	r2,128(sp)
    a4f4:	10000426 	beq	r2,zero,a508 <___vfprintf_internal_r+0x410>
    a4f8:	d9002d17 	ldw	r4,180(sp)
    a4fc:	d9801e04 	addi	r6,sp,120
    a500:	b80b883a 	mov	r5,r23
    a504:	0011c400 	call	11c40 <__sprint_r>
    a508:	b880030b 	ldhu	r2,12(r23)
    a50c:	1080100c 	andi	r2,r2,64
    a510:	1005c01e 	bne	r2,zero,bc14 <___vfprintf_internal_r+0x1b1c>
    a514:	d8802f17 	ldw	r2,188(sp)
    a518:	dfc04717 	ldw	ra,284(sp)
    a51c:	df004617 	ldw	fp,280(sp)
    a520:	ddc04517 	ldw	r23,276(sp)
    a524:	dd804417 	ldw	r22,272(sp)
    a528:	dd404317 	ldw	r21,268(sp)
    a52c:	dd004217 	ldw	r20,264(sp)
    a530:	dcc04117 	ldw	r19,260(sp)
    a534:	dc804017 	ldw	r18,256(sp)
    a538:	dc403f17 	ldw	r17,252(sp)
    a53c:	dc003e17 	ldw	r16,248(sp)
    a540:	dec04804 	addi	sp,sp,288
    a544:	f800283a 	ret
    a548:	d9002d17 	ldw	r4,180(sp)
    a54c:	000eff00 	call	eff0 <__sinit>
    a550:	003f0206 	br	a15c <__alt_exception_stack_pointer+0xf800a15c>
    a554:	d9002e17 	ldw	r4,184(sp)
    a558:	d9402e17 	ldw	r5,184(sp)
    a55c:	21000017 	ldw	r4,0(r4)
    a560:	28800104 	addi	r2,r5,4
    a564:	d9003115 	stw	r4,196(sp)
    a568:	203fa716 	blt	r4,zero,a408 <__alt_exception_stack_pointer+0xf800a408>
    a56c:	d8802e15 	stw	r2,184(sp)
    a570:	ac400007 	ldb	r17,0(r21)
    a574:	003f4206 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    a578:	ac400007 	ldb	r17,0(r21)
    a57c:	01000a84 	movi	r4,42
    a580:	a8c00044 	addi	r3,r21,1
    a584:	89075826 	beq	r17,r4,c2e8 <___vfprintf_internal_r+0x21f0>
    a588:	8cbff404 	addi	r18,r17,-48
    a58c:	b486ae36 	bltu	r22,r18,c048 <___vfprintf_internal_r+0x1f50>
    a590:	0009883a 	mov	r4,zero
    a594:	1823883a 	mov	r17,r3
    a598:	01400284 	movi	r5,10
    a59c:	00068e80 	call	68e8 <__mulsi3>
    a5a0:	88c00007 	ldb	r3,0(r17)
    a5a4:	1489883a 	add	r4,r2,r18
    a5a8:	8d400044 	addi	r21,r17,1
    a5ac:	1cbff404 	addi	r18,r3,-48
    a5b0:	a823883a 	mov	r17,r21
    a5b4:	b4bff82e 	bgeu	r22,r18,a598 <__alt_exception_stack_pointer+0xf800a598>
    a5b8:	1823883a 	mov	r17,r3
    a5bc:	2005f616 	blt	r4,zero,bd98 <___vfprintf_internal_r+0x1ca0>
    a5c0:	d9002a15 	stw	r4,168(sp)
    a5c4:	003f2f06 	br	a284 <__alt_exception_stack_pointer+0xf800a284>
    a5c8:	84002014 	ori	r16,r16,128
    a5cc:	ac400007 	ldb	r17,0(r21)
    a5d0:	003f2b06 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    a5d4:	8cbff404 	addi	r18,r17,-48
    a5d8:	d8003115 	stw	zero,196(sp)
    a5dc:	0009883a 	mov	r4,zero
    a5e0:	a823883a 	mov	r17,r21
    a5e4:	01400284 	movi	r5,10
    a5e8:	00068e80 	call	68e8 <__mulsi3>
    a5ec:	88c00007 	ldb	r3,0(r17)
    a5f0:	9089883a 	add	r4,r18,r2
    a5f4:	ad400044 	addi	r21,r21,1
    a5f8:	1cbff404 	addi	r18,r3,-48
    a5fc:	a823883a 	mov	r17,r21
    a600:	b4bff82e 	bgeu	r22,r18,a5e4 <__alt_exception_stack_pointer+0xf800a5e4>
    a604:	1823883a 	mov	r17,r3
    a608:	d9003115 	stw	r4,196(sp)
    a60c:	003f1d06 	br	a284 <__alt_exception_stack_pointer+0xf800a284>
    a610:	8025883a 	mov	r18,r16
    a614:	dc002903 	ldbu	r16,164(sp)
    a618:	e011883a 	mov	r8,fp
    a61c:	84003fcc 	andi	r16,r16,255
    a620:	8007531e 	bne	r16,zero,c370 <___vfprintf_internal_r+0x2278>
    a624:	94800414 	ori	r18,r18,16
    a628:	9080080c 	andi	r2,r18,32
    a62c:	1003a326 	beq	r2,zero,b4bc <___vfprintf_internal_r+0x13c4>
    a630:	d9002e17 	ldw	r4,184(sp)
    a634:	20800117 	ldw	r2,4(r4)
    a638:	24c00017 	ldw	r19,0(r4)
    a63c:	21000204 	addi	r4,r4,8
    a640:	d9002e15 	stw	r4,184(sp)
    a644:	102d883a 	mov	r22,r2
    a648:	10047316 	blt	r2,zero,b818 <___vfprintf_internal_r+0x1720>
    a64c:	d9002a17 	ldw	r4,168(sp)
    a650:	df002783 	ldbu	fp,158(sp)
    a654:	2003e416 	blt	r4,zero,b5e8 <___vfprintf_internal_r+0x14f0>
    a658:	00ffdfc4 	movi	r3,-129
    a65c:	9d84b03a 	or	r2,r19,r22
    a660:	90e4703a 	and	r18,r18,r3
    a664:	10018026 	beq	r2,zero,ac68 <___vfprintf_internal_r+0xb70>
    a668:	b003ab26 	beq	r22,zero,b518 <___vfprintf_internal_r+0x1420>
    a66c:	dc402915 	stw	r17,164(sp)
    a670:	dc001e04 	addi	r16,sp,120
    a674:	b023883a 	mov	r17,r22
    a678:	402d883a 	mov	r22,r8
    a67c:	9809883a 	mov	r4,r19
    a680:	880b883a 	mov	r5,r17
    a684:	01800284 	movi	r6,10
    a688:	000f883a 	mov	r7,zero
    a68c:	00141840 	call	14184 <__umoddi3>
    a690:	10800c04 	addi	r2,r2,48
    a694:	843fffc4 	addi	r16,r16,-1
    a698:	9809883a 	mov	r4,r19
    a69c:	880b883a 	mov	r5,r17
    a6a0:	80800005 	stb	r2,0(r16)
    a6a4:	01800284 	movi	r6,10
    a6a8:	000f883a 	mov	r7,zero
    a6ac:	0013b880 	call	13b88 <__udivdi3>
    a6b0:	1027883a 	mov	r19,r2
    a6b4:	10c4b03a 	or	r2,r2,r3
    a6b8:	1823883a 	mov	r17,r3
    a6bc:	103fef1e 	bne	r2,zero,a67c <__alt_exception_stack_pointer+0xf800a67c>
    a6c0:	d8c02817 	ldw	r3,160(sp)
    a6c4:	dc402917 	ldw	r17,164(sp)
    a6c8:	b011883a 	mov	r8,r22
    a6cc:	1c07c83a 	sub	r3,r3,r16
    a6d0:	d8c02b15 	stw	r3,172(sp)
    a6d4:	00005f06 	br	a854 <___vfprintf_internal_r+0x75c>
    a6d8:	8025883a 	mov	r18,r16
    a6dc:	dc002903 	ldbu	r16,164(sp)
    a6e0:	e011883a 	mov	r8,fp
    a6e4:	84003fcc 	andi	r16,r16,255
    a6e8:	80071e1e 	bne	r16,zero,c364 <___vfprintf_internal_r+0x226c>
    a6ec:	9080020c 	andi	r2,r18,8
    a6f0:	1004af26 	beq	r2,zero,b9b0 <___vfprintf_internal_r+0x18b8>
    a6f4:	d9002e17 	ldw	r4,184(sp)
    a6f8:	d9402e17 	ldw	r5,184(sp)
    a6fc:	d8802e17 	ldw	r2,184(sp)
    a700:	21000017 	ldw	r4,0(r4)
    a704:	29400117 	ldw	r5,4(r5)
    a708:	10800204 	addi	r2,r2,8
    a70c:	d9003615 	stw	r4,216(sp)
    a710:	d9403815 	stw	r5,224(sp)
    a714:	d8802e15 	stw	r2,184(sp)
    a718:	d9003617 	ldw	r4,216(sp)
    a71c:	d9403817 	ldw	r5,224(sp)
    a720:	da003d15 	stw	r8,244(sp)
    a724:	04000044 	movi	r16,1
    a728:	00118280 	call	11828 <__fpclassifyd>
    a72c:	da003d17 	ldw	r8,244(sp)
    a730:	1404441e 	bne	r2,r16,b844 <___vfprintf_internal_r+0x174c>
    a734:	d9003617 	ldw	r4,216(sp)
    a738:	d9403817 	ldw	r5,224(sp)
    a73c:	000d883a 	mov	r6,zero
    a740:	000f883a 	mov	r7,zero
    a744:	0007cf00 	call	7cf0 <__ledf2>
    a748:	da003d17 	ldw	r8,244(sp)
    a74c:	1005e316 	blt	r2,zero,bedc <___vfprintf_internal_r+0x1de4>
    a750:	df002783 	ldbu	fp,158(sp)
    a754:	008011c4 	movi	r2,71
    a758:	1445580e 	bge	r2,r17,bcbc <___vfprintf_internal_r+0x1bc4>
    a75c:	040000b4 	movhi	r16,2
    a760:	84232f04 	addi	r16,r16,-29508
    a764:	00c000c4 	movi	r3,3
    a768:	00bfdfc4 	movi	r2,-129
    a76c:	d8c02915 	stw	r3,164(sp)
    a770:	90a4703a 	and	r18,r18,r2
    a774:	d8c02b15 	stw	r3,172(sp)
    a778:	d8002a15 	stw	zero,168(sp)
    a77c:	d8003215 	stw	zero,200(sp)
    a780:	00003a06 	br	a86c <___vfprintf_internal_r+0x774>
    a784:	84000214 	ori	r16,r16,8
    a788:	ac400007 	ldb	r17,0(r21)
    a78c:	003ebc06 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    a790:	8025883a 	mov	r18,r16
    a794:	dc002903 	ldbu	r16,164(sp)
    a798:	e011883a 	mov	r8,fp
    a79c:	84003fcc 	andi	r16,r16,255
    a7a0:	8007001e 	bne	r16,zero,c3a4 <___vfprintf_internal_r+0x22ac>
    a7a4:	94800414 	ori	r18,r18,16
    a7a8:	9080080c 	andi	r2,r18,32
    a7ac:	1002fa26 	beq	r2,zero,b398 <___vfprintf_internal_r+0x12a0>
    a7b0:	d9002e17 	ldw	r4,184(sp)
    a7b4:	d9402a17 	ldw	r5,168(sp)
    a7b8:	d8002785 	stb	zero,158(sp)
    a7bc:	20800204 	addi	r2,r4,8
    a7c0:	24c00017 	ldw	r19,0(r4)
    a7c4:	25800117 	ldw	r22,4(r4)
    a7c8:	2804b116 	blt	r5,zero,ba90 <___vfprintf_internal_r+0x1998>
    a7cc:	013fdfc4 	movi	r4,-129
    a7d0:	9d86b03a 	or	r3,r19,r22
    a7d4:	d8802e15 	stw	r2,184(sp)
    a7d8:	9124703a 	and	r18,r18,r4
    a7dc:	1802fb1e 	bne	r3,zero,b3cc <___vfprintf_internal_r+0x12d4>
    a7e0:	d8c02a17 	ldw	r3,168(sp)
    a7e4:	0039883a 	mov	fp,zero
    a7e8:	1805e526 	beq	r3,zero,bf80 <___vfprintf_internal_r+0x1e88>
    a7ec:	0027883a 	mov	r19,zero
    a7f0:	002d883a 	mov	r22,zero
    a7f4:	dc001e04 	addi	r16,sp,120
    a7f8:	9806d0fa 	srli	r3,r19,3
    a7fc:	b008977a 	slli	r4,r22,29
    a800:	b02cd0fa 	srli	r22,r22,3
    a804:	9cc001cc 	andi	r19,r19,7
    a808:	98800c04 	addi	r2,r19,48
    a80c:	843fffc4 	addi	r16,r16,-1
    a810:	20e6b03a 	or	r19,r4,r3
    a814:	80800005 	stb	r2,0(r16)
    a818:	9d86b03a 	or	r3,r19,r22
    a81c:	183ff61e 	bne	r3,zero,a7f8 <__alt_exception_stack_pointer+0xf800a7f8>
    a820:	90c0004c 	andi	r3,r18,1
    a824:	18014126 	beq	r3,zero,ad2c <___vfprintf_internal_r+0xc34>
    a828:	10803fcc 	andi	r2,r2,255
    a82c:	1080201c 	xori	r2,r2,128
    a830:	10bfe004 	addi	r2,r2,-128
    a834:	00c00c04 	movi	r3,48
    a838:	10c13c26 	beq	r2,r3,ad2c <___vfprintf_internal_r+0xc34>
    a83c:	80ffffc5 	stb	r3,-1(r16)
    a840:	d8c02817 	ldw	r3,160(sp)
    a844:	80bfffc4 	addi	r2,r16,-1
    a848:	1021883a 	mov	r16,r2
    a84c:	1887c83a 	sub	r3,r3,r2
    a850:	d8c02b15 	stw	r3,172(sp)
    a854:	d8802b17 	ldw	r2,172(sp)
    a858:	d9002a17 	ldw	r4,168(sp)
    a85c:	1100010e 	bge	r2,r4,a864 <___vfprintf_internal_r+0x76c>
    a860:	2005883a 	mov	r2,r4
    a864:	d8802915 	stw	r2,164(sp)
    a868:	d8003215 	stw	zero,200(sp)
    a86c:	e7003fcc 	andi	fp,fp,255
    a870:	e700201c 	xori	fp,fp,128
    a874:	e73fe004 	addi	fp,fp,-128
    a878:	e0000326 	beq	fp,zero,a888 <___vfprintf_internal_r+0x790>
    a87c:	d8c02917 	ldw	r3,164(sp)
    a880:	18c00044 	addi	r3,r3,1
    a884:	d8c02915 	stw	r3,164(sp)
    a888:	90c0008c 	andi	r3,r18,2
    a88c:	d8c02c15 	stw	r3,176(sp)
    a890:	18000326 	beq	r3,zero,a8a0 <___vfprintf_internal_r+0x7a8>
    a894:	d8c02917 	ldw	r3,164(sp)
    a898:	18c00084 	addi	r3,r3,2
    a89c:	d8c02915 	stw	r3,164(sp)
    a8a0:	90c0210c 	andi	r3,r18,132
    a8a4:	d8c03015 	stw	r3,192(sp)
    a8a8:	1801c51e 	bne	r3,zero,afc0 <___vfprintf_internal_r+0xec8>
    a8ac:	d9003117 	ldw	r4,196(sp)
    a8b0:	d8c02917 	ldw	r3,164(sp)
    a8b4:	20e7c83a 	sub	r19,r4,r3
    a8b8:	04c1c10e 	bge	zero,r19,afc0 <___vfprintf_internal_r+0xec8>
    a8bc:	02400404 	movi	r9,16
    a8c0:	d8c02017 	ldw	r3,128(sp)
    a8c4:	d8801f17 	ldw	r2,124(sp)
    a8c8:	4cc52f0e 	bge	r9,r19,bd88 <___vfprintf_internal_r+0x1c90>
    a8cc:	014000b4 	movhi	r5,2
    a8d0:	29634284 	addi	r5,r5,-29430
    a8d4:	dc403b15 	stw	r17,236(sp)
    a8d8:	d9403515 	stw	r5,212(sp)
    a8dc:	9823883a 	mov	r17,r19
    a8e0:	482d883a 	mov	r22,r9
    a8e4:	9027883a 	mov	r19,r18
    a8e8:	070001c4 	movi	fp,7
    a8ec:	8025883a 	mov	r18,r16
    a8f0:	dc002d17 	ldw	r16,180(sp)
    a8f4:	00000306 	br	a904 <___vfprintf_internal_r+0x80c>
    a8f8:	8c7ffc04 	addi	r17,r17,-16
    a8fc:	42000204 	addi	r8,r8,8
    a900:	b440130e 	bge	r22,r17,a950 <___vfprintf_internal_r+0x858>
    a904:	010000b4 	movhi	r4,2
    a908:	18c00404 	addi	r3,r3,16
    a90c:	10800044 	addi	r2,r2,1
    a910:	21234284 	addi	r4,r4,-29430
    a914:	41000015 	stw	r4,0(r8)
    a918:	45800115 	stw	r22,4(r8)
    a91c:	d8c02015 	stw	r3,128(sp)
    a920:	d8801f15 	stw	r2,124(sp)
    a924:	e0bff40e 	bge	fp,r2,a8f8 <__alt_exception_stack_pointer+0xf800a8f8>
    a928:	d9801e04 	addi	r6,sp,120
    a92c:	b80b883a 	mov	r5,r23
    a930:	8009883a 	mov	r4,r16
    a934:	0011c400 	call	11c40 <__sprint_r>
    a938:	103ef31e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    a93c:	8c7ffc04 	addi	r17,r17,-16
    a940:	d8c02017 	ldw	r3,128(sp)
    a944:	d8801f17 	ldw	r2,124(sp)
    a948:	da000404 	addi	r8,sp,16
    a94c:	b47fed16 	blt	r22,r17,a904 <__alt_exception_stack_pointer+0xf800a904>
    a950:	9021883a 	mov	r16,r18
    a954:	9825883a 	mov	r18,r19
    a958:	8827883a 	mov	r19,r17
    a95c:	dc403b17 	ldw	r17,236(sp)
    a960:	d9403517 	ldw	r5,212(sp)
    a964:	98c7883a 	add	r3,r19,r3
    a968:	10800044 	addi	r2,r2,1
    a96c:	41400015 	stw	r5,0(r8)
    a970:	44c00115 	stw	r19,4(r8)
    a974:	d8c02015 	stw	r3,128(sp)
    a978:	d8801f15 	stw	r2,124(sp)
    a97c:	010001c4 	movi	r4,7
    a980:	2082c516 	blt	r4,r2,b498 <___vfprintf_internal_r+0x13a0>
    a984:	df002787 	ldb	fp,158(sp)
    a988:	42000204 	addi	r8,r8,8
    a98c:	e0000c26 	beq	fp,zero,a9c0 <___vfprintf_internal_r+0x8c8>
    a990:	d8801f17 	ldw	r2,124(sp)
    a994:	d9002784 	addi	r4,sp,158
    a998:	18c00044 	addi	r3,r3,1
    a99c:	10800044 	addi	r2,r2,1
    a9a0:	41000015 	stw	r4,0(r8)
    a9a4:	01000044 	movi	r4,1
    a9a8:	41000115 	stw	r4,4(r8)
    a9ac:	d8c02015 	stw	r3,128(sp)
    a9b0:	d8801f15 	stw	r2,124(sp)
    a9b4:	010001c4 	movi	r4,7
    a9b8:	20825e16 	blt	r4,r2,b334 <___vfprintf_internal_r+0x123c>
    a9bc:	42000204 	addi	r8,r8,8
    a9c0:	d8802c17 	ldw	r2,176(sp)
    a9c4:	10000c26 	beq	r2,zero,a9f8 <___vfprintf_internal_r+0x900>
    a9c8:	d8801f17 	ldw	r2,124(sp)
    a9cc:	d9002704 	addi	r4,sp,156
    a9d0:	18c00084 	addi	r3,r3,2
    a9d4:	10800044 	addi	r2,r2,1
    a9d8:	41000015 	stw	r4,0(r8)
    a9dc:	01000084 	movi	r4,2
    a9e0:	41000115 	stw	r4,4(r8)
    a9e4:	d8c02015 	stw	r3,128(sp)
    a9e8:	d8801f15 	stw	r2,124(sp)
    a9ec:	010001c4 	movi	r4,7
    a9f0:	20825816 	blt	r4,r2,b354 <___vfprintf_internal_r+0x125c>
    a9f4:	42000204 	addi	r8,r8,8
    a9f8:	d9003017 	ldw	r4,192(sp)
    a9fc:	00802004 	movi	r2,128
    aa00:	2081bb26 	beq	r4,r2,b0f0 <___vfprintf_internal_r+0xff8>
    aa04:	d9402a17 	ldw	r5,168(sp)
    aa08:	d8802b17 	ldw	r2,172(sp)
    aa0c:	28adc83a 	sub	r22,r5,r2
    aa10:	0580310e 	bge	zero,r22,aad8 <___vfprintf_internal_r+0x9e0>
    aa14:	07000404 	movi	fp,16
    aa18:	d8801f17 	ldw	r2,124(sp)
    aa1c:	e584360e 	bge	fp,r22,baf8 <___vfprintf_internal_r+0x1a00>
    aa20:	014000b4 	movhi	r5,2
    aa24:	29633e84 	addi	r5,r5,-29446
    aa28:	dc402a15 	stw	r17,168(sp)
    aa2c:	d9402c15 	stw	r5,176(sp)
    aa30:	b023883a 	mov	r17,r22
    aa34:	04c001c4 	movi	r19,7
    aa38:	a82d883a 	mov	r22,r21
    aa3c:	902b883a 	mov	r21,r18
    aa40:	8025883a 	mov	r18,r16
    aa44:	dc002d17 	ldw	r16,180(sp)
    aa48:	00000306 	br	aa58 <___vfprintf_internal_r+0x960>
    aa4c:	8c7ffc04 	addi	r17,r17,-16
    aa50:	42000204 	addi	r8,r8,8
    aa54:	e440110e 	bge	fp,r17,aa9c <___vfprintf_internal_r+0x9a4>
    aa58:	18c00404 	addi	r3,r3,16
    aa5c:	10800044 	addi	r2,r2,1
    aa60:	45000015 	stw	r20,0(r8)
    aa64:	47000115 	stw	fp,4(r8)
    aa68:	d8c02015 	stw	r3,128(sp)
    aa6c:	d8801f15 	stw	r2,124(sp)
    aa70:	98bff60e 	bge	r19,r2,aa4c <__alt_exception_stack_pointer+0xf800aa4c>
    aa74:	d9801e04 	addi	r6,sp,120
    aa78:	b80b883a 	mov	r5,r23
    aa7c:	8009883a 	mov	r4,r16
    aa80:	0011c400 	call	11c40 <__sprint_r>
    aa84:	103ea01e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    aa88:	8c7ffc04 	addi	r17,r17,-16
    aa8c:	d8c02017 	ldw	r3,128(sp)
    aa90:	d8801f17 	ldw	r2,124(sp)
    aa94:	da000404 	addi	r8,sp,16
    aa98:	e47fef16 	blt	fp,r17,aa58 <__alt_exception_stack_pointer+0xf800aa58>
    aa9c:	9021883a 	mov	r16,r18
    aaa0:	a825883a 	mov	r18,r21
    aaa4:	b02b883a 	mov	r21,r22
    aaa8:	882d883a 	mov	r22,r17
    aaac:	dc402a17 	ldw	r17,168(sp)
    aab0:	d9002c17 	ldw	r4,176(sp)
    aab4:	1d87883a 	add	r3,r3,r22
    aab8:	10800044 	addi	r2,r2,1
    aabc:	41000015 	stw	r4,0(r8)
    aac0:	45800115 	stw	r22,4(r8)
    aac4:	d8c02015 	stw	r3,128(sp)
    aac8:	d8801f15 	stw	r2,124(sp)
    aacc:	010001c4 	movi	r4,7
    aad0:	20821016 	blt	r4,r2,b314 <___vfprintf_internal_r+0x121c>
    aad4:	42000204 	addi	r8,r8,8
    aad8:	9080400c 	andi	r2,r18,256
    aadc:	10013a1e 	bne	r2,zero,afc8 <___vfprintf_internal_r+0xed0>
    aae0:	d9402b17 	ldw	r5,172(sp)
    aae4:	d8801f17 	ldw	r2,124(sp)
    aae8:	44000015 	stw	r16,0(r8)
    aaec:	1947883a 	add	r3,r3,r5
    aaf0:	10800044 	addi	r2,r2,1
    aaf4:	41400115 	stw	r5,4(r8)
    aaf8:	d8c02015 	stw	r3,128(sp)
    aafc:	d8801f15 	stw	r2,124(sp)
    ab00:	010001c4 	movi	r4,7
    ab04:	2081f516 	blt	r4,r2,b2dc <___vfprintf_internal_r+0x11e4>
    ab08:	42000204 	addi	r8,r8,8
    ab0c:	9480010c 	andi	r18,r18,4
    ab10:	90003226 	beq	r18,zero,abdc <___vfprintf_internal_r+0xae4>
    ab14:	d9403117 	ldw	r5,196(sp)
    ab18:	d8802917 	ldw	r2,164(sp)
    ab1c:	28a1c83a 	sub	r16,r5,r2
    ab20:	04002e0e 	bge	zero,r16,abdc <___vfprintf_internal_r+0xae4>
    ab24:	04400404 	movi	r17,16
    ab28:	d8801f17 	ldw	r2,124(sp)
    ab2c:	8c04c40e 	bge	r17,r16,be40 <___vfprintf_internal_r+0x1d48>
    ab30:	014000b4 	movhi	r5,2
    ab34:	29634284 	addi	r5,r5,-29430
    ab38:	d9403515 	stw	r5,212(sp)
    ab3c:	048001c4 	movi	r18,7
    ab40:	dcc02d17 	ldw	r19,180(sp)
    ab44:	00000306 	br	ab54 <___vfprintf_internal_r+0xa5c>
    ab48:	843ffc04 	addi	r16,r16,-16
    ab4c:	42000204 	addi	r8,r8,8
    ab50:	8c00130e 	bge	r17,r16,aba0 <___vfprintf_internal_r+0xaa8>
    ab54:	010000b4 	movhi	r4,2
    ab58:	18c00404 	addi	r3,r3,16
    ab5c:	10800044 	addi	r2,r2,1
    ab60:	21234284 	addi	r4,r4,-29430
    ab64:	41000015 	stw	r4,0(r8)
    ab68:	44400115 	stw	r17,4(r8)
    ab6c:	d8c02015 	stw	r3,128(sp)
    ab70:	d8801f15 	stw	r2,124(sp)
    ab74:	90bff40e 	bge	r18,r2,ab48 <__alt_exception_stack_pointer+0xf800ab48>
    ab78:	d9801e04 	addi	r6,sp,120
    ab7c:	b80b883a 	mov	r5,r23
    ab80:	9809883a 	mov	r4,r19
    ab84:	0011c400 	call	11c40 <__sprint_r>
    ab88:	103e5f1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    ab8c:	843ffc04 	addi	r16,r16,-16
    ab90:	d8c02017 	ldw	r3,128(sp)
    ab94:	d8801f17 	ldw	r2,124(sp)
    ab98:	da000404 	addi	r8,sp,16
    ab9c:	8c3fed16 	blt	r17,r16,ab54 <__alt_exception_stack_pointer+0xf800ab54>
    aba0:	d9403517 	ldw	r5,212(sp)
    aba4:	1c07883a 	add	r3,r3,r16
    aba8:	10800044 	addi	r2,r2,1
    abac:	41400015 	stw	r5,0(r8)
    abb0:	44000115 	stw	r16,4(r8)
    abb4:	d8c02015 	stw	r3,128(sp)
    abb8:	d8801f15 	stw	r2,124(sp)
    abbc:	010001c4 	movi	r4,7
    abc0:	2080060e 	bge	r4,r2,abdc <___vfprintf_internal_r+0xae4>
    abc4:	d9002d17 	ldw	r4,180(sp)
    abc8:	d9801e04 	addi	r6,sp,120
    abcc:	b80b883a 	mov	r5,r23
    abd0:	0011c400 	call	11c40 <__sprint_r>
    abd4:	103e4c1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    abd8:	d8c02017 	ldw	r3,128(sp)
    abdc:	d8803117 	ldw	r2,196(sp)
    abe0:	d9002917 	ldw	r4,164(sp)
    abe4:	1100010e 	bge	r2,r4,abec <___vfprintf_internal_r+0xaf4>
    abe8:	2005883a 	mov	r2,r4
    abec:	d9402f17 	ldw	r5,188(sp)
    abf0:	288b883a 	add	r5,r5,r2
    abf4:	d9402f15 	stw	r5,188(sp)
    abf8:	1801c01e 	bne	r3,zero,b2fc <___vfprintf_internal_r+0x1204>
    abfc:	a8800007 	ldb	r2,0(r21)
    ac00:	d8001f15 	stw	zero,124(sp)
    ac04:	da000404 	addi	r8,sp,16
    ac08:	103d751e 	bne	r2,zero,a1e0 <__alt_exception_stack_pointer+0xf800a1e0>
    ac0c:	a823883a 	mov	r17,r21
    ac10:	003d8b06 	br	a240 <__alt_exception_stack_pointer+0xf800a240>
    ac14:	8025883a 	mov	r18,r16
    ac18:	dc002903 	ldbu	r16,164(sp)
    ac1c:	e011883a 	mov	r8,fp
    ac20:	84003fcc 	andi	r16,r16,255
    ac24:	8005e51e 	bne	r16,zero,c3bc <___vfprintf_internal_r+0x22c4>
    ac28:	94800414 	ori	r18,r18,16
    ac2c:	9080080c 	andi	r2,r18,32
    ac30:	10022b26 	beq	r2,zero,b4e0 <___vfprintf_internal_r+0x13e8>
    ac34:	d9002e17 	ldw	r4,184(sp)
    ac38:	d9402a17 	ldw	r5,168(sp)
    ac3c:	d8002785 	stb	zero,158(sp)
    ac40:	20c00204 	addi	r3,r4,8
    ac44:	24c00017 	ldw	r19,0(r4)
    ac48:	25800117 	ldw	r22,4(r4)
    ac4c:	28042e16 	blt	r5,zero,bd08 <___vfprintf_internal_r+0x1c10>
    ac50:	013fdfc4 	movi	r4,-129
    ac54:	9d84b03a 	or	r2,r19,r22
    ac58:	d8c02e15 	stw	r3,184(sp)
    ac5c:	9124703a 	and	r18,r18,r4
    ac60:	0039883a 	mov	fp,zero
    ac64:	103e801e 	bne	r2,zero,a668 <__alt_exception_stack_pointer+0xf800a668>
    ac68:	d9002a17 	ldw	r4,168(sp)
    ac6c:	2002e01e 	bne	r4,zero,b7f0 <___vfprintf_internal_r+0x16f8>
    ac70:	d8002a15 	stw	zero,168(sp)
    ac74:	d8002b15 	stw	zero,172(sp)
    ac78:	dc001e04 	addi	r16,sp,120
    ac7c:	003ef506 	br	a854 <__alt_exception_stack_pointer+0xf800a854>
    ac80:	8025883a 	mov	r18,r16
    ac84:	dc002903 	ldbu	r16,164(sp)
    ac88:	e011883a 	mov	r8,fp
    ac8c:	84003fcc 	andi	r16,r16,255
    ac90:	8005ba1e 	bne	r16,zero,c37c <___vfprintf_internal_r+0x2284>
    ac94:	010000b4 	movhi	r4,2
    ac98:	21233204 	addi	r4,r4,-29496
    ac9c:	d9003915 	stw	r4,228(sp)
    aca0:	9080080c 	andi	r2,r18,32
    aca4:	10006126 	beq	r2,zero,ae2c <___vfprintf_internal_r+0xd34>
    aca8:	d9402e17 	ldw	r5,184(sp)
    acac:	2cc00017 	ldw	r19,0(r5)
    acb0:	2d800117 	ldw	r22,4(r5)
    acb4:	29400204 	addi	r5,r5,8
    acb8:	d9402e15 	stw	r5,184(sp)
    acbc:	9080004c 	andi	r2,r18,1
    acc0:	1001ac26 	beq	r2,zero,b374 <___vfprintf_internal_r+0x127c>
    acc4:	9d84b03a 	or	r2,r19,r22
    acc8:	10038526 	beq	r2,zero,bae0 <___vfprintf_internal_r+0x19e8>
    accc:	d8c02a17 	ldw	r3,168(sp)
    acd0:	00800c04 	movi	r2,48
    acd4:	d8802705 	stb	r2,156(sp)
    acd8:	dc402745 	stb	r17,157(sp)
    acdc:	d8002785 	stb	zero,158(sp)
    ace0:	90800094 	ori	r2,r18,2
    ace4:	18047916 	blt	r3,zero,becc <___vfprintf_internal_r+0x1dd4>
    ace8:	00bfdfc4 	movi	r2,-129
    acec:	90a4703a 	and	r18,r18,r2
    acf0:	94800094 	ori	r18,r18,2
    acf4:	0039883a 	mov	fp,zero
    acf8:	d9003917 	ldw	r4,228(sp)
    acfc:	dc001e04 	addi	r16,sp,120
    ad00:	988003cc 	andi	r2,r19,15
    ad04:	b006973a 	slli	r3,r22,28
    ad08:	2085883a 	add	r2,r4,r2
    ad0c:	9826d13a 	srli	r19,r19,4
    ad10:	10800003 	ldbu	r2,0(r2)
    ad14:	b02cd13a 	srli	r22,r22,4
    ad18:	843fffc4 	addi	r16,r16,-1
    ad1c:	1ce6b03a 	or	r19,r3,r19
    ad20:	80800005 	stb	r2,0(r16)
    ad24:	9d84b03a 	or	r2,r19,r22
    ad28:	103ff51e 	bne	r2,zero,ad00 <__alt_exception_stack_pointer+0xf800ad00>
    ad2c:	d8c02817 	ldw	r3,160(sp)
    ad30:	1c07c83a 	sub	r3,r3,r16
    ad34:	d8c02b15 	stw	r3,172(sp)
    ad38:	003ec606 	br	a854 <__alt_exception_stack_pointer+0xf800a854>
    ad3c:	8025883a 	mov	r18,r16
    ad40:	dc002903 	ldbu	r16,164(sp)
    ad44:	e011883a 	mov	r8,fp
    ad48:	84003fcc 	andi	r16,r16,255
    ad4c:	803e9626 	beq	r16,zero,a7a8 <__alt_exception_stack_pointer+0xf800a7a8>
    ad50:	d8c02b03 	ldbu	r3,172(sp)
    ad54:	d8c02785 	stb	r3,158(sp)
    ad58:	003e9306 	br	a7a8 <__alt_exception_stack_pointer+0xf800a7a8>
    ad5c:	00c00044 	movi	r3,1
    ad60:	d8c02905 	stb	r3,164(sp)
    ad64:	00c00ac4 	movi	r3,43
    ad68:	d8c02b05 	stb	r3,172(sp)
    ad6c:	ac400007 	ldb	r17,0(r21)
    ad70:	003d4306 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    ad74:	84000814 	ori	r16,r16,32
    ad78:	ac400007 	ldb	r17,0(r21)
    ad7c:	003d4006 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    ad80:	d8802e17 	ldw	r2,184(sp)
    ad84:	8025883a 	mov	r18,r16
    ad88:	d8002785 	stb	zero,158(sp)
    ad8c:	14000017 	ldw	r16,0(r2)
    ad90:	e011883a 	mov	r8,fp
    ad94:	14c00104 	addi	r19,r2,4
    ad98:	80042d26 	beq	r16,zero,be50 <___vfprintf_internal_r+0x1d58>
    ad9c:	d8c02a17 	ldw	r3,168(sp)
    ada0:	1803e416 	blt	r3,zero,bd34 <___vfprintf_internal_r+0x1c3c>
    ada4:	180d883a 	mov	r6,r3
    ada8:	000b883a 	mov	r5,zero
    adac:	8009883a 	mov	r4,r16
    adb0:	df003d15 	stw	fp,244(sp)
    adb4:	000fd5c0 	call	fd5c <memchr>
    adb8:	da003d17 	ldw	r8,244(sp)
    adbc:	10046826 	beq	r2,zero,bf60 <___vfprintf_internal_r+0x1e68>
    adc0:	1405c83a 	sub	r2,r2,r16
    adc4:	d8802b15 	stw	r2,172(sp)
    adc8:	1003e016 	blt	r2,zero,bd4c <___vfprintf_internal_r+0x1c54>
    adcc:	df002783 	ldbu	fp,158(sp)
    add0:	d8802915 	stw	r2,164(sp)
    add4:	dcc02e15 	stw	r19,184(sp)
    add8:	d8002a15 	stw	zero,168(sp)
    addc:	d8003215 	stw	zero,200(sp)
    ade0:	003ea206 	br	a86c <__alt_exception_stack_pointer+0xf800a86c>
    ade4:	8025883a 	mov	r18,r16
    ade8:	dc002903 	ldbu	r16,164(sp)
    adec:	e011883a 	mov	r8,fp
    adf0:	84003fcc 	andi	r16,r16,255
    adf4:	803f8d26 	beq	r16,zero,ac2c <__alt_exception_stack_pointer+0xf800ac2c>
    adf8:	d8c02b03 	ldbu	r3,172(sp)
    adfc:	d8c02785 	stb	r3,158(sp)
    ae00:	003f8a06 	br	ac2c <__alt_exception_stack_pointer+0xf800ac2c>
    ae04:	8025883a 	mov	r18,r16
    ae08:	dc002903 	ldbu	r16,164(sp)
    ae0c:	e011883a 	mov	r8,fp
    ae10:	84003fcc 	andi	r16,r16,255
    ae14:	8005661e 	bne	r16,zero,c3b0 <___vfprintf_internal_r+0x22b8>
    ae18:	010000b4 	movhi	r4,2
    ae1c:	21233704 	addi	r4,r4,-29476
    ae20:	d9003915 	stw	r4,228(sp)
    ae24:	9080080c 	andi	r2,r18,32
    ae28:	103f9f1e 	bne	r2,zero,aca8 <__alt_exception_stack_pointer+0xf800aca8>
    ae2c:	9080040c 	andi	r2,r18,16
    ae30:	1002eb26 	beq	r2,zero,b9e0 <___vfprintf_internal_r+0x18e8>
    ae34:	d8802e17 	ldw	r2,184(sp)
    ae38:	002d883a 	mov	r22,zero
    ae3c:	14c00017 	ldw	r19,0(r2)
    ae40:	10800104 	addi	r2,r2,4
    ae44:	d8802e15 	stw	r2,184(sp)
    ae48:	003f9c06 	br	acbc <__alt_exception_stack_pointer+0xf800acbc>
    ae4c:	d8802b07 	ldb	r2,172(sp)
    ae50:	1002e11e 	bne	r2,zero,b9d8 <___vfprintf_internal_r+0x18e0>
    ae54:	00c00044 	movi	r3,1
    ae58:	d8c02905 	stb	r3,164(sp)
    ae5c:	00c00804 	movi	r3,32
    ae60:	d8c02b05 	stb	r3,172(sp)
    ae64:	ac400007 	ldb	r17,0(r21)
    ae68:	003d0506 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    ae6c:	84000054 	ori	r16,r16,1
    ae70:	ac400007 	ldb	r17,0(r21)
    ae74:	003d0206 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    ae78:	8025883a 	mov	r18,r16
    ae7c:	dc002903 	ldbu	r16,164(sp)
    ae80:	e011883a 	mov	r8,fp
    ae84:	84003fcc 	andi	r16,r16,255
    ae88:	803de726 	beq	r16,zero,a628 <__alt_exception_stack_pointer+0xf800a628>
    ae8c:	d8c02b03 	ldbu	r3,172(sp)
    ae90:	d8c02785 	stb	r3,158(sp)
    ae94:	003de406 	br	a628 <__alt_exception_stack_pointer+0xf800a628>
    ae98:	84001014 	ori	r16,r16,64
    ae9c:	ac400007 	ldb	r17,0(r21)
    aea0:	003cf706 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    aea4:	ac400007 	ldb	r17,0(r21)
    aea8:	00801b04 	movi	r2,108
    aeac:	88838f26 	beq	r17,r2,bcec <___vfprintf_internal_r+0x1bf4>
    aeb0:	84000414 	ori	r16,r16,16
    aeb4:	003cf206 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    aeb8:	8025883a 	mov	r18,r16
    aebc:	dc002903 	ldbu	r16,164(sp)
    aec0:	e011883a 	mov	r8,fp
    aec4:	84003fcc 	andi	r16,r16,255
    aec8:	80053f1e 	bne	r16,zero,c3c8 <___vfprintf_internal_r+0x22d0>
    aecc:	9080080c 	andi	r2,r18,32
    aed0:	1002d226 	beq	r2,zero,ba1c <___vfprintf_internal_r+0x1924>
    aed4:	d9002e17 	ldw	r4,184(sp)
    aed8:	d9402f17 	ldw	r5,188(sp)
    aedc:	20800017 	ldw	r2,0(r4)
    aee0:	2807d7fa 	srai	r3,r5,31
    aee4:	21000104 	addi	r4,r4,4
    aee8:	d9002e15 	stw	r4,184(sp)
    aeec:	11400015 	stw	r5,0(r2)
    aef0:	10c00115 	stw	r3,4(r2)
    aef4:	003cb806 	br	a1d8 <__alt_exception_stack_pointer+0xf800a1d8>
    aef8:	d8c02e17 	ldw	r3,184(sp)
    aefc:	d9002e17 	ldw	r4,184(sp)
    af00:	8025883a 	mov	r18,r16
    af04:	18800017 	ldw	r2,0(r3)
    af08:	21000104 	addi	r4,r4,4
    af0c:	00c00044 	movi	r3,1
    af10:	e011883a 	mov	r8,fp
    af14:	d8c02915 	stw	r3,164(sp)
    af18:	d8002785 	stb	zero,158(sp)
    af1c:	d8801405 	stb	r2,80(sp)
    af20:	d9002e15 	stw	r4,184(sp)
    af24:	d8c02b15 	stw	r3,172(sp)
    af28:	d8002a15 	stw	zero,168(sp)
    af2c:	d8003215 	stw	zero,200(sp)
    af30:	dc001404 	addi	r16,sp,80
    af34:	0039883a 	mov	fp,zero
    af38:	003e5306 	br	a888 <__alt_exception_stack_pointer+0xf800a888>
    af3c:	010000b4 	movhi	r4,2
    af40:	21233704 	addi	r4,r4,-29476
    af44:	0039883a 	mov	fp,zero
    af48:	d9003915 	stw	r4,228(sp)
    af4c:	04401e04 	movi	r17,120
    af50:	003f6906 	br	acf8 <__alt_exception_stack_pointer+0xf800acf8>
    af54:	8025883a 	mov	r18,r16
    af58:	dc002903 	ldbu	r16,164(sp)
    af5c:	e011883a 	mov	r8,fp
    af60:	84003fcc 	andi	r16,r16,255
    af64:	8005081e 	bne	r16,zero,c388 <___vfprintf_internal_r+0x2290>
    af68:	883d6126 	beq	r17,zero,a4f0 <__alt_exception_stack_pointer+0xf800a4f0>
    af6c:	00c00044 	movi	r3,1
    af70:	d8c02915 	stw	r3,164(sp)
    af74:	dc401405 	stb	r17,80(sp)
    af78:	d8002785 	stb	zero,158(sp)
    af7c:	003fe906 	br	af24 <__alt_exception_stack_pointer+0xf800af24>
    af80:	014000b4 	movhi	r5,2
    af84:	29633704 	addi	r5,r5,-29476
    af88:	d9403915 	stw	r5,228(sp)
    af8c:	d8c02e15 	stw	r3,184(sp)
    af90:	1025883a 	mov	r18,r2
    af94:	04401e04 	movi	r17,120
    af98:	9d84b03a 	or	r2,r19,r22
    af9c:	1000fc1e 	bne	r2,zero,b390 <___vfprintf_internal_r+0x1298>
    afa0:	0039883a 	mov	fp,zero
    afa4:	00800084 	movi	r2,2
    afa8:	10803fcc 	andi	r2,r2,255
    afac:	00c00044 	movi	r3,1
    afb0:	10c20f26 	beq	r2,r3,b7f0 <___vfprintf_internal_r+0x16f8>
    afb4:	00c00084 	movi	r3,2
    afb8:	10fd3326 	beq	r2,r3,a488 <__alt_exception_stack_pointer+0xf800a488>
    afbc:	003e0b06 	br	a7ec <__alt_exception_stack_pointer+0xf800a7ec>
    afc0:	d8c02017 	ldw	r3,128(sp)
    afc4:	003e7106 	br	a98c <__alt_exception_stack_pointer+0xf800a98c>
    afc8:	00801944 	movi	r2,101
    afcc:	14407e0e 	bge	r2,r17,b1c8 <___vfprintf_internal_r+0x10d0>
    afd0:	d9003617 	ldw	r4,216(sp)
    afd4:	d9403817 	ldw	r5,224(sp)
    afd8:	000d883a 	mov	r6,zero
    afdc:	000f883a 	mov	r7,zero
    afe0:	d8c03c15 	stw	r3,240(sp)
    afe4:	da003d15 	stw	r8,244(sp)
    afe8:	0007b8c0 	call	7b8c <__eqdf2>
    afec:	d8c03c17 	ldw	r3,240(sp)
    aff0:	da003d17 	ldw	r8,244(sp)
    aff4:	1000f71e 	bne	r2,zero,b3d4 <___vfprintf_internal_r+0x12dc>
    aff8:	d8801f17 	ldw	r2,124(sp)
    affc:	010000b4 	movhi	r4,2
    b000:	21233e04 	addi	r4,r4,-29448
    b004:	18c00044 	addi	r3,r3,1
    b008:	10800044 	addi	r2,r2,1
    b00c:	41000015 	stw	r4,0(r8)
    b010:	01000044 	movi	r4,1
    b014:	41000115 	stw	r4,4(r8)
    b018:	d8c02015 	stw	r3,128(sp)
    b01c:	d8801f15 	stw	r2,124(sp)
    b020:	010001c4 	movi	r4,7
    b024:	2082b816 	blt	r4,r2,bb08 <___vfprintf_internal_r+0x1a10>
    b028:	42000204 	addi	r8,r8,8
    b02c:	d8802617 	ldw	r2,152(sp)
    b030:	d9403317 	ldw	r5,204(sp)
    b034:	11400216 	blt	r2,r5,b040 <___vfprintf_internal_r+0xf48>
    b038:	9080004c 	andi	r2,r18,1
    b03c:	103eb326 	beq	r2,zero,ab0c <__alt_exception_stack_pointer+0xf800ab0c>
    b040:	d8803717 	ldw	r2,220(sp)
    b044:	d9003417 	ldw	r4,208(sp)
    b048:	d9403717 	ldw	r5,220(sp)
    b04c:	1887883a 	add	r3,r3,r2
    b050:	d8801f17 	ldw	r2,124(sp)
    b054:	41000015 	stw	r4,0(r8)
    b058:	41400115 	stw	r5,4(r8)
    b05c:	10800044 	addi	r2,r2,1
    b060:	d8c02015 	stw	r3,128(sp)
    b064:	d8801f15 	stw	r2,124(sp)
    b068:	010001c4 	movi	r4,7
    b06c:	20832916 	blt	r4,r2,bd14 <___vfprintf_internal_r+0x1c1c>
    b070:	42000204 	addi	r8,r8,8
    b074:	d8803317 	ldw	r2,204(sp)
    b078:	143fffc4 	addi	r16,r2,-1
    b07c:	043ea30e 	bge	zero,r16,ab0c <__alt_exception_stack_pointer+0xf800ab0c>
    b080:	04400404 	movi	r17,16
    b084:	d8801f17 	ldw	r2,124(sp)
    b088:	8c00880e 	bge	r17,r16,b2ac <___vfprintf_internal_r+0x11b4>
    b08c:	014000b4 	movhi	r5,2
    b090:	29633e84 	addi	r5,r5,-29446
    b094:	d9402c15 	stw	r5,176(sp)
    b098:	058001c4 	movi	r22,7
    b09c:	dcc02d17 	ldw	r19,180(sp)
    b0a0:	00000306 	br	b0b0 <___vfprintf_internal_r+0xfb8>
    b0a4:	42000204 	addi	r8,r8,8
    b0a8:	843ffc04 	addi	r16,r16,-16
    b0ac:	8c00820e 	bge	r17,r16,b2b8 <___vfprintf_internal_r+0x11c0>
    b0b0:	18c00404 	addi	r3,r3,16
    b0b4:	10800044 	addi	r2,r2,1
    b0b8:	45000015 	stw	r20,0(r8)
    b0bc:	44400115 	stw	r17,4(r8)
    b0c0:	d8c02015 	stw	r3,128(sp)
    b0c4:	d8801f15 	stw	r2,124(sp)
    b0c8:	b0bff60e 	bge	r22,r2,b0a4 <__alt_exception_stack_pointer+0xf800b0a4>
    b0cc:	d9801e04 	addi	r6,sp,120
    b0d0:	b80b883a 	mov	r5,r23
    b0d4:	9809883a 	mov	r4,r19
    b0d8:	0011c400 	call	11c40 <__sprint_r>
    b0dc:	103d0a1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b0e0:	d8c02017 	ldw	r3,128(sp)
    b0e4:	d8801f17 	ldw	r2,124(sp)
    b0e8:	da000404 	addi	r8,sp,16
    b0ec:	003fee06 	br	b0a8 <__alt_exception_stack_pointer+0xf800b0a8>
    b0f0:	d9403117 	ldw	r5,196(sp)
    b0f4:	d8802917 	ldw	r2,164(sp)
    b0f8:	28adc83a 	sub	r22,r5,r2
    b0fc:	05be410e 	bge	zero,r22,aa04 <__alt_exception_stack_pointer+0xf800aa04>
    b100:	07000404 	movi	fp,16
    b104:	d8801f17 	ldw	r2,124(sp)
    b108:	e5838f0e 	bge	fp,r22,bf48 <___vfprintf_internal_r+0x1e50>
    b10c:	014000b4 	movhi	r5,2
    b110:	29633e84 	addi	r5,r5,-29446
    b114:	dc403015 	stw	r17,192(sp)
    b118:	d9402c15 	stw	r5,176(sp)
    b11c:	b023883a 	mov	r17,r22
    b120:	04c001c4 	movi	r19,7
    b124:	a82d883a 	mov	r22,r21
    b128:	902b883a 	mov	r21,r18
    b12c:	8025883a 	mov	r18,r16
    b130:	dc002d17 	ldw	r16,180(sp)
    b134:	00000306 	br	b144 <___vfprintf_internal_r+0x104c>
    b138:	8c7ffc04 	addi	r17,r17,-16
    b13c:	42000204 	addi	r8,r8,8
    b140:	e440110e 	bge	fp,r17,b188 <___vfprintf_internal_r+0x1090>
    b144:	18c00404 	addi	r3,r3,16
    b148:	10800044 	addi	r2,r2,1
    b14c:	45000015 	stw	r20,0(r8)
    b150:	47000115 	stw	fp,4(r8)
    b154:	d8c02015 	stw	r3,128(sp)
    b158:	d8801f15 	stw	r2,124(sp)
    b15c:	98bff60e 	bge	r19,r2,b138 <__alt_exception_stack_pointer+0xf800b138>
    b160:	d9801e04 	addi	r6,sp,120
    b164:	b80b883a 	mov	r5,r23
    b168:	8009883a 	mov	r4,r16
    b16c:	0011c400 	call	11c40 <__sprint_r>
    b170:	103ce51e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b174:	8c7ffc04 	addi	r17,r17,-16
    b178:	d8c02017 	ldw	r3,128(sp)
    b17c:	d8801f17 	ldw	r2,124(sp)
    b180:	da000404 	addi	r8,sp,16
    b184:	e47fef16 	blt	fp,r17,b144 <__alt_exception_stack_pointer+0xf800b144>
    b188:	9021883a 	mov	r16,r18
    b18c:	a825883a 	mov	r18,r21
    b190:	b02b883a 	mov	r21,r22
    b194:	882d883a 	mov	r22,r17
    b198:	dc403017 	ldw	r17,192(sp)
    b19c:	d9002c17 	ldw	r4,176(sp)
    b1a0:	1d87883a 	add	r3,r3,r22
    b1a4:	10800044 	addi	r2,r2,1
    b1a8:	41000015 	stw	r4,0(r8)
    b1ac:	45800115 	stw	r22,4(r8)
    b1b0:	d8c02015 	stw	r3,128(sp)
    b1b4:	d8801f15 	stw	r2,124(sp)
    b1b8:	010001c4 	movi	r4,7
    b1bc:	20818e16 	blt	r4,r2,b7f8 <___vfprintf_internal_r+0x1700>
    b1c0:	42000204 	addi	r8,r8,8
    b1c4:	003e0f06 	br	aa04 <__alt_exception_stack_pointer+0xf800aa04>
    b1c8:	d9403317 	ldw	r5,204(sp)
    b1cc:	00800044 	movi	r2,1
    b1d0:	18c00044 	addi	r3,r3,1
    b1d4:	1141530e 	bge	r2,r5,b724 <___vfprintf_internal_r+0x162c>
    b1d8:	dc401f17 	ldw	r17,124(sp)
    b1dc:	00800044 	movi	r2,1
    b1e0:	40800115 	stw	r2,4(r8)
    b1e4:	8c400044 	addi	r17,r17,1
    b1e8:	44000015 	stw	r16,0(r8)
    b1ec:	d8c02015 	stw	r3,128(sp)
    b1f0:	dc401f15 	stw	r17,124(sp)
    b1f4:	008001c4 	movi	r2,7
    b1f8:	14416b16 	blt	r2,r17,b7a8 <___vfprintf_internal_r+0x16b0>
    b1fc:	42000204 	addi	r8,r8,8
    b200:	d8803717 	ldw	r2,220(sp)
    b204:	d9003417 	ldw	r4,208(sp)
    b208:	8c400044 	addi	r17,r17,1
    b20c:	10c7883a 	add	r3,r2,r3
    b210:	40800115 	stw	r2,4(r8)
    b214:	41000015 	stw	r4,0(r8)
    b218:	d8c02015 	stw	r3,128(sp)
    b21c:	dc401f15 	stw	r17,124(sp)
    b220:	008001c4 	movi	r2,7
    b224:	14416916 	blt	r2,r17,b7cc <___vfprintf_internal_r+0x16d4>
    b228:	45800204 	addi	r22,r8,8
    b22c:	d9003617 	ldw	r4,216(sp)
    b230:	d9403817 	ldw	r5,224(sp)
    b234:	000d883a 	mov	r6,zero
    b238:	000f883a 	mov	r7,zero
    b23c:	d8c03c15 	stw	r3,240(sp)
    b240:	0007b8c0 	call	7b8c <__eqdf2>
    b244:	d8c03c17 	ldw	r3,240(sp)
    b248:	1000bc26 	beq	r2,zero,b53c <___vfprintf_internal_r+0x1444>
    b24c:	d9403317 	ldw	r5,204(sp)
    b250:	84000044 	addi	r16,r16,1
    b254:	8c400044 	addi	r17,r17,1
    b258:	28bfffc4 	addi	r2,r5,-1
    b25c:	1887883a 	add	r3,r3,r2
    b260:	b0800115 	stw	r2,4(r22)
    b264:	b4000015 	stw	r16,0(r22)
    b268:	d8c02015 	stw	r3,128(sp)
    b26c:	dc401f15 	stw	r17,124(sp)
    b270:	008001c4 	movi	r2,7
    b274:	14414316 	blt	r2,r17,b784 <___vfprintf_internal_r+0x168c>
    b278:	b5800204 	addi	r22,r22,8
    b27c:	d9003a17 	ldw	r4,232(sp)
    b280:	df0022c4 	addi	fp,sp,139
    b284:	8c400044 	addi	r17,r17,1
    b288:	20c7883a 	add	r3,r4,r3
    b28c:	b7000015 	stw	fp,0(r22)
    b290:	b1000115 	stw	r4,4(r22)
    b294:	d8c02015 	stw	r3,128(sp)
    b298:	dc401f15 	stw	r17,124(sp)
    b29c:	008001c4 	movi	r2,7
    b2a0:	14400e16 	blt	r2,r17,b2dc <___vfprintf_internal_r+0x11e4>
    b2a4:	b2000204 	addi	r8,r22,8
    b2a8:	003e1806 	br	ab0c <__alt_exception_stack_pointer+0xf800ab0c>
    b2ac:	010000b4 	movhi	r4,2
    b2b0:	21233e84 	addi	r4,r4,-29446
    b2b4:	d9002c15 	stw	r4,176(sp)
    b2b8:	d9002c17 	ldw	r4,176(sp)
    b2bc:	1c07883a 	add	r3,r3,r16
    b2c0:	44000115 	stw	r16,4(r8)
    b2c4:	41000015 	stw	r4,0(r8)
    b2c8:	10800044 	addi	r2,r2,1
    b2cc:	d8c02015 	stw	r3,128(sp)
    b2d0:	d8801f15 	stw	r2,124(sp)
    b2d4:	010001c4 	movi	r4,7
    b2d8:	20be0b0e 	bge	r4,r2,ab08 <__alt_exception_stack_pointer+0xf800ab08>
    b2dc:	d9002d17 	ldw	r4,180(sp)
    b2e0:	d9801e04 	addi	r6,sp,120
    b2e4:	b80b883a 	mov	r5,r23
    b2e8:	0011c400 	call	11c40 <__sprint_r>
    b2ec:	103c861e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b2f0:	d8c02017 	ldw	r3,128(sp)
    b2f4:	da000404 	addi	r8,sp,16
    b2f8:	003e0406 	br	ab0c <__alt_exception_stack_pointer+0xf800ab0c>
    b2fc:	d9002d17 	ldw	r4,180(sp)
    b300:	d9801e04 	addi	r6,sp,120
    b304:	b80b883a 	mov	r5,r23
    b308:	0011c400 	call	11c40 <__sprint_r>
    b30c:	103e3b26 	beq	r2,zero,abfc <__alt_exception_stack_pointer+0xf800abfc>
    b310:	003c7d06 	br	a508 <__alt_exception_stack_pointer+0xf800a508>
    b314:	d9002d17 	ldw	r4,180(sp)
    b318:	d9801e04 	addi	r6,sp,120
    b31c:	b80b883a 	mov	r5,r23
    b320:	0011c400 	call	11c40 <__sprint_r>
    b324:	103c781e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b328:	d8c02017 	ldw	r3,128(sp)
    b32c:	da000404 	addi	r8,sp,16
    b330:	003de906 	br	aad8 <__alt_exception_stack_pointer+0xf800aad8>
    b334:	d9002d17 	ldw	r4,180(sp)
    b338:	d9801e04 	addi	r6,sp,120
    b33c:	b80b883a 	mov	r5,r23
    b340:	0011c400 	call	11c40 <__sprint_r>
    b344:	103c701e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b348:	d8c02017 	ldw	r3,128(sp)
    b34c:	da000404 	addi	r8,sp,16
    b350:	003d9b06 	br	a9c0 <__alt_exception_stack_pointer+0xf800a9c0>
    b354:	d9002d17 	ldw	r4,180(sp)
    b358:	d9801e04 	addi	r6,sp,120
    b35c:	b80b883a 	mov	r5,r23
    b360:	0011c400 	call	11c40 <__sprint_r>
    b364:	103c681e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b368:	d8c02017 	ldw	r3,128(sp)
    b36c:	da000404 	addi	r8,sp,16
    b370:	003da106 	br	a9f8 <__alt_exception_stack_pointer+0xf800a9f8>
    b374:	d9402a17 	ldw	r5,168(sp)
    b378:	d8002785 	stb	zero,158(sp)
    b37c:	283f0616 	blt	r5,zero,af98 <__alt_exception_stack_pointer+0xf800af98>
    b380:	00ffdfc4 	movi	r3,-129
    b384:	9d84b03a 	or	r2,r19,r22
    b388:	90e4703a 	and	r18,r18,r3
    b38c:	103c3b26 	beq	r2,zero,a47c <__alt_exception_stack_pointer+0xf800a47c>
    b390:	0039883a 	mov	fp,zero
    b394:	003e5806 	br	acf8 <__alt_exception_stack_pointer+0xf800acf8>
    b398:	9080040c 	andi	r2,r18,16
    b39c:	1001b326 	beq	r2,zero,ba6c <___vfprintf_internal_r+0x1974>
    b3a0:	d8c02e17 	ldw	r3,184(sp)
    b3a4:	d9002a17 	ldw	r4,168(sp)
    b3a8:	d8002785 	stb	zero,158(sp)
    b3ac:	18800104 	addi	r2,r3,4
    b3b0:	1cc00017 	ldw	r19,0(r3)
    b3b4:	002d883a 	mov	r22,zero
    b3b8:	2001b516 	blt	r4,zero,ba90 <___vfprintf_internal_r+0x1998>
    b3bc:	00ffdfc4 	movi	r3,-129
    b3c0:	d8802e15 	stw	r2,184(sp)
    b3c4:	90e4703a 	and	r18,r18,r3
    b3c8:	983d0526 	beq	r19,zero,a7e0 <__alt_exception_stack_pointer+0xf800a7e0>
    b3cc:	0039883a 	mov	fp,zero
    b3d0:	003d0806 	br	a7f4 <__alt_exception_stack_pointer+0xf800a7f4>
    b3d4:	dc402617 	ldw	r17,152(sp)
    b3d8:	0441d30e 	bge	zero,r17,bb28 <___vfprintf_internal_r+0x1a30>
    b3dc:	dc403217 	ldw	r17,200(sp)
    b3e0:	d8803317 	ldw	r2,204(sp)
    b3e4:	1440010e 	bge	r2,r17,b3ec <___vfprintf_internal_r+0x12f4>
    b3e8:	1023883a 	mov	r17,r2
    b3ec:	04400a0e 	bge	zero,r17,b418 <___vfprintf_internal_r+0x1320>
    b3f0:	d8801f17 	ldw	r2,124(sp)
    b3f4:	1c47883a 	add	r3,r3,r17
    b3f8:	44000015 	stw	r16,0(r8)
    b3fc:	10800044 	addi	r2,r2,1
    b400:	44400115 	stw	r17,4(r8)
    b404:	d8c02015 	stw	r3,128(sp)
    b408:	d8801f15 	stw	r2,124(sp)
    b40c:	010001c4 	movi	r4,7
    b410:	20826516 	blt	r4,r2,bda8 <___vfprintf_internal_r+0x1cb0>
    b414:	42000204 	addi	r8,r8,8
    b418:	88026116 	blt	r17,zero,bda0 <___vfprintf_internal_r+0x1ca8>
    b41c:	d9003217 	ldw	r4,200(sp)
    b420:	2463c83a 	sub	r17,r4,r17
    b424:	04407b0e 	bge	zero,r17,b614 <___vfprintf_internal_r+0x151c>
    b428:	05800404 	movi	r22,16
    b42c:	d8801f17 	ldw	r2,124(sp)
    b430:	b4419d0e 	bge	r22,r17,baa8 <___vfprintf_internal_r+0x19b0>
    b434:	010000b4 	movhi	r4,2
    b438:	21233e84 	addi	r4,r4,-29446
    b43c:	d9002c15 	stw	r4,176(sp)
    b440:	070001c4 	movi	fp,7
    b444:	dcc02d17 	ldw	r19,180(sp)
    b448:	00000306 	br	b458 <___vfprintf_internal_r+0x1360>
    b44c:	42000204 	addi	r8,r8,8
    b450:	8c7ffc04 	addi	r17,r17,-16
    b454:	b441970e 	bge	r22,r17,bab4 <___vfprintf_internal_r+0x19bc>
    b458:	18c00404 	addi	r3,r3,16
    b45c:	10800044 	addi	r2,r2,1
    b460:	45000015 	stw	r20,0(r8)
    b464:	45800115 	stw	r22,4(r8)
    b468:	d8c02015 	stw	r3,128(sp)
    b46c:	d8801f15 	stw	r2,124(sp)
    b470:	e0bff60e 	bge	fp,r2,b44c <__alt_exception_stack_pointer+0xf800b44c>
    b474:	d9801e04 	addi	r6,sp,120
    b478:	b80b883a 	mov	r5,r23
    b47c:	9809883a 	mov	r4,r19
    b480:	0011c400 	call	11c40 <__sprint_r>
    b484:	103c201e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b488:	d8c02017 	ldw	r3,128(sp)
    b48c:	d8801f17 	ldw	r2,124(sp)
    b490:	da000404 	addi	r8,sp,16
    b494:	003fee06 	br	b450 <__alt_exception_stack_pointer+0xf800b450>
    b498:	d9002d17 	ldw	r4,180(sp)
    b49c:	d9801e04 	addi	r6,sp,120
    b4a0:	b80b883a 	mov	r5,r23
    b4a4:	0011c400 	call	11c40 <__sprint_r>
    b4a8:	103c171e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b4ac:	d8c02017 	ldw	r3,128(sp)
    b4b0:	df002787 	ldb	fp,158(sp)
    b4b4:	da000404 	addi	r8,sp,16
    b4b8:	003d3406 	br	a98c <__alt_exception_stack_pointer+0xf800a98c>
    b4bc:	9080040c 	andi	r2,r18,16
    b4c0:	10016126 	beq	r2,zero,ba48 <___vfprintf_internal_r+0x1950>
    b4c4:	d9402e17 	ldw	r5,184(sp)
    b4c8:	2cc00017 	ldw	r19,0(r5)
    b4cc:	29400104 	addi	r5,r5,4
    b4d0:	d9402e15 	stw	r5,184(sp)
    b4d4:	982dd7fa 	srai	r22,r19,31
    b4d8:	b005883a 	mov	r2,r22
    b4dc:	003c5a06 	br	a648 <__alt_exception_stack_pointer+0xf800a648>
    b4e0:	9080040c 	andi	r2,r18,16
    b4e4:	10003526 	beq	r2,zero,b5bc <___vfprintf_internal_r+0x14c4>
    b4e8:	d8c02e17 	ldw	r3,184(sp)
    b4ec:	d9002a17 	ldw	r4,168(sp)
    b4f0:	d8002785 	stb	zero,158(sp)
    b4f4:	18800104 	addi	r2,r3,4
    b4f8:	1cc00017 	ldw	r19,0(r3)
    b4fc:	002d883a 	mov	r22,zero
    b500:	20003716 	blt	r4,zero,b5e0 <___vfprintf_internal_r+0x14e8>
    b504:	00ffdfc4 	movi	r3,-129
    b508:	d8802e15 	stw	r2,184(sp)
    b50c:	90e4703a 	and	r18,r18,r3
    b510:	0039883a 	mov	fp,zero
    b514:	983dd426 	beq	r19,zero,ac68 <__alt_exception_stack_pointer+0xf800ac68>
    b518:	00800244 	movi	r2,9
    b51c:	14fc5336 	bltu	r2,r19,a66c <__alt_exception_stack_pointer+0xf800a66c>
    b520:	d8c02817 	ldw	r3,160(sp)
    b524:	dc001dc4 	addi	r16,sp,119
    b528:	9cc00c04 	addi	r19,r19,48
    b52c:	1c07c83a 	sub	r3,r3,r16
    b530:	dcc01dc5 	stb	r19,119(sp)
    b534:	d8c02b15 	stw	r3,172(sp)
    b538:	003cc606 	br	a854 <__alt_exception_stack_pointer+0xf800a854>
    b53c:	d8803317 	ldw	r2,204(sp)
    b540:	143fffc4 	addi	r16,r2,-1
    b544:	043f4d0e 	bge	zero,r16,b27c <__alt_exception_stack_pointer+0xf800b27c>
    b548:	07000404 	movi	fp,16
    b54c:	e400810e 	bge	fp,r16,b754 <___vfprintf_internal_r+0x165c>
    b550:	014000b4 	movhi	r5,2
    b554:	29633e84 	addi	r5,r5,-29446
    b558:	d9402c15 	stw	r5,176(sp)
    b55c:	01c001c4 	movi	r7,7
    b560:	dcc02d17 	ldw	r19,180(sp)
    b564:	00000306 	br	b574 <___vfprintf_internal_r+0x147c>
    b568:	b5800204 	addi	r22,r22,8
    b56c:	843ffc04 	addi	r16,r16,-16
    b570:	e4007b0e 	bge	fp,r16,b760 <___vfprintf_internal_r+0x1668>
    b574:	18c00404 	addi	r3,r3,16
    b578:	8c400044 	addi	r17,r17,1
    b57c:	b5000015 	stw	r20,0(r22)
    b580:	b7000115 	stw	fp,4(r22)
    b584:	d8c02015 	stw	r3,128(sp)
    b588:	dc401f15 	stw	r17,124(sp)
    b58c:	3c7ff60e 	bge	r7,r17,b568 <__alt_exception_stack_pointer+0xf800b568>
    b590:	d9801e04 	addi	r6,sp,120
    b594:	b80b883a 	mov	r5,r23
    b598:	9809883a 	mov	r4,r19
    b59c:	d9c03c15 	stw	r7,240(sp)
    b5a0:	0011c400 	call	11c40 <__sprint_r>
    b5a4:	d9c03c17 	ldw	r7,240(sp)
    b5a8:	103bd71e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b5ac:	d8c02017 	ldw	r3,128(sp)
    b5b0:	dc401f17 	ldw	r17,124(sp)
    b5b4:	dd800404 	addi	r22,sp,16
    b5b8:	003fec06 	br	b56c <__alt_exception_stack_pointer+0xf800b56c>
    b5bc:	9080100c 	andi	r2,r18,64
    b5c0:	d8002785 	stb	zero,158(sp)
    b5c4:	10010e26 	beq	r2,zero,ba00 <___vfprintf_internal_r+0x1908>
    b5c8:	d9402e17 	ldw	r5,184(sp)
    b5cc:	d8c02a17 	ldw	r3,168(sp)
    b5d0:	002d883a 	mov	r22,zero
    b5d4:	28800104 	addi	r2,r5,4
    b5d8:	2cc0000b 	ldhu	r19,0(r5)
    b5dc:	183fc90e 	bge	r3,zero,b504 <__alt_exception_stack_pointer+0xf800b504>
    b5e0:	d8802e15 	stw	r2,184(sp)
    b5e4:	0039883a 	mov	fp,zero
    b5e8:	9d84b03a 	or	r2,r19,r22
    b5ec:	103c1e1e 	bne	r2,zero,a668 <__alt_exception_stack_pointer+0xf800a668>
    b5f0:	00800044 	movi	r2,1
    b5f4:	003e6c06 	br	afa8 <__alt_exception_stack_pointer+0xf800afa8>
    b5f8:	d9002d17 	ldw	r4,180(sp)
    b5fc:	d9801e04 	addi	r6,sp,120
    b600:	b80b883a 	mov	r5,r23
    b604:	0011c400 	call	11c40 <__sprint_r>
    b608:	103bbf1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b60c:	d8c02017 	ldw	r3,128(sp)
    b610:	da000404 	addi	r8,sp,16
    b614:	d9003217 	ldw	r4,200(sp)
    b618:	d8802617 	ldw	r2,152(sp)
    b61c:	d9403317 	ldw	r5,204(sp)
    b620:	8123883a 	add	r17,r16,r4
    b624:	11400216 	blt	r2,r5,b630 <___vfprintf_internal_r+0x1538>
    b628:	9100004c 	andi	r4,r18,1
    b62c:	20000d26 	beq	r4,zero,b664 <___vfprintf_internal_r+0x156c>
    b630:	d9003717 	ldw	r4,220(sp)
    b634:	d9403417 	ldw	r5,208(sp)
    b638:	1907883a 	add	r3,r3,r4
    b63c:	d9001f17 	ldw	r4,124(sp)
    b640:	41400015 	stw	r5,0(r8)
    b644:	d9403717 	ldw	r5,220(sp)
    b648:	21000044 	addi	r4,r4,1
    b64c:	d8c02015 	stw	r3,128(sp)
    b650:	41400115 	stw	r5,4(r8)
    b654:	d9001f15 	stw	r4,124(sp)
    b658:	014001c4 	movi	r5,7
    b65c:	2901e816 	blt	r5,r4,be00 <___vfprintf_internal_r+0x1d08>
    b660:	42000204 	addi	r8,r8,8
    b664:	d9003317 	ldw	r4,204(sp)
    b668:	8121883a 	add	r16,r16,r4
    b66c:	2085c83a 	sub	r2,r4,r2
    b670:	8461c83a 	sub	r16,r16,r17
    b674:	1400010e 	bge	r2,r16,b67c <___vfprintf_internal_r+0x1584>
    b678:	1021883a 	mov	r16,r2
    b67c:	04000a0e 	bge	zero,r16,b6a8 <___vfprintf_internal_r+0x15b0>
    b680:	d9001f17 	ldw	r4,124(sp)
    b684:	1c07883a 	add	r3,r3,r16
    b688:	44400015 	stw	r17,0(r8)
    b68c:	21000044 	addi	r4,r4,1
    b690:	44000115 	stw	r16,4(r8)
    b694:	d8c02015 	stw	r3,128(sp)
    b698:	d9001f15 	stw	r4,124(sp)
    b69c:	014001c4 	movi	r5,7
    b6a0:	2901fb16 	blt	r5,r4,be90 <___vfprintf_internal_r+0x1d98>
    b6a4:	42000204 	addi	r8,r8,8
    b6a8:	8001f716 	blt	r16,zero,be88 <___vfprintf_internal_r+0x1d90>
    b6ac:	1421c83a 	sub	r16,r2,r16
    b6b0:	043d160e 	bge	zero,r16,ab0c <__alt_exception_stack_pointer+0xf800ab0c>
    b6b4:	04400404 	movi	r17,16
    b6b8:	d8801f17 	ldw	r2,124(sp)
    b6bc:	8c3efb0e 	bge	r17,r16,b2ac <__alt_exception_stack_pointer+0xf800b2ac>
    b6c0:	014000b4 	movhi	r5,2
    b6c4:	29633e84 	addi	r5,r5,-29446
    b6c8:	d9402c15 	stw	r5,176(sp)
    b6cc:	058001c4 	movi	r22,7
    b6d0:	dcc02d17 	ldw	r19,180(sp)
    b6d4:	00000306 	br	b6e4 <___vfprintf_internal_r+0x15ec>
    b6d8:	42000204 	addi	r8,r8,8
    b6dc:	843ffc04 	addi	r16,r16,-16
    b6e0:	8c3ef50e 	bge	r17,r16,b2b8 <__alt_exception_stack_pointer+0xf800b2b8>
    b6e4:	18c00404 	addi	r3,r3,16
    b6e8:	10800044 	addi	r2,r2,1
    b6ec:	45000015 	stw	r20,0(r8)
    b6f0:	44400115 	stw	r17,4(r8)
    b6f4:	d8c02015 	stw	r3,128(sp)
    b6f8:	d8801f15 	stw	r2,124(sp)
    b6fc:	b0bff60e 	bge	r22,r2,b6d8 <__alt_exception_stack_pointer+0xf800b6d8>
    b700:	d9801e04 	addi	r6,sp,120
    b704:	b80b883a 	mov	r5,r23
    b708:	9809883a 	mov	r4,r19
    b70c:	0011c400 	call	11c40 <__sprint_r>
    b710:	103b7d1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b714:	d8c02017 	ldw	r3,128(sp)
    b718:	d8801f17 	ldw	r2,124(sp)
    b71c:	da000404 	addi	r8,sp,16
    b720:	003fee06 	br	b6dc <__alt_exception_stack_pointer+0xf800b6dc>
    b724:	9088703a 	and	r4,r18,r2
    b728:	203eab1e 	bne	r4,zero,b1d8 <__alt_exception_stack_pointer+0xf800b1d8>
    b72c:	dc401f17 	ldw	r17,124(sp)
    b730:	40800115 	stw	r2,4(r8)
    b734:	44000015 	stw	r16,0(r8)
    b738:	8c400044 	addi	r17,r17,1
    b73c:	d8c02015 	stw	r3,128(sp)
    b740:	dc401f15 	stw	r17,124(sp)
    b744:	008001c4 	movi	r2,7
    b748:	14400e16 	blt	r2,r17,b784 <___vfprintf_internal_r+0x168c>
    b74c:	45800204 	addi	r22,r8,8
    b750:	003eca06 	br	b27c <__alt_exception_stack_pointer+0xf800b27c>
    b754:	010000b4 	movhi	r4,2
    b758:	21233e84 	addi	r4,r4,-29446
    b75c:	d9002c15 	stw	r4,176(sp)
    b760:	d8802c17 	ldw	r2,176(sp)
    b764:	1c07883a 	add	r3,r3,r16
    b768:	8c400044 	addi	r17,r17,1
    b76c:	b0800015 	stw	r2,0(r22)
    b770:	b4000115 	stw	r16,4(r22)
    b774:	d8c02015 	stw	r3,128(sp)
    b778:	dc401f15 	stw	r17,124(sp)
    b77c:	008001c4 	movi	r2,7
    b780:	147ebd0e 	bge	r2,r17,b278 <__alt_exception_stack_pointer+0xf800b278>
    b784:	d9002d17 	ldw	r4,180(sp)
    b788:	d9801e04 	addi	r6,sp,120
    b78c:	b80b883a 	mov	r5,r23
    b790:	0011c400 	call	11c40 <__sprint_r>
    b794:	103b5c1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b798:	d8c02017 	ldw	r3,128(sp)
    b79c:	dc401f17 	ldw	r17,124(sp)
    b7a0:	dd800404 	addi	r22,sp,16
    b7a4:	003eb506 	br	b27c <__alt_exception_stack_pointer+0xf800b27c>
    b7a8:	d9002d17 	ldw	r4,180(sp)
    b7ac:	d9801e04 	addi	r6,sp,120
    b7b0:	b80b883a 	mov	r5,r23
    b7b4:	0011c400 	call	11c40 <__sprint_r>
    b7b8:	103b531e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b7bc:	d8c02017 	ldw	r3,128(sp)
    b7c0:	dc401f17 	ldw	r17,124(sp)
    b7c4:	da000404 	addi	r8,sp,16
    b7c8:	003e8d06 	br	b200 <__alt_exception_stack_pointer+0xf800b200>
    b7cc:	d9002d17 	ldw	r4,180(sp)
    b7d0:	d9801e04 	addi	r6,sp,120
    b7d4:	b80b883a 	mov	r5,r23
    b7d8:	0011c400 	call	11c40 <__sprint_r>
    b7dc:	103b4a1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b7e0:	d8c02017 	ldw	r3,128(sp)
    b7e4:	dc401f17 	ldw	r17,124(sp)
    b7e8:	dd800404 	addi	r22,sp,16
    b7ec:	003e8f06 	br	b22c <__alt_exception_stack_pointer+0xf800b22c>
    b7f0:	0027883a 	mov	r19,zero
    b7f4:	003f4a06 	br	b520 <__alt_exception_stack_pointer+0xf800b520>
    b7f8:	d9002d17 	ldw	r4,180(sp)
    b7fc:	d9801e04 	addi	r6,sp,120
    b800:	b80b883a 	mov	r5,r23
    b804:	0011c400 	call	11c40 <__sprint_r>
    b808:	103b3f1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    b80c:	d8c02017 	ldw	r3,128(sp)
    b810:	da000404 	addi	r8,sp,16
    b814:	003c7b06 	br	aa04 <__alt_exception_stack_pointer+0xf800aa04>
    b818:	d9402a17 	ldw	r5,168(sp)
    b81c:	04e7c83a 	sub	r19,zero,r19
    b820:	07000b44 	movi	fp,45
    b824:	9804c03a 	cmpne	r2,r19,zero
    b828:	05adc83a 	sub	r22,zero,r22
    b82c:	df002785 	stb	fp,158(sp)
    b830:	b0adc83a 	sub	r22,r22,r2
    b834:	28017b16 	blt	r5,zero,be24 <___vfprintf_internal_r+0x1d2c>
    b838:	00bfdfc4 	movi	r2,-129
    b83c:	90a4703a 	and	r18,r18,r2
    b840:	003b8906 	br	a668 <__alt_exception_stack_pointer+0xf800a668>
    b844:	d9003617 	ldw	r4,216(sp)
    b848:	d9403817 	ldw	r5,224(sp)
    b84c:	da003d15 	stw	r8,244(sp)
    b850:	00118280 	call	11828 <__fpclassifyd>
    b854:	da003d17 	ldw	r8,244(sp)
    b858:	1000f026 	beq	r2,zero,bc1c <___vfprintf_internal_r+0x1b24>
    b85c:	d9002a17 	ldw	r4,168(sp)
    b860:	05bff7c4 	movi	r22,-33
    b864:	00bfffc4 	movi	r2,-1
    b868:	8dac703a 	and	r22,r17,r22
    b86c:	20820026 	beq	r4,r2,c070 <___vfprintf_internal_r+0x1f78>
    b870:	008011c4 	movi	r2,71
    b874:	b081f726 	beq	r22,r2,c054 <___vfprintf_internal_r+0x1f5c>
    b878:	d9003817 	ldw	r4,224(sp)
    b87c:	90c04014 	ori	r3,r18,256
    b880:	d8c02c15 	stw	r3,176(sp)
    b884:	20021516 	blt	r4,zero,c0dc <___vfprintf_internal_r+0x1fe4>
    b888:	dcc03817 	ldw	r19,224(sp)
    b88c:	d8002905 	stb	zero,164(sp)
    b890:	00801984 	movi	r2,102
    b894:	8881f926 	beq	r17,r2,c07c <___vfprintf_internal_r+0x1f84>
    b898:	00801184 	movi	r2,70
    b89c:	88821c26 	beq	r17,r2,c110 <___vfprintf_internal_r+0x2018>
    b8a0:	00801144 	movi	r2,69
    b8a4:	b081ef26 	beq	r22,r2,c064 <___vfprintf_internal_r+0x1f6c>
    b8a8:	d8c02a17 	ldw	r3,168(sp)
    b8ac:	d8802104 	addi	r2,sp,132
    b8b0:	d8800315 	stw	r2,12(sp)
    b8b4:	d9403617 	ldw	r5,216(sp)
    b8b8:	d8802504 	addi	r2,sp,148
    b8bc:	d9002d17 	ldw	r4,180(sp)
    b8c0:	d8800215 	stw	r2,8(sp)
    b8c4:	d8802604 	addi	r2,sp,152
    b8c8:	d8c00015 	stw	r3,0(sp)
    b8cc:	d8800115 	stw	r2,4(sp)
    b8d0:	01c00084 	movi	r7,2
    b8d4:	980d883a 	mov	r6,r19
    b8d8:	d8c03c15 	stw	r3,240(sp)
    b8dc:	da003d15 	stw	r8,244(sp)
    b8e0:	000c8280 	call	c828 <_dtoa_r>
    b8e4:	1021883a 	mov	r16,r2
    b8e8:	008019c4 	movi	r2,103
    b8ec:	d8c03c17 	ldw	r3,240(sp)
    b8f0:	da003d17 	ldw	r8,244(sp)
    b8f4:	88817126 	beq	r17,r2,bebc <___vfprintf_internal_r+0x1dc4>
    b8f8:	008011c4 	movi	r2,71
    b8fc:	88829126 	beq	r17,r2,c344 <___vfprintf_internal_r+0x224c>
    b900:	80f9883a 	add	fp,r16,r3
    b904:	d9003617 	ldw	r4,216(sp)
    b908:	000d883a 	mov	r6,zero
    b90c:	000f883a 	mov	r7,zero
    b910:	980b883a 	mov	r5,r19
    b914:	da003d15 	stw	r8,244(sp)
    b918:	0007b8c0 	call	7b8c <__eqdf2>
    b91c:	da003d17 	ldw	r8,244(sp)
    b920:	10018d26 	beq	r2,zero,bf58 <___vfprintf_internal_r+0x1e60>
    b924:	d8802117 	ldw	r2,132(sp)
    b928:	1700062e 	bgeu	r2,fp,b944 <___vfprintf_internal_r+0x184c>
    b92c:	01000c04 	movi	r4,48
    b930:	10c00044 	addi	r3,r2,1
    b934:	d8c02115 	stw	r3,132(sp)
    b938:	11000005 	stb	r4,0(r2)
    b93c:	d8802117 	ldw	r2,132(sp)
    b940:	173ffb36 	bltu	r2,fp,b930 <__alt_exception_stack_pointer+0xf800b930>
    b944:	1405c83a 	sub	r2,r2,r16
    b948:	d8803315 	stw	r2,204(sp)
    b94c:	008011c4 	movi	r2,71
    b950:	b0817626 	beq	r22,r2,bf2c <___vfprintf_internal_r+0x1e34>
    b954:	00801944 	movi	r2,101
    b958:	1442800e 	bge	r2,r17,c35c <___vfprintf_internal_r+0x2264>
    b95c:	d8c02617 	ldw	r3,152(sp)
    b960:	00801984 	movi	r2,102
    b964:	d8c03215 	stw	r3,200(sp)
    b968:	8881fe26 	beq	r17,r2,c164 <___vfprintf_internal_r+0x206c>
    b96c:	d8c03217 	ldw	r3,200(sp)
    b970:	d9003317 	ldw	r4,204(sp)
    b974:	1901dd16 	blt	r3,r4,c0ec <___vfprintf_internal_r+0x1ff4>
    b978:	9480004c 	andi	r18,r18,1
    b97c:	90022b1e 	bne	r18,zero,c22c <___vfprintf_internal_r+0x2134>
    b980:	1805883a 	mov	r2,r3
    b984:	18028316 	blt	r3,zero,c394 <___vfprintf_internal_r+0x229c>
    b988:	d8c03217 	ldw	r3,200(sp)
    b98c:	044019c4 	movi	r17,103
    b990:	d8c02b15 	stw	r3,172(sp)
    b994:	df002907 	ldb	fp,164(sp)
    b998:	e001531e 	bne	fp,zero,bee8 <___vfprintf_internal_r+0x1df0>
    b99c:	df002783 	ldbu	fp,158(sp)
    b9a0:	d8802915 	stw	r2,164(sp)
    b9a4:	dc802c17 	ldw	r18,176(sp)
    b9a8:	d8002a15 	stw	zero,168(sp)
    b9ac:	003baf06 	br	a86c <__alt_exception_stack_pointer+0xf800a86c>
    b9b0:	d8c02e17 	ldw	r3,184(sp)
    b9b4:	d9002e17 	ldw	r4,184(sp)
    b9b8:	d9402e17 	ldw	r5,184(sp)
    b9bc:	18c00017 	ldw	r3,0(r3)
    b9c0:	21000117 	ldw	r4,4(r4)
    b9c4:	29400204 	addi	r5,r5,8
    b9c8:	d8c03615 	stw	r3,216(sp)
    b9cc:	d9003815 	stw	r4,224(sp)
    b9d0:	d9402e15 	stw	r5,184(sp)
    b9d4:	003b5006 	br	a718 <__alt_exception_stack_pointer+0xf800a718>
    b9d8:	ac400007 	ldb	r17,0(r21)
    b9dc:	003a2806 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    b9e0:	9080100c 	andi	r2,r18,64
    b9e4:	1000a826 	beq	r2,zero,bc88 <___vfprintf_internal_r+0x1b90>
    b9e8:	d8c02e17 	ldw	r3,184(sp)
    b9ec:	002d883a 	mov	r22,zero
    b9f0:	1cc0000b 	ldhu	r19,0(r3)
    b9f4:	18c00104 	addi	r3,r3,4
    b9f8:	d8c02e15 	stw	r3,184(sp)
    b9fc:	003caf06 	br	acbc <__alt_exception_stack_pointer+0xf800acbc>
    ba00:	d9002e17 	ldw	r4,184(sp)
    ba04:	d9402a17 	ldw	r5,168(sp)
    ba08:	002d883a 	mov	r22,zero
    ba0c:	20800104 	addi	r2,r4,4
    ba10:	24c00017 	ldw	r19,0(r4)
    ba14:	283ebb0e 	bge	r5,zero,b504 <__alt_exception_stack_pointer+0xf800b504>
    ba18:	003ef106 	br	b5e0 <__alt_exception_stack_pointer+0xf800b5e0>
    ba1c:	9080040c 	andi	r2,r18,16
    ba20:	1000921e 	bne	r2,zero,bc6c <___vfprintf_internal_r+0x1b74>
    ba24:	9480100c 	andi	r18,r18,64
    ba28:	90013926 	beq	r18,zero,bf10 <___vfprintf_internal_r+0x1e18>
    ba2c:	d9402e17 	ldw	r5,184(sp)
    ba30:	d8c02f17 	ldw	r3,188(sp)
    ba34:	28800017 	ldw	r2,0(r5)
    ba38:	29400104 	addi	r5,r5,4
    ba3c:	d9402e15 	stw	r5,184(sp)
    ba40:	10c0000d 	sth	r3,0(r2)
    ba44:	0039e406 	br	a1d8 <__alt_exception_stack_pointer+0xf800a1d8>
    ba48:	9080100c 	andi	r2,r18,64
    ba4c:	10008026 	beq	r2,zero,bc50 <___vfprintf_internal_r+0x1b58>
    ba50:	d8802e17 	ldw	r2,184(sp)
    ba54:	14c0000f 	ldh	r19,0(r2)
    ba58:	10800104 	addi	r2,r2,4
    ba5c:	d8802e15 	stw	r2,184(sp)
    ba60:	982dd7fa 	srai	r22,r19,31
    ba64:	b005883a 	mov	r2,r22
    ba68:	003af706 	br	a648 <__alt_exception_stack_pointer+0xf800a648>
    ba6c:	9080100c 	andi	r2,r18,64
    ba70:	d8002785 	stb	zero,158(sp)
    ba74:	10008a1e 	bne	r2,zero,bca0 <___vfprintf_internal_r+0x1ba8>
    ba78:	d9002e17 	ldw	r4,184(sp)
    ba7c:	d9402a17 	ldw	r5,168(sp)
    ba80:	002d883a 	mov	r22,zero
    ba84:	20800104 	addi	r2,r4,4
    ba88:	24c00017 	ldw	r19,0(r4)
    ba8c:	283e4b0e 	bge	r5,zero,b3bc <__alt_exception_stack_pointer+0xf800b3bc>
    ba90:	9d86b03a 	or	r3,r19,r22
    ba94:	d8802e15 	stw	r2,184(sp)
    ba98:	183e4c1e 	bne	r3,zero,b3cc <__alt_exception_stack_pointer+0xf800b3cc>
    ba9c:	0039883a 	mov	fp,zero
    baa0:	0005883a 	mov	r2,zero
    baa4:	003d4006 	br	afa8 <__alt_exception_stack_pointer+0xf800afa8>
    baa8:	014000b4 	movhi	r5,2
    baac:	29633e84 	addi	r5,r5,-29446
    bab0:	d9402c15 	stw	r5,176(sp)
    bab4:	d9402c17 	ldw	r5,176(sp)
    bab8:	1c47883a 	add	r3,r3,r17
    babc:	10800044 	addi	r2,r2,1
    bac0:	41400015 	stw	r5,0(r8)
    bac4:	44400115 	stw	r17,4(r8)
    bac8:	d8c02015 	stw	r3,128(sp)
    bacc:	d8801f15 	stw	r2,124(sp)
    bad0:	010001c4 	movi	r4,7
    bad4:	20bec816 	blt	r4,r2,b5f8 <__alt_exception_stack_pointer+0xf800b5f8>
    bad8:	42000204 	addi	r8,r8,8
    badc:	003ecd06 	br	b614 <__alt_exception_stack_pointer+0xf800b614>
    bae0:	d9002a17 	ldw	r4,168(sp)
    bae4:	d8002785 	stb	zero,158(sp)
    bae8:	203d2d16 	blt	r4,zero,afa0 <__alt_exception_stack_pointer+0xf800afa0>
    baec:	00bfdfc4 	movi	r2,-129
    baf0:	90a4703a 	and	r18,r18,r2
    baf4:	003a6106 	br	a47c <__alt_exception_stack_pointer+0xf800a47c>
    baf8:	010000b4 	movhi	r4,2
    bafc:	21233e84 	addi	r4,r4,-29446
    bb00:	d9002c15 	stw	r4,176(sp)
    bb04:	003bea06 	br	aab0 <__alt_exception_stack_pointer+0xf800aab0>
    bb08:	d9002d17 	ldw	r4,180(sp)
    bb0c:	d9801e04 	addi	r6,sp,120
    bb10:	b80b883a 	mov	r5,r23
    bb14:	0011c400 	call	11c40 <__sprint_r>
    bb18:	103a7b1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    bb1c:	d8c02017 	ldw	r3,128(sp)
    bb20:	da000404 	addi	r8,sp,16
    bb24:	003d4106 	br	b02c <__alt_exception_stack_pointer+0xf800b02c>
    bb28:	d8801f17 	ldw	r2,124(sp)
    bb2c:	014000b4 	movhi	r5,2
    bb30:	01000044 	movi	r4,1
    bb34:	18c00044 	addi	r3,r3,1
    bb38:	10800044 	addi	r2,r2,1
    bb3c:	29633e04 	addi	r5,r5,-29448
    bb40:	41000115 	stw	r4,4(r8)
    bb44:	41400015 	stw	r5,0(r8)
    bb48:	d8c02015 	stw	r3,128(sp)
    bb4c:	d8801f15 	stw	r2,124(sp)
    bb50:	010001c4 	movi	r4,7
    bb54:	20805c16 	blt	r4,r2,bcc8 <___vfprintf_internal_r+0x1bd0>
    bb58:	42000204 	addi	r8,r8,8
    bb5c:	8800041e 	bne	r17,zero,bb70 <___vfprintf_internal_r+0x1a78>
    bb60:	d8803317 	ldw	r2,204(sp)
    bb64:	1000021e 	bne	r2,zero,bb70 <___vfprintf_internal_r+0x1a78>
    bb68:	9080004c 	andi	r2,r18,1
    bb6c:	103be726 	beq	r2,zero,ab0c <__alt_exception_stack_pointer+0xf800ab0c>
    bb70:	d9003717 	ldw	r4,220(sp)
    bb74:	d8801f17 	ldw	r2,124(sp)
    bb78:	d9403417 	ldw	r5,208(sp)
    bb7c:	20c7883a 	add	r3,r4,r3
    bb80:	10800044 	addi	r2,r2,1
    bb84:	41000115 	stw	r4,4(r8)
    bb88:	41400015 	stw	r5,0(r8)
    bb8c:	d8c02015 	stw	r3,128(sp)
    bb90:	d8801f15 	stw	r2,124(sp)
    bb94:	010001c4 	movi	r4,7
    bb98:	20812116 	blt	r4,r2,c020 <___vfprintf_internal_r+0x1f28>
    bb9c:	42000204 	addi	r8,r8,8
    bba0:	0463c83a 	sub	r17,zero,r17
    bba4:	0440730e 	bge	zero,r17,bd74 <___vfprintf_internal_r+0x1c7c>
    bba8:	05800404 	movi	r22,16
    bbac:	b440860e 	bge	r22,r17,bdc8 <___vfprintf_internal_r+0x1cd0>
    bbb0:	014000b4 	movhi	r5,2
    bbb4:	29633e84 	addi	r5,r5,-29446
    bbb8:	d9402c15 	stw	r5,176(sp)
    bbbc:	070001c4 	movi	fp,7
    bbc0:	dcc02d17 	ldw	r19,180(sp)
    bbc4:	00000306 	br	bbd4 <___vfprintf_internal_r+0x1adc>
    bbc8:	42000204 	addi	r8,r8,8
    bbcc:	8c7ffc04 	addi	r17,r17,-16
    bbd0:	b440800e 	bge	r22,r17,bdd4 <___vfprintf_internal_r+0x1cdc>
    bbd4:	18c00404 	addi	r3,r3,16
    bbd8:	10800044 	addi	r2,r2,1
    bbdc:	45000015 	stw	r20,0(r8)
    bbe0:	45800115 	stw	r22,4(r8)
    bbe4:	d8c02015 	stw	r3,128(sp)
    bbe8:	d8801f15 	stw	r2,124(sp)
    bbec:	e0bff60e 	bge	fp,r2,bbc8 <__alt_exception_stack_pointer+0xf800bbc8>
    bbf0:	d9801e04 	addi	r6,sp,120
    bbf4:	b80b883a 	mov	r5,r23
    bbf8:	9809883a 	mov	r4,r19
    bbfc:	0011c400 	call	11c40 <__sprint_r>
    bc00:	103a411e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    bc04:	d8c02017 	ldw	r3,128(sp)
    bc08:	d8801f17 	ldw	r2,124(sp)
    bc0c:	da000404 	addi	r8,sp,16
    bc10:	003fee06 	br	bbcc <__alt_exception_stack_pointer+0xf800bbcc>
    bc14:	00bfffc4 	movi	r2,-1
    bc18:	003a3f06 	br	a518 <__alt_exception_stack_pointer+0xf800a518>
    bc1c:	008011c4 	movi	r2,71
    bc20:	1440b816 	blt	r2,r17,bf04 <___vfprintf_internal_r+0x1e0c>
    bc24:	040000b4 	movhi	r16,2
    bc28:	84233004 	addi	r16,r16,-29504
    bc2c:	00c000c4 	movi	r3,3
    bc30:	00bfdfc4 	movi	r2,-129
    bc34:	d8c02915 	stw	r3,164(sp)
    bc38:	90a4703a 	and	r18,r18,r2
    bc3c:	df002783 	ldbu	fp,158(sp)
    bc40:	d8c02b15 	stw	r3,172(sp)
    bc44:	d8002a15 	stw	zero,168(sp)
    bc48:	d8003215 	stw	zero,200(sp)
    bc4c:	003b0706 	br	a86c <__alt_exception_stack_pointer+0xf800a86c>
    bc50:	d8c02e17 	ldw	r3,184(sp)
    bc54:	1cc00017 	ldw	r19,0(r3)
    bc58:	18c00104 	addi	r3,r3,4
    bc5c:	d8c02e15 	stw	r3,184(sp)
    bc60:	982dd7fa 	srai	r22,r19,31
    bc64:	b005883a 	mov	r2,r22
    bc68:	003a7706 	br	a648 <__alt_exception_stack_pointer+0xf800a648>
    bc6c:	d8c02e17 	ldw	r3,184(sp)
    bc70:	d9002f17 	ldw	r4,188(sp)
    bc74:	18800017 	ldw	r2,0(r3)
    bc78:	18c00104 	addi	r3,r3,4
    bc7c:	d8c02e15 	stw	r3,184(sp)
    bc80:	11000015 	stw	r4,0(r2)
    bc84:	00395406 	br	a1d8 <__alt_exception_stack_pointer+0xf800a1d8>
    bc88:	d9002e17 	ldw	r4,184(sp)
    bc8c:	002d883a 	mov	r22,zero
    bc90:	24c00017 	ldw	r19,0(r4)
    bc94:	21000104 	addi	r4,r4,4
    bc98:	d9002e15 	stw	r4,184(sp)
    bc9c:	003c0706 	br	acbc <__alt_exception_stack_pointer+0xf800acbc>
    bca0:	d9402e17 	ldw	r5,184(sp)
    bca4:	d8c02a17 	ldw	r3,168(sp)
    bca8:	002d883a 	mov	r22,zero
    bcac:	28800104 	addi	r2,r5,4
    bcb0:	2cc0000b 	ldhu	r19,0(r5)
    bcb4:	183dc10e 	bge	r3,zero,b3bc <__alt_exception_stack_pointer+0xf800b3bc>
    bcb8:	003f7506 	br	ba90 <__alt_exception_stack_pointer+0xf800ba90>
    bcbc:	040000b4 	movhi	r16,2
    bcc0:	84232e04 	addi	r16,r16,-29512
    bcc4:	003aa706 	br	a764 <__alt_exception_stack_pointer+0xf800a764>
    bcc8:	d9002d17 	ldw	r4,180(sp)
    bccc:	d9801e04 	addi	r6,sp,120
    bcd0:	b80b883a 	mov	r5,r23
    bcd4:	0011c400 	call	11c40 <__sprint_r>
    bcd8:	103a0b1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    bcdc:	dc402617 	ldw	r17,152(sp)
    bce0:	d8c02017 	ldw	r3,128(sp)
    bce4:	da000404 	addi	r8,sp,16
    bce8:	003f9c06 	br	bb5c <__alt_exception_stack_pointer+0xf800bb5c>
    bcec:	ac400043 	ldbu	r17,1(r21)
    bcf0:	84000814 	ori	r16,r16,32
    bcf4:	ad400044 	addi	r21,r21,1
    bcf8:	8c403fcc 	andi	r17,r17,255
    bcfc:	8c40201c 	xori	r17,r17,128
    bd00:	8c7fe004 	addi	r17,r17,-128
    bd04:	00395e06 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    bd08:	d8c02e15 	stw	r3,184(sp)
    bd0c:	0039883a 	mov	fp,zero
    bd10:	003e3506 	br	b5e8 <__alt_exception_stack_pointer+0xf800b5e8>
    bd14:	d9002d17 	ldw	r4,180(sp)
    bd18:	d9801e04 	addi	r6,sp,120
    bd1c:	b80b883a 	mov	r5,r23
    bd20:	0011c400 	call	11c40 <__sprint_r>
    bd24:	1039f81e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    bd28:	d8c02017 	ldw	r3,128(sp)
    bd2c:	da000404 	addi	r8,sp,16
    bd30:	003cd006 	br	b074 <__alt_exception_stack_pointer+0xf800b074>
    bd34:	8009883a 	mov	r4,r16
    bd38:	df003d15 	stw	fp,244(sp)
    bd3c:	000a0580 	call	a058 <strlen>
    bd40:	d8802b15 	stw	r2,172(sp)
    bd44:	da003d17 	ldw	r8,244(sp)
    bd48:	103c200e 	bge	r2,zero,adcc <__alt_exception_stack_pointer+0xf800adcc>
    bd4c:	0005883a 	mov	r2,zero
    bd50:	003c1e06 	br	adcc <__alt_exception_stack_pointer+0xf800adcc>
    bd54:	d9002d17 	ldw	r4,180(sp)
    bd58:	d9801e04 	addi	r6,sp,120
    bd5c:	b80b883a 	mov	r5,r23
    bd60:	0011c400 	call	11c40 <__sprint_r>
    bd64:	1039e81e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    bd68:	d8c02017 	ldw	r3,128(sp)
    bd6c:	d8801f17 	ldw	r2,124(sp)
    bd70:	da000404 	addi	r8,sp,16
    bd74:	d9403317 	ldw	r5,204(sp)
    bd78:	10800044 	addi	r2,r2,1
    bd7c:	44000015 	stw	r16,0(r8)
    bd80:	28c7883a 	add	r3,r5,r3
    bd84:	003b5b06 	br	aaf4 <__alt_exception_stack_pointer+0xf800aaf4>
    bd88:	010000b4 	movhi	r4,2
    bd8c:	21234284 	addi	r4,r4,-29430
    bd90:	d9003515 	stw	r4,212(sp)
    bd94:	003af206 	br	a960 <__alt_exception_stack_pointer+0xf800a960>
    bd98:	013fffc4 	movi	r4,-1
    bd9c:	003a0806 	br	a5c0 <__alt_exception_stack_pointer+0xf800a5c0>
    bda0:	0023883a 	mov	r17,zero
    bda4:	003d9d06 	br	b41c <__alt_exception_stack_pointer+0xf800b41c>
    bda8:	d9002d17 	ldw	r4,180(sp)
    bdac:	d9801e04 	addi	r6,sp,120
    bdb0:	b80b883a 	mov	r5,r23
    bdb4:	0011c400 	call	11c40 <__sprint_r>
    bdb8:	1039d31e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    bdbc:	d8c02017 	ldw	r3,128(sp)
    bdc0:	da000404 	addi	r8,sp,16
    bdc4:	003d9406 	br	b418 <__alt_exception_stack_pointer+0xf800b418>
    bdc8:	010000b4 	movhi	r4,2
    bdcc:	21233e84 	addi	r4,r4,-29446
    bdd0:	d9002c15 	stw	r4,176(sp)
    bdd4:	d9002c17 	ldw	r4,176(sp)
    bdd8:	1c47883a 	add	r3,r3,r17
    bddc:	10800044 	addi	r2,r2,1
    bde0:	41000015 	stw	r4,0(r8)
    bde4:	44400115 	stw	r17,4(r8)
    bde8:	d8c02015 	stw	r3,128(sp)
    bdec:	d8801f15 	stw	r2,124(sp)
    bdf0:	010001c4 	movi	r4,7
    bdf4:	20bfd716 	blt	r4,r2,bd54 <__alt_exception_stack_pointer+0xf800bd54>
    bdf8:	42000204 	addi	r8,r8,8
    bdfc:	003fdd06 	br	bd74 <__alt_exception_stack_pointer+0xf800bd74>
    be00:	d9002d17 	ldw	r4,180(sp)
    be04:	d9801e04 	addi	r6,sp,120
    be08:	b80b883a 	mov	r5,r23
    be0c:	0011c400 	call	11c40 <__sprint_r>
    be10:	1039bd1e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    be14:	d8802617 	ldw	r2,152(sp)
    be18:	d8c02017 	ldw	r3,128(sp)
    be1c:	da000404 	addi	r8,sp,16
    be20:	003e1006 	br	b664 <__alt_exception_stack_pointer+0xf800b664>
    be24:	00800044 	movi	r2,1
    be28:	10803fcc 	andi	r2,r2,255
    be2c:	00c00044 	movi	r3,1
    be30:	10fa0d26 	beq	r2,r3,a668 <__alt_exception_stack_pointer+0xf800a668>
    be34:	00c00084 	movi	r3,2
    be38:	10fbaf26 	beq	r2,r3,acf8 <__alt_exception_stack_pointer+0xf800acf8>
    be3c:	003a6d06 	br	a7f4 <__alt_exception_stack_pointer+0xf800a7f4>
    be40:	010000b4 	movhi	r4,2
    be44:	21234284 	addi	r4,r4,-29430
    be48:	d9003515 	stw	r4,212(sp)
    be4c:	003b5406 	br	aba0 <__alt_exception_stack_pointer+0xf800aba0>
    be50:	d8802a17 	ldw	r2,168(sp)
    be54:	00c00184 	movi	r3,6
    be58:	1880012e 	bgeu	r3,r2,be60 <___vfprintf_internal_r+0x1d68>
    be5c:	1805883a 	mov	r2,r3
    be60:	d8802b15 	stw	r2,172(sp)
    be64:	1000ef16 	blt	r2,zero,c224 <___vfprintf_internal_r+0x212c>
    be68:	040000b4 	movhi	r16,2
    be6c:	d8802915 	stw	r2,164(sp)
    be70:	dcc02e15 	stw	r19,184(sp)
    be74:	d8002a15 	stw	zero,168(sp)
    be78:	d8003215 	stw	zero,200(sp)
    be7c:	84233c04 	addi	r16,r16,-29456
    be80:	0039883a 	mov	fp,zero
    be84:	003a8006 	br	a888 <__alt_exception_stack_pointer+0xf800a888>
    be88:	0021883a 	mov	r16,zero
    be8c:	003e0706 	br	b6ac <__alt_exception_stack_pointer+0xf800b6ac>
    be90:	d9002d17 	ldw	r4,180(sp)
    be94:	d9801e04 	addi	r6,sp,120
    be98:	b80b883a 	mov	r5,r23
    be9c:	0011c400 	call	11c40 <__sprint_r>
    bea0:	1039991e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    bea4:	d8802617 	ldw	r2,152(sp)
    bea8:	d9403317 	ldw	r5,204(sp)
    beac:	d8c02017 	ldw	r3,128(sp)
    beb0:	da000404 	addi	r8,sp,16
    beb4:	2885c83a 	sub	r2,r5,r2
    beb8:	003dfb06 	br	b6a8 <__alt_exception_stack_pointer+0xf800b6a8>
    bebc:	9080004c 	andi	r2,r18,1
    bec0:	103e8f1e 	bne	r2,zero,b900 <__alt_exception_stack_pointer+0xf800b900>
    bec4:	d8802117 	ldw	r2,132(sp)
    bec8:	003e9e06 	br	b944 <__alt_exception_stack_pointer+0xf800b944>
    becc:	1025883a 	mov	r18,r2
    bed0:	0039883a 	mov	fp,zero
    bed4:	00800084 	movi	r2,2
    bed8:	003fd306 	br	be28 <__alt_exception_stack_pointer+0xf800be28>
    bedc:	07000b44 	movi	fp,45
    bee0:	df002785 	stb	fp,158(sp)
    bee4:	003a1b06 	br	a754 <__alt_exception_stack_pointer+0xf800a754>
    bee8:	00c00b44 	movi	r3,45
    beec:	d8c02785 	stb	r3,158(sp)
    bef0:	d8802915 	stw	r2,164(sp)
    bef4:	dc802c17 	ldw	r18,176(sp)
    bef8:	d8002a15 	stw	zero,168(sp)
    befc:	07000b44 	movi	fp,45
    bf00:	003a5e06 	br	a87c <__alt_exception_stack_pointer+0xf800a87c>
    bf04:	040000b4 	movhi	r16,2
    bf08:	84233104 	addi	r16,r16,-29500
    bf0c:	003f4706 	br	bc2c <__alt_exception_stack_pointer+0xf800bc2c>
    bf10:	d9002e17 	ldw	r4,184(sp)
    bf14:	d9402f17 	ldw	r5,188(sp)
    bf18:	20800017 	ldw	r2,0(r4)
    bf1c:	21000104 	addi	r4,r4,4
    bf20:	d9002e15 	stw	r4,184(sp)
    bf24:	11400015 	stw	r5,0(r2)
    bf28:	0038ab06 	br	a1d8 <__alt_exception_stack_pointer+0xf800a1d8>
    bf2c:	dd802617 	ldw	r22,152(sp)
    bf30:	00bfff44 	movi	r2,-3
    bf34:	b0801c16 	blt	r22,r2,bfa8 <___vfprintf_internal_r+0x1eb0>
    bf38:	d9402a17 	ldw	r5,168(sp)
    bf3c:	2d801a16 	blt	r5,r22,bfa8 <___vfprintf_internal_r+0x1eb0>
    bf40:	dd803215 	stw	r22,200(sp)
    bf44:	003e8906 	br	b96c <__alt_exception_stack_pointer+0xf800b96c>
    bf48:	010000b4 	movhi	r4,2
    bf4c:	21233e84 	addi	r4,r4,-29446
    bf50:	d9002c15 	stw	r4,176(sp)
    bf54:	003c9106 	br	b19c <__alt_exception_stack_pointer+0xf800b19c>
    bf58:	e005883a 	mov	r2,fp
    bf5c:	003e7906 	br	b944 <__alt_exception_stack_pointer+0xf800b944>
    bf60:	d9002a17 	ldw	r4,168(sp)
    bf64:	df002783 	ldbu	fp,158(sp)
    bf68:	dcc02e15 	stw	r19,184(sp)
    bf6c:	d9002915 	stw	r4,164(sp)
    bf70:	d9002b15 	stw	r4,172(sp)
    bf74:	d8002a15 	stw	zero,168(sp)
    bf78:	d8003215 	stw	zero,200(sp)
    bf7c:	003a3b06 	br	a86c <__alt_exception_stack_pointer+0xf800a86c>
    bf80:	9080004c 	andi	r2,r18,1
    bf84:	0039883a 	mov	fp,zero
    bf88:	10000426 	beq	r2,zero,bf9c <___vfprintf_internal_r+0x1ea4>
    bf8c:	00800c04 	movi	r2,48
    bf90:	dc001dc4 	addi	r16,sp,119
    bf94:	d8801dc5 	stb	r2,119(sp)
    bf98:	003b6406 	br	ad2c <__alt_exception_stack_pointer+0xf800ad2c>
    bf9c:	d8002b15 	stw	zero,172(sp)
    bfa0:	dc001e04 	addi	r16,sp,120
    bfa4:	003a2b06 	br	a854 <__alt_exception_stack_pointer+0xf800a854>
    bfa8:	8c7fff84 	addi	r17,r17,-2
    bfac:	b5bfffc4 	addi	r22,r22,-1
    bfb0:	dd802615 	stw	r22,152(sp)
    bfb4:	dc4022c5 	stb	r17,139(sp)
    bfb8:	b000bf16 	blt	r22,zero,c2b8 <___vfprintf_internal_r+0x21c0>
    bfbc:	00800ac4 	movi	r2,43
    bfc0:	d8802305 	stb	r2,140(sp)
    bfc4:	00800244 	movi	r2,9
    bfc8:	15807016 	blt	r2,r22,c18c <___vfprintf_internal_r+0x2094>
    bfcc:	00800c04 	movi	r2,48
    bfd0:	b5800c04 	addi	r22,r22,48
    bfd4:	d8802345 	stb	r2,141(sp)
    bfd8:	dd802385 	stb	r22,142(sp)
    bfdc:	d88023c4 	addi	r2,sp,143
    bfe0:	df0022c4 	addi	fp,sp,139
    bfe4:	d8c03317 	ldw	r3,204(sp)
    bfe8:	1739c83a 	sub	fp,r2,fp
    bfec:	d9003317 	ldw	r4,204(sp)
    bff0:	e0c7883a 	add	r3,fp,r3
    bff4:	df003a15 	stw	fp,232(sp)
    bff8:	d8c02b15 	stw	r3,172(sp)
    bffc:	00800044 	movi	r2,1
    c000:	1100b30e 	bge	r2,r4,c2d0 <___vfprintf_internal_r+0x21d8>
    c004:	d8c02b17 	ldw	r3,172(sp)
    c008:	18c00044 	addi	r3,r3,1
    c00c:	d8c02b15 	stw	r3,172(sp)
    c010:	1805883a 	mov	r2,r3
    c014:	1800ac16 	blt	r3,zero,c2c8 <___vfprintf_internal_r+0x21d0>
    c018:	d8003215 	stw	zero,200(sp)
    c01c:	003e5d06 	br	b994 <__alt_exception_stack_pointer+0xf800b994>
    c020:	d9002d17 	ldw	r4,180(sp)
    c024:	d9801e04 	addi	r6,sp,120
    c028:	b80b883a 	mov	r5,r23
    c02c:	0011c400 	call	11c40 <__sprint_r>
    c030:	1039351e 	bne	r2,zero,a508 <__alt_exception_stack_pointer+0xf800a508>
    c034:	dc402617 	ldw	r17,152(sp)
    c038:	d8c02017 	ldw	r3,128(sp)
    c03c:	d8801f17 	ldw	r2,124(sp)
    c040:	da000404 	addi	r8,sp,16
    c044:	003ed606 	br	bba0 <__alt_exception_stack_pointer+0xf800bba0>
    c048:	182b883a 	mov	r21,r3
    c04c:	d8002a15 	stw	zero,168(sp)
    c050:	00388c06 	br	a284 <__alt_exception_stack_pointer+0xf800a284>
    c054:	d8802a17 	ldw	r2,168(sp)
    c058:	103e071e 	bne	r2,zero,b878 <__alt_exception_stack_pointer+0xf800b878>
    c05c:	dc002a15 	stw	r16,168(sp)
    c060:	003e0506 	br	b878 <__alt_exception_stack_pointer+0xf800b878>
    c064:	d9002a17 	ldw	r4,168(sp)
    c068:	20c00044 	addi	r3,r4,1
    c06c:	003e0f06 	br	b8ac <__alt_exception_stack_pointer+0xf800b8ac>
    c070:	01400184 	movi	r5,6
    c074:	d9402a15 	stw	r5,168(sp)
    c078:	003dff06 	br	b878 <__alt_exception_stack_pointer+0xf800b878>
    c07c:	d8802104 	addi	r2,sp,132
    c080:	d8800315 	stw	r2,12(sp)
    c084:	d8802504 	addi	r2,sp,148
    c088:	d8800215 	stw	r2,8(sp)
    c08c:	d8802604 	addi	r2,sp,152
    c090:	d8800115 	stw	r2,4(sp)
    c094:	d8802a17 	ldw	r2,168(sp)
    c098:	d9403617 	ldw	r5,216(sp)
    c09c:	d9002d17 	ldw	r4,180(sp)
    c0a0:	d8800015 	stw	r2,0(sp)
    c0a4:	01c000c4 	movi	r7,3
    c0a8:	980d883a 	mov	r6,r19
    c0ac:	da003d15 	stw	r8,244(sp)
    c0b0:	000c8280 	call	c828 <_dtoa_r>
    c0b4:	d8c02a17 	ldw	r3,168(sp)
    c0b8:	da003d17 	ldw	r8,244(sp)
    c0bc:	1021883a 	mov	r16,r2
    c0c0:	10f9883a 	add	fp,r2,r3
    c0c4:	81000007 	ldb	r4,0(r16)
    c0c8:	00800c04 	movi	r2,48
    c0cc:	20805e26 	beq	r4,r2,c248 <___vfprintf_internal_r+0x2150>
    c0d0:	d8c02617 	ldw	r3,152(sp)
    c0d4:	e0f9883a 	add	fp,fp,r3
    c0d8:	003e0a06 	br	b904 <__alt_exception_stack_pointer+0xf800b904>
    c0dc:	00c00b44 	movi	r3,45
    c0e0:	24e0003c 	xorhi	r19,r4,32768
    c0e4:	d8c02905 	stb	r3,164(sp)
    c0e8:	003de906 	br	b890 <__alt_exception_stack_pointer+0xf800b890>
    c0ec:	d8c03217 	ldw	r3,200(sp)
    c0f0:	00c07a0e 	bge	zero,r3,c2dc <___vfprintf_internal_r+0x21e4>
    c0f4:	00800044 	movi	r2,1
    c0f8:	d9003317 	ldw	r4,204(sp)
    c0fc:	1105883a 	add	r2,r2,r4
    c100:	d8802b15 	stw	r2,172(sp)
    c104:	10004e16 	blt	r2,zero,c240 <___vfprintf_internal_r+0x2148>
    c108:	044019c4 	movi	r17,103
    c10c:	003e2106 	br	b994 <__alt_exception_stack_pointer+0xf800b994>
    c110:	d9002a17 	ldw	r4,168(sp)
    c114:	d8802104 	addi	r2,sp,132
    c118:	d8800315 	stw	r2,12(sp)
    c11c:	d9000015 	stw	r4,0(sp)
    c120:	d8802504 	addi	r2,sp,148
    c124:	d9403617 	ldw	r5,216(sp)
    c128:	d9002d17 	ldw	r4,180(sp)
    c12c:	d8800215 	stw	r2,8(sp)
    c130:	d8802604 	addi	r2,sp,152
    c134:	d8800115 	stw	r2,4(sp)
    c138:	01c000c4 	movi	r7,3
    c13c:	980d883a 	mov	r6,r19
    c140:	da003d15 	stw	r8,244(sp)
    c144:	000c8280 	call	c828 <_dtoa_r>
    c148:	d8c02a17 	ldw	r3,168(sp)
    c14c:	da003d17 	ldw	r8,244(sp)
    c150:	1021883a 	mov	r16,r2
    c154:	00801184 	movi	r2,70
    c158:	80f9883a 	add	fp,r16,r3
    c15c:	88bfd926 	beq	r17,r2,c0c4 <__alt_exception_stack_pointer+0xf800c0c4>
    c160:	003de806 	br	b904 <__alt_exception_stack_pointer+0xf800b904>
    c164:	d9002a17 	ldw	r4,168(sp)
    c168:	00c04d0e 	bge	zero,r3,c2a0 <___vfprintf_internal_r+0x21a8>
    c16c:	2000441e 	bne	r4,zero,c280 <___vfprintf_internal_r+0x2188>
    c170:	9480004c 	andi	r18,r18,1
    c174:	9000421e 	bne	r18,zero,c280 <___vfprintf_internal_r+0x2188>
    c178:	1805883a 	mov	r2,r3
    c17c:	18006f16 	blt	r3,zero,c33c <___vfprintf_internal_r+0x2244>
    c180:	d8c03217 	ldw	r3,200(sp)
    c184:	d8c02b15 	stw	r3,172(sp)
    c188:	003e0206 	br	b994 <__alt_exception_stack_pointer+0xf800b994>
    c18c:	df0022c4 	addi	fp,sp,139
    c190:	dc002a15 	stw	r16,168(sp)
    c194:	4027883a 	mov	r19,r8
    c198:	e021883a 	mov	r16,fp
    c19c:	b009883a 	mov	r4,r22
    c1a0:	01400284 	movi	r5,10
    c1a4:	00067b80 	call	67b8 <__modsi3>
    c1a8:	10800c04 	addi	r2,r2,48
    c1ac:	843fffc4 	addi	r16,r16,-1
    c1b0:	b009883a 	mov	r4,r22
    c1b4:	01400284 	movi	r5,10
    c1b8:	80800005 	stb	r2,0(r16)
    c1bc:	00067340 	call	6734 <__divsi3>
    c1c0:	102d883a 	mov	r22,r2
    c1c4:	00800244 	movi	r2,9
    c1c8:	15bff416 	blt	r2,r22,c19c <__alt_exception_stack_pointer+0xf800c19c>
    c1cc:	9811883a 	mov	r8,r19
    c1d0:	b0800c04 	addi	r2,r22,48
    c1d4:	8027883a 	mov	r19,r16
    c1d8:	997fffc4 	addi	r5,r19,-1
    c1dc:	98bfffc5 	stb	r2,-1(r19)
    c1e0:	dc002a17 	ldw	r16,168(sp)
    c1e4:	2f006d2e 	bgeu	r5,fp,c39c <___vfprintf_internal_r+0x22a4>
    c1e8:	d9c02384 	addi	r7,sp,142
    c1ec:	3ccfc83a 	sub	r7,r7,r19
    c1f0:	d9002344 	addi	r4,sp,141
    c1f4:	e1cf883a 	add	r7,fp,r7
    c1f8:	00000106 	br	c200 <___vfprintf_internal_r+0x2108>
    c1fc:	28800003 	ldbu	r2,0(r5)
    c200:	20800005 	stb	r2,0(r4)
    c204:	21000044 	addi	r4,r4,1
    c208:	29400044 	addi	r5,r5,1
    c20c:	393ffb1e 	bne	r7,r4,c1fc <__alt_exception_stack_pointer+0xf800c1fc>
    c210:	d8802304 	addi	r2,sp,140
    c214:	14c5c83a 	sub	r2,r2,r19
    c218:	d8c02344 	addi	r3,sp,141
    c21c:	1885883a 	add	r2,r3,r2
    c220:	003f7006 	br	bfe4 <__alt_exception_stack_pointer+0xf800bfe4>
    c224:	0005883a 	mov	r2,zero
    c228:	003f0f06 	br	be68 <__alt_exception_stack_pointer+0xf800be68>
    c22c:	d8c03217 	ldw	r3,200(sp)
    c230:	18c00044 	addi	r3,r3,1
    c234:	d8c02b15 	stw	r3,172(sp)
    c238:	1805883a 	mov	r2,r3
    c23c:	183fb20e 	bge	r3,zero,c108 <__alt_exception_stack_pointer+0xf800c108>
    c240:	0005883a 	mov	r2,zero
    c244:	003fb006 	br	c108 <__alt_exception_stack_pointer+0xf800c108>
    c248:	d9003617 	ldw	r4,216(sp)
    c24c:	000d883a 	mov	r6,zero
    c250:	000f883a 	mov	r7,zero
    c254:	980b883a 	mov	r5,r19
    c258:	d8c03c15 	stw	r3,240(sp)
    c25c:	da003d15 	stw	r8,244(sp)
    c260:	0007b8c0 	call	7b8c <__eqdf2>
    c264:	d8c03c17 	ldw	r3,240(sp)
    c268:	da003d17 	ldw	r8,244(sp)
    c26c:	103f9826 	beq	r2,zero,c0d0 <__alt_exception_stack_pointer+0xf800c0d0>
    c270:	00800044 	movi	r2,1
    c274:	10c7c83a 	sub	r3,r2,r3
    c278:	d8c02615 	stw	r3,152(sp)
    c27c:	003f9506 	br	c0d4 <__alt_exception_stack_pointer+0xf800c0d4>
    c280:	d9002a17 	ldw	r4,168(sp)
    c284:	d8c03217 	ldw	r3,200(sp)
    c288:	20800044 	addi	r2,r4,1
    c28c:	1885883a 	add	r2,r3,r2
    c290:	d8802b15 	stw	r2,172(sp)
    c294:	103dbf0e 	bge	r2,zero,b994 <__alt_exception_stack_pointer+0xf800b994>
    c298:	0005883a 	mov	r2,zero
    c29c:	003dbd06 	br	b994 <__alt_exception_stack_pointer+0xf800b994>
    c2a0:	2000201e 	bne	r4,zero,c324 <___vfprintf_internal_r+0x222c>
    c2a4:	9480004c 	andi	r18,r18,1
    c2a8:	90001e1e 	bne	r18,zero,c324 <___vfprintf_internal_r+0x222c>
    c2ac:	00800044 	movi	r2,1
    c2b0:	d8802b15 	stw	r2,172(sp)
    c2b4:	003db706 	br	b994 <__alt_exception_stack_pointer+0xf800b994>
    c2b8:	00800b44 	movi	r2,45
    c2bc:	05adc83a 	sub	r22,zero,r22
    c2c0:	d8802305 	stb	r2,140(sp)
    c2c4:	003f3f06 	br	bfc4 <__alt_exception_stack_pointer+0xf800bfc4>
    c2c8:	0005883a 	mov	r2,zero
    c2cc:	003f5206 	br	c018 <__alt_exception_stack_pointer+0xf800c018>
    c2d0:	90a4703a 	and	r18,r18,r2
    c2d4:	903f4e26 	beq	r18,zero,c010 <__alt_exception_stack_pointer+0xf800c010>
    c2d8:	003f4a06 	br	c004 <__alt_exception_stack_pointer+0xf800c004>
    c2dc:	00800084 	movi	r2,2
    c2e0:	10c5c83a 	sub	r2,r2,r3
    c2e4:	003f8406 	br	c0f8 <__alt_exception_stack_pointer+0xf800c0f8>
    c2e8:	d9402e17 	ldw	r5,184(sp)
    c2ec:	d9002e17 	ldw	r4,184(sp)
    c2f0:	ac400043 	ldbu	r17,1(r21)
    c2f4:	29400017 	ldw	r5,0(r5)
    c2f8:	20800104 	addi	r2,r4,4
    c2fc:	d8802e15 	stw	r2,184(sp)
    c300:	d9402a15 	stw	r5,168(sp)
    c304:	182b883a 	mov	r21,r3
    c308:	283e7b0e 	bge	r5,zero,bcf8 <__alt_exception_stack_pointer+0xf800bcf8>
    c30c:	8c403fcc 	andi	r17,r17,255
    c310:	017fffc4 	movi	r5,-1
    c314:	8c40201c 	xori	r17,r17,128
    c318:	d9402a15 	stw	r5,168(sp)
    c31c:	8c7fe004 	addi	r17,r17,-128
    c320:	0037d706 	br	a280 <__alt_exception_stack_pointer+0xf800a280>
    c324:	d8c02a17 	ldw	r3,168(sp)
    c328:	18c00084 	addi	r3,r3,2
    c32c:	d8c02b15 	stw	r3,172(sp)
    c330:	1805883a 	mov	r2,r3
    c334:	183d970e 	bge	r3,zero,b994 <__alt_exception_stack_pointer+0xf800b994>
    c338:	003fd706 	br	c298 <__alt_exception_stack_pointer+0xf800c298>
    c33c:	0005883a 	mov	r2,zero
    c340:	003f8f06 	br	c180 <__alt_exception_stack_pointer+0xf800c180>
    c344:	9080004c 	andi	r2,r18,1
    c348:	103f821e 	bne	r2,zero,c154 <__alt_exception_stack_pointer+0xf800c154>
    c34c:	d8802117 	ldw	r2,132(sp)
    c350:	1405c83a 	sub	r2,r2,r16
    c354:	d8803315 	stw	r2,204(sp)
    c358:	b47ef426 	beq	r22,r17,bf2c <__alt_exception_stack_pointer+0xf800bf2c>
    c35c:	dd802617 	ldw	r22,152(sp)
    c360:	003f1206 	br	bfac <__alt_exception_stack_pointer+0xf800bfac>
    c364:	d8c02b03 	ldbu	r3,172(sp)
    c368:	d8c02785 	stb	r3,158(sp)
    c36c:	0038df06 	br	a6ec <__alt_exception_stack_pointer+0xf800a6ec>
    c370:	d8c02b03 	ldbu	r3,172(sp)
    c374:	d8c02785 	stb	r3,158(sp)
    c378:	0038aa06 	br	a624 <__alt_exception_stack_pointer+0xf800a624>
    c37c:	d8c02b03 	ldbu	r3,172(sp)
    c380:	d8c02785 	stb	r3,158(sp)
    c384:	003a4306 	br	ac94 <__alt_exception_stack_pointer+0xf800ac94>
    c388:	d8c02b03 	ldbu	r3,172(sp)
    c38c:	d8c02785 	stb	r3,158(sp)
    c390:	003af506 	br	af68 <__alt_exception_stack_pointer+0xf800af68>
    c394:	0005883a 	mov	r2,zero
    c398:	003d7b06 	br	b988 <__alt_exception_stack_pointer+0xf800b988>
    c39c:	d8802344 	addi	r2,sp,141
    c3a0:	003f1006 	br	bfe4 <__alt_exception_stack_pointer+0xf800bfe4>
    c3a4:	d8c02b03 	ldbu	r3,172(sp)
    c3a8:	d8c02785 	stb	r3,158(sp)
    c3ac:	0038fd06 	br	a7a4 <__alt_exception_stack_pointer+0xf800a7a4>
    c3b0:	d8c02b03 	ldbu	r3,172(sp)
    c3b4:	d8c02785 	stb	r3,158(sp)
    c3b8:	003a9706 	br	ae18 <__alt_exception_stack_pointer+0xf800ae18>
    c3bc:	d8c02b03 	ldbu	r3,172(sp)
    c3c0:	d8c02785 	stb	r3,158(sp)
    c3c4:	003a1806 	br	ac28 <__alt_exception_stack_pointer+0xf800ac28>
    c3c8:	d8c02b03 	ldbu	r3,172(sp)
    c3cc:	d8c02785 	stb	r3,158(sp)
    c3d0:	003abe06 	br	aecc <__alt_exception_stack_pointer+0xf800aecc>

0000c3d4 <__vfprintf_internal>:
    c3d4:	008000b4 	movhi	r2,2
    c3d8:	10ac8004 	addi	r2,r2,-19968
    c3dc:	300f883a 	mov	r7,r6
    c3e0:	280d883a 	mov	r6,r5
    c3e4:	200b883a 	mov	r5,r4
    c3e8:	11000017 	ldw	r4,0(r2)
    c3ec:	000a0f81 	jmpi	a0f8 <___vfprintf_internal_r>

0000c3f0 <__sbprintf>:
    c3f0:	2880030b 	ldhu	r2,12(r5)
    c3f4:	2ac01917 	ldw	r11,100(r5)
    c3f8:	2a80038b 	ldhu	r10,14(r5)
    c3fc:	2a400717 	ldw	r9,28(r5)
    c400:	2a000917 	ldw	r8,36(r5)
    c404:	defee204 	addi	sp,sp,-1144
    c408:	00c10004 	movi	r3,1024
    c40c:	dc011a15 	stw	r16,1128(sp)
    c410:	10bfff4c 	andi	r2,r2,65533
    c414:	2821883a 	mov	r16,r5
    c418:	d8cb883a 	add	r5,sp,r3
    c41c:	dc811c15 	stw	r18,1136(sp)
    c420:	dc411b15 	stw	r17,1132(sp)
    c424:	dfc11d15 	stw	ra,1140(sp)
    c428:	2025883a 	mov	r18,r4
    c42c:	d881030d 	sth	r2,1036(sp)
    c430:	dac11915 	stw	r11,1124(sp)
    c434:	da81038d 	sth	r10,1038(sp)
    c438:	da410715 	stw	r9,1052(sp)
    c43c:	da010915 	stw	r8,1060(sp)
    c440:	dec10015 	stw	sp,1024(sp)
    c444:	dec10415 	stw	sp,1040(sp)
    c448:	d8c10215 	stw	r3,1032(sp)
    c44c:	d8c10515 	stw	r3,1044(sp)
    c450:	d8010615 	stw	zero,1048(sp)
    c454:	000a0f80 	call	a0f8 <___vfprintf_internal_r>
    c458:	1023883a 	mov	r17,r2
    c45c:	10000416 	blt	r2,zero,c470 <__sbprintf+0x80>
    c460:	d9410004 	addi	r5,sp,1024
    c464:	9009883a 	mov	r4,r18
    c468:	000ec040 	call	ec04 <_fflush_r>
    c46c:	10000d1e 	bne	r2,zero,c4a4 <__sbprintf+0xb4>
    c470:	d881030b 	ldhu	r2,1036(sp)
    c474:	1080100c 	andi	r2,r2,64
    c478:	10000326 	beq	r2,zero,c488 <__sbprintf+0x98>
    c47c:	8080030b 	ldhu	r2,12(r16)
    c480:	10801014 	ori	r2,r2,64
    c484:	8080030d 	sth	r2,12(r16)
    c488:	8805883a 	mov	r2,r17
    c48c:	dfc11d17 	ldw	ra,1140(sp)
    c490:	dc811c17 	ldw	r18,1136(sp)
    c494:	dc411b17 	ldw	r17,1132(sp)
    c498:	dc011a17 	ldw	r16,1128(sp)
    c49c:	dec11e04 	addi	sp,sp,1144
    c4a0:	f800283a 	ret
    c4a4:	047fffc4 	movi	r17,-1
    c4a8:	003ff106 	br	c470 <__alt_exception_stack_pointer+0xf800c470>

0000c4ac <__swsetup_r>:
    c4ac:	008000b4 	movhi	r2,2
    c4b0:	defffd04 	addi	sp,sp,-12
    c4b4:	10ac8004 	addi	r2,r2,-19968
    c4b8:	dc400115 	stw	r17,4(sp)
    c4bc:	2023883a 	mov	r17,r4
    c4c0:	11000017 	ldw	r4,0(r2)
    c4c4:	dc000015 	stw	r16,0(sp)
    c4c8:	dfc00215 	stw	ra,8(sp)
    c4cc:	2821883a 	mov	r16,r5
    c4d0:	20000226 	beq	r4,zero,c4dc <__swsetup_r+0x30>
    c4d4:	20800e17 	ldw	r2,56(r4)
    c4d8:	10003126 	beq	r2,zero,c5a0 <__swsetup_r+0xf4>
    c4dc:	8080030b 	ldhu	r2,12(r16)
    c4e0:	10c0020c 	andi	r3,r2,8
    c4e4:	1009883a 	mov	r4,r2
    c4e8:	18000f26 	beq	r3,zero,c528 <__swsetup_r+0x7c>
    c4ec:	80c00417 	ldw	r3,16(r16)
    c4f0:	18001526 	beq	r3,zero,c548 <__swsetup_r+0x9c>
    c4f4:	1100004c 	andi	r4,r2,1
    c4f8:	20001c1e 	bne	r4,zero,c56c <__swsetup_r+0xc0>
    c4fc:	1080008c 	andi	r2,r2,2
    c500:	1000291e 	bne	r2,zero,c5a8 <__swsetup_r+0xfc>
    c504:	80800517 	ldw	r2,20(r16)
    c508:	80800215 	stw	r2,8(r16)
    c50c:	18001c26 	beq	r3,zero,c580 <__swsetup_r+0xd4>
    c510:	0005883a 	mov	r2,zero
    c514:	dfc00217 	ldw	ra,8(sp)
    c518:	dc400117 	ldw	r17,4(sp)
    c51c:	dc000017 	ldw	r16,0(sp)
    c520:	dec00304 	addi	sp,sp,12
    c524:	f800283a 	ret
    c528:	2080040c 	andi	r2,r4,16
    c52c:	10002e26 	beq	r2,zero,c5e8 <__swsetup_r+0x13c>
    c530:	2080010c 	andi	r2,r4,4
    c534:	10001e1e 	bne	r2,zero,c5b0 <__swsetup_r+0x104>
    c538:	80c00417 	ldw	r3,16(r16)
    c53c:	20800214 	ori	r2,r4,8
    c540:	8080030d 	sth	r2,12(r16)
    c544:	183feb1e 	bne	r3,zero,c4f4 <__alt_exception_stack_pointer+0xf800c4f4>
    c548:	1100a00c 	andi	r4,r2,640
    c54c:	01408004 	movi	r5,512
    c550:	217fe826 	beq	r4,r5,c4f4 <__alt_exception_stack_pointer+0xf800c4f4>
    c554:	800b883a 	mov	r5,r16
    c558:	8809883a 	mov	r4,r17
    c55c:	000fba00 	call	fba0 <__smakebuf_r>
    c560:	8080030b 	ldhu	r2,12(r16)
    c564:	80c00417 	ldw	r3,16(r16)
    c568:	003fe206 	br	c4f4 <__alt_exception_stack_pointer+0xf800c4f4>
    c56c:	80800517 	ldw	r2,20(r16)
    c570:	80000215 	stw	zero,8(r16)
    c574:	0085c83a 	sub	r2,zero,r2
    c578:	80800615 	stw	r2,24(r16)
    c57c:	183fe41e 	bne	r3,zero,c510 <__alt_exception_stack_pointer+0xf800c510>
    c580:	80c0030b 	ldhu	r3,12(r16)
    c584:	0005883a 	mov	r2,zero
    c588:	1900200c 	andi	r4,r3,128
    c58c:	203fe126 	beq	r4,zero,c514 <__alt_exception_stack_pointer+0xf800c514>
    c590:	18c01014 	ori	r3,r3,64
    c594:	80c0030d 	sth	r3,12(r16)
    c598:	00bfffc4 	movi	r2,-1
    c59c:	003fdd06 	br	c514 <__alt_exception_stack_pointer+0xf800c514>
    c5a0:	000eff00 	call	eff0 <__sinit>
    c5a4:	003fcd06 	br	c4dc <__alt_exception_stack_pointer+0xf800c4dc>
    c5a8:	0005883a 	mov	r2,zero
    c5ac:	003fd606 	br	c508 <__alt_exception_stack_pointer+0xf800c508>
    c5b0:	81400c17 	ldw	r5,48(r16)
    c5b4:	28000626 	beq	r5,zero,c5d0 <__swsetup_r+0x124>
    c5b8:	80801004 	addi	r2,r16,64
    c5bc:	28800326 	beq	r5,r2,c5cc <__swsetup_r+0x120>
    c5c0:	8809883a 	mov	r4,r17
    c5c4:	000f1640 	call	f164 <_free_r>
    c5c8:	8100030b 	ldhu	r4,12(r16)
    c5cc:	80000c15 	stw	zero,48(r16)
    c5d0:	80c00417 	ldw	r3,16(r16)
    c5d4:	00bff6c4 	movi	r2,-37
    c5d8:	1108703a 	and	r4,r2,r4
    c5dc:	80000115 	stw	zero,4(r16)
    c5e0:	80c00015 	stw	r3,0(r16)
    c5e4:	003fd506 	br	c53c <__alt_exception_stack_pointer+0xf800c53c>
    c5e8:	00800244 	movi	r2,9
    c5ec:	88800015 	stw	r2,0(r17)
    c5f0:	20801014 	ori	r2,r4,64
    c5f4:	8080030d 	sth	r2,12(r16)
    c5f8:	00bfffc4 	movi	r2,-1
    c5fc:	003fc506 	br	c514 <__alt_exception_stack_pointer+0xf800c514>

0000c600 <quorem>:
    c600:	defff204 	addi	sp,sp,-56
    c604:	ddc00b15 	stw	r23,44(sp)
    c608:	20800417 	ldw	r2,16(r4)
    c60c:	2dc00417 	ldw	r23,16(r5)
    c610:	dfc00d15 	stw	ra,52(sp)
    c614:	df000c15 	stw	fp,48(sp)
    c618:	dd800a15 	stw	r22,40(sp)
    c61c:	dd400915 	stw	r21,36(sp)
    c620:	dd000815 	stw	r20,32(sp)
    c624:	dcc00715 	stw	r19,28(sp)
    c628:	dc800615 	stw	r18,24(sp)
    c62c:	dc400515 	stw	r17,20(sp)
    c630:	dc000415 	stw	r16,16(sp)
    c634:	15c07a16 	blt	r2,r23,c820 <quorem+0x220>
    c638:	bdffffc4 	addi	r23,r23,-1
    c63c:	bde9883a 	add	r20,r23,r23
    c640:	28c00504 	addi	r3,r5,20
    c644:	a529883a 	add	r20,r20,r20
    c648:	1d39883a 	add	fp,r3,r20
    c64c:	24c00504 	addi	r19,r4,20
    c650:	d9400215 	stw	r5,8(sp)
    c654:	9d29883a 	add	r20,r19,r20
    c658:	e1400017 	ldw	r5,0(fp)
    c65c:	d9000015 	stw	r4,0(sp)
    c660:	a1000017 	ldw	r4,0(r20)
    c664:	29400044 	addi	r5,r5,1
    c668:	d8c00115 	stw	r3,4(sp)
    c66c:	dd000315 	stw	r20,12(sp)
    c670:	000682c0 	call	682c <__udivsi3>
    c674:	1025883a 	mov	r18,r2
    c678:	10003026 	beq	r2,zero,c73c <quorem+0x13c>
    c67c:	dc400117 	ldw	r17,4(sp)
    c680:	9829883a 	mov	r20,r19
    c684:	002d883a 	mov	r22,zero
    c688:	0021883a 	mov	r16,zero
    c68c:	8d400017 	ldw	r21,0(r17)
    c690:	900b883a 	mov	r5,r18
    c694:	8c400104 	addi	r17,r17,4
    c698:	a93fffcc 	andi	r4,r21,65535
    c69c:	00068e80 	call	68e8 <__mulsi3>
    c6a0:	a808d43a 	srli	r4,r21,16
    c6a4:	900b883a 	mov	r5,r18
    c6a8:	15ad883a 	add	r22,r2,r22
    c6ac:	00068e80 	call	68e8 <__mulsi3>
    c6b0:	a1000017 	ldw	r4,0(r20)
    c6b4:	b00cd43a 	srli	r6,r22,16
    c6b8:	b0ffffcc 	andi	r3,r22,65535
    c6bc:	217fffcc 	andi	r5,r4,65535
    c6c0:	2c21883a 	add	r16,r5,r16
    c6c4:	80c7c83a 	sub	r3,r16,r3
    c6c8:	2008d43a 	srli	r4,r4,16
    c6cc:	1185883a 	add	r2,r2,r6
    c6d0:	1821d43a 	srai	r16,r3,16
    c6d4:	117fffcc 	andi	r5,r2,65535
    c6d8:	2149c83a 	sub	r4,r4,r5
    c6dc:	2421883a 	add	r16,r4,r16
    c6e0:	8008943a 	slli	r4,r16,16
    c6e4:	18ffffcc 	andi	r3,r3,65535
    c6e8:	102cd43a 	srli	r22,r2,16
    c6ec:	20c8b03a 	or	r4,r4,r3
    c6f0:	a1000015 	stw	r4,0(r20)
    c6f4:	8021d43a 	srai	r16,r16,16
    c6f8:	a5000104 	addi	r20,r20,4
    c6fc:	e47fe32e 	bgeu	fp,r17,c68c <__alt_exception_stack_pointer+0xf800c68c>
    c700:	d8c00317 	ldw	r3,12(sp)
    c704:	18800017 	ldw	r2,0(r3)
    c708:	10000c1e 	bne	r2,zero,c73c <quorem+0x13c>
    c70c:	18bfff04 	addi	r2,r3,-4
    c710:	9880082e 	bgeu	r19,r2,c734 <quorem+0x134>
    c714:	18ffff17 	ldw	r3,-4(r3)
    c718:	18000326 	beq	r3,zero,c728 <quorem+0x128>
    c71c:	00000506 	br	c734 <quorem+0x134>
    c720:	10c00017 	ldw	r3,0(r2)
    c724:	1800031e 	bne	r3,zero,c734 <quorem+0x134>
    c728:	10bfff04 	addi	r2,r2,-4
    c72c:	bdffffc4 	addi	r23,r23,-1
    c730:	98bffb36 	bltu	r19,r2,c720 <__alt_exception_stack_pointer+0xf800c720>
    c734:	d8c00017 	ldw	r3,0(sp)
    c738:	1dc00415 	stw	r23,16(r3)
    c73c:	d9400217 	ldw	r5,8(sp)
    c740:	d9000017 	ldw	r4,0(sp)
    c744:	0010b900 	call	10b90 <__mcmp>
    c748:	10002816 	blt	r2,zero,c7ec <quorem+0x1ec>
    c74c:	dc400117 	ldw	r17,4(sp)
    c750:	94800044 	addi	r18,r18,1
    c754:	980d883a 	mov	r6,r19
    c758:	0007883a 	mov	r3,zero
    c75c:	31000017 	ldw	r4,0(r6)
    c760:	89400017 	ldw	r5,0(r17)
    c764:	31800104 	addi	r6,r6,4
    c768:	20bfffcc 	andi	r2,r4,65535
    c76c:	10c7883a 	add	r3,r2,r3
    c770:	28bfffcc 	andi	r2,r5,65535
    c774:	1885c83a 	sub	r2,r3,r2
    c778:	280ad43a 	srli	r5,r5,16
    c77c:	2008d43a 	srli	r4,r4,16
    c780:	1007d43a 	srai	r3,r2,16
    c784:	10bfffcc 	andi	r2,r2,65535
    c788:	2149c83a 	sub	r4,r4,r5
    c78c:	20c9883a 	add	r4,r4,r3
    c790:	200a943a 	slli	r5,r4,16
    c794:	8c400104 	addi	r17,r17,4
    c798:	2007d43a 	srai	r3,r4,16
    c79c:	2884b03a 	or	r2,r5,r2
    c7a0:	30bfff15 	stw	r2,-4(r6)
    c7a4:	e47fed2e 	bgeu	fp,r17,c75c <__alt_exception_stack_pointer+0xf800c75c>
    c7a8:	bdc5883a 	add	r2,r23,r23
    c7ac:	1085883a 	add	r2,r2,r2
    c7b0:	9887883a 	add	r3,r19,r2
    c7b4:	18800017 	ldw	r2,0(r3)
    c7b8:	10000c1e 	bne	r2,zero,c7ec <quorem+0x1ec>
    c7bc:	18bfff04 	addi	r2,r3,-4
    c7c0:	9880082e 	bgeu	r19,r2,c7e4 <quorem+0x1e4>
    c7c4:	18ffff17 	ldw	r3,-4(r3)
    c7c8:	18000326 	beq	r3,zero,c7d8 <quorem+0x1d8>
    c7cc:	00000506 	br	c7e4 <quorem+0x1e4>
    c7d0:	10c00017 	ldw	r3,0(r2)
    c7d4:	1800031e 	bne	r3,zero,c7e4 <quorem+0x1e4>
    c7d8:	10bfff04 	addi	r2,r2,-4
    c7dc:	bdffffc4 	addi	r23,r23,-1
    c7e0:	98bffb36 	bltu	r19,r2,c7d0 <__alt_exception_stack_pointer+0xf800c7d0>
    c7e4:	d8c00017 	ldw	r3,0(sp)
    c7e8:	1dc00415 	stw	r23,16(r3)
    c7ec:	9005883a 	mov	r2,r18
    c7f0:	dfc00d17 	ldw	ra,52(sp)
    c7f4:	df000c17 	ldw	fp,48(sp)
    c7f8:	ddc00b17 	ldw	r23,44(sp)
    c7fc:	dd800a17 	ldw	r22,40(sp)
    c800:	dd400917 	ldw	r21,36(sp)
    c804:	dd000817 	ldw	r20,32(sp)
    c808:	dcc00717 	ldw	r19,28(sp)
    c80c:	dc800617 	ldw	r18,24(sp)
    c810:	dc400517 	ldw	r17,20(sp)
    c814:	dc000417 	ldw	r16,16(sp)
    c818:	dec00e04 	addi	sp,sp,56
    c81c:	f800283a 	ret
    c820:	0005883a 	mov	r2,zero
    c824:	003ff206 	br	c7f0 <__alt_exception_stack_pointer+0xf800c7f0>

0000c828 <_dtoa_r>:
    c828:	20801017 	ldw	r2,64(r4)
    c82c:	deffde04 	addi	sp,sp,-136
    c830:	df002015 	stw	fp,128(sp)
    c834:	dcc01b15 	stw	r19,108(sp)
    c838:	dc801a15 	stw	r18,104(sp)
    c83c:	dc401915 	stw	r17,100(sp)
    c840:	dc001815 	stw	r16,96(sp)
    c844:	dfc02115 	stw	ra,132(sp)
    c848:	ddc01f15 	stw	r23,124(sp)
    c84c:	dd801e15 	stw	r22,120(sp)
    c850:	dd401d15 	stw	r21,116(sp)
    c854:	dd001c15 	stw	r20,112(sp)
    c858:	d9c00315 	stw	r7,12(sp)
    c85c:	2039883a 	mov	fp,r4
    c860:	3023883a 	mov	r17,r6
    c864:	2825883a 	mov	r18,r5
    c868:	dc002417 	ldw	r16,144(sp)
    c86c:	3027883a 	mov	r19,r6
    c870:	10000826 	beq	r2,zero,c894 <_dtoa_r+0x6c>
    c874:	21801117 	ldw	r6,68(r4)
    c878:	00c00044 	movi	r3,1
    c87c:	100b883a 	mov	r5,r2
    c880:	1986983a 	sll	r3,r3,r6
    c884:	11800115 	stw	r6,4(r2)
    c888:	10c00215 	stw	r3,8(r2)
    c88c:	00102b40 	call	102b4 <_Bfree>
    c890:	e0001015 	stw	zero,64(fp)
    c894:	88002e16 	blt	r17,zero,c950 <_dtoa_r+0x128>
    c898:	80000015 	stw	zero,0(r16)
    c89c:	889ffc2c 	andhi	r2,r17,32752
    c8a0:	00dffc34 	movhi	r3,32752
    c8a4:	10c01c26 	beq	r2,r3,c918 <_dtoa_r+0xf0>
    c8a8:	000d883a 	mov	r6,zero
    c8ac:	000f883a 	mov	r7,zero
    c8b0:	9009883a 	mov	r4,r18
    c8b4:	980b883a 	mov	r5,r19
    c8b8:	0007b8c0 	call	7b8c <__eqdf2>
    c8bc:	10002b1e 	bne	r2,zero,c96c <_dtoa_r+0x144>
    c8c0:	d9c02317 	ldw	r7,140(sp)
    c8c4:	00800044 	movi	r2,1
    c8c8:	38800015 	stw	r2,0(r7)
    c8cc:	d8802517 	ldw	r2,148(sp)
    c8d0:	10019e26 	beq	r2,zero,cf4c <_dtoa_r+0x724>
    c8d4:	d8c02517 	ldw	r3,148(sp)
    c8d8:	008000b4 	movhi	r2,2
    c8dc:	10a33e44 	addi	r2,r2,-29447
    c8e0:	18800015 	stw	r2,0(r3)
    c8e4:	10bfffc4 	addi	r2,r2,-1
    c8e8:	dfc02117 	ldw	ra,132(sp)
    c8ec:	df002017 	ldw	fp,128(sp)
    c8f0:	ddc01f17 	ldw	r23,124(sp)
    c8f4:	dd801e17 	ldw	r22,120(sp)
    c8f8:	dd401d17 	ldw	r21,116(sp)
    c8fc:	dd001c17 	ldw	r20,112(sp)
    c900:	dcc01b17 	ldw	r19,108(sp)
    c904:	dc801a17 	ldw	r18,104(sp)
    c908:	dc401917 	ldw	r17,100(sp)
    c90c:	dc001817 	ldw	r16,96(sp)
    c910:	dec02204 	addi	sp,sp,136
    c914:	f800283a 	ret
    c918:	d8c02317 	ldw	r3,140(sp)
    c91c:	0089c3c4 	movi	r2,9999
    c920:	18800015 	stw	r2,0(r3)
    c924:	90017726 	beq	r18,zero,cf04 <_dtoa_r+0x6dc>
    c928:	008000b4 	movhi	r2,2
    c92c:	10a34a04 	addi	r2,r2,-29400
    c930:	d9002517 	ldw	r4,148(sp)
    c934:	203fec26 	beq	r4,zero,c8e8 <__alt_exception_stack_pointer+0xf800c8e8>
    c938:	10c000c7 	ldb	r3,3(r2)
    c93c:	1801781e 	bne	r3,zero,cf20 <_dtoa_r+0x6f8>
    c940:	10c000c4 	addi	r3,r2,3
    c944:	d9802517 	ldw	r6,148(sp)
    c948:	30c00015 	stw	r3,0(r6)
    c94c:	003fe606 	br	c8e8 <__alt_exception_stack_pointer+0xf800c8e8>
    c950:	04e00034 	movhi	r19,32768
    c954:	9cffffc4 	addi	r19,r19,-1
    c958:	00800044 	movi	r2,1
    c95c:	8ce6703a 	and	r19,r17,r19
    c960:	80800015 	stw	r2,0(r16)
    c964:	9823883a 	mov	r17,r19
    c968:	003fcc06 	br	c89c <__alt_exception_stack_pointer+0xf800c89c>
    c96c:	d8800204 	addi	r2,sp,8
    c970:	d8800015 	stw	r2,0(sp)
    c974:	d9c00104 	addi	r7,sp,4
    c978:	900b883a 	mov	r5,r18
    c97c:	980d883a 	mov	r6,r19
    c980:	e009883a 	mov	r4,fp
    c984:	8820d53a 	srli	r16,r17,20
    c988:	0010f5c0 	call	10f5c <__d2b>
    c98c:	d8800915 	stw	r2,36(sp)
    c990:	8001651e 	bne	r16,zero,cf28 <_dtoa_r+0x700>
    c994:	dd800217 	ldw	r22,8(sp)
    c998:	dc000117 	ldw	r16,4(sp)
    c99c:	00800804 	movi	r2,32
    c9a0:	b421883a 	add	r16,r22,r16
    c9a4:	80c10c84 	addi	r3,r16,1074
    c9a8:	10c2d10e 	bge	r2,r3,d4f0 <_dtoa_r+0xcc8>
    c9ac:	00801004 	movi	r2,64
    c9b0:	81010484 	addi	r4,r16,1042
    c9b4:	10c7c83a 	sub	r3,r2,r3
    c9b8:	9108d83a 	srl	r4,r18,r4
    c9bc:	88e2983a 	sll	r17,r17,r3
    c9c0:	2448b03a 	or	r4,r4,r17
    c9c4:	00090a80 	call	90a8 <__floatunsidf>
    c9c8:	017f8434 	movhi	r5,65040
    c9cc:	01800044 	movi	r6,1
    c9d0:	1009883a 	mov	r4,r2
    c9d4:	194b883a 	add	r5,r3,r5
    c9d8:	843fffc4 	addi	r16,r16,-1
    c9dc:	d9801115 	stw	r6,68(sp)
    c9e0:	000d883a 	mov	r6,zero
    c9e4:	01cffe34 	movhi	r7,16376
    c9e8:	00086500 	call	8650 <__subdf3>
    c9ec:	0198dbf4 	movhi	r6,25455
    c9f0:	01cff4f4 	movhi	r7,16339
    c9f4:	3190d844 	addi	r6,r6,17249
    c9f8:	39e1e9c4 	addi	r7,r7,-30809
    c9fc:	1009883a 	mov	r4,r2
    ca00:	180b883a 	mov	r5,r3
    ca04:	0007de40 	call	7de4 <__muldf3>
    ca08:	01a2d874 	movhi	r6,35681
    ca0c:	01cff1f4 	movhi	r7,16327
    ca10:	31b22cc4 	addi	r6,r6,-14157
    ca14:	39e28a04 	addi	r7,r7,-30168
    ca18:	180b883a 	mov	r5,r3
    ca1c:	1009883a 	mov	r4,r2
    ca20:	00069100 	call	6910 <__adddf3>
    ca24:	8009883a 	mov	r4,r16
    ca28:	1029883a 	mov	r20,r2
    ca2c:	1823883a 	mov	r17,r3
    ca30:	0008fcc0 	call	8fcc <__floatsidf>
    ca34:	019427f4 	movhi	r6,20639
    ca38:	01cff4f4 	movhi	r7,16339
    ca3c:	319e7ec4 	addi	r6,r6,31227
    ca40:	39d104c4 	addi	r7,r7,17427
    ca44:	1009883a 	mov	r4,r2
    ca48:	180b883a 	mov	r5,r3
    ca4c:	0007de40 	call	7de4 <__muldf3>
    ca50:	100d883a 	mov	r6,r2
    ca54:	180f883a 	mov	r7,r3
    ca58:	a009883a 	mov	r4,r20
    ca5c:	880b883a 	mov	r5,r17
    ca60:	00069100 	call	6910 <__adddf3>
    ca64:	1009883a 	mov	r4,r2
    ca68:	180b883a 	mov	r5,r3
    ca6c:	1029883a 	mov	r20,r2
    ca70:	1823883a 	mov	r17,r3
    ca74:	0008f4c0 	call	8f4c <__fixdfsi>
    ca78:	000d883a 	mov	r6,zero
    ca7c:	000f883a 	mov	r7,zero
    ca80:	a009883a 	mov	r4,r20
    ca84:	880b883a 	mov	r5,r17
    ca88:	d8800515 	stw	r2,20(sp)
    ca8c:	0007cf00 	call	7cf0 <__ledf2>
    ca90:	10028716 	blt	r2,zero,d4b0 <_dtoa_r+0xc88>
    ca94:	d8c00517 	ldw	r3,20(sp)
    ca98:	00800584 	movi	r2,22
    ca9c:	10c27536 	bltu	r2,r3,d474 <_dtoa_r+0xc4c>
    caa0:	180490fa 	slli	r2,r3,3
    caa4:	00c000b4 	movhi	r3,2
    caa8:	18e36504 	addi	r3,r3,-29292
    caac:	1885883a 	add	r2,r3,r2
    cab0:	11000017 	ldw	r4,0(r2)
    cab4:	11400117 	ldw	r5,4(r2)
    cab8:	900d883a 	mov	r6,r18
    cabc:	980f883a 	mov	r7,r19
    cac0:	0007c140 	call	7c14 <__gedf2>
    cac4:	00828d0e 	bge	zero,r2,d4fc <_dtoa_r+0xcd4>
    cac8:	d9000517 	ldw	r4,20(sp)
    cacc:	d8000e15 	stw	zero,56(sp)
    cad0:	213fffc4 	addi	r4,r4,-1
    cad4:	d9000515 	stw	r4,20(sp)
    cad8:	b42dc83a 	sub	r22,r22,r16
    cadc:	b5bfffc4 	addi	r22,r22,-1
    cae0:	b0026f16 	blt	r22,zero,d4a0 <_dtoa_r+0xc78>
    cae4:	d8000815 	stw	zero,32(sp)
    cae8:	d9c00517 	ldw	r7,20(sp)
    caec:	38026416 	blt	r7,zero,d480 <_dtoa_r+0xc58>
    caf0:	b1ed883a 	add	r22,r22,r7
    caf4:	d9c00d15 	stw	r7,52(sp)
    caf8:	d8000a15 	stw	zero,40(sp)
    cafc:	d9800317 	ldw	r6,12(sp)
    cb00:	00800244 	movi	r2,9
    cb04:	11811436 	bltu	r2,r6,cf58 <_dtoa_r+0x730>
    cb08:	00800144 	movi	r2,5
    cb0c:	1184e10e 	bge	r2,r6,de94 <_dtoa_r+0x166c>
    cb10:	31bfff04 	addi	r6,r6,-4
    cb14:	d9800315 	stw	r6,12(sp)
    cb18:	0023883a 	mov	r17,zero
    cb1c:	d9800317 	ldw	r6,12(sp)
    cb20:	008000c4 	movi	r2,3
    cb24:	30836726 	beq	r6,r2,d8c4 <_dtoa_r+0x109c>
    cb28:	1183410e 	bge	r2,r6,d830 <_dtoa_r+0x1008>
    cb2c:	d9c00317 	ldw	r7,12(sp)
    cb30:	00800104 	movi	r2,4
    cb34:	38827c26 	beq	r7,r2,d528 <_dtoa_r+0xd00>
    cb38:	00800144 	movi	r2,5
    cb3c:	3884c41e 	bne	r7,r2,de50 <_dtoa_r+0x1628>
    cb40:	00800044 	movi	r2,1
    cb44:	d8800b15 	stw	r2,44(sp)
    cb48:	d8c00517 	ldw	r3,20(sp)
    cb4c:	d9002217 	ldw	r4,136(sp)
    cb50:	1907883a 	add	r3,r3,r4
    cb54:	19800044 	addi	r6,r3,1
    cb58:	d8c00c15 	stw	r3,48(sp)
    cb5c:	d9800615 	stw	r6,24(sp)
    cb60:	0183a40e 	bge	zero,r6,d9f4 <_dtoa_r+0x11cc>
    cb64:	d9800617 	ldw	r6,24(sp)
    cb68:	3021883a 	mov	r16,r6
    cb6c:	e0001115 	stw	zero,68(fp)
    cb70:	008005c4 	movi	r2,23
    cb74:	1184c92e 	bgeu	r2,r6,de9c <_dtoa_r+0x1674>
    cb78:	00c00044 	movi	r3,1
    cb7c:	00800104 	movi	r2,4
    cb80:	1085883a 	add	r2,r2,r2
    cb84:	11000504 	addi	r4,r2,20
    cb88:	180b883a 	mov	r5,r3
    cb8c:	18c00044 	addi	r3,r3,1
    cb90:	313ffb2e 	bgeu	r6,r4,cb80 <__alt_exception_stack_pointer+0xf800cb80>
    cb94:	e1401115 	stw	r5,68(fp)
    cb98:	e009883a 	mov	r4,fp
    cb9c:	001020c0 	call	1020c <_Balloc>
    cba0:	d8800715 	stw	r2,28(sp)
    cba4:	e0801015 	stw	r2,64(fp)
    cba8:	00800384 	movi	r2,14
    cbac:	1400f736 	bltu	r2,r16,cf8c <_dtoa_r+0x764>
    cbb0:	8800f626 	beq	r17,zero,cf8c <_dtoa_r+0x764>
    cbb4:	d9c00517 	ldw	r7,20(sp)
    cbb8:	01c39a0e 	bge	zero,r7,da24 <_dtoa_r+0x11fc>
    cbbc:	388003cc 	andi	r2,r7,15
    cbc0:	100490fa 	slli	r2,r2,3
    cbc4:	382bd13a 	srai	r21,r7,4
    cbc8:	00c000b4 	movhi	r3,2
    cbcc:	18e36504 	addi	r3,r3,-29292
    cbd0:	1885883a 	add	r2,r3,r2
    cbd4:	a8c0040c 	andi	r3,r21,16
    cbd8:	12400017 	ldw	r9,0(r2)
    cbdc:	12000117 	ldw	r8,4(r2)
    cbe0:	18037926 	beq	r3,zero,d9c8 <_dtoa_r+0x11a0>
    cbe4:	008000b4 	movhi	r2,2
    cbe8:	10a35b04 	addi	r2,r2,-29332
    cbec:	11800817 	ldw	r6,32(r2)
    cbf0:	11c00917 	ldw	r7,36(r2)
    cbf4:	9009883a 	mov	r4,r18
    cbf8:	980b883a 	mov	r5,r19
    cbfc:	da001715 	stw	r8,92(sp)
    cc00:	da401615 	stw	r9,88(sp)
    cc04:	00071bc0 	call	71bc <__divdf3>
    cc08:	da001717 	ldw	r8,92(sp)
    cc0c:	da401617 	ldw	r9,88(sp)
    cc10:	ad4003cc 	andi	r21,r21,15
    cc14:	040000c4 	movi	r16,3
    cc18:	1023883a 	mov	r17,r2
    cc1c:	1829883a 	mov	r20,r3
    cc20:	a8001126 	beq	r21,zero,cc68 <_dtoa_r+0x440>
    cc24:	05c000b4 	movhi	r23,2
    cc28:	bde35b04 	addi	r23,r23,-29332
    cc2c:	4805883a 	mov	r2,r9
    cc30:	4007883a 	mov	r3,r8
    cc34:	a980004c 	andi	r6,r21,1
    cc38:	1009883a 	mov	r4,r2
    cc3c:	a82bd07a 	srai	r21,r21,1
    cc40:	180b883a 	mov	r5,r3
    cc44:	30000426 	beq	r6,zero,cc58 <_dtoa_r+0x430>
    cc48:	b9800017 	ldw	r6,0(r23)
    cc4c:	b9c00117 	ldw	r7,4(r23)
    cc50:	84000044 	addi	r16,r16,1
    cc54:	0007de40 	call	7de4 <__muldf3>
    cc58:	bdc00204 	addi	r23,r23,8
    cc5c:	a83ff51e 	bne	r21,zero,cc34 <__alt_exception_stack_pointer+0xf800cc34>
    cc60:	1013883a 	mov	r9,r2
    cc64:	1811883a 	mov	r8,r3
    cc68:	480d883a 	mov	r6,r9
    cc6c:	400f883a 	mov	r7,r8
    cc70:	8809883a 	mov	r4,r17
    cc74:	a00b883a 	mov	r5,r20
    cc78:	00071bc0 	call	71bc <__divdf3>
    cc7c:	d8800f15 	stw	r2,60(sp)
    cc80:	d8c01015 	stw	r3,64(sp)
    cc84:	d8c00e17 	ldw	r3,56(sp)
    cc88:	18000626 	beq	r3,zero,cca4 <_dtoa_r+0x47c>
    cc8c:	d9000f17 	ldw	r4,60(sp)
    cc90:	d9401017 	ldw	r5,64(sp)
    cc94:	000d883a 	mov	r6,zero
    cc98:	01cffc34 	movhi	r7,16368
    cc9c:	0007cf00 	call	7cf0 <__ledf2>
    cca0:	10040b16 	blt	r2,zero,dcd0 <_dtoa_r+0x14a8>
    cca4:	8009883a 	mov	r4,r16
    cca8:	0008fcc0 	call	8fcc <__floatsidf>
    ccac:	d9800f17 	ldw	r6,60(sp)
    ccb0:	d9c01017 	ldw	r7,64(sp)
    ccb4:	1009883a 	mov	r4,r2
    ccb8:	180b883a 	mov	r5,r3
    ccbc:	0007de40 	call	7de4 <__muldf3>
    ccc0:	000d883a 	mov	r6,zero
    ccc4:	01d00734 	movhi	r7,16412
    ccc8:	1009883a 	mov	r4,r2
    cccc:	180b883a 	mov	r5,r3
    ccd0:	00069100 	call	6910 <__adddf3>
    ccd4:	1021883a 	mov	r16,r2
    ccd8:	d8800617 	ldw	r2,24(sp)
    ccdc:	047f3034 	movhi	r17,64704
    cce0:	1c63883a 	add	r17,r3,r17
    cce4:	10031826 	beq	r2,zero,d948 <_dtoa_r+0x1120>
    cce8:	d8c00517 	ldw	r3,20(sp)
    ccec:	db000617 	ldw	r12,24(sp)
    ccf0:	d8c01315 	stw	r3,76(sp)
    ccf4:	d9000b17 	ldw	r4,44(sp)
    ccf8:	20038f26 	beq	r4,zero,db38 <_dtoa_r+0x1310>
    ccfc:	60bfffc4 	addi	r2,r12,-1
    cd00:	100490fa 	slli	r2,r2,3
    cd04:	00c000b4 	movhi	r3,2
    cd08:	18e36504 	addi	r3,r3,-29292
    cd0c:	1885883a 	add	r2,r3,r2
    cd10:	11800017 	ldw	r6,0(r2)
    cd14:	11c00117 	ldw	r7,4(r2)
    cd18:	d8800717 	ldw	r2,28(sp)
    cd1c:	0009883a 	mov	r4,zero
    cd20:	014ff834 	movhi	r5,16352
    cd24:	db001615 	stw	r12,88(sp)
    cd28:	15c00044 	addi	r23,r2,1
    cd2c:	00071bc0 	call	71bc <__divdf3>
    cd30:	800d883a 	mov	r6,r16
    cd34:	880f883a 	mov	r7,r17
    cd38:	1009883a 	mov	r4,r2
    cd3c:	180b883a 	mov	r5,r3
    cd40:	00086500 	call	8650 <__subdf3>
    cd44:	d9401017 	ldw	r5,64(sp)
    cd48:	d9000f17 	ldw	r4,60(sp)
    cd4c:	102b883a 	mov	r21,r2
    cd50:	d8c01215 	stw	r3,72(sp)
    cd54:	0008f4c0 	call	8f4c <__fixdfsi>
    cd58:	1009883a 	mov	r4,r2
    cd5c:	1029883a 	mov	r20,r2
    cd60:	0008fcc0 	call	8fcc <__floatsidf>
    cd64:	d9000f17 	ldw	r4,60(sp)
    cd68:	d9401017 	ldw	r5,64(sp)
    cd6c:	100d883a 	mov	r6,r2
    cd70:	180f883a 	mov	r7,r3
    cd74:	00086500 	call	8650 <__subdf3>
    cd78:	1823883a 	mov	r17,r3
    cd7c:	d8c00717 	ldw	r3,28(sp)
    cd80:	d9401217 	ldw	r5,72(sp)
    cd84:	a2000c04 	addi	r8,r20,48
    cd88:	1021883a 	mov	r16,r2
    cd8c:	1a000005 	stb	r8,0(r3)
    cd90:	800d883a 	mov	r6,r16
    cd94:	880f883a 	mov	r7,r17
    cd98:	a809883a 	mov	r4,r21
    cd9c:	4029883a 	mov	r20,r8
    cda0:	0007c140 	call	7c14 <__gedf2>
    cda4:	00841d16 	blt	zero,r2,de1c <_dtoa_r+0x15f4>
    cda8:	800d883a 	mov	r6,r16
    cdac:	880f883a 	mov	r7,r17
    cdb0:	0009883a 	mov	r4,zero
    cdb4:	014ffc34 	movhi	r5,16368
    cdb8:	00086500 	call	8650 <__subdf3>
    cdbc:	d9401217 	ldw	r5,72(sp)
    cdc0:	100d883a 	mov	r6,r2
    cdc4:	180f883a 	mov	r7,r3
    cdc8:	a809883a 	mov	r4,r21
    cdcc:	0007c140 	call	7c14 <__gedf2>
    cdd0:	db001617 	ldw	r12,88(sp)
    cdd4:	00840e16 	blt	zero,r2,de10 <_dtoa_r+0x15e8>
    cdd8:	00800044 	movi	r2,1
    cddc:	13006b0e 	bge	r2,r12,cf8c <_dtoa_r+0x764>
    cde0:	d9000717 	ldw	r4,28(sp)
    cde4:	dd800f15 	stw	r22,60(sp)
    cde8:	dcc01015 	stw	r19,64(sp)
    cdec:	2319883a 	add	r12,r4,r12
    cdf0:	dcc01217 	ldw	r19,72(sp)
    cdf4:	602d883a 	mov	r22,r12
    cdf8:	dc801215 	stw	r18,72(sp)
    cdfc:	b825883a 	mov	r18,r23
    ce00:	00000906 	br	ce28 <_dtoa_r+0x600>
    ce04:	00086500 	call	8650 <__subdf3>
    ce08:	a80d883a 	mov	r6,r21
    ce0c:	980f883a 	mov	r7,r19
    ce10:	1009883a 	mov	r4,r2
    ce14:	180b883a 	mov	r5,r3
    ce18:	0007cf00 	call	7cf0 <__ledf2>
    ce1c:	1003e816 	blt	r2,zero,ddc0 <_dtoa_r+0x1598>
    ce20:	b825883a 	mov	r18,r23
    ce24:	bd83e926 	beq	r23,r22,ddcc <_dtoa_r+0x15a4>
    ce28:	a809883a 	mov	r4,r21
    ce2c:	980b883a 	mov	r5,r19
    ce30:	000d883a 	mov	r6,zero
    ce34:	01d00934 	movhi	r7,16420
    ce38:	0007de40 	call	7de4 <__muldf3>
    ce3c:	000d883a 	mov	r6,zero
    ce40:	01d00934 	movhi	r7,16420
    ce44:	8009883a 	mov	r4,r16
    ce48:	880b883a 	mov	r5,r17
    ce4c:	102b883a 	mov	r21,r2
    ce50:	1827883a 	mov	r19,r3
    ce54:	0007de40 	call	7de4 <__muldf3>
    ce58:	180b883a 	mov	r5,r3
    ce5c:	1009883a 	mov	r4,r2
    ce60:	1821883a 	mov	r16,r3
    ce64:	1023883a 	mov	r17,r2
    ce68:	0008f4c0 	call	8f4c <__fixdfsi>
    ce6c:	1009883a 	mov	r4,r2
    ce70:	1029883a 	mov	r20,r2
    ce74:	0008fcc0 	call	8fcc <__floatsidf>
    ce78:	8809883a 	mov	r4,r17
    ce7c:	800b883a 	mov	r5,r16
    ce80:	100d883a 	mov	r6,r2
    ce84:	180f883a 	mov	r7,r3
    ce88:	00086500 	call	8650 <__subdf3>
    ce8c:	a5000c04 	addi	r20,r20,48
    ce90:	a80d883a 	mov	r6,r21
    ce94:	980f883a 	mov	r7,r19
    ce98:	1009883a 	mov	r4,r2
    ce9c:	180b883a 	mov	r5,r3
    cea0:	95000005 	stb	r20,0(r18)
    cea4:	1021883a 	mov	r16,r2
    cea8:	1823883a 	mov	r17,r3
    ceac:	0007cf00 	call	7cf0 <__ledf2>
    ceb0:	bdc00044 	addi	r23,r23,1
    ceb4:	800d883a 	mov	r6,r16
    ceb8:	880f883a 	mov	r7,r17
    cebc:	0009883a 	mov	r4,zero
    cec0:	014ffc34 	movhi	r5,16368
    cec4:	103fcf0e 	bge	r2,zero,ce04 <__alt_exception_stack_pointer+0xf800ce04>
    cec8:	d8c01317 	ldw	r3,76(sp)
    cecc:	d8c00515 	stw	r3,20(sp)
    ced0:	d9400917 	ldw	r5,36(sp)
    ced4:	e009883a 	mov	r4,fp
    ced8:	00102b40 	call	102b4 <_Bfree>
    cedc:	d9000517 	ldw	r4,20(sp)
    cee0:	d9802317 	ldw	r6,140(sp)
    cee4:	d9c02517 	ldw	r7,148(sp)
    cee8:	b8000005 	stb	zero,0(r23)
    ceec:	20800044 	addi	r2,r4,1
    cef0:	30800015 	stw	r2,0(r6)
    cef4:	3802aa26 	beq	r7,zero,d9a0 <_dtoa_r+0x1178>
    cef8:	3dc00015 	stw	r23,0(r7)
    cefc:	d8800717 	ldw	r2,28(sp)
    cf00:	003e7906 	br	c8e8 <__alt_exception_stack_pointer+0xf800c8e8>
    cf04:	00800434 	movhi	r2,16
    cf08:	10bfffc4 	addi	r2,r2,-1
    cf0c:	88a2703a 	and	r17,r17,r2
    cf10:	883e851e 	bne	r17,zero,c928 <__alt_exception_stack_pointer+0xf800c928>
    cf14:	008000b4 	movhi	r2,2
    cf18:	10a34704 	addi	r2,r2,-29412
    cf1c:	003e8406 	br	c930 <__alt_exception_stack_pointer+0xf800c930>
    cf20:	10c00204 	addi	r3,r2,8
    cf24:	003e8706 	br	c944 <__alt_exception_stack_pointer+0xf800c944>
    cf28:	01400434 	movhi	r5,16
    cf2c:	297fffc4 	addi	r5,r5,-1
    cf30:	994a703a 	and	r5,r19,r5
    cf34:	9009883a 	mov	r4,r18
    cf38:	843f0044 	addi	r16,r16,-1023
    cf3c:	294ffc34 	orhi	r5,r5,16368
    cf40:	dd800217 	ldw	r22,8(sp)
    cf44:	d8001115 	stw	zero,68(sp)
    cf48:	003ea506 	br	c9e0 <__alt_exception_stack_pointer+0xf800c9e0>
    cf4c:	008000b4 	movhi	r2,2
    cf50:	10a33e04 	addi	r2,r2,-29448
    cf54:	003e6406 	br	c8e8 <__alt_exception_stack_pointer+0xf800c8e8>
    cf58:	e0001115 	stw	zero,68(fp)
    cf5c:	000b883a 	mov	r5,zero
    cf60:	e009883a 	mov	r4,fp
    cf64:	001020c0 	call	1020c <_Balloc>
    cf68:	01bfffc4 	movi	r6,-1
    cf6c:	01c00044 	movi	r7,1
    cf70:	d8800715 	stw	r2,28(sp)
    cf74:	d9800c15 	stw	r6,48(sp)
    cf78:	e0801015 	stw	r2,64(fp)
    cf7c:	d8000315 	stw	zero,12(sp)
    cf80:	d9c00b15 	stw	r7,44(sp)
    cf84:	d9800615 	stw	r6,24(sp)
    cf88:	d8002215 	stw	zero,136(sp)
    cf8c:	d8800117 	ldw	r2,4(sp)
    cf90:	10008916 	blt	r2,zero,d1b8 <_dtoa_r+0x990>
    cf94:	d9000517 	ldw	r4,20(sp)
    cf98:	00c00384 	movi	r3,14
    cf9c:	19008616 	blt	r3,r4,d1b8 <_dtoa_r+0x990>
    cfa0:	200490fa 	slli	r2,r4,3
    cfa4:	00c000b4 	movhi	r3,2
    cfa8:	d9802217 	ldw	r6,136(sp)
    cfac:	18e36504 	addi	r3,r3,-29292
    cfb0:	1885883a 	add	r2,r3,r2
    cfb4:	14000017 	ldw	r16,0(r2)
    cfb8:	14400117 	ldw	r17,4(r2)
    cfbc:	30016316 	blt	r6,zero,d54c <_dtoa_r+0xd24>
    cfc0:	800d883a 	mov	r6,r16
    cfc4:	880f883a 	mov	r7,r17
    cfc8:	9009883a 	mov	r4,r18
    cfcc:	980b883a 	mov	r5,r19
    cfd0:	00071bc0 	call	71bc <__divdf3>
    cfd4:	180b883a 	mov	r5,r3
    cfd8:	1009883a 	mov	r4,r2
    cfdc:	0008f4c0 	call	8f4c <__fixdfsi>
    cfe0:	1009883a 	mov	r4,r2
    cfe4:	102b883a 	mov	r21,r2
    cfe8:	0008fcc0 	call	8fcc <__floatsidf>
    cfec:	800d883a 	mov	r6,r16
    cff0:	880f883a 	mov	r7,r17
    cff4:	1009883a 	mov	r4,r2
    cff8:	180b883a 	mov	r5,r3
    cffc:	0007de40 	call	7de4 <__muldf3>
    d000:	100d883a 	mov	r6,r2
    d004:	180f883a 	mov	r7,r3
    d008:	9009883a 	mov	r4,r18
    d00c:	980b883a 	mov	r5,r19
    d010:	00086500 	call	8650 <__subdf3>
    d014:	d9c00717 	ldw	r7,28(sp)
    d018:	1009883a 	mov	r4,r2
    d01c:	a8800c04 	addi	r2,r21,48
    d020:	38800005 	stb	r2,0(r7)
    d024:	3dc00044 	addi	r23,r7,1
    d028:	d9c00617 	ldw	r7,24(sp)
    d02c:	01800044 	movi	r6,1
    d030:	180b883a 	mov	r5,r3
    d034:	2005883a 	mov	r2,r4
    d038:	39803826 	beq	r7,r6,d11c <_dtoa_r+0x8f4>
    d03c:	000d883a 	mov	r6,zero
    d040:	01d00934 	movhi	r7,16420
    d044:	0007de40 	call	7de4 <__muldf3>
    d048:	000d883a 	mov	r6,zero
    d04c:	000f883a 	mov	r7,zero
    d050:	1009883a 	mov	r4,r2
    d054:	180b883a 	mov	r5,r3
    d058:	1025883a 	mov	r18,r2
    d05c:	1827883a 	mov	r19,r3
    d060:	0007b8c0 	call	7b8c <__eqdf2>
    d064:	103f9a26 	beq	r2,zero,ced0 <__alt_exception_stack_pointer+0xf800ced0>
    d068:	d9c00617 	ldw	r7,24(sp)
    d06c:	d8c00717 	ldw	r3,28(sp)
    d070:	b829883a 	mov	r20,r23
    d074:	38bfffc4 	addi	r2,r7,-1
    d078:	18ad883a 	add	r22,r3,r2
    d07c:	00000a06 	br	d0a8 <_dtoa_r+0x880>
    d080:	0007de40 	call	7de4 <__muldf3>
    d084:	000d883a 	mov	r6,zero
    d088:	000f883a 	mov	r7,zero
    d08c:	1009883a 	mov	r4,r2
    d090:	180b883a 	mov	r5,r3
    d094:	1025883a 	mov	r18,r2
    d098:	1827883a 	mov	r19,r3
    d09c:	b829883a 	mov	r20,r23
    d0a0:	0007b8c0 	call	7b8c <__eqdf2>
    d0a4:	103f8a26 	beq	r2,zero,ced0 <__alt_exception_stack_pointer+0xf800ced0>
    d0a8:	800d883a 	mov	r6,r16
    d0ac:	880f883a 	mov	r7,r17
    d0b0:	9009883a 	mov	r4,r18
    d0b4:	980b883a 	mov	r5,r19
    d0b8:	00071bc0 	call	71bc <__divdf3>
    d0bc:	180b883a 	mov	r5,r3
    d0c0:	1009883a 	mov	r4,r2
    d0c4:	0008f4c0 	call	8f4c <__fixdfsi>
    d0c8:	1009883a 	mov	r4,r2
    d0cc:	102b883a 	mov	r21,r2
    d0d0:	0008fcc0 	call	8fcc <__floatsidf>
    d0d4:	800d883a 	mov	r6,r16
    d0d8:	880f883a 	mov	r7,r17
    d0dc:	1009883a 	mov	r4,r2
    d0e0:	180b883a 	mov	r5,r3
    d0e4:	0007de40 	call	7de4 <__muldf3>
    d0e8:	100d883a 	mov	r6,r2
    d0ec:	180f883a 	mov	r7,r3
    d0f0:	9009883a 	mov	r4,r18
    d0f4:	980b883a 	mov	r5,r19
    d0f8:	00086500 	call	8650 <__subdf3>
    d0fc:	aa000c04 	addi	r8,r21,48
    d100:	a2000005 	stb	r8,0(r20)
    d104:	000d883a 	mov	r6,zero
    d108:	01d00934 	movhi	r7,16420
    d10c:	1009883a 	mov	r4,r2
    d110:	180b883a 	mov	r5,r3
    d114:	a5c00044 	addi	r23,r20,1
    d118:	b53fd91e 	bne	r22,r20,d080 <__alt_exception_stack_pointer+0xf800d080>
    d11c:	100d883a 	mov	r6,r2
    d120:	180f883a 	mov	r7,r3
    d124:	1009883a 	mov	r4,r2
    d128:	180b883a 	mov	r5,r3
    d12c:	00069100 	call	6910 <__adddf3>
    d130:	100d883a 	mov	r6,r2
    d134:	180f883a 	mov	r7,r3
    d138:	8009883a 	mov	r4,r16
    d13c:	880b883a 	mov	r5,r17
    d140:	1027883a 	mov	r19,r2
    d144:	1825883a 	mov	r18,r3
    d148:	0007cf00 	call	7cf0 <__ledf2>
    d14c:	10000816 	blt	r2,zero,d170 <_dtoa_r+0x948>
    d150:	980d883a 	mov	r6,r19
    d154:	900f883a 	mov	r7,r18
    d158:	8009883a 	mov	r4,r16
    d15c:	880b883a 	mov	r5,r17
    d160:	0007b8c0 	call	7b8c <__eqdf2>
    d164:	103f5a1e 	bne	r2,zero,ced0 <__alt_exception_stack_pointer+0xf800ced0>
    d168:	ad40004c 	andi	r21,r21,1
    d16c:	a83f5826 	beq	r21,zero,ced0 <__alt_exception_stack_pointer+0xf800ced0>
    d170:	bd3fffc3 	ldbu	r20,-1(r23)
    d174:	b8bfffc4 	addi	r2,r23,-1
    d178:	1007883a 	mov	r3,r2
    d17c:	01400e44 	movi	r5,57
    d180:	d9800717 	ldw	r6,28(sp)
    d184:	00000506 	br	d19c <_dtoa_r+0x974>
    d188:	18ffffc4 	addi	r3,r3,-1
    d18c:	11824726 	beq	r2,r6,daac <_dtoa_r+0x1284>
    d190:	1d000003 	ldbu	r20,0(r3)
    d194:	102f883a 	mov	r23,r2
    d198:	10bfffc4 	addi	r2,r2,-1
    d19c:	a1003fcc 	andi	r4,r20,255
    d1a0:	2100201c 	xori	r4,r4,128
    d1a4:	213fe004 	addi	r4,r4,-128
    d1a8:	217ff726 	beq	r4,r5,d188 <__alt_exception_stack_pointer+0xf800d188>
    d1ac:	a2000044 	addi	r8,r20,1
    d1b0:	12000005 	stb	r8,0(r2)
    d1b4:	003f4606 	br	ced0 <__alt_exception_stack_pointer+0xf800ced0>
    d1b8:	d9000b17 	ldw	r4,44(sp)
    d1bc:	2000c826 	beq	r4,zero,d4e0 <_dtoa_r+0xcb8>
    d1c0:	d9800317 	ldw	r6,12(sp)
    d1c4:	00c00044 	movi	r3,1
    d1c8:	1980f90e 	bge	r3,r6,d5b0 <_dtoa_r+0xd88>
    d1cc:	d8800617 	ldw	r2,24(sp)
    d1d0:	d8c00a17 	ldw	r3,40(sp)
    d1d4:	157fffc4 	addi	r21,r2,-1
    d1d8:	1d41f316 	blt	r3,r21,d9a8 <_dtoa_r+0x1180>
    d1dc:	1d6bc83a 	sub	r21,r3,r21
    d1e0:	d9c00617 	ldw	r7,24(sp)
    d1e4:	3802aa16 	blt	r7,zero,dc90 <_dtoa_r+0x1468>
    d1e8:	dd000817 	ldw	r20,32(sp)
    d1ec:	d8800617 	ldw	r2,24(sp)
    d1f0:	d8c00817 	ldw	r3,32(sp)
    d1f4:	01400044 	movi	r5,1
    d1f8:	e009883a 	mov	r4,fp
    d1fc:	1887883a 	add	r3,r3,r2
    d200:	d8c00815 	stw	r3,32(sp)
    d204:	b0ad883a 	add	r22,r22,r2
    d208:	00106400 	call	10640 <__i2b>
    d20c:	1023883a 	mov	r17,r2
    d210:	a0000826 	beq	r20,zero,d234 <_dtoa_r+0xa0c>
    d214:	0580070e 	bge	zero,r22,d234 <_dtoa_r+0xa0c>
    d218:	a005883a 	mov	r2,r20
    d21c:	b500b916 	blt	r22,r20,d504 <_dtoa_r+0xcdc>
    d220:	d9000817 	ldw	r4,32(sp)
    d224:	a0a9c83a 	sub	r20,r20,r2
    d228:	b0adc83a 	sub	r22,r22,r2
    d22c:	2089c83a 	sub	r4,r4,r2
    d230:	d9000815 	stw	r4,32(sp)
    d234:	d9800a17 	ldw	r6,40(sp)
    d238:	0181810e 	bge	zero,r6,d840 <_dtoa_r+0x1018>
    d23c:	d9c00b17 	ldw	r7,44(sp)
    d240:	3800b326 	beq	r7,zero,d510 <_dtoa_r+0xce8>
    d244:	a800b226 	beq	r21,zero,d510 <_dtoa_r+0xce8>
    d248:	880b883a 	mov	r5,r17
    d24c:	a80d883a 	mov	r6,r21
    d250:	e009883a 	mov	r4,fp
    d254:	00109080 	call	10908 <__pow5mult>
    d258:	d9800917 	ldw	r6,36(sp)
    d25c:	100b883a 	mov	r5,r2
    d260:	e009883a 	mov	r4,fp
    d264:	1023883a 	mov	r17,r2
    d268:	001067c0 	call	1067c <__multiply>
    d26c:	1021883a 	mov	r16,r2
    d270:	d8800a17 	ldw	r2,40(sp)
    d274:	d9400917 	ldw	r5,36(sp)
    d278:	e009883a 	mov	r4,fp
    d27c:	1545c83a 	sub	r2,r2,r21
    d280:	d8800a15 	stw	r2,40(sp)
    d284:	00102b40 	call	102b4 <_Bfree>
    d288:	d8c00a17 	ldw	r3,40(sp)
    d28c:	18009f1e 	bne	r3,zero,d50c <_dtoa_r+0xce4>
    d290:	05c00044 	movi	r23,1
    d294:	e009883a 	mov	r4,fp
    d298:	b80b883a 	mov	r5,r23
    d29c:	00106400 	call	10640 <__i2b>
    d2a0:	d9000d17 	ldw	r4,52(sp)
    d2a4:	102b883a 	mov	r21,r2
    d2a8:	2000ce26 	beq	r4,zero,d5e4 <_dtoa_r+0xdbc>
    d2ac:	200d883a 	mov	r6,r4
    d2b0:	100b883a 	mov	r5,r2
    d2b4:	e009883a 	mov	r4,fp
    d2b8:	00109080 	call	10908 <__pow5mult>
    d2bc:	d9800317 	ldw	r6,12(sp)
    d2c0:	102b883a 	mov	r21,r2
    d2c4:	b981810e 	bge	r23,r6,d8cc <_dtoa_r+0x10a4>
    d2c8:	0027883a 	mov	r19,zero
    d2cc:	a8800417 	ldw	r2,16(r21)
    d2d0:	05c00804 	movi	r23,32
    d2d4:	10800104 	addi	r2,r2,4
    d2d8:	1085883a 	add	r2,r2,r2
    d2dc:	1085883a 	add	r2,r2,r2
    d2e0:	a885883a 	add	r2,r21,r2
    d2e4:	11000017 	ldw	r4,0(r2)
    d2e8:	00105280 	call	10528 <__hi0bits>
    d2ec:	b885c83a 	sub	r2,r23,r2
    d2f0:	1585883a 	add	r2,r2,r22
    d2f4:	108007cc 	andi	r2,r2,31
    d2f8:	1000b326 	beq	r2,zero,d5c8 <_dtoa_r+0xda0>
    d2fc:	00c00804 	movi	r3,32
    d300:	1887c83a 	sub	r3,r3,r2
    d304:	01000104 	movi	r4,4
    d308:	20c2cd0e 	bge	r4,r3,de40 <_dtoa_r+0x1618>
    d30c:	00c00704 	movi	r3,28
    d310:	1885c83a 	sub	r2,r3,r2
    d314:	d8c00817 	ldw	r3,32(sp)
    d318:	a0a9883a 	add	r20,r20,r2
    d31c:	b0ad883a 	add	r22,r22,r2
    d320:	1887883a 	add	r3,r3,r2
    d324:	d8c00815 	stw	r3,32(sp)
    d328:	d9800817 	ldw	r6,32(sp)
    d32c:	0180040e 	bge	zero,r6,d340 <_dtoa_r+0xb18>
    d330:	800b883a 	mov	r5,r16
    d334:	e009883a 	mov	r4,fp
    d338:	0010a480 	call	10a48 <__lshift>
    d33c:	1021883a 	mov	r16,r2
    d340:	0580050e 	bge	zero,r22,d358 <_dtoa_r+0xb30>
    d344:	a80b883a 	mov	r5,r21
    d348:	b00d883a 	mov	r6,r22
    d34c:	e009883a 	mov	r4,fp
    d350:	0010a480 	call	10a48 <__lshift>
    d354:	102b883a 	mov	r21,r2
    d358:	d9c00e17 	ldw	r7,56(sp)
    d35c:	3801211e 	bne	r7,zero,d7e4 <_dtoa_r+0xfbc>
    d360:	d9800617 	ldw	r6,24(sp)
    d364:	0181380e 	bge	zero,r6,d848 <_dtoa_r+0x1020>
    d368:	d8c00b17 	ldw	r3,44(sp)
    d36c:	1800ab1e 	bne	r3,zero,d61c <_dtoa_r+0xdf4>
    d370:	dc800717 	ldw	r18,28(sp)
    d374:	dcc00617 	ldw	r19,24(sp)
    d378:	9029883a 	mov	r20,r18
    d37c:	00000206 	br	d388 <_dtoa_r+0xb60>
    d380:	00102dc0 	call	102dc <__multadd>
    d384:	1021883a 	mov	r16,r2
    d388:	a80b883a 	mov	r5,r21
    d38c:	8009883a 	mov	r4,r16
    d390:	000c6000 	call	c600 <quorem>
    d394:	10800c04 	addi	r2,r2,48
    d398:	90800005 	stb	r2,0(r18)
    d39c:	94800044 	addi	r18,r18,1
    d3a0:	9507c83a 	sub	r3,r18,r20
    d3a4:	000f883a 	mov	r7,zero
    d3a8:	01800284 	movi	r6,10
    d3ac:	800b883a 	mov	r5,r16
    d3b0:	e009883a 	mov	r4,fp
    d3b4:	1cfff216 	blt	r3,r19,d380 <__alt_exception_stack_pointer+0xf800d380>
    d3b8:	1011883a 	mov	r8,r2
    d3bc:	d8800617 	ldw	r2,24(sp)
    d3c0:	0082370e 	bge	zero,r2,dca0 <_dtoa_r+0x1478>
    d3c4:	d9000717 	ldw	r4,28(sp)
    d3c8:	0025883a 	mov	r18,zero
    d3cc:	20af883a 	add	r23,r4,r2
    d3d0:	01800044 	movi	r6,1
    d3d4:	800b883a 	mov	r5,r16
    d3d8:	e009883a 	mov	r4,fp
    d3dc:	da001715 	stw	r8,92(sp)
    d3e0:	0010a480 	call	10a48 <__lshift>
    d3e4:	a80b883a 	mov	r5,r21
    d3e8:	1009883a 	mov	r4,r2
    d3ec:	d8800915 	stw	r2,36(sp)
    d3f0:	0010b900 	call	10b90 <__mcmp>
    d3f4:	da001717 	ldw	r8,92(sp)
    d3f8:	0081800e 	bge	zero,r2,d9fc <_dtoa_r+0x11d4>
    d3fc:	b93fffc3 	ldbu	r4,-1(r23)
    d400:	b8bfffc4 	addi	r2,r23,-1
    d404:	1007883a 	mov	r3,r2
    d408:	01800e44 	movi	r6,57
    d40c:	d9c00717 	ldw	r7,28(sp)
    d410:	00000506 	br	d428 <_dtoa_r+0xc00>
    d414:	18ffffc4 	addi	r3,r3,-1
    d418:	11c12326 	beq	r2,r7,d8a8 <_dtoa_r+0x1080>
    d41c:	19000003 	ldbu	r4,0(r3)
    d420:	102f883a 	mov	r23,r2
    d424:	10bfffc4 	addi	r2,r2,-1
    d428:	21403fcc 	andi	r5,r4,255
    d42c:	2940201c 	xori	r5,r5,128
    d430:	297fe004 	addi	r5,r5,-128
    d434:	29bff726 	beq	r5,r6,d414 <__alt_exception_stack_pointer+0xf800d414>
    d438:	21000044 	addi	r4,r4,1
    d43c:	11000005 	stb	r4,0(r2)
    d440:	a80b883a 	mov	r5,r21
    d444:	e009883a 	mov	r4,fp
    d448:	00102b40 	call	102b4 <_Bfree>
    d44c:	883ea026 	beq	r17,zero,ced0 <__alt_exception_stack_pointer+0xf800ced0>
    d450:	90000426 	beq	r18,zero,d464 <_dtoa_r+0xc3c>
    d454:	94400326 	beq	r18,r17,d464 <_dtoa_r+0xc3c>
    d458:	900b883a 	mov	r5,r18
    d45c:	e009883a 	mov	r4,fp
    d460:	00102b40 	call	102b4 <_Bfree>
    d464:	880b883a 	mov	r5,r17
    d468:	e009883a 	mov	r4,fp
    d46c:	00102b40 	call	102b4 <_Bfree>
    d470:	003e9706 	br	ced0 <__alt_exception_stack_pointer+0xf800ced0>
    d474:	01800044 	movi	r6,1
    d478:	d9800e15 	stw	r6,56(sp)
    d47c:	003d9606 	br	cad8 <__alt_exception_stack_pointer+0xf800cad8>
    d480:	d8800817 	ldw	r2,32(sp)
    d484:	d8c00517 	ldw	r3,20(sp)
    d488:	d8000d15 	stw	zero,52(sp)
    d48c:	10c5c83a 	sub	r2,r2,r3
    d490:	00c9c83a 	sub	r4,zero,r3
    d494:	d8800815 	stw	r2,32(sp)
    d498:	d9000a15 	stw	r4,40(sp)
    d49c:	003d9706 	br	cafc <__alt_exception_stack_pointer+0xf800cafc>
    d4a0:	05adc83a 	sub	r22,zero,r22
    d4a4:	dd800815 	stw	r22,32(sp)
    d4a8:	002d883a 	mov	r22,zero
    d4ac:	003d8e06 	br	cae8 <__alt_exception_stack_pointer+0xf800cae8>
    d4b0:	d9000517 	ldw	r4,20(sp)
    d4b4:	0008fcc0 	call	8fcc <__floatsidf>
    d4b8:	100d883a 	mov	r6,r2
    d4bc:	180f883a 	mov	r7,r3
    d4c0:	a009883a 	mov	r4,r20
    d4c4:	880b883a 	mov	r5,r17
    d4c8:	0007b8c0 	call	7b8c <__eqdf2>
    d4cc:	103d7126 	beq	r2,zero,ca94 <__alt_exception_stack_pointer+0xf800ca94>
    d4d0:	d9c00517 	ldw	r7,20(sp)
    d4d4:	39ffffc4 	addi	r7,r7,-1
    d4d8:	d9c00515 	stw	r7,20(sp)
    d4dc:	003d6d06 	br	ca94 <__alt_exception_stack_pointer+0xf800ca94>
    d4e0:	dd400a17 	ldw	r21,40(sp)
    d4e4:	dd000817 	ldw	r20,32(sp)
    d4e8:	0023883a 	mov	r17,zero
    d4ec:	003f4806 	br	d210 <__alt_exception_stack_pointer+0xf800d210>
    d4f0:	10e3c83a 	sub	r17,r2,r3
    d4f4:	9448983a 	sll	r4,r18,r17
    d4f8:	003d3206 	br	c9c4 <__alt_exception_stack_pointer+0xf800c9c4>
    d4fc:	d8000e15 	stw	zero,56(sp)
    d500:	003d7506 	br	cad8 <__alt_exception_stack_pointer+0xf800cad8>
    d504:	b005883a 	mov	r2,r22
    d508:	003f4506 	br	d220 <__alt_exception_stack_pointer+0xf800d220>
    d50c:	dc000915 	stw	r16,36(sp)
    d510:	d9800a17 	ldw	r6,40(sp)
    d514:	d9400917 	ldw	r5,36(sp)
    d518:	e009883a 	mov	r4,fp
    d51c:	00109080 	call	10908 <__pow5mult>
    d520:	1021883a 	mov	r16,r2
    d524:	003f5a06 	br	d290 <__alt_exception_stack_pointer+0xf800d290>
    d528:	01c00044 	movi	r7,1
    d52c:	d9c00b15 	stw	r7,44(sp)
    d530:	d8802217 	ldw	r2,136(sp)
    d534:	0081280e 	bge	zero,r2,d9d8 <_dtoa_r+0x11b0>
    d538:	100d883a 	mov	r6,r2
    d53c:	1021883a 	mov	r16,r2
    d540:	d8800c15 	stw	r2,48(sp)
    d544:	d8800615 	stw	r2,24(sp)
    d548:	003d8806 	br	cb6c <__alt_exception_stack_pointer+0xf800cb6c>
    d54c:	d8800617 	ldw	r2,24(sp)
    d550:	00be9b16 	blt	zero,r2,cfc0 <__alt_exception_stack_pointer+0xf800cfc0>
    d554:	10010f1e 	bne	r2,zero,d994 <_dtoa_r+0x116c>
    d558:	880b883a 	mov	r5,r17
    d55c:	000d883a 	mov	r6,zero
    d560:	01d00534 	movhi	r7,16404
    d564:	8009883a 	mov	r4,r16
    d568:	0007de40 	call	7de4 <__muldf3>
    d56c:	900d883a 	mov	r6,r18
    d570:	980f883a 	mov	r7,r19
    d574:	1009883a 	mov	r4,r2
    d578:	180b883a 	mov	r5,r3
    d57c:	0007c140 	call	7c14 <__gedf2>
    d580:	002b883a 	mov	r21,zero
    d584:	0023883a 	mov	r17,zero
    d588:	1000bf16 	blt	r2,zero,d888 <_dtoa_r+0x1060>
    d58c:	d9802217 	ldw	r6,136(sp)
    d590:	ddc00717 	ldw	r23,28(sp)
    d594:	018c303a 	nor	r6,zero,r6
    d598:	d9800515 	stw	r6,20(sp)
    d59c:	a80b883a 	mov	r5,r21
    d5a0:	e009883a 	mov	r4,fp
    d5a4:	00102b40 	call	102b4 <_Bfree>
    d5a8:	883e4926 	beq	r17,zero,ced0 <__alt_exception_stack_pointer+0xf800ced0>
    d5ac:	003fad06 	br	d464 <__alt_exception_stack_pointer+0xf800d464>
    d5b0:	d9c01117 	ldw	r7,68(sp)
    d5b4:	3801bc26 	beq	r7,zero,dca8 <_dtoa_r+0x1480>
    d5b8:	10810cc4 	addi	r2,r2,1075
    d5bc:	dd400a17 	ldw	r21,40(sp)
    d5c0:	dd000817 	ldw	r20,32(sp)
    d5c4:	003f0a06 	br	d1f0 <__alt_exception_stack_pointer+0xf800d1f0>
    d5c8:	00800704 	movi	r2,28
    d5cc:	d9000817 	ldw	r4,32(sp)
    d5d0:	a0a9883a 	add	r20,r20,r2
    d5d4:	b0ad883a 	add	r22,r22,r2
    d5d8:	2089883a 	add	r4,r4,r2
    d5dc:	d9000815 	stw	r4,32(sp)
    d5e0:	003f5106 	br	d328 <__alt_exception_stack_pointer+0xf800d328>
    d5e4:	d8c00317 	ldw	r3,12(sp)
    d5e8:	b8c1fc0e 	bge	r23,r3,dddc <_dtoa_r+0x15b4>
    d5ec:	0027883a 	mov	r19,zero
    d5f0:	b805883a 	mov	r2,r23
    d5f4:	003f3e06 	br	d2f0 <__alt_exception_stack_pointer+0xf800d2f0>
    d5f8:	880b883a 	mov	r5,r17
    d5fc:	e009883a 	mov	r4,fp
    d600:	000f883a 	mov	r7,zero
    d604:	01800284 	movi	r6,10
    d608:	00102dc0 	call	102dc <__multadd>
    d60c:	d9000c17 	ldw	r4,48(sp)
    d610:	1023883a 	mov	r17,r2
    d614:	0102040e 	bge	zero,r4,de28 <_dtoa_r+0x1600>
    d618:	d9000615 	stw	r4,24(sp)
    d61c:	0500050e 	bge	zero,r20,d634 <_dtoa_r+0xe0c>
    d620:	880b883a 	mov	r5,r17
    d624:	a00d883a 	mov	r6,r20
    d628:	e009883a 	mov	r4,fp
    d62c:	0010a480 	call	10a48 <__lshift>
    d630:	1023883a 	mov	r17,r2
    d634:	9801241e 	bne	r19,zero,dac8 <_dtoa_r+0x12a0>
    d638:	8829883a 	mov	r20,r17
    d63c:	d9000617 	ldw	r4,24(sp)
    d640:	dcc00717 	ldw	r19,28(sp)
    d644:	9480004c 	andi	r18,r18,1
    d648:	20bfffc4 	addi	r2,r4,-1
    d64c:	9885883a 	add	r2,r19,r2
    d650:	d8800415 	stw	r2,16(sp)
    d654:	dc800615 	stw	r18,24(sp)
    d658:	a80b883a 	mov	r5,r21
    d65c:	8009883a 	mov	r4,r16
    d660:	000c6000 	call	c600 <quorem>
    d664:	880b883a 	mov	r5,r17
    d668:	8009883a 	mov	r4,r16
    d66c:	102f883a 	mov	r23,r2
    d670:	0010b900 	call	10b90 <__mcmp>
    d674:	a80b883a 	mov	r5,r21
    d678:	a00d883a 	mov	r6,r20
    d67c:	e009883a 	mov	r4,fp
    d680:	102d883a 	mov	r22,r2
    d684:	0010bf00 	call	10bf0 <__mdiff>
    d688:	1007883a 	mov	r3,r2
    d68c:	10800317 	ldw	r2,12(r2)
    d690:	bc800c04 	addi	r18,r23,48
    d694:	180b883a 	mov	r5,r3
    d698:	10004e1e 	bne	r2,zero,d7d4 <_dtoa_r+0xfac>
    d69c:	8009883a 	mov	r4,r16
    d6a0:	d8c01615 	stw	r3,88(sp)
    d6a4:	0010b900 	call	10b90 <__mcmp>
    d6a8:	d8c01617 	ldw	r3,88(sp)
    d6ac:	e009883a 	mov	r4,fp
    d6b0:	d8801615 	stw	r2,88(sp)
    d6b4:	180b883a 	mov	r5,r3
    d6b8:	00102b40 	call	102b4 <_Bfree>
    d6bc:	d8801617 	ldw	r2,88(sp)
    d6c0:	1000041e 	bne	r2,zero,d6d4 <_dtoa_r+0xeac>
    d6c4:	d9800317 	ldw	r6,12(sp)
    d6c8:	3000021e 	bne	r6,zero,d6d4 <_dtoa_r+0xeac>
    d6cc:	d8c00617 	ldw	r3,24(sp)
    d6d0:	18003726 	beq	r3,zero,d7b0 <_dtoa_r+0xf88>
    d6d4:	b0002016 	blt	r22,zero,d758 <_dtoa_r+0xf30>
    d6d8:	b000041e 	bne	r22,zero,d6ec <_dtoa_r+0xec4>
    d6dc:	d9000317 	ldw	r4,12(sp)
    d6e0:	2000021e 	bne	r4,zero,d6ec <_dtoa_r+0xec4>
    d6e4:	d8c00617 	ldw	r3,24(sp)
    d6e8:	18001b26 	beq	r3,zero,d758 <_dtoa_r+0xf30>
    d6ec:	00810716 	blt	zero,r2,db0c <_dtoa_r+0x12e4>
    d6f0:	d8c00417 	ldw	r3,16(sp)
    d6f4:	9d800044 	addi	r22,r19,1
    d6f8:	9c800005 	stb	r18,0(r19)
    d6fc:	b02f883a 	mov	r23,r22
    d700:	98c10626 	beq	r19,r3,db1c <_dtoa_r+0x12f4>
    d704:	800b883a 	mov	r5,r16
    d708:	000f883a 	mov	r7,zero
    d70c:	01800284 	movi	r6,10
    d710:	e009883a 	mov	r4,fp
    d714:	00102dc0 	call	102dc <__multadd>
    d718:	1021883a 	mov	r16,r2
    d71c:	000f883a 	mov	r7,zero
    d720:	01800284 	movi	r6,10
    d724:	880b883a 	mov	r5,r17
    d728:	e009883a 	mov	r4,fp
    d72c:	8d002526 	beq	r17,r20,d7c4 <_dtoa_r+0xf9c>
    d730:	00102dc0 	call	102dc <__multadd>
    d734:	a00b883a 	mov	r5,r20
    d738:	000f883a 	mov	r7,zero
    d73c:	01800284 	movi	r6,10
    d740:	e009883a 	mov	r4,fp
    d744:	1023883a 	mov	r17,r2
    d748:	00102dc0 	call	102dc <__multadd>
    d74c:	1029883a 	mov	r20,r2
    d750:	b027883a 	mov	r19,r22
    d754:	003fc006 	br	d658 <__alt_exception_stack_pointer+0xf800d658>
    d758:	9011883a 	mov	r8,r18
    d75c:	00800e0e 	bge	zero,r2,d798 <_dtoa_r+0xf70>
    d760:	800b883a 	mov	r5,r16
    d764:	01800044 	movi	r6,1
    d768:	e009883a 	mov	r4,fp
    d76c:	da001715 	stw	r8,92(sp)
    d770:	0010a480 	call	10a48 <__lshift>
    d774:	a80b883a 	mov	r5,r21
    d778:	1009883a 	mov	r4,r2
    d77c:	1021883a 	mov	r16,r2
    d780:	0010b900 	call	10b90 <__mcmp>
    d784:	da001717 	ldw	r8,92(sp)
    d788:	0081960e 	bge	zero,r2,dde4 <_dtoa_r+0x15bc>
    d78c:	00800e44 	movi	r2,57
    d790:	40817026 	beq	r8,r2,dd54 <_dtoa_r+0x152c>
    d794:	ba000c44 	addi	r8,r23,49
    d798:	8825883a 	mov	r18,r17
    d79c:	9dc00044 	addi	r23,r19,1
    d7a0:	9a000005 	stb	r8,0(r19)
    d7a4:	a023883a 	mov	r17,r20
    d7a8:	dc000915 	stw	r16,36(sp)
    d7ac:	003f2406 	br	d440 <__alt_exception_stack_pointer+0xf800d440>
    d7b0:	00800e44 	movi	r2,57
    d7b4:	9011883a 	mov	r8,r18
    d7b8:	90816626 	beq	r18,r2,dd54 <_dtoa_r+0x152c>
    d7bc:	05bff516 	blt	zero,r22,d794 <__alt_exception_stack_pointer+0xf800d794>
    d7c0:	003ff506 	br	d798 <__alt_exception_stack_pointer+0xf800d798>
    d7c4:	00102dc0 	call	102dc <__multadd>
    d7c8:	1023883a 	mov	r17,r2
    d7cc:	1029883a 	mov	r20,r2
    d7d0:	003fdf06 	br	d750 <__alt_exception_stack_pointer+0xf800d750>
    d7d4:	e009883a 	mov	r4,fp
    d7d8:	00102b40 	call	102b4 <_Bfree>
    d7dc:	00800044 	movi	r2,1
    d7e0:	003fbc06 	br	d6d4 <__alt_exception_stack_pointer+0xf800d6d4>
    d7e4:	a80b883a 	mov	r5,r21
    d7e8:	8009883a 	mov	r4,r16
    d7ec:	0010b900 	call	10b90 <__mcmp>
    d7f0:	103edb0e 	bge	r2,zero,d360 <__alt_exception_stack_pointer+0xf800d360>
    d7f4:	800b883a 	mov	r5,r16
    d7f8:	000f883a 	mov	r7,zero
    d7fc:	01800284 	movi	r6,10
    d800:	e009883a 	mov	r4,fp
    d804:	00102dc0 	call	102dc <__multadd>
    d808:	1021883a 	mov	r16,r2
    d80c:	d8800517 	ldw	r2,20(sp)
    d810:	d8c00b17 	ldw	r3,44(sp)
    d814:	10bfffc4 	addi	r2,r2,-1
    d818:	d8800515 	stw	r2,20(sp)
    d81c:	183f761e 	bne	r3,zero,d5f8 <__alt_exception_stack_pointer+0xf800d5f8>
    d820:	d9000c17 	ldw	r4,48(sp)
    d824:	0101730e 	bge	zero,r4,ddf4 <_dtoa_r+0x15cc>
    d828:	d9000615 	stw	r4,24(sp)
    d82c:	003ed006 	br	d370 <__alt_exception_stack_pointer+0xf800d370>
    d830:	00800084 	movi	r2,2
    d834:	3081861e 	bne	r6,r2,de50 <_dtoa_r+0x1628>
    d838:	d8000b15 	stw	zero,44(sp)
    d83c:	003f3c06 	br	d530 <__alt_exception_stack_pointer+0xf800d530>
    d840:	dc000917 	ldw	r16,36(sp)
    d844:	003e9206 	br	d290 <__alt_exception_stack_pointer+0xf800d290>
    d848:	d9c00317 	ldw	r7,12(sp)
    d84c:	00800084 	movi	r2,2
    d850:	11fec50e 	bge	r2,r7,d368 <__alt_exception_stack_pointer+0xf800d368>
    d854:	d9000617 	ldw	r4,24(sp)
    d858:	20013c1e 	bne	r4,zero,dd4c <_dtoa_r+0x1524>
    d85c:	a80b883a 	mov	r5,r21
    d860:	000f883a 	mov	r7,zero
    d864:	01800144 	movi	r6,5
    d868:	e009883a 	mov	r4,fp
    d86c:	00102dc0 	call	102dc <__multadd>
    d870:	100b883a 	mov	r5,r2
    d874:	8009883a 	mov	r4,r16
    d878:	102b883a 	mov	r21,r2
    d87c:	0010b900 	call	10b90 <__mcmp>
    d880:	dc000915 	stw	r16,36(sp)
    d884:	00bf410e 	bge	zero,r2,d58c <__alt_exception_stack_pointer+0xf800d58c>
    d888:	d9c00717 	ldw	r7,28(sp)
    d88c:	00800c44 	movi	r2,49
    d890:	38800005 	stb	r2,0(r7)
    d894:	d8800517 	ldw	r2,20(sp)
    d898:	3dc00044 	addi	r23,r7,1
    d89c:	10800044 	addi	r2,r2,1
    d8a0:	d8800515 	stw	r2,20(sp)
    d8a4:	003f3d06 	br	d59c <__alt_exception_stack_pointer+0xf800d59c>
    d8a8:	d9800517 	ldw	r6,20(sp)
    d8ac:	d9c00717 	ldw	r7,28(sp)
    d8b0:	00800c44 	movi	r2,49
    d8b4:	31800044 	addi	r6,r6,1
    d8b8:	d9800515 	stw	r6,20(sp)
    d8bc:	38800005 	stb	r2,0(r7)
    d8c0:	003edf06 	br	d440 <__alt_exception_stack_pointer+0xf800d440>
    d8c4:	d8000b15 	stw	zero,44(sp)
    d8c8:	003c9f06 	br	cb48 <__alt_exception_stack_pointer+0xf800cb48>
    d8cc:	903e7e1e 	bne	r18,zero,d2c8 <__alt_exception_stack_pointer+0xf800d2c8>
    d8d0:	00800434 	movhi	r2,16
    d8d4:	10bfffc4 	addi	r2,r2,-1
    d8d8:	9884703a 	and	r2,r19,r2
    d8dc:	1000ea1e 	bne	r2,zero,dc88 <_dtoa_r+0x1460>
    d8e0:	9cdffc2c 	andhi	r19,r19,32752
    d8e4:	9800e826 	beq	r19,zero,dc88 <_dtoa_r+0x1460>
    d8e8:	d9c00817 	ldw	r7,32(sp)
    d8ec:	b5800044 	addi	r22,r22,1
    d8f0:	04c00044 	movi	r19,1
    d8f4:	39c00044 	addi	r7,r7,1
    d8f8:	d9c00815 	stw	r7,32(sp)
    d8fc:	d8800d17 	ldw	r2,52(sp)
    d900:	103e721e 	bne	r2,zero,d2cc <__alt_exception_stack_pointer+0xf800d2cc>
    d904:	00800044 	movi	r2,1
    d908:	003e7906 	br	d2f0 <__alt_exception_stack_pointer+0xf800d2f0>
    d90c:	8009883a 	mov	r4,r16
    d910:	0008fcc0 	call	8fcc <__floatsidf>
    d914:	d9800f17 	ldw	r6,60(sp)
    d918:	d9c01017 	ldw	r7,64(sp)
    d91c:	1009883a 	mov	r4,r2
    d920:	180b883a 	mov	r5,r3
    d924:	0007de40 	call	7de4 <__muldf3>
    d928:	000d883a 	mov	r6,zero
    d92c:	01d00734 	movhi	r7,16412
    d930:	1009883a 	mov	r4,r2
    d934:	180b883a 	mov	r5,r3
    d938:	00069100 	call	6910 <__adddf3>
    d93c:	047f3034 	movhi	r17,64704
    d940:	1021883a 	mov	r16,r2
    d944:	1c63883a 	add	r17,r3,r17
    d948:	d9000f17 	ldw	r4,60(sp)
    d94c:	d9401017 	ldw	r5,64(sp)
    d950:	000d883a 	mov	r6,zero
    d954:	01d00534 	movhi	r7,16404
    d958:	00086500 	call	8650 <__subdf3>
    d95c:	800d883a 	mov	r6,r16
    d960:	880f883a 	mov	r7,r17
    d964:	1009883a 	mov	r4,r2
    d968:	180b883a 	mov	r5,r3
    d96c:	102b883a 	mov	r21,r2
    d970:	1829883a 	mov	r20,r3
    d974:	0007c140 	call	7c14 <__gedf2>
    d978:	00806c16 	blt	zero,r2,db2c <_dtoa_r+0x1304>
    d97c:	89e0003c 	xorhi	r7,r17,32768
    d980:	800d883a 	mov	r6,r16
    d984:	a809883a 	mov	r4,r21
    d988:	a00b883a 	mov	r5,r20
    d98c:	0007cf00 	call	7cf0 <__ledf2>
    d990:	103d7e0e 	bge	r2,zero,cf8c <__alt_exception_stack_pointer+0xf800cf8c>
    d994:	002b883a 	mov	r21,zero
    d998:	0023883a 	mov	r17,zero
    d99c:	003efb06 	br	d58c <__alt_exception_stack_pointer+0xf800d58c>
    d9a0:	d8800717 	ldw	r2,28(sp)
    d9a4:	003bd006 	br	c8e8 <__alt_exception_stack_pointer+0xf800c8e8>
    d9a8:	d9000a17 	ldw	r4,40(sp)
    d9ac:	d9800d17 	ldw	r6,52(sp)
    d9b0:	dd400a15 	stw	r21,40(sp)
    d9b4:	a905c83a 	sub	r2,r21,r4
    d9b8:	308d883a 	add	r6,r6,r2
    d9bc:	d9800d15 	stw	r6,52(sp)
    d9c0:	002b883a 	mov	r21,zero
    d9c4:	003e0606 	br	d1e0 <__alt_exception_stack_pointer+0xf800d1e0>
    d9c8:	9023883a 	mov	r17,r18
    d9cc:	9829883a 	mov	r20,r19
    d9d0:	04000084 	movi	r16,2
    d9d4:	003c9206 	br	cc20 <__alt_exception_stack_pointer+0xf800cc20>
    d9d8:	04000044 	movi	r16,1
    d9dc:	dc000c15 	stw	r16,48(sp)
    d9e0:	dc000615 	stw	r16,24(sp)
    d9e4:	dc002215 	stw	r16,136(sp)
    d9e8:	e0001115 	stw	zero,68(fp)
    d9ec:	000b883a 	mov	r5,zero
    d9f0:	003c6906 	br	cb98 <__alt_exception_stack_pointer+0xf800cb98>
    d9f4:	3021883a 	mov	r16,r6
    d9f8:	003ffb06 	br	d9e8 <__alt_exception_stack_pointer+0xf800d9e8>
    d9fc:	1000021e 	bne	r2,zero,da08 <_dtoa_r+0x11e0>
    da00:	4200004c 	andi	r8,r8,1
    da04:	403e7d1e 	bne	r8,zero,d3fc <__alt_exception_stack_pointer+0xf800d3fc>
    da08:	01000c04 	movi	r4,48
    da0c:	00000106 	br	da14 <_dtoa_r+0x11ec>
    da10:	102f883a 	mov	r23,r2
    da14:	b8bfffc4 	addi	r2,r23,-1
    da18:	10c00007 	ldb	r3,0(r2)
    da1c:	193ffc26 	beq	r3,r4,da10 <__alt_exception_stack_pointer+0xf800da10>
    da20:	003e8706 	br	d440 <__alt_exception_stack_pointer+0xf800d440>
    da24:	d8800517 	ldw	r2,20(sp)
    da28:	00a3c83a 	sub	r17,zero,r2
    da2c:	8800a426 	beq	r17,zero,dcc0 <_dtoa_r+0x1498>
    da30:	888003cc 	andi	r2,r17,15
    da34:	100490fa 	slli	r2,r2,3
    da38:	00c000b4 	movhi	r3,2
    da3c:	18e36504 	addi	r3,r3,-29292
    da40:	1885883a 	add	r2,r3,r2
    da44:	11800017 	ldw	r6,0(r2)
    da48:	11c00117 	ldw	r7,4(r2)
    da4c:	9009883a 	mov	r4,r18
    da50:	980b883a 	mov	r5,r19
    da54:	8823d13a 	srai	r17,r17,4
    da58:	0007de40 	call	7de4 <__muldf3>
    da5c:	d8800f15 	stw	r2,60(sp)
    da60:	d8c01015 	stw	r3,64(sp)
    da64:	8800e826 	beq	r17,zero,de08 <_dtoa_r+0x15e0>
    da68:	050000b4 	movhi	r20,2
    da6c:	a5235b04 	addi	r20,r20,-29332
    da70:	04000084 	movi	r16,2
    da74:	8980004c 	andi	r6,r17,1
    da78:	1009883a 	mov	r4,r2
    da7c:	8823d07a 	srai	r17,r17,1
    da80:	180b883a 	mov	r5,r3
    da84:	30000426 	beq	r6,zero,da98 <_dtoa_r+0x1270>
    da88:	a1800017 	ldw	r6,0(r20)
    da8c:	a1c00117 	ldw	r7,4(r20)
    da90:	84000044 	addi	r16,r16,1
    da94:	0007de40 	call	7de4 <__muldf3>
    da98:	a5000204 	addi	r20,r20,8
    da9c:	883ff51e 	bne	r17,zero,da74 <__alt_exception_stack_pointer+0xf800da74>
    daa0:	d8800f15 	stw	r2,60(sp)
    daa4:	d8c01015 	stw	r3,64(sp)
    daa8:	003c7606 	br	cc84 <__alt_exception_stack_pointer+0xf800cc84>
    daac:	00c00c04 	movi	r3,48
    dab0:	10c00005 	stb	r3,0(r2)
    dab4:	d8c00517 	ldw	r3,20(sp)
    dab8:	bd3fffc3 	ldbu	r20,-1(r23)
    dabc:	18c00044 	addi	r3,r3,1
    dac0:	d8c00515 	stw	r3,20(sp)
    dac4:	003db906 	br	d1ac <__alt_exception_stack_pointer+0xf800d1ac>
    dac8:	89400117 	ldw	r5,4(r17)
    dacc:	e009883a 	mov	r4,fp
    dad0:	001020c0 	call	1020c <_Balloc>
    dad4:	89800417 	ldw	r6,16(r17)
    dad8:	89400304 	addi	r5,r17,12
    dadc:	11000304 	addi	r4,r2,12
    dae0:	31800084 	addi	r6,r6,2
    dae4:	318d883a 	add	r6,r6,r6
    dae8:	318d883a 	add	r6,r6,r6
    daec:	1027883a 	mov	r19,r2
    daf0:	000fe400 	call	fe40 <memcpy>
    daf4:	01800044 	movi	r6,1
    daf8:	980b883a 	mov	r5,r19
    dafc:	e009883a 	mov	r4,fp
    db00:	0010a480 	call	10a48 <__lshift>
    db04:	1029883a 	mov	r20,r2
    db08:	003ecc06 	br	d63c <__alt_exception_stack_pointer+0xf800d63c>
    db0c:	00800e44 	movi	r2,57
    db10:	90809026 	beq	r18,r2,dd54 <_dtoa_r+0x152c>
    db14:	92000044 	addi	r8,r18,1
    db18:	003f1f06 	br	d798 <__alt_exception_stack_pointer+0xf800d798>
    db1c:	9011883a 	mov	r8,r18
    db20:	8825883a 	mov	r18,r17
    db24:	a023883a 	mov	r17,r20
    db28:	003e2906 	br	d3d0 <__alt_exception_stack_pointer+0xf800d3d0>
    db2c:	002b883a 	mov	r21,zero
    db30:	0023883a 	mov	r17,zero
    db34:	003f5406 	br	d888 <__alt_exception_stack_pointer+0xf800d888>
    db38:	61bfffc4 	addi	r6,r12,-1
    db3c:	300490fa 	slli	r2,r6,3
    db40:	00c000b4 	movhi	r3,2
    db44:	18e36504 	addi	r3,r3,-29292
    db48:	1885883a 	add	r2,r3,r2
    db4c:	11000017 	ldw	r4,0(r2)
    db50:	11400117 	ldw	r5,4(r2)
    db54:	d8800717 	ldw	r2,28(sp)
    db58:	880f883a 	mov	r7,r17
    db5c:	d9801215 	stw	r6,72(sp)
    db60:	800d883a 	mov	r6,r16
    db64:	db001615 	stw	r12,88(sp)
    db68:	15c00044 	addi	r23,r2,1
    db6c:	0007de40 	call	7de4 <__muldf3>
    db70:	d9401017 	ldw	r5,64(sp)
    db74:	d9000f17 	ldw	r4,60(sp)
    db78:	d8c01515 	stw	r3,84(sp)
    db7c:	d8801415 	stw	r2,80(sp)
    db80:	0008f4c0 	call	8f4c <__fixdfsi>
    db84:	1009883a 	mov	r4,r2
    db88:	1021883a 	mov	r16,r2
    db8c:	0008fcc0 	call	8fcc <__floatsidf>
    db90:	d9000f17 	ldw	r4,60(sp)
    db94:	d9401017 	ldw	r5,64(sp)
    db98:	100d883a 	mov	r6,r2
    db9c:	180f883a 	mov	r7,r3
    dba0:	00086500 	call	8650 <__subdf3>
    dba4:	1829883a 	mov	r20,r3
    dba8:	d8c00717 	ldw	r3,28(sp)
    dbac:	84000c04 	addi	r16,r16,48
    dbb0:	1023883a 	mov	r17,r2
    dbb4:	1c000005 	stb	r16,0(r3)
    dbb8:	db001617 	ldw	r12,88(sp)
    dbbc:	00800044 	movi	r2,1
    dbc0:	60802226 	beq	r12,r2,dc4c <_dtoa_r+0x1424>
    dbc4:	d9c00717 	ldw	r7,28(sp)
    dbc8:	8805883a 	mov	r2,r17
    dbcc:	b82b883a 	mov	r21,r23
    dbd0:	3b19883a 	add	r12,r7,r12
    dbd4:	6023883a 	mov	r17,r12
    dbd8:	a007883a 	mov	r3,r20
    dbdc:	dc800f15 	stw	r18,60(sp)
    dbe0:	000d883a 	mov	r6,zero
    dbe4:	01d00934 	movhi	r7,16420
    dbe8:	1009883a 	mov	r4,r2
    dbec:	180b883a 	mov	r5,r3
    dbf0:	0007de40 	call	7de4 <__muldf3>
    dbf4:	180b883a 	mov	r5,r3
    dbf8:	1009883a 	mov	r4,r2
    dbfc:	1829883a 	mov	r20,r3
    dc00:	1025883a 	mov	r18,r2
    dc04:	0008f4c0 	call	8f4c <__fixdfsi>
    dc08:	1009883a 	mov	r4,r2
    dc0c:	1021883a 	mov	r16,r2
    dc10:	0008fcc0 	call	8fcc <__floatsidf>
    dc14:	100d883a 	mov	r6,r2
    dc18:	180f883a 	mov	r7,r3
    dc1c:	9009883a 	mov	r4,r18
    dc20:	a00b883a 	mov	r5,r20
    dc24:	84000c04 	addi	r16,r16,48
    dc28:	00086500 	call	8650 <__subdf3>
    dc2c:	ad400044 	addi	r21,r21,1
    dc30:	ac3fffc5 	stb	r16,-1(r21)
    dc34:	ac7fea1e 	bne	r21,r17,dbe0 <__alt_exception_stack_pointer+0xf800dbe0>
    dc38:	1023883a 	mov	r17,r2
    dc3c:	d8801217 	ldw	r2,72(sp)
    dc40:	dc800f17 	ldw	r18,60(sp)
    dc44:	1829883a 	mov	r20,r3
    dc48:	b8af883a 	add	r23,r23,r2
    dc4c:	d9001417 	ldw	r4,80(sp)
    dc50:	d9401517 	ldw	r5,84(sp)
    dc54:	000d883a 	mov	r6,zero
    dc58:	01cff834 	movhi	r7,16352
    dc5c:	00069100 	call	6910 <__adddf3>
    dc60:	880d883a 	mov	r6,r17
    dc64:	a00f883a 	mov	r7,r20
    dc68:	1009883a 	mov	r4,r2
    dc6c:	180b883a 	mov	r5,r3
    dc70:	0007cf00 	call	7cf0 <__ledf2>
    dc74:	10003e0e 	bge	r2,zero,dd70 <_dtoa_r+0x1548>
    dc78:	d9001317 	ldw	r4,76(sp)
    dc7c:	bd3fffc3 	ldbu	r20,-1(r23)
    dc80:	d9000515 	stw	r4,20(sp)
    dc84:	003d3b06 	br	d174 <__alt_exception_stack_pointer+0xf800d174>
    dc88:	0027883a 	mov	r19,zero
    dc8c:	003f1b06 	br	d8fc <__alt_exception_stack_pointer+0xf800d8fc>
    dc90:	d8800817 	ldw	r2,32(sp)
    dc94:	11e9c83a 	sub	r20,r2,r7
    dc98:	0005883a 	mov	r2,zero
    dc9c:	003d5406 	br	d1f0 <__alt_exception_stack_pointer+0xf800d1f0>
    dca0:	00800044 	movi	r2,1
    dca4:	003dc706 	br	d3c4 <__alt_exception_stack_pointer+0xf800d3c4>
    dca8:	d8c00217 	ldw	r3,8(sp)
    dcac:	00800d84 	movi	r2,54
    dcb0:	dd400a17 	ldw	r21,40(sp)
    dcb4:	10c5c83a 	sub	r2,r2,r3
    dcb8:	dd000817 	ldw	r20,32(sp)
    dcbc:	003d4c06 	br	d1f0 <__alt_exception_stack_pointer+0xf800d1f0>
    dcc0:	dc800f15 	stw	r18,60(sp)
    dcc4:	dcc01015 	stw	r19,64(sp)
    dcc8:	04000084 	movi	r16,2
    dccc:	003bed06 	br	cc84 <__alt_exception_stack_pointer+0xf800cc84>
    dcd0:	d9000617 	ldw	r4,24(sp)
    dcd4:	203f0d26 	beq	r4,zero,d90c <__alt_exception_stack_pointer+0xf800d90c>
    dcd8:	d9800c17 	ldw	r6,48(sp)
    dcdc:	01bcab0e 	bge	zero,r6,cf8c <__alt_exception_stack_pointer+0xf800cf8c>
    dce0:	d9401017 	ldw	r5,64(sp)
    dce4:	d9000f17 	ldw	r4,60(sp)
    dce8:	000d883a 	mov	r6,zero
    dcec:	01d00934 	movhi	r7,16420
    dcf0:	0007de40 	call	7de4 <__muldf3>
    dcf4:	81000044 	addi	r4,r16,1
    dcf8:	d8800f15 	stw	r2,60(sp)
    dcfc:	d8c01015 	stw	r3,64(sp)
    dd00:	0008fcc0 	call	8fcc <__floatsidf>
    dd04:	d9800f17 	ldw	r6,60(sp)
    dd08:	d9c01017 	ldw	r7,64(sp)
    dd0c:	1009883a 	mov	r4,r2
    dd10:	180b883a 	mov	r5,r3
    dd14:	0007de40 	call	7de4 <__muldf3>
    dd18:	01d00734 	movhi	r7,16412
    dd1c:	000d883a 	mov	r6,zero
    dd20:	1009883a 	mov	r4,r2
    dd24:	180b883a 	mov	r5,r3
    dd28:	00069100 	call	6910 <__adddf3>
    dd2c:	d9c00517 	ldw	r7,20(sp)
    dd30:	047f3034 	movhi	r17,64704
    dd34:	1021883a 	mov	r16,r2
    dd38:	39ffffc4 	addi	r7,r7,-1
    dd3c:	d9c01315 	stw	r7,76(sp)
    dd40:	1c63883a 	add	r17,r3,r17
    dd44:	db000c17 	ldw	r12,48(sp)
    dd48:	003bea06 	br	ccf4 <__alt_exception_stack_pointer+0xf800ccf4>
    dd4c:	dc000915 	stw	r16,36(sp)
    dd50:	003e0e06 	br	d58c <__alt_exception_stack_pointer+0xf800d58c>
    dd54:	01000e44 	movi	r4,57
    dd58:	8825883a 	mov	r18,r17
    dd5c:	9dc00044 	addi	r23,r19,1
    dd60:	99000005 	stb	r4,0(r19)
    dd64:	a023883a 	mov	r17,r20
    dd68:	dc000915 	stw	r16,36(sp)
    dd6c:	003da406 	br	d400 <__alt_exception_stack_pointer+0xf800d400>
    dd70:	d9801417 	ldw	r6,80(sp)
    dd74:	d9c01517 	ldw	r7,84(sp)
    dd78:	0009883a 	mov	r4,zero
    dd7c:	014ff834 	movhi	r5,16352
    dd80:	00086500 	call	8650 <__subdf3>
    dd84:	880d883a 	mov	r6,r17
    dd88:	a00f883a 	mov	r7,r20
    dd8c:	1009883a 	mov	r4,r2
    dd90:	180b883a 	mov	r5,r3
    dd94:	0007c140 	call	7c14 <__gedf2>
    dd98:	00bc7c0e 	bge	zero,r2,cf8c <__alt_exception_stack_pointer+0xf800cf8c>
    dd9c:	01000c04 	movi	r4,48
    dda0:	00000106 	br	dda8 <_dtoa_r+0x1580>
    dda4:	102f883a 	mov	r23,r2
    dda8:	b8bfffc4 	addi	r2,r23,-1
    ddac:	10c00007 	ldb	r3,0(r2)
    ddb0:	193ffc26 	beq	r3,r4,dda4 <__alt_exception_stack_pointer+0xf800dda4>
    ddb4:	d9801317 	ldw	r6,76(sp)
    ddb8:	d9800515 	stw	r6,20(sp)
    ddbc:	003c4406 	br	ced0 <__alt_exception_stack_pointer+0xf800ced0>
    ddc0:	d9801317 	ldw	r6,76(sp)
    ddc4:	d9800515 	stw	r6,20(sp)
    ddc8:	003cea06 	br	d174 <__alt_exception_stack_pointer+0xf800d174>
    ddcc:	dd800f17 	ldw	r22,60(sp)
    ddd0:	dcc01017 	ldw	r19,64(sp)
    ddd4:	dc801217 	ldw	r18,72(sp)
    ddd8:	003c6c06 	br	cf8c <__alt_exception_stack_pointer+0xf800cf8c>
    dddc:	903e031e 	bne	r18,zero,d5ec <__alt_exception_stack_pointer+0xf800d5ec>
    dde0:	003ebb06 	br	d8d0 <__alt_exception_stack_pointer+0xf800d8d0>
    dde4:	103e6c1e 	bne	r2,zero,d798 <__alt_exception_stack_pointer+0xf800d798>
    dde8:	4080004c 	andi	r2,r8,1
    ddec:	103e6a26 	beq	r2,zero,d798 <__alt_exception_stack_pointer+0xf800d798>
    ddf0:	003e6606 	br	d78c <__alt_exception_stack_pointer+0xf800d78c>
    ddf4:	d8c00317 	ldw	r3,12(sp)
    ddf8:	00800084 	movi	r2,2
    ddfc:	10c02916 	blt	r2,r3,dea4 <_dtoa_r+0x167c>
    de00:	d9000c17 	ldw	r4,48(sp)
    de04:	003e8806 	br	d828 <__alt_exception_stack_pointer+0xf800d828>
    de08:	04000084 	movi	r16,2
    de0c:	003b9d06 	br	cc84 <__alt_exception_stack_pointer+0xf800cc84>
    de10:	d9001317 	ldw	r4,76(sp)
    de14:	d9000515 	stw	r4,20(sp)
    de18:	003cd606 	br	d174 <__alt_exception_stack_pointer+0xf800d174>
    de1c:	d8801317 	ldw	r2,76(sp)
    de20:	d8800515 	stw	r2,20(sp)
    de24:	003c2a06 	br	ced0 <__alt_exception_stack_pointer+0xf800ced0>
    de28:	d9800317 	ldw	r6,12(sp)
    de2c:	00800084 	movi	r2,2
    de30:	11801516 	blt	r2,r6,de88 <_dtoa_r+0x1660>
    de34:	d9c00c17 	ldw	r7,48(sp)
    de38:	d9c00615 	stw	r7,24(sp)
    de3c:	003df706 	br	d61c <__alt_exception_stack_pointer+0xf800d61c>
    de40:	193d3926 	beq	r3,r4,d328 <__alt_exception_stack_pointer+0xf800d328>
    de44:	00c00f04 	movi	r3,60
    de48:	1885c83a 	sub	r2,r3,r2
    de4c:	003ddf06 	br	d5cc <__alt_exception_stack_pointer+0xf800d5cc>
    de50:	e009883a 	mov	r4,fp
    de54:	e0001115 	stw	zero,68(fp)
    de58:	000b883a 	mov	r5,zero
    de5c:	001020c0 	call	1020c <_Balloc>
    de60:	d8800715 	stw	r2,28(sp)
    de64:	d8c00717 	ldw	r3,28(sp)
    de68:	00bfffc4 	movi	r2,-1
    de6c:	01000044 	movi	r4,1
    de70:	d8800c15 	stw	r2,48(sp)
    de74:	e0c01015 	stw	r3,64(fp)
    de78:	d9000b15 	stw	r4,44(sp)
    de7c:	d8800615 	stw	r2,24(sp)
    de80:	d8002215 	stw	zero,136(sp)
    de84:	003c4106 	br	cf8c <__alt_exception_stack_pointer+0xf800cf8c>
    de88:	d8c00c17 	ldw	r3,48(sp)
    de8c:	d8c00615 	stw	r3,24(sp)
    de90:	003e7006 	br	d854 <__alt_exception_stack_pointer+0xf800d854>
    de94:	04400044 	movi	r17,1
    de98:	003b2006 	br	cb1c <__alt_exception_stack_pointer+0xf800cb1c>
    de9c:	000b883a 	mov	r5,zero
    dea0:	003b3d06 	br	cb98 <__alt_exception_stack_pointer+0xf800cb98>
    dea4:	d8800c17 	ldw	r2,48(sp)
    dea8:	d8800615 	stw	r2,24(sp)
    deac:	003e6906 	br	d854 <__alt_exception_stack_pointer+0xf800d854>

0000deb0 <print_e>:
    deb0:	defff504 	addi	sp,sp,-44
    deb4:	dc400815 	stw	r17,32(sp)
    deb8:	dc400b17 	ldw	r17,44(sp)
    debc:	dc000715 	stw	r16,28(sp)
    dec0:	2821883a 	mov	r16,r5
    dec4:	d9400504 	addi	r5,sp,20
    dec8:	d9400315 	stw	r5,12(sp)
    decc:	300b883a 	mov	r5,r6
    ded0:	d9800604 	addi	r6,sp,24
    ded4:	3805883a 	mov	r2,r7
    ded8:	88c00044 	addi	r3,r17,1
    dedc:	d9800215 	stw	r6,8(sp)
    dee0:	d9800404 	addi	r6,sp,16
    dee4:	d9800115 	stw	r6,4(sp)
    dee8:	d8c00015 	stw	r3,0(sp)
    deec:	01c00084 	movi	r7,2
    def0:	100d883a 	mov	r6,r2
    def4:	dc800915 	stw	r18,36(sp)
    def8:	dfc00a15 	stw	ra,40(sp)
    defc:	dc800c17 	ldw	r18,48(sp)
    df00:	000c8280 	call	c828 <_dtoa_r>
    df04:	d9000417 	ldw	r4,16(sp)
    df08:	00c9c3c4 	movi	r3,9999
    df0c:	20c05c26 	beq	r4,r3,e080 <print_e+0x1d0>
    df10:	10c00003 	ldbu	r3,0(r2)
    df14:	900f883a 	mov	r7,r18
    df18:	80c00005 	stb	r3,0(r16)
    df1c:	d8c00d17 	ldw	r3,52(sp)
    df20:	18004926 	beq	r3,zero,e048 <print_e+0x198>
    df24:	00c00b84 	movi	r3,46
    df28:	80c00045 	stb	r3,1(r16)
    df2c:	11400043 	ldbu	r5,1(r2)
    df30:	80c00084 	addi	r3,r16,2
    df34:	29803fcc 	andi	r6,r5,255
    df38:	3180201c 	xori	r6,r6,128
    df3c:	31bfe004 	addi	r6,r6,-128
    df40:	30000f26 	beq	r6,zero,df80 <print_e+0xd0>
    df44:	04400e0e 	bge	zero,r17,df80 <print_e+0xd0>
    df48:	10800044 	addi	r2,r2,1
    df4c:	180d883a 	mov	r6,r3
    df50:	00000206 	br	df5c <print_e+0xac>
    df54:	180d883a 	mov	r6,r3
    df58:	88000926 	beq	r17,zero,df80 <print_e+0xd0>
    df5c:	31400005 	stb	r5,0(r6)
    df60:	10800044 	addi	r2,r2,1
    df64:	11400003 	ldbu	r5,0(r2)
    df68:	18c00044 	addi	r3,r3,1
    df6c:	8c7fffc4 	addi	r17,r17,-1
    df70:	29803fcc 	andi	r6,r5,255
    df74:	3180201c 	xori	r6,r6,128
    df78:	31bfe004 	addi	r6,r6,-128
    df7c:	303ff51e 	bne	r6,zero,df54 <__alt_exception_stack_pointer+0xf800df54>
    df80:	94803fcc 	andi	r18,r18,255
    df84:	9480201c 	xori	r18,r18,128
    df88:	94bfe004 	addi	r18,r18,-128
    df8c:	008019c4 	movi	r2,103
    df90:	90803026 	beq	r18,r2,e054 <print_e+0x1a4>
    df94:	008011c4 	movi	r2,71
    df98:	90803726 	beq	r18,r2,e078 <print_e+0x1c8>
    df9c:	0440060e 	bge	zero,r17,dfb8 <print_e+0x108>
    dfa0:	180b883a 	mov	r5,r3
    dfa4:	00800c04 	movi	r2,48
    dfa8:	1c47883a 	add	r3,r3,r17
    dfac:	28800005 	stb	r2,0(r5)
    dfb0:	29400044 	addi	r5,r5,1
    dfb4:	197ffd1e 	bne	r3,r5,dfac <__alt_exception_stack_pointer+0xf800dfac>
    dfb8:	19c00005 	stb	r7,0(r3)
    dfbc:	243fffc4 	addi	r16,r4,-1
    dfc0:	1c400084 	addi	r17,r3,2
    dfc4:	80002816 	blt	r16,zero,e068 <print_e+0x1b8>
    dfc8:	00800ac4 	movi	r2,43
    dfcc:	18800045 	stb	r2,1(r3)
    dfd0:	008018c4 	movi	r2,99
    dfd4:	14000a0e 	bge	r2,r16,e000 <print_e+0x150>
    dfd8:	8009883a 	mov	r4,r16
    dfdc:	01401904 	movi	r5,100
    dfe0:	00067340 	call	6734 <__divsi3>
    dfe4:	10c00c04 	addi	r3,r2,48
    dfe8:	88c00005 	stb	r3,0(r17)
    dfec:	017fe704 	movi	r5,-100
    dff0:	1009883a 	mov	r4,r2
    dff4:	00068e80 	call	68e8 <__mulsi3>
    dff8:	8c400044 	addi	r17,r17,1
    dffc:	80a1883a 	add	r16,r16,r2
    e000:	01400284 	movi	r5,10
    e004:	8009883a 	mov	r4,r16
    e008:	00067340 	call	6734 <__divsi3>
    e00c:	10c00c04 	addi	r3,r2,48
    e010:	88c00005 	stb	r3,0(r17)
    e014:	017ffd84 	movi	r5,-10
    e018:	1009883a 	mov	r4,r2
    e01c:	00068e80 	call	68e8 <__mulsi3>
    e020:	1405883a 	add	r2,r2,r16
    e024:	10800c04 	addi	r2,r2,48
    e028:	88800045 	stb	r2,1(r17)
    e02c:	88000085 	stb	zero,2(r17)
    e030:	dfc00a17 	ldw	ra,40(sp)
    e034:	dc800917 	ldw	r18,36(sp)
    e038:	dc400817 	ldw	r17,32(sp)
    e03c:	dc000717 	ldw	r16,28(sp)
    e040:	dec00b04 	addi	sp,sp,44
    e044:	f800283a 	ret
    e048:	883fb61e 	bne	r17,zero,df24 <__alt_exception_stack_pointer+0xf800df24>
    e04c:	80c00044 	addi	r3,r16,1
    e050:	003fcb06 	br	df80 <__alt_exception_stack_pointer+0xf800df80>
    e054:	01c01944 	movi	r7,101
    e058:	19c00005 	stb	r7,0(r3)
    e05c:	243fffc4 	addi	r16,r4,-1
    e060:	1c400084 	addi	r17,r3,2
    e064:	803fd80e 	bge	r16,zero,dfc8 <__alt_exception_stack_pointer+0xf800dfc8>
    e068:	00800b44 	movi	r2,45
    e06c:	18800045 	stb	r2,1(r3)
    e070:	0421c83a 	sub	r16,zero,r16
    e074:	003fd606 	br	dfd0 <__alt_exception_stack_pointer+0xf800dfd0>
    e078:	01c01144 	movi	r7,69
    e07c:	003fce06 	br	dfb8 <__alt_exception_stack_pointer+0xf800dfb8>
    e080:	100b883a 	mov	r5,r2
    e084:	8009883a 	mov	r4,r16
    e088:	0011ab40 	call	11ab4 <strcpy>
    e08c:	003fe806 	br	e030 <__alt_exception_stack_pointer+0xf800e030>

0000e090 <fcvtbuf>:
    e090:	defff304 	addi	sp,sp,-52
    e094:	dc000515 	stw	r16,20(sp)
    e098:	dc000e17 	ldw	r16,56(sp)
    e09c:	008000b4 	movhi	r2,2
    e0a0:	dd400a15 	stw	r21,40(sp)
    e0a4:	dd000915 	stw	r20,36(sp)
    e0a8:	dcc00815 	stw	r19,32(sp)
    e0ac:	dc800715 	stw	r18,28(sp)
    e0b0:	dc400615 	stw	r17,24(sp)
    e0b4:	10ac8004 	addi	r2,r2,-19968
    e0b8:	dfc00c15 	stw	ra,48(sp)
    e0bc:	dd800b15 	stw	r22,44(sp)
    e0c0:	2027883a 	mov	r19,r4
    e0c4:	2825883a 	mov	r18,r5
    e0c8:	3023883a 	mov	r17,r6
    e0cc:	3829883a 	mov	r20,r7
    e0d0:	15400017 	ldw	r21,0(r2)
    e0d4:	80004426 	beq	r16,zero,e1e8 <fcvtbuf+0x158>
    e0d8:	000d883a 	mov	r6,zero
    e0dc:	01cffc34 	movhi	r7,16368
    e0e0:	9809883a 	mov	r4,r19
    e0e4:	900b883a 	mov	r5,r18
    e0e8:	0007cf00 	call	7cf0 <__ledf2>
    e0ec:	10002c16 	blt	r2,zero,e1a0 <fcvtbuf+0x110>
    e0f0:	d8800404 	addi	r2,sp,16
    e0f4:	d8800315 	stw	r2,12(sp)
    e0f8:	d8800d17 	ldw	r2,52(sp)
    e0fc:	dd000115 	stw	r20,4(sp)
    e100:	dc400015 	stw	r17,0(sp)
    e104:	d8800215 	stw	r2,8(sp)
    e108:	01c000c4 	movi	r7,3
    e10c:	980b883a 	mov	r5,r19
    e110:	900d883a 	mov	r6,r18
    e114:	a809883a 	mov	r4,r21
    e118:	000c8280 	call	c828 <_dtoa_r>
    e11c:	a1400017 	ldw	r5,0(r20)
    e120:	d8c00417 	ldw	r3,16(sp)
    e124:	014bc83a 	sub	r5,zero,r5
    e128:	10c0342e 	bgeu	r2,r3,e1fc <fcvtbuf+0x16c>
    e12c:	8007883a 	mov	r3,r16
    e130:	11800003 	ldbu	r6,0(r2)
    e134:	19000044 	addi	r4,r3,1
    e138:	10800044 	addi	r2,r2,1
    e13c:	19800005 	stb	r6,0(r3)
    e140:	d9800417 	ldw	r6,16(sp)
    e144:	29400044 	addi	r5,r5,1
    e148:	2007883a 	mov	r3,r4
    e14c:	11bff836 	bltu	r2,r6,e130 <__alt_exception_stack_pointer+0xf800e130>
    e150:	2c40070e 	bge	r5,r17,e170 <fcvtbuf+0xe0>
    e154:	894bc83a 	sub	r5,r17,r5
    e158:	2007883a 	mov	r3,r4
    e15c:	00800c04 	movi	r2,48
    e160:	2149883a 	add	r4,r4,r5
    e164:	18800005 	stb	r2,0(r3)
    e168:	18c00044 	addi	r3,r3,1
    e16c:	20fffd1e 	bne	r4,r3,e164 <__alt_exception_stack_pointer+0xf800e164>
    e170:	20000005 	stb	zero,0(r4)
    e174:	8005883a 	mov	r2,r16
    e178:	dfc00c17 	ldw	ra,48(sp)
    e17c:	dd800b17 	ldw	r22,44(sp)
    e180:	dd400a17 	ldw	r21,40(sp)
    e184:	dd000917 	ldw	r20,36(sp)
    e188:	dcc00817 	ldw	r19,32(sp)
    e18c:	dc800717 	ldw	r18,28(sp)
    e190:	dc400617 	ldw	r17,24(sp)
    e194:	dc000517 	ldw	r16,20(sp)
    e198:	dec00d04 	addi	sp,sp,52
    e19c:	f800283a 	ret
    e1a0:	000d883a 	mov	r6,zero
    e1a4:	01effc34 	movhi	r7,49136
    e1a8:	9809883a 	mov	r4,r19
    e1ac:	900b883a 	mov	r5,r18
    e1b0:	0007c140 	call	7c14 <__gedf2>
    e1b4:	00bfce0e 	bge	zero,r2,e0f0 <__alt_exception_stack_pointer+0xf800e0f0>
    e1b8:	d8800404 	addi	r2,sp,16
    e1bc:	d8800315 	stw	r2,12(sp)
    e1c0:	d8800d17 	ldw	r2,52(sp)
    e1c4:	dd000115 	stw	r20,4(sp)
    e1c8:	dc400015 	stw	r17,0(sp)
    e1cc:	d8800215 	stw	r2,8(sp)
    e1d0:	01c00084 	movi	r7,2
    e1d4:	980b883a 	mov	r5,r19
    e1d8:	900d883a 	mov	r6,r18
    e1dc:	a809883a 	mov	r4,r21
    e1e0:	000c8280 	call	c828 <_dtoa_r>
    e1e4:	003fcd06 	br	e11c <__alt_exception_stack_pointer+0xf800e11c>
    e1e8:	a8801417 	ldw	r2,80(r21)
    e1ec:	30c008c4 	addi	r3,r6,35
    e1f0:	1880040e 	bge	r3,r2,e204 <fcvtbuf+0x174>
    e1f4:	ac001517 	ldw	r16,84(r21)
    e1f8:	003fb706 	br	e0d8 <__alt_exception_stack_pointer+0xf800e0d8>
    e1fc:	8009883a 	mov	r4,r16
    e200:	003fd306 	br	e150 <__alt_exception_stack_pointer+0xf800e150>
    e204:	a9401517 	ldw	r5,84(r21)
    e208:	35800904 	addi	r22,r6,36
    e20c:	b00d883a 	mov	r6,r22
    e210:	a809883a 	mov	r4,r21
    e214:	00112c40 	call	112c4 <_realloc_r>
    e218:	1021883a 	mov	r16,r2
    e21c:	10000326 	beq	r2,zero,e22c <fcvtbuf+0x19c>
    e220:	ad801415 	stw	r22,80(r21)
    e224:	a8801515 	stw	r2,84(r21)
    e228:	003fab06 	br	e0d8 <__alt_exception_stack_pointer+0xf800e0d8>
    e22c:	0005883a 	mov	r2,zero
    e230:	003fd106 	br	e178 <__alt_exception_stack_pointer+0xf800e178>

0000e234 <ecvtbuf>:
    e234:	defff304 	addi	sp,sp,-52
    e238:	dc000615 	stw	r16,24(sp)
    e23c:	dc000e17 	ldw	r16,56(sp)
    e240:	008000b4 	movhi	r2,2
    e244:	dd000a15 	stw	r20,40(sp)
    e248:	dcc00915 	stw	r19,36(sp)
    e24c:	dc800815 	stw	r18,32(sp)
    e250:	dc400715 	stw	r17,28(sp)
    e254:	10ac8004 	addi	r2,r2,-19968
    e258:	dfc00c15 	stw	ra,48(sp)
    e25c:	dd400b15 	stw	r21,44(sp)
    e260:	2029883a 	mov	r20,r4
    e264:	2827883a 	mov	r19,r5
    e268:	3023883a 	mov	r17,r6
    e26c:	14800017 	ldw	r18,0(r2)
    e270:	80002b26 	beq	r16,zero,e320 <ecvtbuf+0xec>
    e274:	d8800404 	addi	r2,sp,16
    e278:	d8800315 	stw	r2,12(sp)
    e27c:	d8800d17 	ldw	r2,52(sp)
    e280:	d9c00115 	stw	r7,4(sp)
    e284:	dc400015 	stw	r17,0(sp)
    e288:	d8800215 	stw	r2,8(sp)
    e28c:	01c00084 	movi	r7,2
    e290:	a00b883a 	mov	r5,r20
    e294:	980d883a 	mov	r6,r19
    e298:	9009883a 	mov	r4,r18
    e29c:	000c8280 	call	c828 <_dtoa_r>
    e2a0:	d8c00417 	ldw	r3,16(sp)
    e2a4:	10c0222e 	bgeu	r2,r3,e330 <ecvtbuf+0xfc>
    e2a8:	01800044 	movi	r6,1
    e2ac:	8007883a 	mov	r3,r16
    e2b0:	340dc83a 	sub	r6,r6,r16
    e2b4:	11400003 	ldbu	r5,0(r2)
    e2b8:	19000044 	addi	r4,r3,1
    e2bc:	10800044 	addi	r2,r2,1
    e2c0:	19400005 	stb	r5,0(r3)
    e2c4:	d9400417 	ldw	r5,16(sp)
    e2c8:	30cf883a 	add	r7,r6,r3
    e2cc:	2007883a 	mov	r3,r4
    e2d0:	117ff836 	bltu	r2,r5,e2b4 <__alt_exception_stack_pointer+0xf800e2b4>
    e2d4:	3c40070e 	bge	r7,r17,e2f4 <ecvtbuf+0xc0>
    e2d8:	89cfc83a 	sub	r7,r17,r7
    e2dc:	2007883a 	mov	r3,r4
    e2e0:	01400c04 	movi	r5,48
    e2e4:	21c9883a 	add	r4,r4,r7
    e2e8:	19400005 	stb	r5,0(r3)
    e2ec:	18c00044 	addi	r3,r3,1
    e2f0:	20fffd1e 	bne	r4,r3,e2e8 <__alt_exception_stack_pointer+0xf800e2e8>
    e2f4:	20000005 	stb	zero,0(r4)
    e2f8:	8005883a 	mov	r2,r16
    e2fc:	dfc00c17 	ldw	ra,48(sp)
    e300:	dd400b17 	ldw	r21,44(sp)
    e304:	dd000a17 	ldw	r20,40(sp)
    e308:	dcc00917 	ldw	r19,36(sp)
    e30c:	dc800817 	ldw	r18,32(sp)
    e310:	dc400717 	ldw	r17,28(sp)
    e314:	dc000617 	ldw	r16,24(sp)
    e318:	dec00d04 	addi	sp,sp,52
    e31c:	f800283a 	ret
    e320:	90801417 	ldw	r2,80(r18)
    e324:	3080050e 	bge	r6,r2,e33c <ecvtbuf+0x108>
    e328:	94001517 	ldw	r16,84(r18)
    e32c:	003fd106 	br	e274 <__alt_exception_stack_pointer+0xf800e274>
    e330:	8009883a 	mov	r4,r16
    e334:	000f883a 	mov	r7,zero
    e338:	003fe606 	br	e2d4 <__alt_exception_stack_pointer+0xf800e2d4>
    e33c:	91401517 	ldw	r5,84(r18)
    e340:	35400044 	addi	r21,r6,1
    e344:	a80d883a 	mov	r6,r21
    e348:	9009883a 	mov	r4,r18
    e34c:	d9c00515 	stw	r7,20(sp)
    e350:	00112c40 	call	112c4 <_realloc_r>
    e354:	1021883a 	mov	r16,r2
    e358:	d9c00517 	ldw	r7,20(sp)
    e35c:	10000326 	beq	r2,zero,e36c <ecvtbuf+0x138>
    e360:	95401415 	stw	r21,80(r18)
    e364:	90801515 	stw	r2,84(r18)
    e368:	003fc206 	br	e274 <__alt_exception_stack_pointer+0xf800e274>
    e36c:	0005883a 	mov	r2,zero
    e370:	003fe206 	br	e2fc <__alt_exception_stack_pointer+0xf800e2fc>

0000e374 <_gcvt>:
    e374:	defff204 	addi	sp,sp,-56
    e378:	dc800915 	stw	r18,36(sp)
    e37c:	3025883a 	mov	r18,r6
    e380:	dd400c15 	stw	r21,48(sp)
    e384:	dcc00a15 	stw	r19,40(sp)
    e388:	dc400815 	stw	r17,32(sp)
    e38c:	2827883a 	mov	r19,r5
    e390:	202b883a 	mov	r21,r4
    e394:	3823883a 	mov	r17,r7
    e398:	2809883a 	mov	r4,r5
    e39c:	000d883a 	mov	r6,zero
    e3a0:	000f883a 	mov	r7,zero
    e3a4:	900b883a 	mov	r5,r18
    e3a8:	dd000b15 	stw	r20,44(sp)
    e3ac:	dc000715 	stw	r16,28(sp)
    e3b0:	dfc00d15 	stw	ra,52(sp)
    e3b4:	dc000e17 	ldw	r16,56(sp)
    e3b8:	dd000f17 	ldw	r20,60(sp)
    e3bc:	0007cf00 	call	7cf0 <__ledf2>
    e3c0:	10009d16 	blt	r2,zero,e638 <_gcvt+0x2c4>
    e3c4:	000d883a 	mov	r6,zero
    e3c8:	000f883a 	mov	r7,zero
    e3cc:	9809883a 	mov	r4,r19
    e3d0:	900b883a 	mov	r5,r18
    e3d4:	0007b8c0 	call	7b8c <__eqdf2>
    e3d8:	10009326 	beq	r2,zero,e628 <_gcvt+0x2b4>
    e3dc:	01bac734 	movhi	r6,60188
    e3e0:	01cfc6b4 	movhi	r7,16154
    e3e4:	3190cb44 	addi	r6,r6,17197
    e3e8:	39cdb884 	addi	r7,r7,14050
    e3ec:	9809883a 	mov	r4,r19
    e3f0:	900b883a 	mov	r5,r18
    e3f4:	0007cf00 	call	7cf0 <__ledf2>
    e3f8:	0080740e 	bge	zero,r2,e5cc <_gcvt+0x258>
    e3fc:	8809883a 	mov	r4,r17
    e400:	001114c0 	call	1114c <_mprec_log10>
    e404:	100d883a 	mov	r6,r2
    e408:	180f883a 	mov	r7,r3
    e40c:	9809883a 	mov	r4,r19
    e410:	900b883a 	mov	r5,r18
    e414:	0007c140 	call	7c14 <__gedf2>
    e418:	10006c0e 	bge	r2,zero,e5cc <_gcvt+0x258>
    e41c:	000d883a 	mov	r6,zero
    e420:	01cffc34 	movhi	r7,16368
    e424:	9809883a 	mov	r4,r19
    e428:	900b883a 	mov	r5,r18
    e42c:	0007cf00 	call	7cf0 <__ledf2>
    e430:	10008316 	blt	r2,zero,e640 <_gcvt+0x2cc>
    e434:	d8800404 	addi	r2,sp,16
    e438:	d8800315 	stw	r2,12(sp)
    e43c:	d8800504 	addi	r2,sp,20
    e440:	d8800215 	stw	r2,8(sp)
    e444:	d8800604 	addi	r2,sp,24
    e448:	d8800115 	stw	r2,4(sp)
    e44c:	dc400015 	stw	r17,0(sp)
    e450:	01c00084 	movi	r7,2
    e454:	980b883a 	mov	r5,r19
    e458:	900d883a 	mov	r6,r18
    e45c:	a809883a 	mov	r4,r21
    e460:	000c8280 	call	c828 <_dtoa_r>
    e464:	d9400617 	ldw	r5,24(sp)
    e468:	00c9c3c4 	movi	r3,9999
    e46c:	28c08b26 	beq	r5,r3,e69c <_gcvt+0x328>
    e470:	11c00003 	ldbu	r7,0(r2)
    e474:	38c03fcc 	andi	r3,r7,255
    e478:	18c0201c 	xori	r3,r3,128
    e47c:	18ffe004 	addi	r3,r3,-128
    e480:	18008a26 	beq	r3,zero,e6ac <_gcvt+0x338>
    e484:	01408d0e 	bge	zero,r5,e6bc <_gcvt+0x348>
    e488:	8011883a 	mov	r8,r16
    e48c:	280d883a 	mov	r6,r5
    e490:	00000206 	br	e49c <_gcvt+0x128>
    e494:	2011883a 	mov	r8,r4
    e498:	30001926 	beq	r6,zero,e500 <_gcvt+0x18c>
    e49c:	31bfffc4 	addi	r6,r6,-1
    e4a0:	41c00005 	stb	r7,0(r8)
    e4a4:	d9800615 	stw	r6,24(sp)
    e4a8:	10800044 	addi	r2,r2,1
    e4ac:	11c00003 	ldbu	r7,0(r2)
    e4b0:	41000044 	addi	r4,r8,1
    e4b4:	3147c83a 	sub	r3,r6,r5
    e4b8:	3a003fcc 	andi	r8,r7,255
    e4bc:	4200201c 	xori	r8,r8,128
    e4c0:	423fe004 	addi	r8,r8,-128
    e4c4:	1c47883a 	add	r3,r3,r17
    e4c8:	403ff21e 	bne	r8,zero,e494 <__alt_exception_stack_pointer+0xf800e494>
    e4cc:	01800c0e 	bge	zero,r6,e500 <_gcvt+0x18c>
    e4d0:	200f883a 	mov	r7,r4
    e4d4:	00c00a0e 	bge	zero,r3,e500 <_gcvt+0x18c>
    e4d8:	01400c04 	movi	r5,48
    e4dc:	00000206 	br	e4e8 <_gcvt+0x174>
    e4e0:	200f883a 	mov	r7,r4
    e4e4:	18006326 	beq	r3,zero,e674 <_gcvt+0x300>
    e4e8:	39400005 	stb	r5,0(r7)
    e4ec:	31bfffc4 	addi	r6,r6,-1
    e4f0:	21000044 	addi	r4,r4,1
    e4f4:	18ffffc4 	addi	r3,r3,-1
    e4f8:	303ff91e 	bne	r6,zero,e4e0 <__alt_exception_stack_pointer+0xf800e4e0>
    e4fc:	d8000615 	stw	zero,24(sp)
    e500:	d9401017 	ldw	r5,64(sp)
    e504:	2800021e 	bne	r5,zero,e510 <_gcvt+0x19c>
    e508:	11400007 	ldb	r5,0(r2)
    e50c:	28002d26 	beq	r5,zero,e5c4 <_gcvt+0x250>
    e510:	81005e26 	beq	r16,r4,e68c <_gcvt+0x318>
    e514:	d9800617 	ldw	r6,24(sp)
    e518:	01400b84 	movi	r5,46
    e51c:	21400005 	stb	r5,0(r4)
    e520:	21c00044 	addi	r7,r4,1
    e524:	3000680e 	bge	r6,zero,e6c8 <_gcvt+0x354>
    e528:	00c0690e 	bge	zero,r3,e6d0 <_gcvt+0x35c>
    e52c:	01400c04 	movi	r5,48
    e530:	00000206 	br	e53c <_gcvt+0x1c8>
    e534:	200f883a 	mov	r7,r4
    e538:	18005026 	beq	r3,zero,e67c <_gcvt+0x308>
    e53c:	39400005 	stb	r5,0(r7)
    e540:	31800044 	addi	r6,r6,1
    e544:	39000044 	addi	r4,r7,1
    e548:	18ffffc4 	addi	r3,r3,-1
    e54c:	303ff91e 	bne	r6,zero,e534 <__alt_exception_stack_pointer+0xf800e534>
    e550:	d8000615 	stw	zero,24(sp)
    e554:	11800003 	ldbu	r6,0(r2)
    e558:	31403fcc 	andi	r5,r6,255
    e55c:	2940201c 	xori	r5,r5,128
    e560:	297fe004 	addi	r5,r5,-128
    e564:	28000e26 	beq	r5,zero,e5a0 <_gcvt+0x22c>
    e568:	200b883a 	mov	r5,r4
    e56c:	00c00316 	blt	zero,r3,e57c <_gcvt+0x208>
    e570:	00001406 	br	e5c4 <_gcvt+0x250>
    e574:	200b883a 	mov	r5,r4
    e578:	18001226 	beq	r3,zero,e5c4 <_gcvt+0x250>
    e57c:	29800005 	stb	r6,0(r5)
    e580:	10800044 	addi	r2,r2,1
    e584:	11800003 	ldbu	r6,0(r2)
    e588:	21000044 	addi	r4,r4,1
    e58c:	18ffffc4 	addi	r3,r3,-1
    e590:	31403fcc 	andi	r5,r6,255
    e594:	2940201c 	xori	r5,r5,128
    e598:	297fe004 	addi	r5,r5,-128
    e59c:	283ff51e 	bne	r5,zero,e574 <__alt_exception_stack_pointer+0xf800e574>
    e5a0:	d8801017 	ldw	r2,64(sp)
    e5a4:	10000726 	beq	r2,zero,e5c4 <_gcvt+0x250>
    e5a8:	00c0060e 	bge	zero,r3,e5c4 <_gcvt+0x250>
    e5ac:	2005883a 	mov	r2,r4
    e5b0:	01400c04 	movi	r5,48
    e5b4:	20c9883a 	add	r4,r4,r3
    e5b8:	11400005 	stb	r5,0(r2)
    e5bc:	10800044 	addi	r2,r2,1
    e5c0:	20bffd1e 	bne	r4,r2,e5b8 <__alt_exception_stack_pointer+0xf800e5b8>
    e5c4:	20000005 	stb	zero,0(r4)
    e5c8:	00000d06 	br	e600 <_gcvt+0x28c>
    e5cc:	a5003fcc 	andi	r20,r20,255
    e5d0:	d8801017 	ldw	r2,64(sp)
    e5d4:	a500201c 	xori	r20,r20,128
    e5d8:	a53fe004 	addi	r20,r20,-128
    e5dc:	8c7fffc4 	addi	r17,r17,-1
    e5e0:	d8800215 	stw	r2,8(sp)
    e5e4:	dd000115 	stw	r20,4(sp)
    e5e8:	dc400015 	stw	r17,0(sp)
    e5ec:	980d883a 	mov	r6,r19
    e5f0:	900f883a 	mov	r7,r18
    e5f4:	800b883a 	mov	r5,r16
    e5f8:	a809883a 	mov	r4,r21
    e5fc:	000deb00 	call	deb0 <print_e>
    e600:	8005883a 	mov	r2,r16
    e604:	dfc00d17 	ldw	ra,52(sp)
    e608:	dd400c17 	ldw	r21,48(sp)
    e60c:	dd000b17 	ldw	r20,44(sp)
    e610:	dcc00a17 	ldw	r19,40(sp)
    e614:	dc800917 	ldw	r18,36(sp)
    e618:	dc400817 	ldw	r17,32(sp)
    e61c:	dc000717 	ldw	r16,28(sp)
    e620:	dec00e04 	addi	sp,sp,56
    e624:	f800283a 	ret
    e628:	00800c04 	movi	r2,48
    e62c:	80800005 	stb	r2,0(r16)
    e630:	80000045 	stb	zero,1(r16)
    e634:	003ff206 	br	e600 <__alt_exception_stack_pointer+0xf800e600>
    e638:	94a0003c 	xorhi	r18,r18,32768
    e63c:	003f6106 	br	e3c4 <__alt_exception_stack_pointer+0xf800e3c4>
    e640:	d8800504 	addi	r2,sp,20
    e644:	d9400404 	addi	r5,sp,16
    e648:	d8800215 	stw	r2,8(sp)
    e64c:	d8800604 	addi	r2,sp,24
    e650:	d9400315 	stw	r5,12(sp)
    e654:	d8800115 	stw	r2,4(sp)
    e658:	dc400015 	stw	r17,0(sp)
    e65c:	01c000c4 	movi	r7,3
    e660:	980b883a 	mov	r5,r19
    e664:	900d883a 	mov	r6,r18
    e668:	a809883a 	mov	r4,r21
    e66c:	000c8280 	call	c828 <_dtoa_r>
    e670:	003f7c06 	br	e464 <__alt_exception_stack_pointer+0xf800e464>
    e674:	d9800615 	stw	r6,24(sp)
    e678:	003fa106 	br	e500 <__alt_exception_stack_pointer+0xf800e500>
    e67c:	d9800615 	stw	r6,24(sp)
    e680:	10800007 	ldb	r2,0(r2)
    e684:	103fc626 	beq	r2,zero,e5a0 <__alt_exception_stack_pointer+0xf800e5a0>
    e688:	003fce06 	br	e5c4 <__alt_exception_stack_pointer+0xf800e5c4>
    e68c:	01400c04 	movi	r5,48
    e690:	81000044 	addi	r4,r16,1
    e694:	81400005 	stb	r5,0(r16)
    e698:	003f9e06 	br	e514 <__alt_exception_stack_pointer+0xf800e514>
    e69c:	100b883a 	mov	r5,r2
    e6a0:	8009883a 	mov	r4,r16
    e6a4:	0011ab40 	call	11ab4 <strcpy>
    e6a8:	003fd506 	br	e600 <__alt_exception_stack_pointer+0xf800e600>
    e6ac:	280d883a 	mov	r6,r5
    e6b0:	8009883a 	mov	r4,r16
    e6b4:	8807883a 	mov	r3,r17
    e6b8:	003f8406 	br	e4cc <__alt_exception_stack_pointer+0xf800e4cc>
    e6bc:	8009883a 	mov	r4,r16
    e6c0:	8807883a 	mov	r3,r17
    e6c4:	003f8e06 	br	e500 <__alt_exception_stack_pointer+0xf800e500>
    e6c8:	3809883a 	mov	r4,r7
    e6cc:	003fa106 	br	e554 <__alt_exception_stack_pointer+0xf800e554>
    e6d0:	3809883a 	mov	r4,r7
    e6d4:	003fea06 	br	e680 <__alt_exception_stack_pointer+0xf800e680>

0000e6d8 <_dcvt>:
    e6d8:	defff504 	addi	sp,sp,-44
    e6dc:	da000d17 	ldw	r8,52(sp)
    e6e0:	dc800915 	stw	r18,36(sp)
    e6e4:	dc000715 	stw	r16,28(sp)
    e6e8:	40bfeec4 	addi	r2,r8,-69
    e6ec:	dfc00a15 	stw	ra,40(sp)
    e6f0:	dc400815 	stw	r17,32(sp)
    e6f4:	10803fcc 	andi	r2,r2,255
    e6f8:	00c00884 	movi	r3,34
    e6fc:	2825883a 	mov	r18,r5
    e700:	dc000b17 	ldw	r16,44(sp)
    e704:	18802c36 	bltu	r3,r2,e7b8 <_dcvt+0xe0>
    e708:	100490ba 	slli	r2,r2,2
    e70c:	00c00074 	movhi	r3,1
    e710:	18f9c904 	addi	r3,r3,-6364
    e714:	10c5883a 	add	r2,r2,r3
    e718:	10800017 	ldw	r2,0(r2)
    e71c:	3813883a 	mov	r9,r7
    e720:	1000683a 	jmp	r2
    e724:	0000e97c 	xorhi	zero,zero,933
    e728:	0000e80c 	andi	zero,zero,928
    e72c:	0000e7d4 	movui	zero,927
    e730:	0000e7b8 	rdprs	zero,zero,926
    e734:	0000e7b8 	rdprs	zero,zero,926
    e738:	0000e7b8 	rdprs	zero,zero,926
    e73c:	0000e7b8 	rdprs	zero,zero,926
    e740:	0000e7b8 	rdprs	zero,zero,926
    e744:	0000e7b8 	rdprs	zero,zero,926
    e748:	0000e7b8 	rdprs	zero,zero,926
    e74c:	0000e7b8 	rdprs	zero,zero,926
    e750:	0000e7b8 	rdprs	zero,zero,926
    e754:	0000e7b8 	rdprs	zero,zero,926
    e758:	0000e7b8 	rdprs	zero,zero,926
    e75c:	0000e7b8 	rdprs	zero,zero,926
    e760:	0000e7b8 	rdprs	zero,zero,926
    e764:	0000e7b8 	rdprs	zero,zero,926
    e768:	0000e7b8 	rdprs	zero,zero,926
    e76c:	0000e7b8 	rdprs	zero,zero,926
    e770:	0000e7b8 	rdprs	zero,zero,926
    e774:	0000e7b8 	rdprs	zero,zero,926
    e778:	0000e7b8 	rdprs	zero,zero,926
    e77c:	0000e7b8 	rdprs	zero,zero,926
    e780:	0000e7b8 	rdprs	zero,zero,926
    e784:	0000e7b8 	rdprs	zero,zero,926
    e788:	0000e7b8 	rdprs	zero,zero,926
    e78c:	0000e7b8 	rdprs	zero,zero,926
    e790:	0000e7b8 	rdprs	zero,zero,926
    e794:	0000e7b8 	rdprs	zero,zero,926
    e798:	0000e7b8 	rdprs	zero,zero,926
    e79c:	0000e7b8 	rdprs	zero,zero,926
    e7a0:	0000e7b8 	rdprs	zero,zero,926
    e7a4:	0000e97c 	xorhi	zero,zero,933
    e7a8:	0000e80c 	andi	zero,zero,928
    e7ac:	0000e7d4 	movui	zero,927
    e7b0:	1007883a 	mov	r3,r2
    e7b4:	18000005 	stb	zero,0(r3)
    e7b8:	9005883a 	mov	r2,r18
    e7bc:	dfc00a17 	ldw	ra,40(sp)
    e7c0:	dc800917 	ldw	r18,36(sp)
    e7c4:	dc400817 	ldw	r17,32(sp)
    e7c8:	dc000717 	ldw	r16,28(sp)
    e7cc:	dec00b04 	addi	sp,sp,44
    e7d0:	f800283a 	ret
    e7d4:	8000011e 	bne	r16,zero,e7dc <_dcvt+0x104>
    e7d8:	04000044 	movi	r16,1
    e7dc:	d8800e17 	ldw	r2,56(sp)
    e7e0:	42003fcc 	andi	r8,r8,255
    e7e4:	4200201c 	xori	r8,r8,128
    e7e8:	423fe004 	addi	r8,r8,-128
    e7ec:	300b883a 	mov	r5,r6
    e7f0:	d8800215 	stw	r2,8(sp)
    e7f4:	da000115 	stw	r8,4(sp)
    e7f8:	dc800015 	stw	r18,0(sp)
    e7fc:	800f883a 	mov	r7,r16
    e800:	480d883a 	mov	r6,r9
    e804:	000e3740 	call	e374 <_gcvt>
    e808:	003feb06 	br	e7b8 <__alt_exception_stack_pointer+0xf800e7b8>
    e80c:	8000641e 	bne	r16,zero,e9a0 <_dcvt+0x2c8>
    e810:	dc400e17 	ldw	r17,56(sp)
    e814:	d8800404 	addi	r2,sp,16
    e818:	d8800315 	stw	r2,12(sp)
    e81c:	d8800504 	addi	r2,sp,20
    e820:	d8800215 	stw	r2,8(sp)
    e824:	d8800604 	addi	r2,sp,24
    e828:	300b883a 	mov	r5,r6
    e82c:	d8800115 	stw	r2,4(sp)
    e830:	480d883a 	mov	r6,r9
    e834:	dc000015 	stw	r16,0(sp)
    e838:	01c000c4 	movi	r7,3
    e83c:	000c8280 	call	c828 <_dtoa_r>
    e840:	d9800617 	ldw	r6,24(sp)
    e844:	00c9c3c4 	movi	r3,9999
    e848:	30c05b26 	beq	r6,r3,e9b8 <_dcvt+0x2e0>
    e84c:	11c00003 	ldbu	r7,0(r2)
    e850:	38c03fcc 	andi	r3,r7,255
    e854:	18c0201c 	xori	r3,r3,128
    e858:	18ffe004 	addi	r3,r3,-128
    e85c:	18005a26 	beq	r3,zero,e9c8 <_dcvt+0x2f0>
    e860:	01805c0e 	bge	zero,r6,e9d4 <_dcvt+0x2fc>
    e864:	9011883a 	mov	r8,r18
    e868:	1009883a 	mov	r4,r2
    e86c:	00000206 	br	e878 <_dcvt+0x1a0>
    e870:	1811883a 	mov	r8,r3
    e874:	30001226 	beq	r6,zero,e8c0 <_dcvt+0x1e8>
    e878:	31bfffc4 	addi	r6,r6,-1
    e87c:	41c00005 	stb	r7,0(r8)
    e880:	21000044 	addi	r4,r4,1
    e884:	d9800615 	stw	r6,24(sp)
    e888:	21c00003 	ldbu	r7,0(r4)
    e88c:	40c00044 	addi	r3,r8,1
    e890:	3a003fcc 	andi	r8,r7,255
    e894:	4200201c 	xori	r8,r8,128
    e898:	423fe004 	addi	r8,r8,-128
    e89c:	403ff41e 	bne	r8,zero,e870 <__alt_exception_stack_pointer+0xf800e870>
    e8a0:	0180070e 	bge	zero,r6,e8c0 <_dcvt+0x1e8>
    e8a4:	180f883a 	mov	r7,r3
    e8a8:	02000c04 	movi	r8,48
    e8ac:	1987883a 	add	r3,r3,r6
    e8b0:	3a000005 	stb	r8,0(r7)
    e8b4:	39c00044 	addi	r7,r7,1
    e8b8:	19fffd1e 	bne	r3,r7,e8b0 <__alt_exception_stack_pointer+0xf800e8b0>
    e8bc:	d8000615 	stw	zero,24(sp)
    e8c0:	8800021e 	bne	r17,zero,e8cc <_dcvt+0x1f4>
    e8c4:	21400007 	ldb	r5,0(r4)
    e8c8:	283fba26 	beq	r5,zero,e7b4 <__alt_exception_stack_pointer+0xf800e7b4>
    e8cc:	11003626 	beq	r2,r4,e9a8 <_dcvt+0x2d0>
    e8d0:	d9400617 	ldw	r5,24(sp)
    e8d4:	00800b84 	movi	r2,46
    e8d8:	18800005 	stb	r2,0(r3)
    e8dc:	18800044 	addi	r2,r3,1
    e8e0:	28003f0e 	bge	r5,zero,e9e0 <_dcvt+0x308>
    e8e4:	043fb20e 	bge	zero,r16,e7b0 <__alt_exception_stack_pointer+0xf800e7b0>
    e8e8:	01800c04 	movi	r6,48
    e8ec:	00000206 	br	e8f8 <_dcvt+0x220>
    e8f0:	1805883a 	mov	r2,r3
    e8f4:	803faf26 	beq	r16,zero,e7b4 <__alt_exception_stack_pointer+0xf800e7b4>
    e8f8:	11800005 	stb	r6,0(r2)
    e8fc:	29400044 	addi	r5,r5,1
    e900:	10c00044 	addi	r3,r2,1
    e904:	843fffc4 	addi	r16,r16,-1
    e908:	283ff91e 	bne	r5,zero,e8f0 <__alt_exception_stack_pointer+0xf800e8f0>
    e90c:	d8000615 	stw	zero,24(sp)
    e910:	20800003 	ldbu	r2,0(r4)
    e914:	11403fcc 	andi	r5,r2,255
    e918:	2940201c 	xori	r5,r5,128
    e91c:	297fe004 	addi	r5,r5,-128
    e920:	28000e26 	beq	r5,zero,e95c <_dcvt+0x284>
    e924:	043fa30e 	bge	zero,r16,e7b4 <__alt_exception_stack_pointer+0xf800e7b4>
    e928:	180b883a 	mov	r5,r3
    e92c:	00000206 	br	e938 <_dcvt+0x260>
    e930:	180b883a 	mov	r5,r3
    e934:	803f9f26 	beq	r16,zero,e7b4 <__alt_exception_stack_pointer+0xf800e7b4>
    e938:	28800005 	stb	r2,0(r5)
    e93c:	21000044 	addi	r4,r4,1
    e940:	20800003 	ldbu	r2,0(r4)
    e944:	18c00044 	addi	r3,r3,1
    e948:	843fffc4 	addi	r16,r16,-1
    e94c:	11403fcc 	andi	r5,r2,255
    e950:	2940201c 	xori	r5,r5,128
    e954:	297fe004 	addi	r5,r5,-128
    e958:	283ff51e 	bne	r5,zero,e930 <__alt_exception_stack_pointer+0xf800e930>
    e95c:	043f950e 	bge	zero,r16,e7b4 <__alt_exception_stack_pointer+0xf800e7b4>
    e960:	1805883a 	mov	r2,r3
    e964:	01000c04 	movi	r4,48
    e968:	1c07883a 	add	r3,r3,r16
    e96c:	11000005 	stb	r4,0(r2)
    e970:	10800044 	addi	r2,r2,1
    e974:	18bffd1e 	bne	r3,r2,e96c <__alt_exception_stack_pointer+0xf800e96c>
    e978:	003f8e06 	br	e7b4 <__alt_exception_stack_pointer+0xf800e7b4>
    e97c:	d8800e17 	ldw	r2,56(sp)
    e980:	42003fcc 	andi	r8,r8,255
    e984:	4200201c 	xori	r8,r8,128
    e988:	423fe004 	addi	r8,r8,-128
    e98c:	d8800215 	stw	r2,8(sp)
    e990:	da000115 	stw	r8,4(sp)
    e994:	dc000015 	stw	r16,0(sp)
    e998:	000deb00 	call	deb0 <print_e>
    e99c:	003f8606 	br	e7b8 <__alt_exception_stack_pointer+0xf800e7b8>
    e9a0:	04400044 	movi	r17,1
    e9a4:	003f9b06 	br	e814 <__alt_exception_stack_pointer+0xf800e814>
    e9a8:	00800c04 	movi	r2,48
    e9ac:	18800005 	stb	r2,0(r3)
    e9b0:	18c00044 	addi	r3,r3,1
    e9b4:	003fc606 	br	e8d0 <__alt_exception_stack_pointer+0xf800e8d0>
    e9b8:	100b883a 	mov	r5,r2
    e9bc:	9009883a 	mov	r4,r18
    e9c0:	0011ab40 	call	11ab4 <strcpy>
    e9c4:	003f7c06 	br	e7b8 <__alt_exception_stack_pointer+0xf800e7b8>
    e9c8:	1009883a 	mov	r4,r2
    e9cc:	9007883a 	mov	r3,r18
    e9d0:	003fb306 	br	e8a0 <__alt_exception_stack_pointer+0xf800e8a0>
    e9d4:	1009883a 	mov	r4,r2
    e9d8:	9007883a 	mov	r3,r18
    e9dc:	003fb806 	br	e8c0 <__alt_exception_stack_pointer+0xf800e8c0>
    e9e0:	1007883a 	mov	r3,r2
    e9e4:	003fca06 	br	e910 <__alt_exception_stack_pointer+0xf800e910>

0000e9e8 <__sflush_r>:
    e9e8:	2880030b 	ldhu	r2,12(r5)
    e9ec:	defffb04 	addi	sp,sp,-20
    e9f0:	dcc00315 	stw	r19,12(sp)
    e9f4:	dc400115 	stw	r17,4(sp)
    e9f8:	dfc00415 	stw	ra,16(sp)
    e9fc:	dc800215 	stw	r18,8(sp)
    ea00:	dc000015 	stw	r16,0(sp)
    ea04:	10c0020c 	andi	r3,r2,8
    ea08:	2823883a 	mov	r17,r5
    ea0c:	2027883a 	mov	r19,r4
    ea10:	1800311e 	bne	r3,zero,ead8 <__sflush_r+0xf0>
    ea14:	28c00117 	ldw	r3,4(r5)
    ea18:	10820014 	ori	r2,r2,2048
    ea1c:	2880030d 	sth	r2,12(r5)
    ea20:	00c04b0e 	bge	zero,r3,eb50 <__sflush_r+0x168>
    ea24:	8a000a17 	ldw	r8,40(r17)
    ea28:	40002326 	beq	r8,zero,eab8 <__sflush_r+0xd0>
    ea2c:	9c000017 	ldw	r16,0(r19)
    ea30:	10c4000c 	andi	r3,r2,4096
    ea34:	98000015 	stw	zero,0(r19)
    ea38:	18004826 	beq	r3,zero,eb5c <__sflush_r+0x174>
    ea3c:	89801417 	ldw	r6,80(r17)
    ea40:	10c0010c 	andi	r3,r2,4
    ea44:	18000626 	beq	r3,zero,ea60 <__sflush_r+0x78>
    ea48:	88c00117 	ldw	r3,4(r17)
    ea4c:	88800c17 	ldw	r2,48(r17)
    ea50:	30cdc83a 	sub	r6,r6,r3
    ea54:	10000226 	beq	r2,zero,ea60 <__sflush_r+0x78>
    ea58:	88800f17 	ldw	r2,60(r17)
    ea5c:	308dc83a 	sub	r6,r6,r2
    ea60:	89400717 	ldw	r5,28(r17)
    ea64:	000f883a 	mov	r7,zero
    ea68:	9809883a 	mov	r4,r19
    ea6c:	403ee83a 	callr	r8
    ea70:	00ffffc4 	movi	r3,-1
    ea74:	10c04426 	beq	r2,r3,eb88 <__sflush_r+0x1a0>
    ea78:	88c0030b 	ldhu	r3,12(r17)
    ea7c:	89000417 	ldw	r4,16(r17)
    ea80:	88000115 	stw	zero,4(r17)
    ea84:	197dffcc 	andi	r5,r3,63487
    ea88:	8940030d 	sth	r5,12(r17)
    ea8c:	89000015 	stw	r4,0(r17)
    ea90:	18c4000c 	andi	r3,r3,4096
    ea94:	18002c1e 	bne	r3,zero,eb48 <__sflush_r+0x160>
    ea98:	89400c17 	ldw	r5,48(r17)
    ea9c:	9c000015 	stw	r16,0(r19)
    eaa0:	28000526 	beq	r5,zero,eab8 <__sflush_r+0xd0>
    eaa4:	88801004 	addi	r2,r17,64
    eaa8:	28800226 	beq	r5,r2,eab4 <__sflush_r+0xcc>
    eaac:	9809883a 	mov	r4,r19
    eab0:	000f1640 	call	f164 <_free_r>
    eab4:	88000c15 	stw	zero,48(r17)
    eab8:	0005883a 	mov	r2,zero
    eabc:	dfc00417 	ldw	ra,16(sp)
    eac0:	dcc00317 	ldw	r19,12(sp)
    eac4:	dc800217 	ldw	r18,8(sp)
    eac8:	dc400117 	ldw	r17,4(sp)
    eacc:	dc000017 	ldw	r16,0(sp)
    ead0:	dec00504 	addi	sp,sp,20
    ead4:	f800283a 	ret
    ead8:	2c800417 	ldw	r18,16(r5)
    eadc:	903ff626 	beq	r18,zero,eab8 <__alt_exception_stack_pointer+0xf800eab8>
    eae0:	2c000017 	ldw	r16,0(r5)
    eae4:	108000cc 	andi	r2,r2,3
    eae8:	2c800015 	stw	r18,0(r5)
    eaec:	84a1c83a 	sub	r16,r16,r18
    eaf0:	1000131e 	bne	r2,zero,eb40 <__sflush_r+0x158>
    eaf4:	28800517 	ldw	r2,20(r5)
    eaf8:	88800215 	stw	r2,8(r17)
    eafc:	04000316 	blt	zero,r16,eb0c <__sflush_r+0x124>
    eb00:	003fed06 	br	eab8 <__alt_exception_stack_pointer+0xf800eab8>
    eb04:	90a5883a 	add	r18,r18,r2
    eb08:	043feb0e 	bge	zero,r16,eab8 <__alt_exception_stack_pointer+0xf800eab8>
    eb0c:	88800917 	ldw	r2,36(r17)
    eb10:	89400717 	ldw	r5,28(r17)
    eb14:	800f883a 	mov	r7,r16
    eb18:	900d883a 	mov	r6,r18
    eb1c:	9809883a 	mov	r4,r19
    eb20:	103ee83a 	callr	r2
    eb24:	80a1c83a 	sub	r16,r16,r2
    eb28:	00bff616 	blt	zero,r2,eb04 <__alt_exception_stack_pointer+0xf800eb04>
    eb2c:	88c0030b 	ldhu	r3,12(r17)
    eb30:	00bfffc4 	movi	r2,-1
    eb34:	18c01014 	ori	r3,r3,64
    eb38:	88c0030d 	sth	r3,12(r17)
    eb3c:	003fdf06 	br	eabc <__alt_exception_stack_pointer+0xf800eabc>
    eb40:	0005883a 	mov	r2,zero
    eb44:	003fec06 	br	eaf8 <__alt_exception_stack_pointer+0xf800eaf8>
    eb48:	88801415 	stw	r2,80(r17)
    eb4c:	003fd206 	br	ea98 <__alt_exception_stack_pointer+0xf800ea98>
    eb50:	28c00f17 	ldw	r3,60(r5)
    eb54:	00ffb316 	blt	zero,r3,ea24 <__alt_exception_stack_pointer+0xf800ea24>
    eb58:	003fd706 	br	eab8 <__alt_exception_stack_pointer+0xf800eab8>
    eb5c:	89400717 	ldw	r5,28(r17)
    eb60:	000d883a 	mov	r6,zero
    eb64:	01c00044 	movi	r7,1
    eb68:	9809883a 	mov	r4,r19
    eb6c:	403ee83a 	callr	r8
    eb70:	100d883a 	mov	r6,r2
    eb74:	00bfffc4 	movi	r2,-1
    eb78:	30801426 	beq	r6,r2,ebcc <__sflush_r+0x1e4>
    eb7c:	8880030b 	ldhu	r2,12(r17)
    eb80:	8a000a17 	ldw	r8,40(r17)
    eb84:	003fae06 	br	ea40 <__alt_exception_stack_pointer+0xf800ea40>
    eb88:	98c00017 	ldw	r3,0(r19)
    eb8c:	183fba26 	beq	r3,zero,ea78 <__alt_exception_stack_pointer+0xf800ea78>
    eb90:	01000744 	movi	r4,29
    eb94:	19000626 	beq	r3,r4,ebb0 <__sflush_r+0x1c8>
    eb98:	01000584 	movi	r4,22
    eb9c:	19000426 	beq	r3,r4,ebb0 <__sflush_r+0x1c8>
    eba0:	88c0030b 	ldhu	r3,12(r17)
    eba4:	18c01014 	ori	r3,r3,64
    eba8:	88c0030d 	sth	r3,12(r17)
    ebac:	003fc306 	br	eabc <__alt_exception_stack_pointer+0xf800eabc>
    ebb0:	8880030b 	ldhu	r2,12(r17)
    ebb4:	88c00417 	ldw	r3,16(r17)
    ebb8:	88000115 	stw	zero,4(r17)
    ebbc:	10bdffcc 	andi	r2,r2,63487
    ebc0:	8880030d 	sth	r2,12(r17)
    ebc4:	88c00015 	stw	r3,0(r17)
    ebc8:	003fb306 	br	ea98 <__alt_exception_stack_pointer+0xf800ea98>
    ebcc:	98800017 	ldw	r2,0(r19)
    ebd0:	103fea26 	beq	r2,zero,eb7c <__alt_exception_stack_pointer+0xf800eb7c>
    ebd4:	00c00744 	movi	r3,29
    ebd8:	10c00226 	beq	r2,r3,ebe4 <__sflush_r+0x1fc>
    ebdc:	00c00584 	movi	r3,22
    ebe0:	10c0031e 	bne	r2,r3,ebf0 <__sflush_r+0x208>
    ebe4:	9c000015 	stw	r16,0(r19)
    ebe8:	0005883a 	mov	r2,zero
    ebec:	003fb306 	br	eabc <__alt_exception_stack_pointer+0xf800eabc>
    ebf0:	88c0030b 	ldhu	r3,12(r17)
    ebf4:	3005883a 	mov	r2,r6
    ebf8:	18c01014 	ori	r3,r3,64
    ebfc:	88c0030d 	sth	r3,12(r17)
    ec00:	003fae06 	br	eabc <__alt_exception_stack_pointer+0xf800eabc>

0000ec04 <_fflush_r>:
    ec04:	defffd04 	addi	sp,sp,-12
    ec08:	dc000115 	stw	r16,4(sp)
    ec0c:	dfc00215 	stw	ra,8(sp)
    ec10:	2021883a 	mov	r16,r4
    ec14:	20000226 	beq	r4,zero,ec20 <_fflush_r+0x1c>
    ec18:	20800e17 	ldw	r2,56(r4)
    ec1c:	10000c26 	beq	r2,zero,ec50 <_fflush_r+0x4c>
    ec20:	2880030f 	ldh	r2,12(r5)
    ec24:	1000051e 	bne	r2,zero,ec3c <_fflush_r+0x38>
    ec28:	0005883a 	mov	r2,zero
    ec2c:	dfc00217 	ldw	ra,8(sp)
    ec30:	dc000117 	ldw	r16,4(sp)
    ec34:	dec00304 	addi	sp,sp,12
    ec38:	f800283a 	ret
    ec3c:	8009883a 	mov	r4,r16
    ec40:	dfc00217 	ldw	ra,8(sp)
    ec44:	dc000117 	ldw	r16,4(sp)
    ec48:	dec00304 	addi	sp,sp,12
    ec4c:	000e9e81 	jmpi	e9e8 <__sflush_r>
    ec50:	d9400015 	stw	r5,0(sp)
    ec54:	000eff00 	call	eff0 <__sinit>
    ec58:	d9400017 	ldw	r5,0(sp)
    ec5c:	003ff006 	br	ec20 <__alt_exception_stack_pointer+0xf800ec20>

0000ec60 <fflush>:
    ec60:	20000526 	beq	r4,zero,ec78 <fflush+0x18>
    ec64:	008000b4 	movhi	r2,2
    ec68:	10ac8004 	addi	r2,r2,-19968
    ec6c:	200b883a 	mov	r5,r4
    ec70:	11000017 	ldw	r4,0(r2)
    ec74:	000ec041 	jmpi	ec04 <_fflush_r>
    ec78:	008000b4 	movhi	r2,2
    ec7c:	10ac7f04 	addi	r2,r2,-19972
    ec80:	11000017 	ldw	r4,0(r2)
    ec84:	01400074 	movhi	r5,1
    ec88:	297b0104 	addi	r5,r5,-5116
    ec8c:	000fa001 	jmpi	fa00 <_fwalk_reent>

0000ec90 <__fp_unlock>:
    ec90:	0005883a 	mov	r2,zero
    ec94:	f800283a 	ret

0000ec98 <_cleanup_r>:
    ec98:	01400074 	movhi	r5,1
    ec9c:	294cf304 	addi	r5,r5,13260
    eca0:	000fa001 	jmpi	fa00 <_fwalk_reent>

0000eca4 <__sinit.part.1>:
    eca4:	defff704 	addi	sp,sp,-36
    eca8:	00c00074 	movhi	r3,1
    ecac:	dfc00815 	stw	ra,32(sp)
    ecb0:	ddc00715 	stw	r23,28(sp)
    ecb4:	dd800615 	stw	r22,24(sp)
    ecb8:	dd400515 	stw	r21,20(sp)
    ecbc:	dd000415 	stw	r20,16(sp)
    ecc0:	dcc00315 	stw	r19,12(sp)
    ecc4:	dc800215 	stw	r18,8(sp)
    ecc8:	dc400115 	stw	r17,4(sp)
    eccc:	dc000015 	stw	r16,0(sp)
    ecd0:	18fb2604 	addi	r3,r3,-4968
    ecd4:	24000117 	ldw	r16,4(r4)
    ecd8:	20c00f15 	stw	r3,60(r4)
    ecdc:	2080bb04 	addi	r2,r4,748
    ece0:	00c000c4 	movi	r3,3
    ece4:	20c0b915 	stw	r3,740(r4)
    ece8:	2080ba15 	stw	r2,744(r4)
    ecec:	2000b815 	stw	zero,736(r4)
    ecf0:	05c00204 	movi	r23,8
    ecf4:	00800104 	movi	r2,4
    ecf8:	2025883a 	mov	r18,r4
    ecfc:	b80d883a 	mov	r6,r23
    ed00:	81001704 	addi	r4,r16,92
    ed04:	000b883a 	mov	r5,zero
    ed08:	80000015 	stw	zero,0(r16)
    ed0c:	80000115 	stw	zero,4(r16)
    ed10:	80000215 	stw	zero,8(r16)
    ed14:	8080030d 	sth	r2,12(r16)
    ed18:	80001915 	stw	zero,100(r16)
    ed1c:	8000038d 	sth	zero,14(r16)
    ed20:	80000415 	stw	zero,16(r16)
    ed24:	80000515 	stw	zero,20(r16)
    ed28:	80000615 	stw	zero,24(r16)
    ed2c:	00100e40 	call	100e4 <memset>
    ed30:	05800074 	movhi	r22,1
    ed34:	94400217 	ldw	r17,8(r18)
    ed38:	05400074 	movhi	r21,1
    ed3c:	05000074 	movhi	r20,1
    ed40:	04c00074 	movhi	r19,1
    ed44:	b5862704 	addi	r22,r22,6300
    ed48:	ad463e04 	addi	r21,r21,6392
    ed4c:	a5065d04 	addi	r20,r20,6516
    ed50:	9cc67404 	addi	r19,r19,6608
    ed54:	85800815 	stw	r22,32(r16)
    ed58:	85400915 	stw	r21,36(r16)
    ed5c:	85000a15 	stw	r20,40(r16)
    ed60:	84c00b15 	stw	r19,44(r16)
    ed64:	84000715 	stw	r16,28(r16)
    ed68:	00800284 	movi	r2,10
    ed6c:	8880030d 	sth	r2,12(r17)
    ed70:	00800044 	movi	r2,1
    ed74:	b80d883a 	mov	r6,r23
    ed78:	89001704 	addi	r4,r17,92
    ed7c:	000b883a 	mov	r5,zero
    ed80:	88000015 	stw	zero,0(r17)
    ed84:	88000115 	stw	zero,4(r17)
    ed88:	88000215 	stw	zero,8(r17)
    ed8c:	88001915 	stw	zero,100(r17)
    ed90:	8880038d 	sth	r2,14(r17)
    ed94:	88000415 	stw	zero,16(r17)
    ed98:	88000515 	stw	zero,20(r17)
    ed9c:	88000615 	stw	zero,24(r17)
    eda0:	00100e40 	call	100e4 <memset>
    eda4:	94000317 	ldw	r16,12(r18)
    eda8:	00800484 	movi	r2,18
    edac:	8c400715 	stw	r17,28(r17)
    edb0:	8d800815 	stw	r22,32(r17)
    edb4:	8d400915 	stw	r21,36(r17)
    edb8:	8d000a15 	stw	r20,40(r17)
    edbc:	8cc00b15 	stw	r19,44(r17)
    edc0:	8080030d 	sth	r2,12(r16)
    edc4:	00800084 	movi	r2,2
    edc8:	80000015 	stw	zero,0(r16)
    edcc:	80000115 	stw	zero,4(r16)
    edd0:	80000215 	stw	zero,8(r16)
    edd4:	80001915 	stw	zero,100(r16)
    edd8:	8080038d 	sth	r2,14(r16)
    eddc:	80000415 	stw	zero,16(r16)
    ede0:	80000515 	stw	zero,20(r16)
    ede4:	80000615 	stw	zero,24(r16)
    ede8:	b80d883a 	mov	r6,r23
    edec:	000b883a 	mov	r5,zero
    edf0:	81001704 	addi	r4,r16,92
    edf4:	00100e40 	call	100e4 <memset>
    edf8:	00800044 	movi	r2,1
    edfc:	84000715 	stw	r16,28(r16)
    ee00:	85800815 	stw	r22,32(r16)
    ee04:	85400915 	stw	r21,36(r16)
    ee08:	85000a15 	stw	r20,40(r16)
    ee0c:	84c00b15 	stw	r19,44(r16)
    ee10:	90800e15 	stw	r2,56(r18)
    ee14:	dfc00817 	ldw	ra,32(sp)
    ee18:	ddc00717 	ldw	r23,28(sp)
    ee1c:	dd800617 	ldw	r22,24(sp)
    ee20:	dd400517 	ldw	r21,20(sp)
    ee24:	dd000417 	ldw	r20,16(sp)
    ee28:	dcc00317 	ldw	r19,12(sp)
    ee2c:	dc800217 	ldw	r18,8(sp)
    ee30:	dc400117 	ldw	r17,4(sp)
    ee34:	dc000017 	ldw	r16,0(sp)
    ee38:	dec00904 	addi	sp,sp,36
    ee3c:	f800283a 	ret

0000ee40 <__fp_lock>:
    ee40:	0005883a 	mov	r2,zero
    ee44:	f800283a 	ret

0000ee48 <__sfmoreglue>:
    ee48:	defffc04 	addi	sp,sp,-16
    ee4c:	dc800215 	stw	r18,8(sp)
    ee50:	2825883a 	mov	r18,r5
    ee54:	dc000015 	stw	r16,0(sp)
    ee58:	01401a04 	movi	r5,104
    ee5c:	2021883a 	mov	r16,r4
    ee60:	913fffc4 	addi	r4,r18,-1
    ee64:	dfc00315 	stw	ra,12(sp)
    ee68:	dc400115 	stw	r17,4(sp)
    ee6c:	00068e80 	call	68e8 <__mulsi3>
    ee70:	8009883a 	mov	r4,r16
    ee74:	11401d04 	addi	r5,r2,116
    ee78:	1023883a 	mov	r17,r2
    ee7c:	00096b80 	call	96b8 <_malloc_r>
    ee80:	1021883a 	mov	r16,r2
    ee84:	10000726 	beq	r2,zero,eea4 <__sfmoreglue+0x5c>
    ee88:	11000304 	addi	r4,r2,12
    ee8c:	10000015 	stw	zero,0(r2)
    ee90:	14800115 	stw	r18,4(r2)
    ee94:	11000215 	stw	r4,8(r2)
    ee98:	89801a04 	addi	r6,r17,104
    ee9c:	000b883a 	mov	r5,zero
    eea0:	00100e40 	call	100e4 <memset>
    eea4:	8005883a 	mov	r2,r16
    eea8:	dfc00317 	ldw	ra,12(sp)
    eeac:	dc800217 	ldw	r18,8(sp)
    eeb0:	dc400117 	ldw	r17,4(sp)
    eeb4:	dc000017 	ldw	r16,0(sp)
    eeb8:	dec00404 	addi	sp,sp,16
    eebc:	f800283a 	ret

0000eec0 <__sfp>:
    eec0:	defffb04 	addi	sp,sp,-20
    eec4:	dc000015 	stw	r16,0(sp)
    eec8:	040000b4 	movhi	r16,2
    eecc:	842c7f04 	addi	r16,r16,-19972
    eed0:	dcc00315 	stw	r19,12(sp)
    eed4:	2027883a 	mov	r19,r4
    eed8:	81000017 	ldw	r4,0(r16)
    eedc:	dfc00415 	stw	ra,16(sp)
    eee0:	dc800215 	stw	r18,8(sp)
    eee4:	20800e17 	ldw	r2,56(r4)
    eee8:	dc400115 	stw	r17,4(sp)
    eeec:	1000021e 	bne	r2,zero,eef8 <__sfp+0x38>
    eef0:	000eca40 	call	eca4 <__sinit.part.1>
    eef4:	81000017 	ldw	r4,0(r16)
    eef8:	2480b804 	addi	r18,r4,736
    eefc:	047fffc4 	movi	r17,-1
    ef00:	91000117 	ldw	r4,4(r18)
    ef04:	94000217 	ldw	r16,8(r18)
    ef08:	213fffc4 	addi	r4,r4,-1
    ef0c:	20000a16 	blt	r4,zero,ef38 <__sfp+0x78>
    ef10:	8080030f 	ldh	r2,12(r16)
    ef14:	10000c26 	beq	r2,zero,ef48 <__sfp+0x88>
    ef18:	80c01d04 	addi	r3,r16,116
    ef1c:	00000206 	br	ef28 <__sfp+0x68>
    ef20:	18bfe60f 	ldh	r2,-104(r3)
    ef24:	10000826 	beq	r2,zero,ef48 <__sfp+0x88>
    ef28:	213fffc4 	addi	r4,r4,-1
    ef2c:	1c3ffd04 	addi	r16,r3,-12
    ef30:	18c01a04 	addi	r3,r3,104
    ef34:	247ffa1e 	bne	r4,r17,ef20 <__alt_exception_stack_pointer+0xf800ef20>
    ef38:	90800017 	ldw	r2,0(r18)
    ef3c:	10001d26 	beq	r2,zero,efb4 <__sfp+0xf4>
    ef40:	1025883a 	mov	r18,r2
    ef44:	003fee06 	br	ef00 <__alt_exception_stack_pointer+0xf800ef00>
    ef48:	00bfffc4 	movi	r2,-1
    ef4c:	8080038d 	sth	r2,14(r16)
    ef50:	00800044 	movi	r2,1
    ef54:	8080030d 	sth	r2,12(r16)
    ef58:	80001915 	stw	zero,100(r16)
    ef5c:	80000015 	stw	zero,0(r16)
    ef60:	80000215 	stw	zero,8(r16)
    ef64:	80000115 	stw	zero,4(r16)
    ef68:	80000415 	stw	zero,16(r16)
    ef6c:	80000515 	stw	zero,20(r16)
    ef70:	80000615 	stw	zero,24(r16)
    ef74:	01800204 	movi	r6,8
    ef78:	000b883a 	mov	r5,zero
    ef7c:	81001704 	addi	r4,r16,92
    ef80:	00100e40 	call	100e4 <memset>
    ef84:	8005883a 	mov	r2,r16
    ef88:	80000c15 	stw	zero,48(r16)
    ef8c:	80000d15 	stw	zero,52(r16)
    ef90:	80001115 	stw	zero,68(r16)
    ef94:	80001215 	stw	zero,72(r16)
    ef98:	dfc00417 	ldw	ra,16(sp)
    ef9c:	dcc00317 	ldw	r19,12(sp)
    efa0:	dc800217 	ldw	r18,8(sp)
    efa4:	dc400117 	ldw	r17,4(sp)
    efa8:	dc000017 	ldw	r16,0(sp)
    efac:	dec00504 	addi	sp,sp,20
    efb0:	f800283a 	ret
    efb4:	01400104 	movi	r5,4
    efb8:	9809883a 	mov	r4,r19
    efbc:	000ee480 	call	ee48 <__sfmoreglue>
    efc0:	90800015 	stw	r2,0(r18)
    efc4:	103fde1e 	bne	r2,zero,ef40 <__alt_exception_stack_pointer+0xf800ef40>
    efc8:	00800304 	movi	r2,12
    efcc:	98800015 	stw	r2,0(r19)
    efd0:	0005883a 	mov	r2,zero
    efd4:	003ff006 	br	ef98 <__alt_exception_stack_pointer+0xf800ef98>

0000efd8 <_cleanup>:
    efd8:	008000b4 	movhi	r2,2
    efdc:	10ac7f04 	addi	r2,r2,-19972
    efe0:	11000017 	ldw	r4,0(r2)
    efe4:	01400074 	movhi	r5,1
    efe8:	294cf304 	addi	r5,r5,13260
    efec:	000fa001 	jmpi	fa00 <_fwalk_reent>

0000eff0 <__sinit>:
    eff0:	20800e17 	ldw	r2,56(r4)
    eff4:	10000126 	beq	r2,zero,effc <__sinit+0xc>
    eff8:	f800283a 	ret
    effc:	000eca41 	jmpi	eca4 <__sinit.part.1>

0000f000 <__sfp_lock_acquire>:
    f000:	f800283a 	ret

0000f004 <__sfp_lock_release>:
    f004:	f800283a 	ret

0000f008 <__sinit_lock_acquire>:
    f008:	f800283a 	ret

0000f00c <__sinit_lock_release>:
    f00c:	f800283a 	ret

0000f010 <__fp_lock_all>:
    f010:	008000b4 	movhi	r2,2
    f014:	10ac8004 	addi	r2,r2,-19968
    f018:	11000017 	ldw	r4,0(r2)
    f01c:	01400074 	movhi	r5,1
    f020:	297b9004 	addi	r5,r5,-4544
    f024:	000f93c1 	jmpi	f93c <_fwalk>

0000f028 <__fp_unlock_all>:
    f028:	008000b4 	movhi	r2,2
    f02c:	10ac8004 	addi	r2,r2,-19968
    f030:	11000017 	ldw	r4,0(r2)
    f034:	01400074 	movhi	r5,1
    f038:	297b2404 	addi	r5,r5,-4976
    f03c:	000f93c1 	jmpi	f93c <_fwalk>

0000f040 <_malloc_trim_r>:
    f040:	defffb04 	addi	sp,sp,-20
    f044:	dcc00315 	stw	r19,12(sp)
    f048:	04c000b4 	movhi	r19,2
    f04c:	dc800215 	stw	r18,8(sp)
    f050:	dc400115 	stw	r17,4(sp)
    f054:	dc000015 	stw	r16,0(sp)
    f058:	dfc00415 	stw	ra,16(sp)
    f05c:	2821883a 	mov	r16,r5
    f060:	9ce67e04 	addi	r19,r19,-26120
    f064:	2025883a 	mov	r18,r4
    f068:	0014e940 	call	14e94 <__malloc_lock>
    f06c:	98800217 	ldw	r2,8(r19)
    f070:	14400117 	ldw	r17,4(r2)
    f074:	00bfff04 	movi	r2,-4
    f078:	88a2703a 	and	r17,r17,r2
    f07c:	8c21c83a 	sub	r16,r17,r16
    f080:	8403fbc4 	addi	r16,r16,4079
    f084:	8020d33a 	srli	r16,r16,12
    f088:	0083ffc4 	movi	r2,4095
    f08c:	843fffc4 	addi	r16,r16,-1
    f090:	8020933a 	slli	r16,r16,12
    f094:	1400060e 	bge	r2,r16,f0b0 <_malloc_trim_r+0x70>
    f098:	000b883a 	mov	r5,zero
    f09c:	9009883a 	mov	r4,r18
    f0a0:	000a0040 	call	a004 <_sbrk_r>
    f0a4:	98c00217 	ldw	r3,8(r19)
    f0a8:	1c47883a 	add	r3,r3,r17
    f0ac:	10c00a26 	beq	r2,r3,f0d8 <_malloc_trim_r+0x98>
    f0b0:	9009883a 	mov	r4,r18
    f0b4:	0014eb80 	call	14eb8 <__malloc_unlock>
    f0b8:	0005883a 	mov	r2,zero
    f0bc:	dfc00417 	ldw	ra,16(sp)
    f0c0:	dcc00317 	ldw	r19,12(sp)
    f0c4:	dc800217 	ldw	r18,8(sp)
    f0c8:	dc400117 	ldw	r17,4(sp)
    f0cc:	dc000017 	ldw	r16,0(sp)
    f0d0:	dec00504 	addi	sp,sp,20
    f0d4:	f800283a 	ret
    f0d8:	040bc83a 	sub	r5,zero,r16
    f0dc:	9009883a 	mov	r4,r18
    f0e0:	000a0040 	call	a004 <_sbrk_r>
    f0e4:	00ffffc4 	movi	r3,-1
    f0e8:	10c00d26 	beq	r2,r3,f120 <_malloc_trim_r+0xe0>
    f0ec:	00c000b4 	movhi	r3,2
    f0f0:	18f58104 	addi	r3,r3,-10748
    f0f4:	18800017 	ldw	r2,0(r3)
    f0f8:	99000217 	ldw	r4,8(r19)
    f0fc:	8c23c83a 	sub	r17,r17,r16
    f100:	8c400054 	ori	r17,r17,1
    f104:	1421c83a 	sub	r16,r2,r16
    f108:	24400115 	stw	r17,4(r4)
    f10c:	9009883a 	mov	r4,r18
    f110:	1c000015 	stw	r16,0(r3)
    f114:	0014eb80 	call	14eb8 <__malloc_unlock>
    f118:	00800044 	movi	r2,1
    f11c:	003fe706 	br	f0bc <__alt_exception_stack_pointer+0xf800f0bc>
    f120:	000b883a 	mov	r5,zero
    f124:	9009883a 	mov	r4,r18
    f128:	000a0040 	call	a004 <_sbrk_r>
    f12c:	99000217 	ldw	r4,8(r19)
    f130:	014003c4 	movi	r5,15
    f134:	1107c83a 	sub	r3,r2,r4
    f138:	28ffdd0e 	bge	r5,r3,f0b0 <__alt_exception_stack_pointer+0xf800f0b0>
    f13c:	014000b4 	movhi	r5,2
    f140:	296c8104 	addi	r5,r5,-19964
    f144:	29400017 	ldw	r5,0(r5)
    f148:	18c00054 	ori	r3,r3,1
    f14c:	20c00115 	stw	r3,4(r4)
    f150:	00c000b4 	movhi	r3,2
    f154:	1145c83a 	sub	r2,r2,r5
    f158:	18f58104 	addi	r3,r3,-10748
    f15c:	18800015 	stw	r2,0(r3)
    f160:	003fd306 	br	f0b0 <__alt_exception_stack_pointer+0xf800f0b0>

0000f164 <_free_r>:
    f164:	28004126 	beq	r5,zero,f26c <_free_r+0x108>
    f168:	defffd04 	addi	sp,sp,-12
    f16c:	dc400115 	stw	r17,4(sp)
    f170:	dc000015 	stw	r16,0(sp)
    f174:	2023883a 	mov	r17,r4
    f178:	2821883a 	mov	r16,r5
    f17c:	dfc00215 	stw	ra,8(sp)
    f180:	0014e940 	call	14e94 <__malloc_lock>
    f184:	81ffff17 	ldw	r7,-4(r16)
    f188:	00bfff84 	movi	r2,-2
    f18c:	010000b4 	movhi	r4,2
    f190:	81bffe04 	addi	r6,r16,-8
    f194:	3884703a 	and	r2,r7,r2
    f198:	21267e04 	addi	r4,r4,-26120
    f19c:	308b883a 	add	r5,r6,r2
    f1a0:	2a400117 	ldw	r9,4(r5)
    f1a4:	22000217 	ldw	r8,8(r4)
    f1a8:	00ffff04 	movi	r3,-4
    f1ac:	48c6703a 	and	r3,r9,r3
    f1b0:	2a005726 	beq	r5,r8,f310 <_free_r+0x1ac>
    f1b4:	28c00115 	stw	r3,4(r5)
    f1b8:	39c0004c 	andi	r7,r7,1
    f1bc:	3800091e 	bne	r7,zero,f1e4 <_free_r+0x80>
    f1c0:	823ffe17 	ldw	r8,-8(r16)
    f1c4:	22400204 	addi	r9,r4,8
    f1c8:	320dc83a 	sub	r6,r6,r8
    f1cc:	31c00217 	ldw	r7,8(r6)
    f1d0:	1205883a 	add	r2,r2,r8
    f1d4:	3a406526 	beq	r7,r9,f36c <_free_r+0x208>
    f1d8:	32000317 	ldw	r8,12(r6)
    f1dc:	3a000315 	stw	r8,12(r7)
    f1e0:	41c00215 	stw	r7,8(r8)
    f1e4:	28cf883a 	add	r7,r5,r3
    f1e8:	39c00117 	ldw	r7,4(r7)
    f1ec:	39c0004c 	andi	r7,r7,1
    f1f0:	38003a26 	beq	r7,zero,f2dc <_free_r+0x178>
    f1f4:	10c00054 	ori	r3,r2,1
    f1f8:	30c00115 	stw	r3,4(r6)
    f1fc:	3087883a 	add	r3,r6,r2
    f200:	18800015 	stw	r2,0(r3)
    f204:	00c07fc4 	movi	r3,511
    f208:	18801936 	bltu	r3,r2,f270 <_free_r+0x10c>
    f20c:	1004d0fa 	srli	r2,r2,3
    f210:	01c00044 	movi	r7,1
    f214:	21400117 	ldw	r5,4(r4)
    f218:	10c00044 	addi	r3,r2,1
    f21c:	18c7883a 	add	r3,r3,r3
    f220:	1005d0ba 	srai	r2,r2,2
    f224:	18c7883a 	add	r3,r3,r3
    f228:	18c7883a 	add	r3,r3,r3
    f22c:	1907883a 	add	r3,r3,r4
    f230:	3884983a 	sll	r2,r7,r2
    f234:	19c00017 	ldw	r7,0(r3)
    f238:	1a3ffe04 	addi	r8,r3,-8
    f23c:	1144b03a 	or	r2,r2,r5
    f240:	32000315 	stw	r8,12(r6)
    f244:	31c00215 	stw	r7,8(r6)
    f248:	20800115 	stw	r2,4(r4)
    f24c:	19800015 	stw	r6,0(r3)
    f250:	39800315 	stw	r6,12(r7)
    f254:	8809883a 	mov	r4,r17
    f258:	dfc00217 	ldw	ra,8(sp)
    f25c:	dc400117 	ldw	r17,4(sp)
    f260:	dc000017 	ldw	r16,0(sp)
    f264:	dec00304 	addi	sp,sp,12
    f268:	0014eb81 	jmpi	14eb8 <__malloc_unlock>
    f26c:	f800283a 	ret
    f270:	100ad27a 	srli	r5,r2,9
    f274:	00c00104 	movi	r3,4
    f278:	19404a36 	bltu	r3,r5,f3a4 <_free_r+0x240>
    f27c:	100ad1ba 	srli	r5,r2,6
    f280:	28c00e44 	addi	r3,r5,57
    f284:	18c7883a 	add	r3,r3,r3
    f288:	29400e04 	addi	r5,r5,56
    f28c:	18c7883a 	add	r3,r3,r3
    f290:	18c7883a 	add	r3,r3,r3
    f294:	1909883a 	add	r4,r3,r4
    f298:	20c00017 	ldw	r3,0(r4)
    f29c:	01c000b4 	movhi	r7,2
    f2a0:	213ffe04 	addi	r4,r4,-8
    f2a4:	39e67e04 	addi	r7,r7,-26120
    f2a8:	20c04426 	beq	r4,r3,f3bc <_free_r+0x258>
    f2ac:	01ffff04 	movi	r7,-4
    f2b0:	19400117 	ldw	r5,4(r3)
    f2b4:	29ca703a 	and	r5,r5,r7
    f2b8:	1140022e 	bgeu	r2,r5,f2c4 <_free_r+0x160>
    f2bc:	18c00217 	ldw	r3,8(r3)
    f2c0:	20fffb1e 	bne	r4,r3,f2b0 <__alt_exception_stack_pointer+0xf800f2b0>
    f2c4:	19000317 	ldw	r4,12(r3)
    f2c8:	31000315 	stw	r4,12(r6)
    f2cc:	30c00215 	stw	r3,8(r6)
    f2d0:	21800215 	stw	r6,8(r4)
    f2d4:	19800315 	stw	r6,12(r3)
    f2d8:	003fde06 	br	f254 <__alt_exception_stack_pointer+0xf800f254>
    f2dc:	29c00217 	ldw	r7,8(r5)
    f2e0:	10c5883a 	add	r2,r2,r3
    f2e4:	00c000b4 	movhi	r3,2
    f2e8:	18e68004 	addi	r3,r3,-26112
    f2ec:	38c03b26 	beq	r7,r3,f3dc <_free_r+0x278>
    f2f0:	2a000317 	ldw	r8,12(r5)
    f2f4:	11400054 	ori	r5,r2,1
    f2f8:	3087883a 	add	r3,r6,r2
    f2fc:	3a000315 	stw	r8,12(r7)
    f300:	41c00215 	stw	r7,8(r8)
    f304:	31400115 	stw	r5,4(r6)
    f308:	18800015 	stw	r2,0(r3)
    f30c:	003fbd06 	br	f204 <__alt_exception_stack_pointer+0xf800f204>
    f310:	39c0004c 	andi	r7,r7,1
    f314:	10c5883a 	add	r2,r2,r3
    f318:	3800071e 	bne	r7,zero,f338 <_free_r+0x1d4>
    f31c:	81fffe17 	ldw	r7,-8(r16)
    f320:	31cdc83a 	sub	r6,r6,r7
    f324:	30c00317 	ldw	r3,12(r6)
    f328:	31400217 	ldw	r5,8(r6)
    f32c:	11c5883a 	add	r2,r2,r7
    f330:	28c00315 	stw	r3,12(r5)
    f334:	19400215 	stw	r5,8(r3)
    f338:	10c00054 	ori	r3,r2,1
    f33c:	30c00115 	stw	r3,4(r6)
    f340:	00c000b4 	movhi	r3,2
    f344:	18ec8204 	addi	r3,r3,-19960
    f348:	18c00017 	ldw	r3,0(r3)
    f34c:	21800215 	stw	r6,8(r4)
    f350:	10ffc036 	bltu	r2,r3,f254 <__alt_exception_stack_pointer+0xf800f254>
    f354:	008000b4 	movhi	r2,2
    f358:	10b57504 	addi	r2,r2,-10796
    f35c:	11400017 	ldw	r5,0(r2)
    f360:	8809883a 	mov	r4,r17
    f364:	000f0400 	call	f040 <_malloc_trim_r>
    f368:	003fba06 	br	f254 <__alt_exception_stack_pointer+0xf800f254>
    f36c:	28c9883a 	add	r4,r5,r3
    f370:	21000117 	ldw	r4,4(r4)
    f374:	2100004c 	andi	r4,r4,1
    f378:	2000391e 	bne	r4,zero,f460 <_free_r+0x2fc>
    f37c:	29c00217 	ldw	r7,8(r5)
    f380:	29000317 	ldw	r4,12(r5)
    f384:	1885883a 	add	r2,r3,r2
    f388:	10c00054 	ori	r3,r2,1
    f38c:	39000315 	stw	r4,12(r7)
    f390:	21c00215 	stw	r7,8(r4)
    f394:	30c00115 	stw	r3,4(r6)
    f398:	308d883a 	add	r6,r6,r2
    f39c:	30800015 	stw	r2,0(r6)
    f3a0:	003fac06 	br	f254 <__alt_exception_stack_pointer+0xf800f254>
    f3a4:	00c00504 	movi	r3,20
    f3a8:	19401536 	bltu	r3,r5,f400 <_free_r+0x29c>
    f3ac:	28c01704 	addi	r3,r5,92
    f3b0:	18c7883a 	add	r3,r3,r3
    f3b4:	294016c4 	addi	r5,r5,91
    f3b8:	003fb406 	br	f28c <__alt_exception_stack_pointer+0xf800f28c>
    f3bc:	280bd0ba 	srai	r5,r5,2
    f3c0:	00c00044 	movi	r3,1
    f3c4:	38800117 	ldw	r2,4(r7)
    f3c8:	194a983a 	sll	r5,r3,r5
    f3cc:	2007883a 	mov	r3,r4
    f3d0:	2884b03a 	or	r2,r5,r2
    f3d4:	38800115 	stw	r2,4(r7)
    f3d8:	003fbb06 	br	f2c8 <__alt_exception_stack_pointer+0xf800f2c8>
    f3dc:	21800515 	stw	r6,20(r4)
    f3e0:	21800415 	stw	r6,16(r4)
    f3e4:	10c00054 	ori	r3,r2,1
    f3e8:	31c00315 	stw	r7,12(r6)
    f3ec:	31c00215 	stw	r7,8(r6)
    f3f0:	30c00115 	stw	r3,4(r6)
    f3f4:	308d883a 	add	r6,r6,r2
    f3f8:	30800015 	stw	r2,0(r6)
    f3fc:	003f9506 	br	f254 <__alt_exception_stack_pointer+0xf800f254>
    f400:	00c01504 	movi	r3,84
    f404:	19400536 	bltu	r3,r5,f41c <_free_r+0x2b8>
    f408:	100ad33a 	srli	r5,r2,12
    f40c:	28c01bc4 	addi	r3,r5,111
    f410:	18c7883a 	add	r3,r3,r3
    f414:	29401b84 	addi	r5,r5,110
    f418:	003f9c06 	br	f28c <__alt_exception_stack_pointer+0xf800f28c>
    f41c:	00c05504 	movi	r3,340
    f420:	19400536 	bltu	r3,r5,f438 <_free_r+0x2d4>
    f424:	100ad3fa 	srli	r5,r2,15
    f428:	28c01e04 	addi	r3,r5,120
    f42c:	18c7883a 	add	r3,r3,r3
    f430:	29401dc4 	addi	r5,r5,119
    f434:	003f9506 	br	f28c <__alt_exception_stack_pointer+0xf800f28c>
    f438:	00c15504 	movi	r3,1364
    f43c:	19400536 	bltu	r3,r5,f454 <_free_r+0x2f0>
    f440:	100ad4ba 	srli	r5,r2,18
    f444:	28c01f44 	addi	r3,r5,125
    f448:	18c7883a 	add	r3,r3,r3
    f44c:	29401f04 	addi	r5,r5,124
    f450:	003f8e06 	br	f28c <__alt_exception_stack_pointer+0xf800f28c>
    f454:	00c03f84 	movi	r3,254
    f458:	01401f84 	movi	r5,126
    f45c:	003f8b06 	br	f28c <__alt_exception_stack_pointer+0xf800f28c>
    f460:	10c00054 	ori	r3,r2,1
    f464:	30c00115 	stw	r3,4(r6)
    f468:	308d883a 	add	r6,r6,r2
    f46c:	30800015 	stw	r2,0(r6)
    f470:	003f7806 	br	f254 <__alt_exception_stack_pointer+0xf800f254>

0000f474 <__sfvwrite_r>:
    f474:	30800217 	ldw	r2,8(r6)
    f478:	10006726 	beq	r2,zero,f618 <__sfvwrite_r+0x1a4>
    f47c:	28c0030b 	ldhu	r3,12(r5)
    f480:	defff404 	addi	sp,sp,-48
    f484:	dd400715 	stw	r21,28(sp)
    f488:	dd000615 	stw	r20,24(sp)
    f48c:	dc000215 	stw	r16,8(sp)
    f490:	dfc00b15 	stw	ra,44(sp)
    f494:	df000a15 	stw	fp,40(sp)
    f498:	ddc00915 	stw	r23,36(sp)
    f49c:	dd800815 	stw	r22,32(sp)
    f4a0:	dcc00515 	stw	r19,20(sp)
    f4a4:	dc800415 	stw	r18,16(sp)
    f4a8:	dc400315 	stw	r17,12(sp)
    f4ac:	1880020c 	andi	r2,r3,8
    f4b0:	2821883a 	mov	r16,r5
    f4b4:	202b883a 	mov	r21,r4
    f4b8:	3029883a 	mov	r20,r6
    f4bc:	10002726 	beq	r2,zero,f55c <__sfvwrite_r+0xe8>
    f4c0:	28800417 	ldw	r2,16(r5)
    f4c4:	10002526 	beq	r2,zero,f55c <__sfvwrite_r+0xe8>
    f4c8:	1880008c 	andi	r2,r3,2
    f4cc:	a4400017 	ldw	r17,0(r20)
    f4d0:	10002a26 	beq	r2,zero,f57c <__sfvwrite_r+0x108>
    f4d4:	05a00034 	movhi	r22,32768
    f4d8:	0027883a 	mov	r19,zero
    f4dc:	0025883a 	mov	r18,zero
    f4e0:	b5bf0004 	addi	r22,r22,-1024
    f4e4:	980d883a 	mov	r6,r19
    f4e8:	a809883a 	mov	r4,r21
    f4ec:	90004626 	beq	r18,zero,f608 <__sfvwrite_r+0x194>
    f4f0:	900f883a 	mov	r7,r18
    f4f4:	b480022e 	bgeu	r22,r18,f500 <__sfvwrite_r+0x8c>
    f4f8:	01e00034 	movhi	r7,32768
    f4fc:	39ff0004 	addi	r7,r7,-1024
    f500:	80800917 	ldw	r2,36(r16)
    f504:	81400717 	ldw	r5,28(r16)
    f508:	103ee83a 	callr	r2
    f50c:	00805a0e 	bge	zero,r2,f678 <__sfvwrite_r+0x204>
    f510:	a0c00217 	ldw	r3,8(r20)
    f514:	98a7883a 	add	r19,r19,r2
    f518:	90a5c83a 	sub	r18,r18,r2
    f51c:	1885c83a 	sub	r2,r3,r2
    f520:	a0800215 	stw	r2,8(r20)
    f524:	103fef1e 	bne	r2,zero,f4e4 <__alt_exception_stack_pointer+0xf800f4e4>
    f528:	0005883a 	mov	r2,zero
    f52c:	dfc00b17 	ldw	ra,44(sp)
    f530:	df000a17 	ldw	fp,40(sp)
    f534:	ddc00917 	ldw	r23,36(sp)
    f538:	dd800817 	ldw	r22,32(sp)
    f53c:	dd400717 	ldw	r21,28(sp)
    f540:	dd000617 	ldw	r20,24(sp)
    f544:	dcc00517 	ldw	r19,20(sp)
    f548:	dc800417 	ldw	r18,16(sp)
    f54c:	dc400317 	ldw	r17,12(sp)
    f550:	dc000217 	ldw	r16,8(sp)
    f554:	dec00c04 	addi	sp,sp,48
    f558:	f800283a 	ret
    f55c:	800b883a 	mov	r5,r16
    f560:	a809883a 	mov	r4,r21
    f564:	000c4ac0 	call	c4ac <__swsetup_r>
    f568:	1000ee1e 	bne	r2,zero,f924 <__sfvwrite_r+0x4b0>
    f56c:	80c0030b 	ldhu	r3,12(r16)
    f570:	a4400017 	ldw	r17,0(r20)
    f574:	1880008c 	andi	r2,r3,2
    f578:	103fd61e 	bne	r2,zero,f4d4 <__alt_exception_stack_pointer+0xf800f4d4>
    f57c:	1880004c 	andi	r2,r3,1
    f580:	1000421e 	bne	r2,zero,f68c <__sfvwrite_r+0x218>
    f584:	0039883a 	mov	fp,zero
    f588:	0025883a 	mov	r18,zero
    f58c:	90001a26 	beq	r18,zero,f5f8 <__sfvwrite_r+0x184>
    f590:	1880800c 	andi	r2,r3,512
    f594:	84c00217 	ldw	r19,8(r16)
    f598:	10002126 	beq	r2,zero,f620 <__sfvwrite_r+0x1ac>
    f59c:	982f883a 	mov	r23,r19
    f5a0:	94c09636 	bltu	r18,r19,f7fc <__sfvwrite_r+0x388>
    f5a4:	1881200c 	andi	r2,r3,1152
    f5a8:	1000a11e 	bne	r2,zero,f830 <__sfvwrite_r+0x3bc>
    f5ac:	81000017 	ldw	r4,0(r16)
    f5b0:	b80d883a 	mov	r6,r23
    f5b4:	e00b883a 	mov	r5,fp
    f5b8:	000ff880 	call	ff88 <memmove>
    f5bc:	80c00217 	ldw	r3,8(r16)
    f5c0:	81000017 	ldw	r4,0(r16)
    f5c4:	9005883a 	mov	r2,r18
    f5c8:	1ce7c83a 	sub	r19,r3,r19
    f5cc:	25cf883a 	add	r7,r4,r23
    f5d0:	84c00215 	stw	r19,8(r16)
    f5d4:	81c00015 	stw	r7,0(r16)
    f5d8:	a0c00217 	ldw	r3,8(r20)
    f5dc:	e0b9883a 	add	fp,fp,r2
    f5e0:	90a5c83a 	sub	r18,r18,r2
    f5e4:	18a7c83a 	sub	r19,r3,r2
    f5e8:	a4c00215 	stw	r19,8(r20)
    f5ec:	983fce26 	beq	r19,zero,f528 <__alt_exception_stack_pointer+0xf800f528>
    f5f0:	80c0030b 	ldhu	r3,12(r16)
    f5f4:	903fe61e 	bne	r18,zero,f590 <__alt_exception_stack_pointer+0xf800f590>
    f5f8:	8f000017 	ldw	fp,0(r17)
    f5fc:	8c800117 	ldw	r18,4(r17)
    f600:	8c400204 	addi	r17,r17,8
    f604:	003fe106 	br	f58c <__alt_exception_stack_pointer+0xf800f58c>
    f608:	8cc00017 	ldw	r19,0(r17)
    f60c:	8c800117 	ldw	r18,4(r17)
    f610:	8c400204 	addi	r17,r17,8
    f614:	003fb306 	br	f4e4 <__alt_exception_stack_pointer+0xf800f4e4>
    f618:	0005883a 	mov	r2,zero
    f61c:	f800283a 	ret
    f620:	81000017 	ldw	r4,0(r16)
    f624:	80800417 	ldw	r2,16(r16)
    f628:	11005a36 	bltu	r2,r4,f794 <__sfvwrite_r+0x320>
    f62c:	85c00517 	ldw	r23,20(r16)
    f630:	95c05836 	bltu	r18,r23,f794 <__sfvwrite_r+0x320>
    f634:	00a00034 	movhi	r2,32768
    f638:	10bfffc4 	addi	r2,r2,-1
    f63c:	9009883a 	mov	r4,r18
    f640:	1480012e 	bgeu	r2,r18,f648 <__sfvwrite_r+0x1d4>
    f644:	1009883a 	mov	r4,r2
    f648:	b80b883a 	mov	r5,r23
    f64c:	00067340 	call	6734 <__divsi3>
    f650:	b80b883a 	mov	r5,r23
    f654:	1009883a 	mov	r4,r2
    f658:	00068e80 	call	68e8 <__mulsi3>
    f65c:	81400717 	ldw	r5,28(r16)
    f660:	80c00917 	ldw	r3,36(r16)
    f664:	100f883a 	mov	r7,r2
    f668:	e00d883a 	mov	r6,fp
    f66c:	a809883a 	mov	r4,r21
    f670:	183ee83a 	callr	r3
    f674:	00bfd816 	blt	zero,r2,f5d8 <__alt_exception_stack_pointer+0xf800f5d8>
    f678:	8080030b 	ldhu	r2,12(r16)
    f67c:	10801014 	ori	r2,r2,64
    f680:	8080030d 	sth	r2,12(r16)
    f684:	00bfffc4 	movi	r2,-1
    f688:	003fa806 	br	f52c <__alt_exception_stack_pointer+0xf800f52c>
    f68c:	0027883a 	mov	r19,zero
    f690:	0011883a 	mov	r8,zero
    f694:	0039883a 	mov	fp,zero
    f698:	0025883a 	mov	r18,zero
    f69c:	90001f26 	beq	r18,zero,f71c <__sfvwrite_r+0x2a8>
    f6a0:	40005a26 	beq	r8,zero,f80c <__sfvwrite_r+0x398>
    f6a4:	982d883a 	mov	r22,r19
    f6a8:	94c0012e 	bgeu	r18,r19,f6b0 <__sfvwrite_r+0x23c>
    f6ac:	902d883a 	mov	r22,r18
    f6b0:	81000017 	ldw	r4,0(r16)
    f6b4:	80800417 	ldw	r2,16(r16)
    f6b8:	b02f883a 	mov	r23,r22
    f6bc:	81c00517 	ldw	r7,20(r16)
    f6c0:	1100032e 	bgeu	r2,r4,f6d0 <__sfvwrite_r+0x25c>
    f6c4:	80c00217 	ldw	r3,8(r16)
    f6c8:	38c7883a 	add	r3,r7,r3
    f6cc:	1d801816 	blt	r3,r22,f730 <__sfvwrite_r+0x2bc>
    f6d0:	b1c03e16 	blt	r22,r7,f7cc <__sfvwrite_r+0x358>
    f6d4:	80800917 	ldw	r2,36(r16)
    f6d8:	81400717 	ldw	r5,28(r16)
    f6dc:	e00d883a 	mov	r6,fp
    f6e0:	da000115 	stw	r8,4(sp)
    f6e4:	a809883a 	mov	r4,r21
    f6e8:	103ee83a 	callr	r2
    f6ec:	102f883a 	mov	r23,r2
    f6f0:	da000117 	ldw	r8,4(sp)
    f6f4:	00bfe00e 	bge	zero,r2,f678 <__alt_exception_stack_pointer+0xf800f678>
    f6f8:	9de7c83a 	sub	r19,r19,r23
    f6fc:	98001f26 	beq	r19,zero,f77c <__sfvwrite_r+0x308>
    f700:	a0800217 	ldw	r2,8(r20)
    f704:	e5f9883a 	add	fp,fp,r23
    f708:	95e5c83a 	sub	r18,r18,r23
    f70c:	15efc83a 	sub	r23,r2,r23
    f710:	a5c00215 	stw	r23,8(r20)
    f714:	b83f8426 	beq	r23,zero,f528 <__alt_exception_stack_pointer+0xf800f528>
    f718:	903fe11e 	bne	r18,zero,f6a0 <__alt_exception_stack_pointer+0xf800f6a0>
    f71c:	8f000017 	ldw	fp,0(r17)
    f720:	8c800117 	ldw	r18,4(r17)
    f724:	0011883a 	mov	r8,zero
    f728:	8c400204 	addi	r17,r17,8
    f72c:	003fdb06 	br	f69c <__alt_exception_stack_pointer+0xf800f69c>
    f730:	180d883a 	mov	r6,r3
    f734:	e00b883a 	mov	r5,fp
    f738:	da000115 	stw	r8,4(sp)
    f73c:	d8c00015 	stw	r3,0(sp)
    f740:	000ff880 	call	ff88 <memmove>
    f744:	d8c00017 	ldw	r3,0(sp)
    f748:	80800017 	ldw	r2,0(r16)
    f74c:	800b883a 	mov	r5,r16
    f750:	a809883a 	mov	r4,r21
    f754:	10c5883a 	add	r2,r2,r3
    f758:	80800015 	stw	r2,0(r16)
    f75c:	d8c00015 	stw	r3,0(sp)
    f760:	000ec040 	call	ec04 <_fflush_r>
    f764:	d8c00017 	ldw	r3,0(sp)
    f768:	da000117 	ldw	r8,4(sp)
    f76c:	103fc21e 	bne	r2,zero,f678 <__alt_exception_stack_pointer+0xf800f678>
    f770:	182f883a 	mov	r23,r3
    f774:	9de7c83a 	sub	r19,r19,r23
    f778:	983fe11e 	bne	r19,zero,f700 <__alt_exception_stack_pointer+0xf800f700>
    f77c:	800b883a 	mov	r5,r16
    f780:	a809883a 	mov	r4,r21
    f784:	000ec040 	call	ec04 <_fflush_r>
    f788:	103fbb1e 	bne	r2,zero,f678 <__alt_exception_stack_pointer+0xf800f678>
    f78c:	0011883a 	mov	r8,zero
    f790:	003fdb06 	br	f700 <__alt_exception_stack_pointer+0xf800f700>
    f794:	94c0012e 	bgeu	r18,r19,f79c <__sfvwrite_r+0x328>
    f798:	9027883a 	mov	r19,r18
    f79c:	980d883a 	mov	r6,r19
    f7a0:	e00b883a 	mov	r5,fp
    f7a4:	000ff880 	call	ff88 <memmove>
    f7a8:	80800217 	ldw	r2,8(r16)
    f7ac:	80c00017 	ldw	r3,0(r16)
    f7b0:	14c5c83a 	sub	r2,r2,r19
    f7b4:	1cc7883a 	add	r3,r3,r19
    f7b8:	80800215 	stw	r2,8(r16)
    f7bc:	80c00015 	stw	r3,0(r16)
    f7c0:	10004326 	beq	r2,zero,f8d0 <__sfvwrite_r+0x45c>
    f7c4:	9805883a 	mov	r2,r19
    f7c8:	003f8306 	br	f5d8 <__alt_exception_stack_pointer+0xf800f5d8>
    f7cc:	b00d883a 	mov	r6,r22
    f7d0:	e00b883a 	mov	r5,fp
    f7d4:	da000115 	stw	r8,4(sp)
    f7d8:	000ff880 	call	ff88 <memmove>
    f7dc:	80800217 	ldw	r2,8(r16)
    f7e0:	80c00017 	ldw	r3,0(r16)
    f7e4:	da000117 	ldw	r8,4(sp)
    f7e8:	1585c83a 	sub	r2,r2,r22
    f7ec:	1dad883a 	add	r22,r3,r22
    f7f0:	80800215 	stw	r2,8(r16)
    f7f4:	85800015 	stw	r22,0(r16)
    f7f8:	003fbf06 	br	f6f8 <__alt_exception_stack_pointer+0xf800f6f8>
    f7fc:	81000017 	ldw	r4,0(r16)
    f800:	9027883a 	mov	r19,r18
    f804:	902f883a 	mov	r23,r18
    f808:	003f6906 	br	f5b0 <__alt_exception_stack_pointer+0xf800f5b0>
    f80c:	900d883a 	mov	r6,r18
    f810:	01400284 	movi	r5,10
    f814:	e009883a 	mov	r4,fp
    f818:	000fd5c0 	call	fd5c <memchr>
    f81c:	10003e26 	beq	r2,zero,f918 <__sfvwrite_r+0x4a4>
    f820:	10800044 	addi	r2,r2,1
    f824:	1727c83a 	sub	r19,r2,fp
    f828:	02000044 	movi	r8,1
    f82c:	003f9d06 	br	f6a4 <__alt_exception_stack_pointer+0xf800f6a4>
    f830:	80800517 	ldw	r2,20(r16)
    f834:	81400417 	ldw	r5,16(r16)
    f838:	81c00017 	ldw	r7,0(r16)
    f83c:	10a7883a 	add	r19,r2,r2
    f840:	9885883a 	add	r2,r19,r2
    f844:	1026d7fa 	srli	r19,r2,31
    f848:	396dc83a 	sub	r22,r7,r5
    f84c:	b1000044 	addi	r4,r22,1
    f850:	9885883a 	add	r2,r19,r2
    f854:	1027d07a 	srai	r19,r2,1
    f858:	2485883a 	add	r2,r4,r18
    f85c:	980d883a 	mov	r6,r19
    f860:	9880022e 	bgeu	r19,r2,f86c <__sfvwrite_r+0x3f8>
    f864:	1027883a 	mov	r19,r2
    f868:	100d883a 	mov	r6,r2
    f86c:	18c1000c 	andi	r3,r3,1024
    f870:	18001c26 	beq	r3,zero,f8e4 <__sfvwrite_r+0x470>
    f874:	300b883a 	mov	r5,r6
    f878:	a809883a 	mov	r4,r21
    f87c:	00096b80 	call	96b8 <_malloc_r>
    f880:	102f883a 	mov	r23,r2
    f884:	10002926 	beq	r2,zero,f92c <__sfvwrite_r+0x4b8>
    f888:	81400417 	ldw	r5,16(r16)
    f88c:	b00d883a 	mov	r6,r22
    f890:	1009883a 	mov	r4,r2
    f894:	000fe400 	call	fe40 <memcpy>
    f898:	8080030b 	ldhu	r2,12(r16)
    f89c:	00fedfc4 	movi	r3,-1153
    f8a0:	10c4703a 	and	r2,r2,r3
    f8a4:	10802014 	ori	r2,r2,128
    f8a8:	8080030d 	sth	r2,12(r16)
    f8ac:	bd89883a 	add	r4,r23,r22
    f8b0:	9d8fc83a 	sub	r7,r19,r22
    f8b4:	85c00415 	stw	r23,16(r16)
    f8b8:	84c00515 	stw	r19,20(r16)
    f8bc:	81000015 	stw	r4,0(r16)
    f8c0:	9027883a 	mov	r19,r18
    f8c4:	81c00215 	stw	r7,8(r16)
    f8c8:	902f883a 	mov	r23,r18
    f8cc:	003f3806 	br	f5b0 <__alt_exception_stack_pointer+0xf800f5b0>
    f8d0:	800b883a 	mov	r5,r16
    f8d4:	a809883a 	mov	r4,r21
    f8d8:	000ec040 	call	ec04 <_fflush_r>
    f8dc:	103fb926 	beq	r2,zero,f7c4 <__alt_exception_stack_pointer+0xf800f7c4>
    f8e0:	003f6506 	br	f678 <__alt_exception_stack_pointer+0xf800f678>
    f8e4:	a809883a 	mov	r4,r21
    f8e8:	00112c40 	call	112c4 <_realloc_r>
    f8ec:	102f883a 	mov	r23,r2
    f8f0:	103fee1e 	bne	r2,zero,f8ac <__alt_exception_stack_pointer+0xf800f8ac>
    f8f4:	81400417 	ldw	r5,16(r16)
    f8f8:	a809883a 	mov	r4,r21
    f8fc:	000f1640 	call	f164 <_free_r>
    f900:	8080030b 	ldhu	r2,12(r16)
    f904:	00ffdfc4 	movi	r3,-129
    f908:	1884703a 	and	r2,r3,r2
    f90c:	00c00304 	movi	r3,12
    f910:	a8c00015 	stw	r3,0(r21)
    f914:	003f5906 	br	f67c <__alt_exception_stack_pointer+0xf800f67c>
    f918:	94c00044 	addi	r19,r18,1
    f91c:	02000044 	movi	r8,1
    f920:	003f6006 	br	f6a4 <__alt_exception_stack_pointer+0xf800f6a4>
    f924:	00bfffc4 	movi	r2,-1
    f928:	003f0006 	br	f52c <__alt_exception_stack_pointer+0xf800f52c>
    f92c:	00800304 	movi	r2,12
    f930:	a8800015 	stw	r2,0(r21)
    f934:	8080030b 	ldhu	r2,12(r16)
    f938:	003f5006 	br	f67c <__alt_exception_stack_pointer+0xf800f67c>

0000f93c <_fwalk>:
    f93c:	defff704 	addi	sp,sp,-36
    f940:	dd000415 	stw	r20,16(sp)
    f944:	dfc00815 	stw	ra,32(sp)
    f948:	ddc00715 	stw	r23,28(sp)
    f94c:	dd800615 	stw	r22,24(sp)
    f950:	dd400515 	stw	r21,20(sp)
    f954:	dcc00315 	stw	r19,12(sp)
    f958:	dc800215 	stw	r18,8(sp)
    f95c:	dc400115 	stw	r17,4(sp)
    f960:	dc000015 	stw	r16,0(sp)
    f964:	2500b804 	addi	r20,r4,736
    f968:	a0002326 	beq	r20,zero,f9f8 <_fwalk+0xbc>
    f96c:	282b883a 	mov	r21,r5
    f970:	002f883a 	mov	r23,zero
    f974:	05800044 	movi	r22,1
    f978:	04ffffc4 	movi	r19,-1
    f97c:	a4400117 	ldw	r17,4(r20)
    f980:	a4800217 	ldw	r18,8(r20)
    f984:	8c7fffc4 	addi	r17,r17,-1
    f988:	88000d16 	blt	r17,zero,f9c0 <_fwalk+0x84>
    f98c:	94000304 	addi	r16,r18,12
    f990:	94800384 	addi	r18,r18,14
    f994:	8080000b 	ldhu	r2,0(r16)
    f998:	8c7fffc4 	addi	r17,r17,-1
    f99c:	813ffd04 	addi	r4,r16,-12
    f9a0:	b080042e 	bgeu	r22,r2,f9b4 <_fwalk+0x78>
    f9a4:	9080000f 	ldh	r2,0(r18)
    f9a8:	14c00226 	beq	r2,r19,f9b4 <_fwalk+0x78>
    f9ac:	a83ee83a 	callr	r21
    f9b0:	b8aeb03a 	or	r23,r23,r2
    f9b4:	84001a04 	addi	r16,r16,104
    f9b8:	94801a04 	addi	r18,r18,104
    f9bc:	8cfff51e 	bne	r17,r19,f994 <__alt_exception_stack_pointer+0xf800f994>
    f9c0:	a5000017 	ldw	r20,0(r20)
    f9c4:	a03fed1e 	bne	r20,zero,f97c <__alt_exception_stack_pointer+0xf800f97c>
    f9c8:	b805883a 	mov	r2,r23
    f9cc:	dfc00817 	ldw	ra,32(sp)
    f9d0:	ddc00717 	ldw	r23,28(sp)
    f9d4:	dd800617 	ldw	r22,24(sp)
    f9d8:	dd400517 	ldw	r21,20(sp)
    f9dc:	dd000417 	ldw	r20,16(sp)
    f9e0:	dcc00317 	ldw	r19,12(sp)
    f9e4:	dc800217 	ldw	r18,8(sp)
    f9e8:	dc400117 	ldw	r17,4(sp)
    f9ec:	dc000017 	ldw	r16,0(sp)
    f9f0:	dec00904 	addi	sp,sp,36
    f9f4:	f800283a 	ret
    f9f8:	002f883a 	mov	r23,zero
    f9fc:	003ff206 	br	f9c8 <__alt_exception_stack_pointer+0xf800f9c8>

0000fa00 <_fwalk_reent>:
    fa00:	defff704 	addi	sp,sp,-36
    fa04:	dd000415 	stw	r20,16(sp)
    fa08:	dfc00815 	stw	ra,32(sp)
    fa0c:	ddc00715 	stw	r23,28(sp)
    fa10:	dd800615 	stw	r22,24(sp)
    fa14:	dd400515 	stw	r21,20(sp)
    fa18:	dcc00315 	stw	r19,12(sp)
    fa1c:	dc800215 	stw	r18,8(sp)
    fa20:	dc400115 	stw	r17,4(sp)
    fa24:	dc000015 	stw	r16,0(sp)
    fa28:	2500b804 	addi	r20,r4,736
    fa2c:	a0002326 	beq	r20,zero,fabc <_fwalk_reent+0xbc>
    fa30:	282b883a 	mov	r21,r5
    fa34:	2027883a 	mov	r19,r4
    fa38:	002f883a 	mov	r23,zero
    fa3c:	05800044 	movi	r22,1
    fa40:	04bfffc4 	movi	r18,-1
    fa44:	a4400117 	ldw	r17,4(r20)
    fa48:	a4000217 	ldw	r16,8(r20)
    fa4c:	8c7fffc4 	addi	r17,r17,-1
    fa50:	88000c16 	blt	r17,zero,fa84 <_fwalk_reent+0x84>
    fa54:	84000304 	addi	r16,r16,12
    fa58:	8080000b 	ldhu	r2,0(r16)
    fa5c:	8c7fffc4 	addi	r17,r17,-1
    fa60:	817ffd04 	addi	r5,r16,-12
    fa64:	b080052e 	bgeu	r22,r2,fa7c <_fwalk_reent+0x7c>
    fa68:	8080008f 	ldh	r2,2(r16)
    fa6c:	9809883a 	mov	r4,r19
    fa70:	14800226 	beq	r2,r18,fa7c <_fwalk_reent+0x7c>
    fa74:	a83ee83a 	callr	r21
    fa78:	b8aeb03a 	or	r23,r23,r2
    fa7c:	84001a04 	addi	r16,r16,104
    fa80:	8cbff51e 	bne	r17,r18,fa58 <__alt_exception_stack_pointer+0xf800fa58>
    fa84:	a5000017 	ldw	r20,0(r20)
    fa88:	a03fee1e 	bne	r20,zero,fa44 <__alt_exception_stack_pointer+0xf800fa44>
    fa8c:	b805883a 	mov	r2,r23
    fa90:	dfc00817 	ldw	ra,32(sp)
    fa94:	ddc00717 	ldw	r23,28(sp)
    fa98:	dd800617 	ldw	r22,24(sp)
    fa9c:	dd400517 	ldw	r21,20(sp)
    faa0:	dd000417 	ldw	r20,16(sp)
    faa4:	dcc00317 	ldw	r19,12(sp)
    faa8:	dc800217 	ldw	r18,8(sp)
    faac:	dc400117 	ldw	r17,4(sp)
    fab0:	dc000017 	ldw	r16,0(sp)
    fab4:	dec00904 	addi	sp,sp,36
    fab8:	f800283a 	ret
    fabc:	002f883a 	mov	r23,zero
    fac0:	003ff206 	br	fa8c <__alt_exception_stack_pointer+0xf800fa8c>

0000fac4 <_setlocale_r>:
    fac4:	30001b26 	beq	r6,zero,fb34 <_setlocale_r+0x70>
    fac8:	014000b4 	movhi	r5,2
    facc:	defffe04 	addi	sp,sp,-8
    fad0:	29634b04 	addi	r5,r5,-29396
    fad4:	3009883a 	mov	r4,r6
    fad8:	dc000015 	stw	r16,0(sp)
    fadc:	dfc00115 	stw	ra,4(sp)
    fae0:	3021883a 	mov	r16,r6
    fae4:	00119d80 	call	119d8 <strcmp>
    fae8:	1000061e 	bne	r2,zero,fb04 <_setlocale_r+0x40>
    faec:	008000b4 	movhi	r2,2
    faf0:	10a32c04 	addi	r2,r2,-29520
    faf4:	dfc00117 	ldw	ra,4(sp)
    faf8:	dc000017 	ldw	r16,0(sp)
    fafc:	dec00204 	addi	sp,sp,8
    fb00:	f800283a 	ret
    fb04:	014000b4 	movhi	r5,2
    fb08:	29632c04 	addi	r5,r5,-29520
    fb0c:	8009883a 	mov	r4,r16
    fb10:	00119d80 	call	119d8 <strcmp>
    fb14:	103ff526 	beq	r2,zero,faec <__alt_exception_stack_pointer+0xf800faec>
    fb18:	014000b4 	movhi	r5,2
    fb1c:	29633604 	addi	r5,r5,-29480
    fb20:	8009883a 	mov	r4,r16
    fb24:	00119d80 	call	119d8 <strcmp>
    fb28:	103ff026 	beq	r2,zero,faec <__alt_exception_stack_pointer+0xf800faec>
    fb2c:	0005883a 	mov	r2,zero
    fb30:	003ff006 	br	faf4 <__alt_exception_stack_pointer+0xf800faf4>
    fb34:	008000b4 	movhi	r2,2
    fb38:	10a32c04 	addi	r2,r2,-29520
    fb3c:	f800283a 	ret

0000fb40 <__locale_charset>:
    fb40:	008000b4 	movhi	r2,2
    fb44:	10a78804 	addi	r2,r2,-25056
    fb48:	f800283a 	ret

0000fb4c <__locale_mb_cur_max>:
    fb4c:	008000b4 	movhi	r2,2
    fb50:	10ac8304 	addi	r2,r2,-19956
    fb54:	10800017 	ldw	r2,0(r2)
    fb58:	f800283a 	ret

0000fb5c <__locale_msgcharset>:
    fb5c:	008000b4 	movhi	r2,2
    fb60:	10a78004 	addi	r2,r2,-25088
    fb64:	f800283a 	ret

0000fb68 <__locale_cjk_lang>:
    fb68:	0005883a 	mov	r2,zero
    fb6c:	f800283a 	ret

0000fb70 <_localeconv_r>:
    fb70:	008000b4 	movhi	r2,2
    fb74:	10a79004 	addi	r2,r2,-25024
    fb78:	f800283a 	ret

0000fb7c <setlocale>:
    fb7c:	008000b4 	movhi	r2,2
    fb80:	10ac8004 	addi	r2,r2,-19968
    fb84:	280d883a 	mov	r6,r5
    fb88:	200b883a 	mov	r5,r4
    fb8c:	11000017 	ldw	r4,0(r2)
    fb90:	000fac41 	jmpi	fac4 <_setlocale_r>

0000fb94 <localeconv>:
    fb94:	008000b4 	movhi	r2,2
    fb98:	10a79004 	addi	r2,r2,-25024
    fb9c:	f800283a 	ret

0000fba0 <__smakebuf_r>:
    fba0:	2880030b 	ldhu	r2,12(r5)
    fba4:	10c0008c 	andi	r3,r2,2
    fba8:	1800411e 	bne	r3,zero,fcb0 <__smakebuf_r+0x110>
    fbac:	deffec04 	addi	sp,sp,-80
    fbb0:	dc000f15 	stw	r16,60(sp)
    fbb4:	2821883a 	mov	r16,r5
    fbb8:	2940038f 	ldh	r5,14(r5)
    fbbc:	dc401015 	stw	r17,64(sp)
    fbc0:	dfc01315 	stw	ra,76(sp)
    fbc4:	dcc01215 	stw	r19,72(sp)
    fbc8:	dc801115 	stw	r18,68(sp)
    fbcc:	2023883a 	mov	r17,r4
    fbd0:	28001c16 	blt	r5,zero,fc44 <__smakebuf_r+0xa4>
    fbd4:	d80d883a 	mov	r6,sp
    fbd8:	00136d80 	call	136d8 <_fstat_r>
    fbdc:	10001816 	blt	r2,zero,fc40 <__smakebuf_r+0xa0>
    fbe0:	d8800117 	ldw	r2,4(sp)
    fbe4:	00e00014 	movui	r3,32768
    fbe8:	10bc000c 	andi	r2,r2,61440
    fbec:	14c80020 	cmpeqi	r19,r2,8192
    fbf0:	10c03726 	beq	r2,r3,fcd0 <__smakebuf_r+0x130>
    fbf4:	80c0030b 	ldhu	r3,12(r16)
    fbf8:	18c20014 	ori	r3,r3,2048
    fbfc:	80c0030d 	sth	r3,12(r16)
    fc00:	00c80004 	movi	r3,8192
    fc04:	10c0521e 	bne	r2,r3,fd50 <__smakebuf_r+0x1b0>
    fc08:	8140038f 	ldh	r5,14(r16)
    fc0c:	8809883a 	mov	r4,r17
    fc10:	00137340 	call	13734 <_isatty_r>
    fc14:	10004c26 	beq	r2,zero,fd48 <__smakebuf_r+0x1a8>
    fc18:	8080030b 	ldhu	r2,12(r16)
    fc1c:	80c010c4 	addi	r3,r16,67
    fc20:	80c00015 	stw	r3,0(r16)
    fc24:	10800054 	ori	r2,r2,1
    fc28:	8080030d 	sth	r2,12(r16)
    fc2c:	00800044 	movi	r2,1
    fc30:	80c00415 	stw	r3,16(r16)
    fc34:	80800515 	stw	r2,20(r16)
    fc38:	04810004 	movi	r18,1024
    fc3c:	00000706 	br	fc5c <__smakebuf_r+0xbc>
    fc40:	8080030b 	ldhu	r2,12(r16)
    fc44:	10c0200c 	andi	r3,r2,128
    fc48:	18001f1e 	bne	r3,zero,fcc8 <__smakebuf_r+0x128>
    fc4c:	04810004 	movi	r18,1024
    fc50:	10820014 	ori	r2,r2,2048
    fc54:	8080030d 	sth	r2,12(r16)
    fc58:	0027883a 	mov	r19,zero
    fc5c:	900b883a 	mov	r5,r18
    fc60:	8809883a 	mov	r4,r17
    fc64:	00096b80 	call	96b8 <_malloc_r>
    fc68:	10002c26 	beq	r2,zero,fd1c <__smakebuf_r+0x17c>
    fc6c:	80c0030b 	ldhu	r3,12(r16)
    fc70:	01000074 	movhi	r4,1
    fc74:	213b2604 	addi	r4,r4,-4968
    fc78:	89000f15 	stw	r4,60(r17)
    fc7c:	18c02014 	ori	r3,r3,128
    fc80:	80c0030d 	sth	r3,12(r16)
    fc84:	80800015 	stw	r2,0(r16)
    fc88:	80800415 	stw	r2,16(r16)
    fc8c:	84800515 	stw	r18,20(r16)
    fc90:	98001a1e 	bne	r19,zero,fcfc <__smakebuf_r+0x15c>
    fc94:	dfc01317 	ldw	ra,76(sp)
    fc98:	dcc01217 	ldw	r19,72(sp)
    fc9c:	dc801117 	ldw	r18,68(sp)
    fca0:	dc401017 	ldw	r17,64(sp)
    fca4:	dc000f17 	ldw	r16,60(sp)
    fca8:	dec01404 	addi	sp,sp,80
    fcac:	f800283a 	ret
    fcb0:	288010c4 	addi	r2,r5,67
    fcb4:	28800015 	stw	r2,0(r5)
    fcb8:	28800415 	stw	r2,16(r5)
    fcbc:	00800044 	movi	r2,1
    fcc0:	28800515 	stw	r2,20(r5)
    fcc4:	f800283a 	ret
    fcc8:	04801004 	movi	r18,64
    fccc:	003fe006 	br	fc50 <__alt_exception_stack_pointer+0xf800fc50>
    fcd0:	81000a17 	ldw	r4,40(r16)
    fcd4:	00c00074 	movhi	r3,1
    fcd8:	18c65d04 	addi	r3,r3,6516
    fcdc:	20ffc51e 	bne	r4,r3,fbf4 <__alt_exception_stack_pointer+0xf800fbf4>
    fce0:	8080030b 	ldhu	r2,12(r16)
    fce4:	04810004 	movi	r18,1024
    fce8:	84801315 	stw	r18,76(r16)
    fcec:	1484b03a 	or	r2,r2,r18
    fcf0:	8080030d 	sth	r2,12(r16)
    fcf4:	0027883a 	mov	r19,zero
    fcf8:	003fd806 	br	fc5c <__alt_exception_stack_pointer+0xf800fc5c>
    fcfc:	8140038f 	ldh	r5,14(r16)
    fd00:	8809883a 	mov	r4,r17
    fd04:	00137340 	call	13734 <_isatty_r>
    fd08:	103fe226 	beq	r2,zero,fc94 <__alt_exception_stack_pointer+0xf800fc94>
    fd0c:	8080030b 	ldhu	r2,12(r16)
    fd10:	10800054 	ori	r2,r2,1
    fd14:	8080030d 	sth	r2,12(r16)
    fd18:	003fde06 	br	fc94 <__alt_exception_stack_pointer+0xf800fc94>
    fd1c:	8080030b 	ldhu	r2,12(r16)
    fd20:	10c0800c 	andi	r3,r2,512
    fd24:	183fdb1e 	bne	r3,zero,fc94 <__alt_exception_stack_pointer+0xf800fc94>
    fd28:	10800094 	ori	r2,r2,2
    fd2c:	80c010c4 	addi	r3,r16,67
    fd30:	8080030d 	sth	r2,12(r16)
    fd34:	00800044 	movi	r2,1
    fd38:	80c00015 	stw	r3,0(r16)
    fd3c:	80c00415 	stw	r3,16(r16)
    fd40:	80800515 	stw	r2,20(r16)
    fd44:	003fd306 	br	fc94 <__alt_exception_stack_pointer+0xf800fc94>
    fd48:	04810004 	movi	r18,1024
    fd4c:	003fc306 	br	fc5c <__alt_exception_stack_pointer+0xf800fc5c>
    fd50:	0027883a 	mov	r19,zero
    fd54:	04810004 	movi	r18,1024
    fd58:	003fc006 	br	fc5c <__alt_exception_stack_pointer+0xf800fc5c>

0000fd5c <memchr>:
    fd5c:	208000cc 	andi	r2,r4,3
    fd60:	280f883a 	mov	r7,r5
    fd64:	10003426 	beq	r2,zero,fe38 <memchr+0xdc>
    fd68:	30bfffc4 	addi	r2,r6,-1
    fd6c:	30001a26 	beq	r6,zero,fdd8 <memchr+0x7c>
    fd70:	20c00003 	ldbu	r3,0(r4)
    fd74:	29803fcc 	andi	r6,r5,255
    fd78:	30c0051e 	bne	r6,r3,fd90 <memchr+0x34>
    fd7c:	00001806 	br	fde0 <memchr+0x84>
    fd80:	10001526 	beq	r2,zero,fdd8 <memchr+0x7c>
    fd84:	20c00003 	ldbu	r3,0(r4)
    fd88:	10bfffc4 	addi	r2,r2,-1
    fd8c:	30c01426 	beq	r6,r3,fde0 <memchr+0x84>
    fd90:	21000044 	addi	r4,r4,1
    fd94:	20c000cc 	andi	r3,r4,3
    fd98:	183ff91e 	bne	r3,zero,fd80 <__alt_exception_stack_pointer+0xf800fd80>
    fd9c:	020000c4 	movi	r8,3
    fda0:	40801136 	bltu	r8,r2,fde8 <memchr+0x8c>
    fda4:	10000c26 	beq	r2,zero,fdd8 <memchr+0x7c>
    fda8:	20c00003 	ldbu	r3,0(r4)
    fdac:	29403fcc 	andi	r5,r5,255
    fdb0:	28c00b26 	beq	r5,r3,fde0 <memchr+0x84>
    fdb4:	20c00044 	addi	r3,r4,1
    fdb8:	39803fcc 	andi	r6,r7,255
    fdbc:	2089883a 	add	r4,r4,r2
    fdc0:	00000306 	br	fdd0 <memchr+0x74>
    fdc4:	18c00044 	addi	r3,r3,1
    fdc8:	197fffc3 	ldbu	r5,-1(r3)
    fdcc:	31400526 	beq	r6,r5,fde4 <memchr+0x88>
    fdd0:	1805883a 	mov	r2,r3
    fdd4:	20fffb1e 	bne	r4,r3,fdc4 <__alt_exception_stack_pointer+0xf800fdc4>
    fdd8:	0005883a 	mov	r2,zero
    fddc:	f800283a 	ret
    fde0:	2005883a 	mov	r2,r4
    fde4:	f800283a 	ret
    fde8:	28c03fcc 	andi	r3,r5,255
    fdec:	1812923a 	slli	r9,r3,8
    fdf0:	02ffbff4 	movhi	r11,65279
    fdf4:	02a02074 	movhi	r10,32897
    fdf8:	48d2b03a 	or	r9,r9,r3
    fdfc:	4806943a 	slli	r3,r9,16
    fe00:	5affbfc4 	addi	r11,r11,-257
    fe04:	52a02004 	addi	r10,r10,-32640
    fe08:	48d2b03a 	or	r9,r9,r3
    fe0c:	20c00017 	ldw	r3,0(r4)
    fe10:	48c6f03a 	xor	r3,r9,r3
    fe14:	1acd883a 	add	r6,r3,r11
    fe18:	00c6303a 	nor	r3,zero,r3
    fe1c:	30c6703a 	and	r3,r6,r3
    fe20:	1a86703a 	and	r3,r3,r10
    fe24:	183fe01e 	bne	r3,zero,fda8 <__alt_exception_stack_pointer+0xf800fda8>
    fe28:	10bfff04 	addi	r2,r2,-4
    fe2c:	21000104 	addi	r4,r4,4
    fe30:	40bff636 	bltu	r8,r2,fe0c <__alt_exception_stack_pointer+0xf800fe0c>
    fe34:	003fdb06 	br	fda4 <__alt_exception_stack_pointer+0xf800fda4>
    fe38:	3005883a 	mov	r2,r6
    fe3c:	003fd706 	br	fd9c <__alt_exception_stack_pointer+0xf800fd9c>

0000fe40 <memcpy>:
    fe40:	defffd04 	addi	sp,sp,-12
    fe44:	dfc00215 	stw	ra,8(sp)
    fe48:	dc400115 	stw	r17,4(sp)
    fe4c:	dc000015 	stw	r16,0(sp)
    fe50:	00c003c4 	movi	r3,15
    fe54:	2005883a 	mov	r2,r4
    fe58:	1980452e 	bgeu	r3,r6,ff70 <memcpy+0x130>
    fe5c:	2906b03a 	or	r3,r5,r4
    fe60:	18c000cc 	andi	r3,r3,3
    fe64:	1800441e 	bne	r3,zero,ff78 <memcpy+0x138>
    fe68:	347ffc04 	addi	r17,r6,-16
    fe6c:	8822d13a 	srli	r17,r17,4
    fe70:	28c00104 	addi	r3,r5,4
    fe74:	23400104 	addi	r13,r4,4
    fe78:	8820913a 	slli	r16,r17,4
    fe7c:	2b000204 	addi	r12,r5,8
    fe80:	22c00204 	addi	r11,r4,8
    fe84:	84000504 	addi	r16,r16,20
    fe88:	2a800304 	addi	r10,r5,12
    fe8c:	22400304 	addi	r9,r4,12
    fe90:	2c21883a 	add	r16,r5,r16
    fe94:	2811883a 	mov	r8,r5
    fe98:	200f883a 	mov	r7,r4
    fe9c:	41000017 	ldw	r4,0(r8)
    fea0:	1fc00017 	ldw	ra,0(r3)
    fea4:	63c00017 	ldw	r15,0(r12)
    fea8:	39000015 	stw	r4,0(r7)
    feac:	53800017 	ldw	r14,0(r10)
    feb0:	6fc00015 	stw	ra,0(r13)
    feb4:	5bc00015 	stw	r15,0(r11)
    feb8:	4b800015 	stw	r14,0(r9)
    febc:	18c00404 	addi	r3,r3,16
    fec0:	39c00404 	addi	r7,r7,16
    fec4:	42000404 	addi	r8,r8,16
    fec8:	6b400404 	addi	r13,r13,16
    fecc:	63000404 	addi	r12,r12,16
    fed0:	5ac00404 	addi	r11,r11,16
    fed4:	52800404 	addi	r10,r10,16
    fed8:	4a400404 	addi	r9,r9,16
    fedc:	1c3fef1e 	bne	r3,r16,fe9c <__alt_exception_stack_pointer+0xf800fe9c>
    fee0:	89c00044 	addi	r7,r17,1
    fee4:	380e913a 	slli	r7,r7,4
    fee8:	310003cc 	andi	r4,r6,15
    feec:	02c000c4 	movi	r11,3
    fef0:	11c7883a 	add	r3,r2,r7
    fef4:	29cb883a 	add	r5,r5,r7
    fef8:	5900212e 	bgeu	r11,r4,ff80 <memcpy+0x140>
    fefc:	1813883a 	mov	r9,r3
    ff00:	2811883a 	mov	r8,r5
    ff04:	200f883a 	mov	r7,r4
    ff08:	42800017 	ldw	r10,0(r8)
    ff0c:	4a400104 	addi	r9,r9,4
    ff10:	39ffff04 	addi	r7,r7,-4
    ff14:	4abfff15 	stw	r10,-4(r9)
    ff18:	42000104 	addi	r8,r8,4
    ff1c:	59fffa36 	bltu	r11,r7,ff08 <__alt_exception_stack_pointer+0xf800ff08>
    ff20:	213fff04 	addi	r4,r4,-4
    ff24:	2008d0ba 	srli	r4,r4,2
    ff28:	318000cc 	andi	r6,r6,3
    ff2c:	21000044 	addi	r4,r4,1
    ff30:	2109883a 	add	r4,r4,r4
    ff34:	2109883a 	add	r4,r4,r4
    ff38:	1907883a 	add	r3,r3,r4
    ff3c:	290b883a 	add	r5,r5,r4
    ff40:	30000626 	beq	r6,zero,ff5c <memcpy+0x11c>
    ff44:	198d883a 	add	r6,r3,r6
    ff48:	29c00003 	ldbu	r7,0(r5)
    ff4c:	18c00044 	addi	r3,r3,1
    ff50:	29400044 	addi	r5,r5,1
    ff54:	19ffffc5 	stb	r7,-1(r3)
    ff58:	19bffb1e 	bne	r3,r6,ff48 <__alt_exception_stack_pointer+0xf800ff48>
    ff5c:	dfc00217 	ldw	ra,8(sp)
    ff60:	dc400117 	ldw	r17,4(sp)
    ff64:	dc000017 	ldw	r16,0(sp)
    ff68:	dec00304 	addi	sp,sp,12
    ff6c:	f800283a 	ret
    ff70:	2007883a 	mov	r3,r4
    ff74:	003ff206 	br	ff40 <__alt_exception_stack_pointer+0xf800ff40>
    ff78:	2007883a 	mov	r3,r4
    ff7c:	003ff106 	br	ff44 <__alt_exception_stack_pointer+0xf800ff44>
    ff80:	200d883a 	mov	r6,r4
    ff84:	003fee06 	br	ff40 <__alt_exception_stack_pointer+0xf800ff40>

0000ff88 <memmove>:
    ff88:	2005883a 	mov	r2,r4
    ff8c:	29000b2e 	bgeu	r5,r4,ffbc <memmove+0x34>
    ff90:	298f883a 	add	r7,r5,r6
    ff94:	21c0092e 	bgeu	r4,r7,ffbc <memmove+0x34>
    ff98:	2187883a 	add	r3,r4,r6
    ff9c:	198bc83a 	sub	r5,r3,r6
    ffa0:	30004826 	beq	r6,zero,100c4 <memmove+0x13c>
    ffa4:	39ffffc4 	addi	r7,r7,-1
    ffa8:	39000003 	ldbu	r4,0(r7)
    ffac:	18ffffc4 	addi	r3,r3,-1
    ffb0:	19000005 	stb	r4,0(r3)
    ffb4:	28fffb1e 	bne	r5,r3,ffa4 <__alt_exception_stack_pointer+0xf800ffa4>
    ffb8:	f800283a 	ret
    ffbc:	00c003c4 	movi	r3,15
    ffc0:	1980412e 	bgeu	r3,r6,100c8 <memmove+0x140>
    ffc4:	2886b03a 	or	r3,r5,r2
    ffc8:	18c000cc 	andi	r3,r3,3
    ffcc:	1800401e 	bne	r3,zero,100d0 <memmove+0x148>
    ffd0:	33fffc04 	addi	r15,r6,-16
    ffd4:	781ed13a 	srli	r15,r15,4
    ffd8:	28c00104 	addi	r3,r5,4
    ffdc:	13400104 	addi	r13,r2,4
    ffe0:	781c913a 	slli	r14,r15,4
    ffe4:	2b000204 	addi	r12,r5,8
    ffe8:	12c00204 	addi	r11,r2,8
    ffec:	73800504 	addi	r14,r14,20
    fff0:	2a800304 	addi	r10,r5,12
    fff4:	12400304 	addi	r9,r2,12
    fff8:	2b9d883a 	add	r14,r5,r14
    fffc:	2811883a 	mov	r8,r5
   10000:	100f883a 	mov	r7,r2
   10004:	41000017 	ldw	r4,0(r8)
   10008:	39c00404 	addi	r7,r7,16
   1000c:	18c00404 	addi	r3,r3,16
   10010:	393ffc15 	stw	r4,-16(r7)
   10014:	193ffc17 	ldw	r4,-16(r3)
   10018:	6b400404 	addi	r13,r13,16
   1001c:	5ac00404 	addi	r11,r11,16
   10020:	693ffc15 	stw	r4,-16(r13)
   10024:	61000017 	ldw	r4,0(r12)
   10028:	4a400404 	addi	r9,r9,16
   1002c:	42000404 	addi	r8,r8,16
   10030:	593ffc15 	stw	r4,-16(r11)
   10034:	51000017 	ldw	r4,0(r10)
   10038:	63000404 	addi	r12,r12,16
   1003c:	52800404 	addi	r10,r10,16
   10040:	493ffc15 	stw	r4,-16(r9)
   10044:	1bbfef1e 	bne	r3,r14,10004 <__alt_exception_stack_pointer+0xf8010004>
   10048:	79000044 	addi	r4,r15,1
   1004c:	2008913a 	slli	r4,r4,4
   10050:	328003cc 	andi	r10,r6,15
   10054:	02c000c4 	movi	r11,3
   10058:	1107883a 	add	r3,r2,r4
   1005c:	290b883a 	add	r5,r5,r4
   10060:	5a801e2e 	bgeu	r11,r10,100dc <memmove+0x154>
   10064:	1813883a 	mov	r9,r3
   10068:	2811883a 	mov	r8,r5
   1006c:	500f883a 	mov	r7,r10
   10070:	41000017 	ldw	r4,0(r8)
   10074:	4a400104 	addi	r9,r9,4
   10078:	39ffff04 	addi	r7,r7,-4
   1007c:	493fff15 	stw	r4,-4(r9)
   10080:	42000104 	addi	r8,r8,4
   10084:	59fffa36 	bltu	r11,r7,10070 <__alt_exception_stack_pointer+0xf8010070>
   10088:	513fff04 	addi	r4,r10,-4
   1008c:	2008d0ba 	srli	r4,r4,2
   10090:	318000cc 	andi	r6,r6,3
   10094:	21000044 	addi	r4,r4,1
   10098:	2109883a 	add	r4,r4,r4
   1009c:	2109883a 	add	r4,r4,r4
   100a0:	1907883a 	add	r3,r3,r4
   100a4:	290b883a 	add	r5,r5,r4
   100a8:	30000b26 	beq	r6,zero,100d8 <memmove+0x150>
   100ac:	198d883a 	add	r6,r3,r6
   100b0:	29c00003 	ldbu	r7,0(r5)
   100b4:	18c00044 	addi	r3,r3,1
   100b8:	29400044 	addi	r5,r5,1
   100bc:	19ffffc5 	stb	r7,-1(r3)
   100c0:	19bffb1e 	bne	r3,r6,100b0 <__alt_exception_stack_pointer+0xf80100b0>
   100c4:	f800283a 	ret
   100c8:	1007883a 	mov	r3,r2
   100cc:	003ff606 	br	100a8 <__alt_exception_stack_pointer+0xf80100a8>
   100d0:	1007883a 	mov	r3,r2
   100d4:	003ff506 	br	100ac <__alt_exception_stack_pointer+0xf80100ac>
   100d8:	f800283a 	ret
   100dc:	500d883a 	mov	r6,r10
   100e0:	003ff106 	br	100a8 <__alt_exception_stack_pointer+0xf80100a8>

000100e4 <memset>:
   100e4:	20c000cc 	andi	r3,r4,3
   100e8:	2005883a 	mov	r2,r4
   100ec:	18004426 	beq	r3,zero,10200 <memset+0x11c>
   100f0:	31ffffc4 	addi	r7,r6,-1
   100f4:	30004026 	beq	r6,zero,101f8 <memset+0x114>
   100f8:	2813883a 	mov	r9,r5
   100fc:	200d883a 	mov	r6,r4
   10100:	2007883a 	mov	r3,r4
   10104:	00000406 	br	10118 <memset+0x34>
   10108:	3a3fffc4 	addi	r8,r7,-1
   1010c:	31800044 	addi	r6,r6,1
   10110:	38003926 	beq	r7,zero,101f8 <memset+0x114>
   10114:	400f883a 	mov	r7,r8
   10118:	18c00044 	addi	r3,r3,1
   1011c:	32400005 	stb	r9,0(r6)
   10120:	1a0000cc 	andi	r8,r3,3
   10124:	403ff81e 	bne	r8,zero,10108 <__alt_exception_stack_pointer+0xf8010108>
   10128:	010000c4 	movi	r4,3
   1012c:	21c02d2e 	bgeu	r4,r7,101e4 <memset+0x100>
   10130:	29003fcc 	andi	r4,r5,255
   10134:	200c923a 	slli	r6,r4,8
   10138:	3108b03a 	or	r4,r6,r4
   1013c:	200c943a 	slli	r6,r4,16
   10140:	218cb03a 	or	r6,r4,r6
   10144:	010003c4 	movi	r4,15
   10148:	21c0182e 	bgeu	r4,r7,101ac <memset+0xc8>
   1014c:	3b3ffc04 	addi	r12,r7,-16
   10150:	6018d13a 	srli	r12,r12,4
   10154:	1a000104 	addi	r8,r3,4
   10158:	1ac00204 	addi	r11,r3,8
   1015c:	6008913a 	slli	r4,r12,4
   10160:	1a800304 	addi	r10,r3,12
   10164:	1813883a 	mov	r9,r3
   10168:	21000504 	addi	r4,r4,20
   1016c:	1909883a 	add	r4,r3,r4
   10170:	49800015 	stw	r6,0(r9)
   10174:	41800015 	stw	r6,0(r8)
   10178:	59800015 	stw	r6,0(r11)
   1017c:	51800015 	stw	r6,0(r10)
   10180:	42000404 	addi	r8,r8,16
   10184:	4a400404 	addi	r9,r9,16
   10188:	5ac00404 	addi	r11,r11,16
   1018c:	52800404 	addi	r10,r10,16
   10190:	413ff71e 	bne	r8,r4,10170 <__alt_exception_stack_pointer+0xf8010170>
   10194:	63000044 	addi	r12,r12,1
   10198:	6018913a 	slli	r12,r12,4
   1019c:	39c003cc 	andi	r7,r7,15
   101a0:	010000c4 	movi	r4,3
   101a4:	1b07883a 	add	r3,r3,r12
   101a8:	21c00e2e 	bgeu	r4,r7,101e4 <memset+0x100>
   101ac:	1813883a 	mov	r9,r3
   101b0:	3811883a 	mov	r8,r7
   101b4:	010000c4 	movi	r4,3
   101b8:	49800015 	stw	r6,0(r9)
   101bc:	423fff04 	addi	r8,r8,-4
   101c0:	4a400104 	addi	r9,r9,4
   101c4:	223ffc36 	bltu	r4,r8,101b8 <__alt_exception_stack_pointer+0xf80101b8>
   101c8:	393fff04 	addi	r4,r7,-4
   101cc:	2008d0ba 	srli	r4,r4,2
   101d0:	39c000cc 	andi	r7,r7,3
   101d4:	21000044 	addi	r4,r4,1
   101d8:	2109883a 	add	r4,r4,r4
   101dc:	2109883a 	add	r4,r4,r4
   101e0:	1907883a 	add	r3,r3,r4
   101e4:	38000526 	beq	r7,zero,101fc <memset+0x118>
   101e8:	19cf883a 	add	r7,r3,r7
   101ec:	19400005 	stb	r5,0(r3)
   101f0:	18c00044 	addi	r3,r3,1
   101f4:	38fffd1e 	bne	r7,r3,101ec <__alt_exception_stack_pointer+0xf80101ec>
   101f8:	f800283a 	ret
   101fc:	f800283a 	ret
   10200:	2007883a 	mov	r3,r4
   10204:	300f883a 	mov	r7,r6
   10208:	003fc706 	br	10128 <__alt_exception_stack_pointer+0xf8010128>

0001020c <_Balloc>:
   1020c:	20801317 	ldw	r2,76(r4)
   10210:	defffc04 	addi	sp,sp,-16
   10214:	dc400115 	stw	r17,4(sp)
   10218:	dc000015 	stw	r16,0(sp)
   1021c:	dfc00315 	stw	ra,12(sp)
   10220:	dc800215 	stw	r18,8(sp)
   10224:	2023883a 	mov	r17,r4
   10228:	2821883a 	mov	r16,r5
   1022c:	10000f26 	beq	r2,zero,1026c <_Balloc+0x60>
   10230:	8407883a 	add	r3,r16,r16
   10234:	18c7883a 	add	r3,r3,r3
   10238:	10c7883a 	add	r3,r2,r3
   1023c:	18800017 	ldw	r2,0(r3)
   10240:	10001126 	beq	r2,zero,10288 <_Balloc+0x7c>
   10244:	11000017 	ldw	r4,0(r2)
   10248:	19000015 	stw	r4,0(r3)
   1024c:	10000415 	stw	zero,16(r2)
   10250:	10000315 	stw	zero,12(r2)
   10254:	dfc00317 	ldw	ra,12(sp)
   10258:	dc800217 	ldw	r18,8(sp)
   1025c:	dc400117 	ldw	r17,4(sp)
   10260:	dc000017 	ldw	r16,0(sp)
   10264:	dec00404 	addi	sp,sp,16
   10268:	f800283a 	ret
   1026c:	01800844 	movi	r6,33
   10270:	01400104 	movi	r5,4
   10274:	00132f00 	call	132f0 <_calloc_r>
   10278:	88801315 	stw	r2,76(r17)
   1027c:	103fec1e 	bne	r2,zero,10230 <__alt_exception_stack_pointer+0xf8010230>
   10280:	0005883a 	mov	r2,zero
   10284:	003ff306 	br	10254 <__alt_exception_stack_pointer+0xf8010254>
   10288:	01400044 	movi	r5,1
   1028c:	2c24983a 	sll	r18,r5,r16
   10290:	8809883a 	mov	r4,r17
   10294:	91800144 	addi	r6,r18,5
   10298:	318d883a 	add	r6,r6,r6
   1029c:	318d883a 	add	r6,r6,r6
   102a0:	00132f00 	call	132f0 <_calloc_r>
   102a4:	103ff626 	beq	r2,zero,10280 <__alt_exception_stack_pointer+0xf8010280>
   102a8:	14000115 	stw	r16,4(r2)
   102ac:	14800215 	stw	r18,8(r2)
   102b0:	003fe606 	br	1024c <__alt_exception_stack_pointer+0xf801024c>

000102b4 <_Bfree>:
   102b4:	28000826 	beq	r5,zero,102d8 <_Bfree+0x24>
   102b8:	28c00117 	ldw	r3,4(r5)
   102bc:	20801317 	ldw	r2,76(r4)
   102c0:	18c7883a 	add	r3,r3,r3
   102c4:	18c7883a 	add	r3,r3,r3
   102c8:	10c5883a 	add	r2,r2,r3
   102cc:	10c00017 	ldw	r3,0(r2)
   102d0:	28c00015 	stw	r3,0(r5)
   102d4:	11400015 	stw	r5,0(r2)
   102d8:	f800283a 	ret

000102dc <__multadd>:
   102dc:	defff704 	addi	sp,sp,-36
   102e0:	dc800215 	stw	r18,8(sp)
   102e4:	2c800417 	ldw	r18,16(r5)
   102e8:	dd800615 	stw	r22,24(sp)
   102ec:	dd400515 	stw	r21,20(sp)
   102f0:	dd000415 	stw	r20,16(sp)
   102f4:	dcc00315 	stw	r19,12(sp)
   102f8:	dc400115 	stw	r17,4(sp)
   102fc:	dc000015 	stw	r16,0(sp)
   10300:	dfc00815 	stw	ra,32(sp)
   10304:	ddc00715 	stw	r23,28(sp)
   10308:	2827883a 	mov	r19,r5
   1030c:	2029883a 	mov	r20,r4
   10310:	3023883a 	mov	r17,r6
   10314:	3821883a 	mov	r16,r7
   10318:	2d400504 	addi	r21,r5,20
   1031c:	002d883a 	mov	r22,zero
   10320:	adc00017 	ldw	r23,0(r21)
   10324:	880b883a 	mov	r5,r17
   10328:	ad400104 	addi	r21,r21,4
   1032c:	b93fffcc 	andi	r4,r23,65535
   10330:	00068e80 	call	68e8 <__mulsi3>
   10334:	b808d43a 	srli	r4,r23,16
   10338:	880b883a 	mov	r5,r17
   1033c:	1421883a 	add	r16,r2,r16
   10340:	00068e80 	call	68e8 <__mulsi3>
   10344:	800ed43a 	srli	r7,r16,16
   10348:	80ffffcc 	andi	r3,r16,65535
   1034c:	b5800044 	addi	r22,r22,1
   10350:	11c5883a 	add	r2,r2,r7
   10354:	100e943a 	slli	r7,r2,16
   10358:	1020d43a 	srli	r16,r2,16
   1035c:	38c7883a 	add	r3,r7,r3
   10360:	a8ffff15 	stw	r3,-4(r21)
   10364:	b4bfee16 	blt	r22,r18,10320 <__alt_exception_stack_pointer+0xf8010320>
   10368:	80000926 	beq	r16,zero,10390 <__multadd+0xb4>
   1036c:	98800217 	ldw	r2,8(r19)
   10370:	9080130e 	bge	r18,r2,103c0 <__multadd+0xe4>
   10374:	90800144 	addi	r2,r18,5
   10378:	1085883a 	add	r2,r2,r2
   1037c:	1085883a 	add	r2,r2,r2
   10380:	9885883a 	add	r2,r19,r2
   10384:	14000015 	stw	r16,0(r2)
   10388:	94800044 	addi	r18,r18,1
   1038c:	9c800415 	stw	r18,16(r19)
   10390:	9805883a 	mov	r2,r19
   10394:	dfc00817 	ldw	ra,32(sp)
   10398:	ddc00717 	ldw	r23,28(sp)
   1039c:	dd800617 	ldw	r22,24(sp)
   103a0:	dd400517 	ldw	r21,20(sp)
   103a4:	dd000417 	ldw	r20,16(sp)
   103a8:	dcc00317 	ldw	r19,12(sp)
   103ac:	dc800217 	ldw	r18,8(sp)
   103b0:	dc400117 	ldw	r17,4(sp)
   103b4:	dc000017 	ldw	r16,0(sp)
   103b8:	dec00904 	addi	sp,sp,36
   103bc:	f800283a 	ret
   103c0:	99400117 	ldw	r5,4(r19)
   103c4:	a009883a 	mov	r4,r20
   103c8:	29400044 	addi	r5,r5,1
   103cc:	001020c0 	call	1020c <_Balloc>
   103d0:	99800417 	ldw	r6,16(r19)
   103d4:	99400304 	addi	r5,r19,12
   103d8:	11000304 	addi	r4,r2,12
   103dc:	31800084 	addi	r6,r6,2
   103e0:	318d883a 	add	r6,r6,r6
   103e4:	318d883a 	add	r6,r6,r6
   103e8:	1023883a 	mov	r17,r2
   103ec:	000fe400 	call	fe40 <memcpy>
   103f0:	98000a26 	beq	r19,zero,1041c <__multadd+0x140>
   103f4:	98c00117 	ldw	r3,4(r19)
   103f8:	a0801317 	ldw	r2,76(r20)
   103fc:	18c7883a 	add	r3,r3,r3
   10400:	18c7883a 	add	r3,r3,r3
   10404:	10c5883a 	add	r2,r2,r3
   10408:	10c00017 	ldw	r3,0(r2)
   1040c:	98c00015 	stw	r3,0(r19)
   10410:	14c00015 	stw	r19,0(r2)
   10414:	8827883a 	mov	r19,r17
   10418:	003fd606 	br	10374 <__alt_exception_stack_pointer+0xf8010374>
   1041c:	8827883a 	mov	r19,r17
   10420:	003fd406 	br	10374 <__alt_exception_stack_pointer+0xf8010374>

00010424 <__s2b>:
   10424:	defff904 	addi	sp,sp,-28
   10428:	dc400115 	stw	r17,4(sp)
   1042c:	dc000015 	stw	r16,0(sp)
   10430:	2023883a 	mov	r17,r4
   10434:	2821883a 	mov	r16,r5
   10438:	39000204 	addi	r4,r7,8
   1043c:	01400244 	movi	r5,9
   10440:	dcc00315 	stw	r19,12(sp)
   10444:	dc800215 	stw	r18,8(sp)
   10448:	dfc00615 	stw	ra,24(sp)
   1044c:	dd400515 	stw	r21,20(sp)
   10450:	dd000415 	stw	r20,16(sp)
   10454:	3825883a 	mov	r18,r7
   10458:	3027883a 	mov	r19,r6
   1045c:	00067340 	call	6734 <__divsi3>
   10460:	00c00044 	movi	r3,1
   10464:	000b883a 	mov	r5,zero
   10468:	1880030e 	bge	r3,r2,10478 <__s2b+0x54>
   1046c:	18c7883a 	add	r3,r3,r3
   10470:	29400044 	addi	r5,r5,1
   10474:	18bffd16 	blt	r3,r2,1046c <__alt_exception_stack_pointer+0xf801046c>
   10478:	8809883a 	mov	r4,r17
   1047c:	001020c0 	call	1020c <_Balloc>
   10480:	d8c00717 	ldw	r3,28(sp)
   10484:	10c00515 	stw	r3,20(r2)
   10488:	00c00044 	movi	r3,1
   1048c:	10c00415 	stw	r3,16(r2)
   10490:	00c00244 	movi	r3,9
   10494:	1cc0210e 	bge	r3,r19,1051c <__s2b+0xf8>
   10498:	80eb883a 	add	r21,r16,r3
   1049c:	a829883a 	mov	r20,r21
   104a0:	84e1883a 	add	r16,r16,r19
   104a4:	a1c00007 	ldb	r7,0(r20)
   104a8:	01800284 	movi	r6,10
   104ac:	a5000044 	addi	r20,r20,1
   104b0:	100b883a 	mov	r5,r2
   104b4:	39fff404 	addi	r7,r7,-48
   104b8:	8809883a 	mov	r4,r17
   104bc:	00102dc0 	call	102dc <__multadd>
   104c0:	a43ff81e 	bne	r20,r16,104a4 <__alt_exception_stack_pointer+0xf80104a4>
   104c4:	ace1883a 	add	r16,r21,r19
   104c8:	843ffe04 	addi	r16,r16,-8
   104cc:	9c800a0e 	bge	r19,r18,104f8 <__s2b+0xd4>
   104d0:	94e5c83a 	sub	r18,r18,r19
   104d4:	84a5883a 	add	r18,r16,r18
   104d8:	81c00007 	ldb	r7,0(r16)
   104dc:	01800284 	movi	r6,10
   104e0:	84000044 	addi	r16,r16,1
   104e4:	100b883a 	mov	r5,r2
   104e8:	39fff404 	addi	r7,r7,-48
   104ec:	8809883a 	mov	r4,r17
   104f0:	00102dc0 	call	102dc <__multadd>
   104f4:	84bff81e 	bne	r16,r18,104d8 <__alt_exception_stack_pointer+0xf80104d8>
   104f8:	dfc00617 	ldw	ra,24(sp)
   104fc:	dd400517 	ldw	r21,20(sp)
   10500:	dd000417 	ldw	r20,16(sp)
   10504:	dcc00317 	ldw	r19,12(sp)
   10508:	dc800217 	ldw	r18,8(sp)
   1050c:	dc400117 	ldw	r17,4(sp)
   10510:	dc000017 	ldw	r16,0(sp)
   10514:	dec00704 	addi	sp,sp,28
   10518:	f800283a 	ret
   1051c:	84000284 	addi	r16,r16,10
   10520:	1827883a 	mov	r19,r3
   10524:	003fe906 	br	104cc <__alt_exception_stack_pointer+0xf80104cc>

00010528 <__hi0bits>:
   10528:	20bfffec 	andhi	r2,r4,65535
   1052c:	1000141e 	bne	r2,zero,10580 <__hi0bits+0x58>
   10530:	2008943a 	slli	r4,r4,16
   10534:	00800404 	movi	r2,16
   10538:	20ffc02c 	andhi	r3,r4,65280
   1053c:	1800021e 	bne	r3,zero,10548 <__hi0bits+0x20>
   10540:	2008923a 	slli	r4,r4,8
   10544:	10800204 	addi	r2,r2,8
   10548:	20fc002c 	andhi	r3,r4,61440
   1054c:	1800021e 	bne	r3,zero,10558 <__hi0bits+0x30>
   10550:	2008913a 	slli	r4,r4,4
   10554:	10800104 	addi	r2,r2,4
   10558:	20f0002c 	andhi	r3,r4,49152
   1055c:	1800031e 	bne	r3,zero,1056c <__hi0bits+0x44>
   10560:	2109883a 	add	r4,r4,r4
   10564:	10800084 	addi	r2,r2,2
   10568:	2109883a 	add	r4,r4,r4
   1056c:	20000316 	blt	r4,zero,1057c <__hi0bits+0x54>
   10570:	2110002c 	andhi	r4,r4,16384
   10574:	2000041e 	bne	r4,zero,10588 <__hi0bits+0x60>
   10578:	00800804 	movi	r2,32
   1057c:	f800283a 	ret
   10580:	0005883a 	mov	r2,zero
   10584:	003fec06 	br	10538 <__alt_exception_stack_pointer+0xf8010538>
   10588:	10800044 	addi	r2,r2,1
   1058c:	f800283a 	ret

00010590 <__lo0bits>:
   10590:	20c00017 	ldw	r3,0(r4)
   10594:	188001cc 	andi	r2,r3,7
   10598:	10000826 	beq	r2,zero,105bc <__lo0bits+0x2c>
   1059c:	1880004c 	andi	r2,r3,1
   105a0:	1000211e 	bne	r2,zero,10628 <__lo0bits+0x98>
   105a4:	1880008c 	andi	r2,r3,2
   105a8:	1000211e 	bne	r2,zero,10630 <__lo0bits+0xa0>
   105ac:	1806d0ba 	srli	r3,r3,2
   105b0:	00800084 	movi	r2,2
   105b4:	20c00015 	stw	r3,0(r4)
   105b8:	f800283a 	ret
   105bc:	18bfffcc 	andi	r2,r3,65535
   105c0:	10001326 	beq	r2,zero,10610 <__lo0bits+0x80>
   105c4:	0005883a 	mov	r2,zero
   105c8:	19403fcc 	andi	r5,r3,255
   105cc:	2800021e 	bne	r5,zero,105d8 <__lo0bits+0x48>
   105d0:	1806d23a 	srli	r3,r3,8
   105d4:	10800204 	addi	r2,r2,8
   105d8:	194003cc 	andi	r5,r3,15
   105dc:	2800021e 	bne	r5,zero,105e8 <__lo0bits+0x58>
   105e0:	1806d13a 	srli	r3,r3,4
   105e4:	10800104 	addi	r2,r2,4
   105e8:	194000cc 	andi	r5,r3,3
   105ec:	2800021e 	bne	r5,zero,105f8 <__lo0bits+0x68>
   105f0:	1806d0ba 	srli	r3,r3,2
   105f4:	10800084 	addi	r2,r2,2
   105f8:	1940004c 	andi	r5,r3,1
   105fc:	2800081e 	bne	r5,zero,10620 <__lo0bits+0x90>
   10600:	1806d07a 	srli	r3,r3,1
   10604:	1800051e 	bne	r3,zero,1061c <__lo0bits+0x8c>
   10608:	00800804 	movi	r2,32
   1060c:	f800283a 	ret
   10610:	1806d43a 	srli	r3,r3,16
   10614:	00800404 	movi	r2,16
   10618:	003feb06 	br	105c8 <__alt_exception_stack_pointer+0xf80105c8>
   1061c:	10800044 	addi	r2,r2,1
   10620:	20c00015 	stw	r3,0(r4)
   10624:	f800283a 	ret
   10628:	0005883a 	mov	r2,zero
   1062c:	f800283a 	ret
   10630:	1806d07a 	srli	r3,r3,1
   10634:	00800044 	movi	r2,1
   10638:	20c00015 	stw	r3,0(r4)
   1063c:	f800283a 	ret

00010640 <__i2b>:
   10640:	defffd04 	addi	sp,sp,-12
   10644:	dc000015 	stw	r16,0(sp)
   10648:	04000044 	movi	r16,1
   1064c:	dc400115 	stw	r17,4(sp)
   10650:	2823883a 	mov	r17,r5
   10654:	800b883a 	mov	r5,r16
   10658:	dfc00215 	stw	ra,8(sp)
   1065c:	001020c0 	call	1020c <_Balloc>
   10660:	14400515 	stw	r17,20(r2)
   10664:	14000415 	stw	r16,16(r2)
   10668:	dfc00217 	ldw	ra,8(sp)
   1066c:	dc400117 	ldw	r17,4(sp)
   10670:	dc000017 	ldw	r16,0(sp)
   10674:	dec00304 	addi	sp,sp,12
   10678:	f800283a 	ret

0001067c <__multiply>:
   1067c:	deffef04 	addi	sp,sp,-68
   10680:	dc400815 	stw	r17,32(sp)
   10684:	dc000715 	stw	r16,28(sp)
   10688:	34400417 	ldw	r17,16(r6)
   1068c:	2c000417 	ldw	r16,16(r5)
   10690:	dd800d15 	stw	r22,52(sp)
   10694:	dc800915 	stw	r18,36(sp)
   10698:	dfc01015 	stw	ra,64(sp)
   1069c:	df000f15 	stw	fp,60(sp)
   106a0:	ddc00e15 	stw	r23,56(sp)
   106a4:	dd400c15 	stw	r21,48(sp)
   106a8:	dd000b15 	stw	r20,44(sp)
   106ac:	dcc00a15 	stw	r19,40(sp)
   106b0:	2825883a 	mov	r18,r5
   106b4:	302d883a 	mov	r22,r6
   106b8:	8440050e 	bge	r16,r17,106d0 <__multiply+0x54>
   106bc:	8007883a 	mov	r3,r16
   106c0:	3025883a 	mov	r18,r6
   106c4:	8821883a 	mov	r16,r17
   106c8:	282d883a 	mov	r22,r5
   106cc:	1823883a 	mov	r17,r3
   106d0:	90800217 	ldw	r2,8(r18)
   106d4:	8447883a 	add	r3,r16,r17
   106d8:	d8c00215 	stw	r3,8(sp)
   106dc:	91400117 	ldw	r5,4(r18)
   106e0:	10c0010e 	bge	r2,r3,106e8 <__multiply+0x6c>
   106e4:	29400044 	addi	r5,r5,1
   106e8:	001020c0 	call	1020c <_Balloc>
   106ec:	d8c00217 	ldw	r3,8(sp)
   106f0:	d8800615 	stw	r2,24(sp)
   106f4:	18eb883a 	add	r21,r3,r3
   106f8:	ad6b883a 	add	r21,r21,r21
   106fc:	10c00504 	addi	r3,r2,20
   10700:	1d6b883a 	add	r21,r3,r21
   10704:	d8c00115 	stw	r3,4(sp)
   10708:	dd400315 	stw	r21,12(sp)
   1070c:	1805883a 	mov	r2,r3
   10710:	1d40042e 	bgeu	r3,r21,10724 <__multiply+0xa8>
   10714:	d8c00317 	ldw	r3,12(sp)
   10718:	10000015 	stw	zero,0(r2)
   1071c:	10800104 	addi	r2,r2,4
   10720:	10fffc36 	bltu	r2,r3,10714 <__alt_exception_stack_pointer+0xf8010714>
   10724:	8c63883a 	add	r17,r17,r17
   10728:	b5800504 	addi	r22,r22,20
   1072c:	8c63883a 	add	r17,r17,r17
   10730:	94800504 	addi	r18,r18,20
   10734:	8421883a 	add	r16,r16,r16
   10738:	b463883a 	add	r17,r22,r17
   1073c:	8421883a 	add	r16,r16,r16
   10740:	dd800015 	stw	r22,0(sp)
   10744:	dc800415 	stw	r18,16(sp)
   10748:	dc400515 	stw	r17,20(sp)
   1074c:	9429883a 	add	r20,r18,r16
   10750:	b4404f2e 	bgeu	r22,r17,10890 <__multiply+0x214>
   10754:	d8c00017 	ldw	r3,0(sp)
   10758:	1c800017 	ldw	r18,0(r3)
   1075c:	947fffcc 	andi	r17,r18,65535
   10760:	88001e26 	beq	r17,zero,107dc <__multiply+0x160>
   10764:	dd800117 	ldw	r22,4(sp)
   10768:	dd400417 	ldw	r21,16(sp)
   1076c:	0027883a 	mov	r19,zero
   10770:	ac800017 	ldw	r18,0(r21)
   10774:	b4000017 	ldw	r16,0(r22)
   10778:	880b883a 	mov	r5,r17
   1077c:	913fffcc 	andi	r4,r18,65535
   10780:	00068e80 	call	68e8 <__mulsi3>
   10784:	9008d43a 	srli	r4,r18,16
   10788:	84bfffcc 	andi	r18,r16,65535
   1078c:	1485883a 	add	r2,r2,r18
   10790:	14e5883a 	add	r18,r2,r19
   10794:	8020d43a 	srli	r16,r16,16
   10798:	9026d43a 	srli	r19,r18,16
   1079c:	880b883a 	mov	r5,r17
   107a0:	00068e80 	call	68e8 <__mulsi3>
   107a4:	1405883a 	add	r2,r2,r16
   107a8:	14e1883a 	add	r16,r2,r19
   107ac:	90ffffcc 	andi	r3,r18,65535
   107b0:	8024943a 	slli	r18,r16,16
   107b4:	ad400104 	addi	r21,r21,4
   107b8:	b005883a 	mov	r2,r22
   107bc:	90c6b03a 	or	r3,r18,r3
   107c0:	b0c00015 	stw	r3,0(r22)
   107c4:	8026d43a 	srli	r19,r16,16
   107c8:	b5800104 	addi	r22,r22,4
   107cc:	ad3fe836 	bltu	r21,r20,10770 <__alt_exception_stack_pointer+0xf8010770>
   107d0:	d8c00017 	ldw	r3,0(sp)
   107d4:	14c00115 	stw	r19,4(r2)
   107d8:	1c800017 	ldw	r18,0(r3)
   107dc:	9024d43a 	srli	r18,r18,16
   107e0:	90002226 	beq	r18,zero,1086c <__multiply+0x1f0>
   107e4:	d8c00117 	ldw	r3,4(sp)
   107e8:	dd800417 	ldw	r22,16(sp)
   107ec:	002f883a 	mov	r23,zero
   107f0:	1f000017 	ldw	fp,0(r3)
   107f4:	1823883a 	mov	r17,r3
   107f8:	182b883a 	mov	r21,r3
   107fc:	e021883a 	mov	r16,fp
   10800:	00000106 	br	10808 <__multiply+0x18c>
   10804:	982b883a 	mov	r21,r19
   10808:	b100000b 	ldhu	r4,0(r22)
   1080c:	8020d43a 	srli	r16,r16,16
   10810:	900b883a 	mov	r5,r18
   10814:	00068e80 	call	68e8 <__mulsi3>
   10818:	1405883a 	add	r2,r2,r16
   1081c:	15ef883a 	add	r23,r2,r23
   10820:	b804943a 	slli	r2,r23,16
   10824:	e0ffffcc 	andi	r3,fp,65535
   10828:	8c400104 	addi	r17,r17,4
   1082c:	10c6b03a 	or	r3,r2,r3
   10830:	88ffff15 	stw	r3,-4(r17)
   10834:	b5800104 	addi	r22,r22,4
   10838:	b13fff17 	ldw	r4,-4(r22)
   1083c:	acc00104 	addi	r19,r21,4
   10840:	900b883a 	mov	r5,r18
   10844:	2008d43a 	srli	r4,r4,16
   10848:	9c000017 	ldw	r16,0(r19)
   1084c:	00068e80 	call	68e8 <__mulsi3>
   10850:	b806d43a 	srli	r3,r23,16
   10854:	813fffcc 	andi	r4,r16,65535
   10858:	1105883a 	add	r2,r2,r4
   1085c:	10f9883a 	add	fp,r2,r3
   10860:	e02ed43a 	srli	r23,fp,16
   10864:	b53fe736 	bltu	r22,r20,10804 <__alt_exception_stack_pointer+0xf8010804>
   10868:	af000115 	stw	fp,4(r21)
   1086c:	d8c00017 	ldw	r3,0(sp)
   10870:	d9000517 	ldw	r4,20(sp)
   10874:	18c00104 	addi	r3,r3,4
   10878:	d8c00015 	stw	r3,0(sp)
   1087c:	d8c00117 	ldw	r3,4(sp)
   10880:	18c00104 	addi	r3,r3,4
   10884:	d8c00115 	stw	r3,4(sp)
   10888:	d8c00017 	ldw	r3,0(sp)
   1088c:	193fb136 	bltu	r3,r4,10754 <__alt_exception_stack_pointer+0xf8010754>
   10890:	d8c00217 	ldw	r3,8(sp)
   10894:	00c00c0e 	bge	zero,r3,108c8 <__multiply+0x24c>
   10898:	d8c00317 	ldw	r3,12(sp)
   1089c:	18bfff17 	ldw	r2,-4(r3)
   108a0:	1d7fff04 	addi	r21,r3,-4
   108a4:	10000326 	beq	r2,zero,108b4 <__multiply+0x238>
   108a8:	00000706 	br	108c8 <__multiply+0x24c>
   108ac:	a8800017 	ldw	r2,0(r21)
   108b0:	1000051e 	bne	r2,zero,108c8 <__multiply+0x24c>
   108b4:	d8c00217 	ldw	r3,8(sp)
   108b8:	ad7fff04 	addi	r21,r21,-4
   108bc:	18ffffc4 	addi	r3,r3,-1
   108c0:	d8c00215 	stw	r3,8(sp)
   108c4:	183ff91e 	bne	r3,zero,108ac <__alt_exception_stack_pointer+0xf80108ac>
   108c8:	d8c00617 	ldw	r3,24(sp)
   108cc:	d9000217 	ldw	r4,8(sp)
   108d0:	1805883a 	mov	r2,r3
   108d4:	19000415 	stw	r4,16(r3)
   108d8:	dfc01017 	ldw	ra,64(sp)
   108dc:	df000f17 	ldw	fp,60(sp)
   108e0:	ddc00e17 	ldw	r23,56(sp)
   108e4:	dd800d17 	ldw	r22,52(sp)
   108e8:	dd400c17 	ldw	r21,48(sp)
   108ec:	dd000b17 	ldw	r20,44(sp)
   108f0:	dcc00a17 	ldw	r19,40(sp)
   108f4:	dc800917 	ldw	r18,36(sp)
   108f8:	dc400817 	ldw	r17,32(sp)
   108fc:	dc000717 	ldw	r16,28(sp)
   10900:	dec01104 	addi	sp,sp,68
   10904:	f800283a 	ret

00010908 <__pow5mult>:
   10908:	defffa04 	addi	sp,sp,-24
   1090c:	dcc00315 	stw	r19,12(sp)
   10910:	dc000015 	stw	r16,0(sp)
   10914:	dfc00515 	stw	ra,20(sp)
   10918:	dd000415 	stw	r20,16(sp)
   1091c:	dc800215 	stw	r18,8(sp)
   10920:	dc400115 	stw	r17,4(sp)
   10924:	308000cc 	andi	r2,r6,3
   10928:	3021883a 	mov	r16,r6
   1092c:	2027883a 	mov	r19,r4
   10930:	10002f1e 	bne	r2,zero,109f0 <__pow5mult+0xe8>
   10934:	2825883a 	mov	r18,r5
   10938:	8021d0ba 	srai	r16,r16,2
   1093c:	80001a26 	beq	r16,zero,109a8 <__pow5mult+0xa0>
   10940:	9c401217 	ldw	r17,72(r19)
   10944:	8800061e 	bne	r17,zero,10960 <__pow5mult+0x58>
   10948:	00003406 	br	10a1c <__pow5mult+0x114>
   1094c:	8021d07a 	srai	r16,r16,1
   10950:	80001526 	beq	r16,zero,109a8 <__pow5mult+0xa0>
   10954:	88800017 	ldw	r2,0(r17)
   10958:	10001c26 	beq	r2,zero,109cc <__pow5mult+0xc4>
   1095c:	1023883a 	mov	r17,r2
   10960:	8080004c 	andi	r2,r16,1
   10964:	103ff926 	beq	r2,zero,1094c <__alt_exception_stack_pointer+0xf801094c>
   10968:	880d883a 	mov	r6,r17
   1096c:	900b883a 	mov	r5,r18
   10970:	9809883a 	mov	r4,r19
   10974:	001067c0 	call	1067c <__multiply>
   10978:	90001b26 	beq	r18,zero,109e8 <__pow5mult+0xe0>
   1097c:	91000117 	ldw	r4,4(r18)
   10980:	98c01317 	ldw	r3,76(r19)
   10984:	8021d07a 	srai	r16,r16,1
   10988:	2109883a 	add	r4,r4,r4
   1098c:	2109883a 	add	r4,r4,r4
   10990:	1907883a 	add	r3,r3,r4
   10994:	19000017 	ldw	r4,0(r3)
   10998:	91000015 	stw	r4,0(r18)
   1099c:	1c800015 	stw	r18,0(r3)
   109a0:	1025883a 	mov	r18,r2
   109a4:	803feb1e 	bne	r16,zero,10954 <__alt_exception_stack_pointer+0xf8010954>
   109a8:	9005883a 	mov	r2,r18
   109ac:	dfc00517 	ldw	ra,20(sp)
   109b0:	dd000417 	ldw	r20,16(sp)
   109b4:	dcc00317 	ldw	r19,12(sp)
   109b8:	dc800217 	ldw	r18,8(sp)
   109bc:	dc400117 	ldw	r17,4(sp)
   109c0:	dc000017 	ldw	r16,0(sp)
   109c4:	dec00604 	addi	sp,sp,24
   109c8:	f800283a 	ret
   109cc:	880d883a 	mov	r6,r17
   109d0:	880b883a 	mov	r5,r17
   109d4:	9809883a 	mov	r4,r19
   109d8:	001067c0 	call	1067c <__multiply>
   109dc:	88800015 	stw	r2,0(r17)
   109e0:	10000015 	stw	zero,0(r2)
   109e4:	003fdd06 	br	1095c <__alt_exception_stack_pointer+0xf801095c>
   109e8:	1025883a 	mov	r18,r2
   109ec:	003fd706 	br	1094c <__alt_exception_stack_pointer+0xf801094c>
   109f0:	10bfffc4 	addi	r2,r2,-1
   109f4:	1085883a 	add	r2,r2,r2
   109f8:	00c000b4 	movhi	r3,2
   109fc:	18e34e04 	addi	r3,r3,-29384
   10a00:	1085883a 	add	r2,r2,r2
   10a04:	1885883a 	add	r2,r3,r2
   10a08:	11800017 	ldw	r6,0(r2)
   10a0c:	000f883a 	mov	r7,zero
   10a10:	00102dc0 	call	102dc <__multadd>
   10a14:	1025883a 	mov	r18,r2
   10a18:	003fc706 	br	10938 <__alt_exception_stack_pointer+0xf8010938>
   10a1c:	05000044 	movi	r20,1
   10a20:	a00b883a 	mov	r5,r20
   10a24:	9809883a 	mov	r4,r19
   10a28:	001020c0 	call	1020c <_Balloc>
   10a2c:	1023883a 	mov	r17,r2
   10a30:	00809c44 	movi	r2,625
   10a34:	88800515 	stw	r2,20(r17)
   10a38:	8d000415 	stw	r20,16(r17)
   10a3c:	9c401215 	stw	r17,72(r19)
   10a40:	88000015 	stw	zero,0(r17)
   10a44:	003fc606 	br	10960 <__alt_exception_stack_pointer+0xf8010960>

00010a48 <__lshift>:
   10a48:	defff904 	addi	sp,sp,-28
   10a4c:	dd400515 	stw	r21,20(sp)
   10a50:	dcc00315 	stw	r19,12(sp)
   10a54:	302bd17a 	srai	r21,r6,5
   10a58:	2cc00417 	ldw	r19,16(r5)
   10a5c:	28800217 	ldw	r2,8(r5)
   10a60:	dd000415 	stw	r20,16(sp)
   10a64:	ace7883a 	add	r19,r21,r19
   10a68:	dc800215 	stw	r18,8(sp)
   10a6c:	dc400115 	stw	r17,4(sp)
   10a70:	dc000015 	stw	r16,0(sp)
   10a74:	dfc00615 	stw	ra,24(sp)
   10a78:	9c000044 	addi	r16,r19,1
   10a7c:	2823883a 	mov	r17,r5
   10a80:	3029883a 	mov	r20,r6
   10a84:	2025883a 	mov	r18,r4
   10a88:	29400117 	ldw	r5,4(r5)
   10a8c:	1400030e 	bge	r2,r16,10a9c <__lshift+0x54>
   10a90:	1085883a 	add	r2,r2,r2
   10a94:	29400044 	addi	r5,r5,1
   10a98:	143ffd16 	blt	r2,r16,10a90 <__alt_exception_stack_pointer+0xf8010a90>
   10a9c:	9009883a 	mov	r4,r18
   10aa0:	001020c0 	call	1020c <_Balloc>
   10aa4:	10c00504 	addi	r3,r2,20
   10aa8:	0540070e 	bge	zero,r21,10ac8 <__lshift+0x80>
   10aac:	ad6b883a 	add	r21,r21,r21
   10ab0:	ad6b883a 	add	r21,r21,r21
   10ab4:	1809883a 	mov	r4,r3
   10ab8:	1d47883a 	add	r3,r3,r21
   10abc:	20000015 	stw	zero,0(r4)
   10ac0:	21000104 	addi	r4,r4,4
   10ac4:	193ffd1e 	bne	r3,r4,10abc <__alt_exception_stack_pointer+0xf8010abc>
   10ac8:	8a000417 	ldw	r8,16(r17)
   10acc:	89000504 	addi	r4,r17,20
   10ad0:	a18007cc 	andi	r6,r20,31
   10ad4:	4211883a 	add	r8,r8,r8
   10ad8:	4211883a 	add	r8,r8,r8
   10adc:	2211883a 	add	r8,r4,r8
   10ae0:	30002326 	beq	r6,zero,10b70 <__lshift+0x128>
   10ae4:	02400804 	movi	r9,32
   10ae8:	4993c83a 	sub	r9,r9,r6
   10aec:	000b883a 	mov	r5,zero
   10af0:	21c00017 	ldw	r7,0(r4)
   10af4:	1815883a 	mov	r10,r3
   10af8:	18c00104 	addi	r3,r3,4
   10afc:	398e983a 	sll	r7,r7,r6
   10b00:	21000104 	addi	r4,r4,4
   10b04:	394ab03a 	or	r5,r7,r5
   10b08:	197fff15 	stw	r5,-4(r3)
   10b0c:	217fff17 	ldw	r5,-4(r4)
   10b10:	2a4ad83a 	srl	r5,r5,r9
   10b14:	223ff636 	bltu	r4,r8,10af0 <__alt_exception_stack_pointer+0xf8010af0>
   10b18:	51400115 	stw	r5,4(r10)
   10b1c:	28001a1e 	bne	r5,zero,10b88 <__lshift+0x140>
   10b20:	843fffc4 	addi	r16,r16,-1
   10b24:	14000415 	stw	r16,16(r2)
   10b28:	88000826 	beq	r17,zero,10b4c <__lshift+0x104>
   10b2c:	89000117 	ldw	r4,4(r17)
   10b30:	90c01317 	ldw	r3,76(r18)
   10b34:	2109883a 	add	r4,r4,r4
   10b38:	2109883a 	add	r4,r4,r4
   10b3c:	1907883a 	add	r3,r3,r4
   10b40:	19000017 	ldw	r4,0(r3)
   10b44:	89000015 	stw	r4,0(r17)
   10b48:	1c400015 	stw	r17,0(r3)
   10b4c:	dfc00617 	ldw	ra,24(sp)
   10b50:	dd400517 	ldw	r21,20(sp)
   10b54:	dd000417 	ldw	r20,16(sp)
   10b58:	dcc00317 	ldw	r19,12(sp)
   10b5c:	dc800217 	ldw	r18,8(sp)
   10b60:	dc400117 	ldw	r17,4(sp)
   10b64:	dc000017 	ldw	r16,0(sp)
   10b68:	dec00704 	addi	sp,sp,28
   10b6c:	f800283a 	ret
   10b70:	21400017 	ldw	r5,0(r4)
   10b74:	18c00104 	addi	r3,r3,4
   10b78:	21000104 	addi	r4,r4,4
   10b7c:	197fff15 	stw	r5,-4(r3)
   10b80:	223ffb36 	bltu	r4,r8,10b70 <__alt_exception_stack_pointer+0xf8010b70>
   10b84:	003fe606 	br	10b20 <__alt_exception_stack_pointer+0xf8010b20>
   10b88:	9c000084 	addi	r16,r19,2
   10b8c:	003fe406 	br	10b20 <__alt_exception_stack_pointer+0xf8010b20>

00010b90 <__mcmp>:
   10b90:	20800417 	ldw	r2,16(r4)
   10b94:	28c00417 	ldw	r3,16(r5)
   10b98:	10c5c83a 	sub	r2,r2,r3
   10b9c:	1000111e 	bne	r2,zero,10be4 <__mcmp+0x54>
   10ba0:	18c7883a 	add	r3,r3,r3
   10ba4:	18c7883a 	add	r3,r3,r3
   10ba8:	21000504 	addi	r4,r4,20
   10bac:	29400504 	addi	r5,r5,20
   10bb0:	20c5883a 	add	r2,r4,r3
   10bb4:	28cb883a 	add	r5,r5,r3
   10bb8:	00000106 	br	10bc0 <__mcmp+0x30>
   10bbc:	20800a2e 	bgeu	r4,r2,10be8 <__mcmp+0x58>
   10bc0:	10bfff04 	addi	r2,r2,-4
   10bc4:	297fff04 	addi	r5,r5,-4
   10bc8:	11800017 	ldw	r6,0(r2)
   10bcc:	28c00017 	ldw	r3,0(r5)
   10bd0:	30fffa26 	beq	r6,r3,10bbc <__alt_exception_stack_pointer+0xf8010bbc>
   10bd4:	30c00236 	bltu	r6,r3,10be0 <__mcmp+0x50>
   10bd8:	00800044 	movi	r2,1
   10bdc:	f800283a 	ret
   10be0:	00bfffc4 	movi	r2,-1
   10be4:	f800283a 	ret
   10be8:	0005883a 	mov	r2,zero
   10bec:	f800283a 	ret

00010bf0 <__mdiff>:
   10bf0:	28c00417 	ldw	r3,16(r5)
   10bf4:	30800417 	ldw	r2,16(r6)
   10bf8:	defffa04 	addi	sp,sp,-24
   10bfc:	dcc00315 	stw	r19,12(sp)
   10c00:	dc800215 	stw	r18,8(sp)
   10c04:	dfc00515 	stw	ra,20(sp)
   10c08:	dd000415 	stw	r20,16(sp)
   10c0c:	dc400115 	stw	r17,4(sp)
   10c10:	dc000015 	stw	r16,0(sp)
   10c14:	1887c83a 	sub	r3,r3,r2
   10c18:	2825883a 	mov	r18,r5
   10c1c:	3027883a 	mov	r19,r6
   10c20:	1800141e 	bne	r3,zero,10c74 <__mdiff+0x84>
   10c24:	1085883a 	add	r2,r2,r2
   10c28:	1085883a 	add	r2,r2,r2
   10c2c:	2a000504 	addi	r8,r5,20
   10c30:	34000504 	addi	r16,r6,20
   10c34:	4087883a 	add	r3,r8,r2
   10c38:	8085883a 	add	r2,r16,r2
   10c3c:	00000106 	br	10c44 <__mdiff+0x54>
   10c40:	40c0592e 	bgeu	r8,r3,10da8 <__mdiff+0x1b8>
   10c44:	18ffff04 	addi	r3,r3,-4
   10c48:	10bfff04 	addi	r2,r2,-4
   10c4c:	19c00017 	ldw	r7,0(r3)
   10c50:	11400017 	ldw	r5,0(r2)
   10c54:	397ffa26 	beq	r7,r5,10c40 <__alt_exception_stack_pointer+0xf8010c40>
   10c58:	3940592e 	bgeu	r7,r5,10dc0 <__mdiff+0x1d0>
   10c5c:	9005883a 	mov	r2,r18
   10c60:	4023883a 	mov	r17,r8
   10c64:	9825883a 	mov	r18,r19
   10c68:	05000044 	movi	r20,1
   10c6c:	1027883a 	mov	r19,r2
   10c70:	00000406 	br	10c84 <__mdiff+0x94>
   10c74:	18005616 	blt	r3,zero,10dd0 <__mdiff+0x1e0>
   10c78:	34400504 	addi	r17,r6,20
   10c7c:	2c000504 	addi	r16,r5,20
   10c80:	0029883a 	mov	r20,zero
   10c84:	91400117 	ldw	r5,4(r18)
   10c88:	001020c0 	call	1020c <_Balloc>
   10c8c:	92400417 	ldw	r9,16(r18)
   10c90:	9b000417 	ldw	r12,16(r19)
   10c94:	12c00504 	addi	r11,r2,20
   10c98:	4a51883a 	add	r8,r9,r9
   10c9c:	6319883a 	add	r12,r12,r12
   10ca0:	4211883a 	add	r8,r8,r8
   10ca4:	6319883a 	add	r12,r12,r12
   10ca8:	15000315 	stw	r20,12(r2)
   10cac:	8211883a 	add	r8,r16,r8
   10cb0:	8b19883a 	add	r12,r17,r12
   10cb4:	0007883a 	mov	r3,zero
   10cb8:	81400017 	ldw	r5,0(r16)
   10cbc:	89c00017 	ldw	r7,0(r17)
   10cc0:	59800104 	addi	r6,r11,4
   10cc4:	293fffcc 	andi	r4,r5,65535
   10cc8:	20c7883a 	add	r3,r4,r3
   10ccc:	393fffcc 	andi	r4,r7,65535
   10cd0:	1909c83a 	sub	r4,r3,r4
   10cd4:	280ad43a 	srli	r5,r5,16
   10cd8:	380ed43a 	srli	r7,r7,16
   10cdc:	2007d43a 	srai	r3,r4,16
   10ce0:	213fffcc 	andi	r4,r4,65535
   10ce4:	29cbc83a 	sub	r5,r5,r7
   10ce8:	28c7883a 	add	r3,r5,r3
   10cec:	180a943a 	slli	r5,r3,16
   10cf0:	8c400104 	addi	r17,r17,4
   10cf4:	84000104 	addi	r16,r16,4
   10cf8:	2908b03a 	or	r4,r5,r4
   10cfc:	59000015 	stw	r4,0(r11)
   10d00:	1807d43a 	srai	r3,r3,16
   10d04:	3015883a 	mov	r10,r6
   10d08:	3017883a 	mov	r11,r6
   10d0c:	8b3fea36 	bltu	r17,r12,10cb8 <__alt_exception_stack_pointer+0xf8010cb8>
   10d10:	8200162e 	bgeu	r16,r8,10d6c <__mdiff+0x17c>
   10d14:	8017883a 	mov	r11,r16
   10d18:	59400017 	ldw	r5,0(r11)
   10d1c:	31800104 	addi	r6,r6,4
   10d20:	5ac00104 	addi	r11,r11,4
   10d24:	293fffcc 	andi	r4,r5,65535
   10d28:	20c7883a 	add	r3,r4,r3
   10d2c:	280ed43a 	srli	r7,r5,16
   10d30:	180bd43a 	srai	r5,r3,16
   10d34:	193fffcc 	andi	r4,r3,65535
   10d38:	3947883a 	add	r3,r7,r5
   10d3c:	180a943a 	slli	r5,r3,16
   10d40:	1807d43a 	srai	r3,r3,16
   10d44:	2908b03a 	or	r4,r5,r4
   10d48:	313fff15 	stw	r4,-4(r6)
   10d4c:	5a3ff236 	bltu	r11,r8,10d18 <__alt_exception_stack_pointer+0xf8010d18>
   10d50:	0406303a 	nor	r3,zero,r16
   10d54:	1a07883a 	add	r3,r3,r8
   10d58:	1806d0ba 	srli	r3,r3,2
   10d5c:	18c00044 	addi	r3,r3,1
   10d60:	18c7883a 	add	r3,r3,r3
   10d64:	18c7883a 	add	r3,r3,r3
   10d68:	50d5883a 	add	r10,r10,r3
   10d6c:	50ffff04 	addi	r3,r10,-4
   10d70:	2000041e 	bne	r4,zero,10d84 <__mdiff+0x194>
   10d74:	18ffff04 	addi	r3,r3,-4
   10d78:	19000017 	ldw	r4,0(r3)
   10d7c:	4a7fffc4 	addi	r9,r9,-1
   10d80:	203ffc26 	beq	r4,zero,10d74 <__alt_exception_stack_pointer+0xf8010d74>
   10d84:	12400415 	stw	r9,16(r2)
   10d88:	dfc00517 	ldw	ra,20(sp)
   10d8c:	dd000417 	ldw	r20,16(sp)
   10d90:	dcc00317 	ldw	r19,12(sp)
   10d94:	dc800217 	ldw	r18,8(sp)
   10d98:	dc400117 	ldw	r17,4(sp)
   10d9c:	dc000017 	ldw	r16,0(sp)
   10da0:	dec00604 	addi	sp,sp,24
   10da4:	f800283a 	ret
   10da8:	000b883a 	mov	r5,zero
   10dac:	001020c0 	call	1020c <_Balloc>
   10db0:	00c00044 	movi	r3,1
   10db4:	10c00415 	stw	r3,16(r2)
   10db8:	10000515 	stw	zero,20(r2)
   10dbc:	003ff206 	br	10d88 <__alt_exception_stack_pointer+0xf8010d88>
   10dc0:	8023883a 	mov	r17,r16
   10dc4:	0029883a 	mov	r20,zero
   10dc8:	4021883a 	mov	r16,r8
   10dcc:	003fad06 	br	10c84 <__alt_exception_stack_pointer+0xf8010c84>
   10dd0:	9005883a 	mov	r2,r18
   10dd4:	94400504 	addi	r17,r18,20
   10dd8:	9c000504 	addi	r16,r19,20
   10ddc:	9825883a 	mov	r18,r19
   10de0:	05000044 	movi	r20,1
   10de4:	1027883a 	mov	r19,r2
   10de8:	003fa606 	br	10c84 <__alt_exception_stack_pointer+0xf8010c84>

00010dec <__ulp>:
   10dec:	295ffc2c 	andhi	r5,r5,32752
   10df0:	00bf3034 	movhi	r2,64704
   10df4:	2887883a 	add	r3,r5,r2
   10df8:	00c0020e 	bge	zero,r3,10e04 <__ulp+0x18>
   10dfc:	0005883a 	mov	r2,zero
   10e00:	f800283a 	ret
   10e04:	00c7c83a 	sub	r3,zero,r3
   10e08:	1807d53a 	srai	r3,r3,20
   10e0c:	008004c4 	movi	r2,19
   10e10:	10c00b0e 	bge	r2,r3,10e40 <__ulp+0x54>
   10e14:	18bffb04 	addi	r2,r3,-20
   10e18:	01000784 	movi	r4,30
   10e1c:	0007883a 	mov	r3,zero
   10e20:	20800516 	blt	r4,r2,10e38 <__ulp+0x4c>
   10e24:	010007c4 	movi	r4,31
   10e28:	2089c83a 	sub	r4,r4,r2
   10e2c:	00800044 	movi	r2,1
   10e30:	1104983a 	sll	r2,r2,r4
   10e34:	f800283a 	ret
   10e38:	00800044 	movi	r2,1
   10e3c:	f800283a 	ret
   10e40:	01400234 	movhi	r5,8
   10e44:	28c7d83a 	sra	r3,r5,r3
   10e48:	0005883a 	mov	r2,zero
   10e4c:	f800283a 	ret

00010e50 <__b2d>:
   10e50:	defffa04 	addi	sp,sp,-24
   10e54:	dc000015 	stw	r16,0(sp)
   10e58:	24000417 	ldw	r16,16(r4)
   10e5c:	dc400115 	stw	r17,4(sp)
   10e60:	24400504 	addi	r17,r4,20
   10e64:	8421883a 	add	r16,r16,r16
   10e68:	8421883a 	add	r16,r16,r16
   10e6c:	8c21883a 	add	r16,r17,r16
   10e70:	dc800215 	stw	r18,8(sp)
   10e74:	84bfff17 	ldw	r18,-4(r16)
   10e78:	dd000415 	stw	r20,16(sp)
   10e7c:	dcc00315 	stw	r19,12(sp)
   10e80:	9009883a 	mov	r4,r18
   10e84:	2829883a 	mov	r20,r5
   10e88:	dfc00515 	stw	ra,20(sp)
   10e8c:	00105280 	call	10528 <__hi0bits>
   10e90:	00c00804 	movi	r3,32
   10e94:	1889c83a 	sub	r4,r3,r2
   10e98:	a1000015 	stw	r4,0(r20)
   10e9c:	01000284 	movi	r4,10
   10ea0:	84ffff04 	addi	r19,r16,-4
   10ea4:	20801216 	blt	r4,r2,10ef0 <__b2d+0xa0>
   10ea8:	018002c4 	movi	r6,11
   10eac:	308dc83a 	sub	r6,r6,r2
   10eb0:	9186d83a 	srl	r3,r18,r6
   10eb4:	18cffc34 	orhi	r3,r3,16368
   10eb8:	8cc0212e 	bgeu	r17,r19,10f40 <__b2d+0xf0>
   10ebc:	813ffe17 	ldw	r4,-8(r16)
   10ec0:	218cd83a 	srl	r6,r4,r6
   10ec4:	10800544 	addi	r2,r2,21
   10ec8:	9084983a 	sll	r2,r18,r2
   10ecc:	1184b03a 	or	r2,r2,r6
   10ed0:	dfc00517 	ldw	ra,20(sp)
   10ed4:	dd000417 	ldw	r20,16(sp)
   10ed8:	dcc00317 	ldw	r19,12(sp)
   10edc:	dc800217 	ldw	r18,8(sp)
   10ee0:	dc400117 	ldw	r17,4(sp)
   10ee4:	dc000017 	ldw	r16,0(sp)
   10ee8:	dec00604 	addi	sp,sp,24
   10eec:	f800283a 	ret
   10ef0:	8cc00f2e 	bgeu	r17,r19,10f30 <__b2d+0xe0>
   10ef4:	117ffd44 	addi	r5,r2,-11
   10ef8:	80bffe17 	ldw	r2,-8(r16)
   10efc:	28000e26 	beq	r5,zero,10f38 <__b2d+0xe8>
   10f00:	1949c83a 	sub	r4,r3,r5
   10f04:	9164983a 	sll	r18,r18,r5
   10f08:	1106d83a 	srl	r3,r2,r4
   10f0c:	81bffe04 	addi	r6,r16,-8
   10f10:	948ffc34 	orhi	r18,r18,16368
   10f14:	90c6b03a 	or	r3,r18,r3
   10f18:	89800e2e 	bgeu	r17,r6,10f54 <__b2d+0x104>
   10f1c:	81bffd17 	ldw	r6,-12(r16)
   10f20:	1144983a 	sll	r2,r2,r5
   10f24:	310ad83a 	srl	r5,r6,r4
   10f28:	2884b03a 	or	r2,r5,r2
   10f2c:	003fe806 	br	10ed0 <__alt_exception_stack_pointer+0xf8010ed0>
   10f30:	10bffd44 	addi	r2,r2,-11
   10f34:	1000041e 	bne	r2,zero,10f48 <__b2d+0xf8>
   10f38:	90cffc34 	orhi	r3,r18,16368
   10f3c:	003fe406 	br	10ed0 <__alt_exception_stack_pointer+0xf8010ed0>
   10f40:	000d883a 	mov	r6,zero
   10f44:	003fdf06 	br	10ec4 <__alt_exception_stack_pointer+0xf8010ec4>
   10f48:	90a4983a 	sll	r18,r18,r2
   10f4c:	0005883a 	mov	r2,zero
   10f50:	003ff906 	br	10f38 <__alt_exception_stack_pointer+0xf8010f38>
   10f54:	1144983a 	sll	r2,r2,r5
   10f58:	003fdd06 	br	10ed0 <__alt_exception_stack_pointer+0xf8010ed0>

00010f5c <__d2b>:
   10f5c:	defff804 	addi	sp,sp,-32
   10f60:	dc000215 	stw	r16,8(sp)
   10f64:	3021883a 	mov	r16,r6
   10f68:	dc400315 	stw	r17,12(sp)
   10f6c:	8022907a 	slli	r17,r16,1
   10f70:	dd000615 	stw	r20,24(sp)
   10f74:	2829883a 	mov	r20,r5
   10f78:	01400044 	movi	r5,1
   10f7c:	dcc00515 	stw	r19,20(sp)
   10f80:	dc800415 	stw	r18,16(sp)
   10f84:	dfc00715 	stw	ra,28(sp)
   10f88:	3825883a 	mov	r18,r7
   10f8c:	8822d57a 	srli	r17,r17,21
   10f90:	001020c0 	call	1020c <_Balloc>
   10f94:	1027883a 	mov	r19,r2
   10f98:	00800434 	movhi	r2,16
   10f9c:	10bfffc4 	addi	r2,r2,-1
   10fa0:	808c703a 	and	r6,r16,r2
   10fa4:	88000126 	beq	r17,zero,10fac <__d2b+0x50>
   10fa8:	31800434 	orhi	r6,r6,16
   10fac:	d9800015 	stw	r6,0(sp)
   10fb0:	a0002426 	beq	r20,zero,11044 <__d2b+0xe8>
   10fb4:	d9000104 	addi	r4,sp,4
   10fb8:	dd000115 	stw	r20,4(sp)
   10fbc:	00105900 	call	10590 <__lo0bits>
   10fc0:	d8c00017 	ldw	r3,0(sp)
   10fc4:	10002f1e 	bne	r2,zero,11084 <__d2b+0x128>
   10fc8:	d9000117 	ldw	r4,4(sp)
   10fcc:	99000515 	stw	r4,20(r19)
   10fd0:	1821003a 	cmpeq	r16,r3,zero
   10fd4:	01000084 	movi	r4,2
   10fd8:	2421c83a 	sub	r16,r4,r16
   10fdc:	98c00615 	stw	r3,24(r19)
   10fe0:	9c000415 	stw	r16,16(r19)
   10fe4:	88001f1e 	bne	r17,zero,11064 <__d2b+0x108>
   10fe8:	10bef384 	addi	r2,r2,-1074
   10fec:	90800015 	stw	r2,0(r18)
   10ff0:	00900034 	movhi	r2,16384
   10ff4:	10bfffc4 	addi	r2,r2,-1
   10ff8:	8085883a 	add	r2,r16,r2
   10ffc:	1085883a 	add	r2,r2,r2
   11000:	1085883a 	add	r2,r2,r2
   11004:	9885883a 	add	r2,r19,r2
   11008:	11000517 	ldw	r4,20(r2)
   1100c:	8020917a 	slli	r16,r16,5
   11010:	00105280 	call	10528 <__hi0bits>
   11014:	d8c00817 	ldw	r3,32(sp)
   11018:	8085c83a 	sub	r2,r16,r2
   1101c:	18800015 	stw	r2,0(r3)
   11020:	9805883a 	mov	r2,r19
   11024:	dfc00717 	ldw	ra,28(sp)
   11028:	dd000617 	ldw	r20,24(sp)
   1102c:	dcc00517 	ldw	r19,20(sp)
   11030:	dc800417 	ldw	r18,16(sp)
   11034:	dc400317 	ldw	r17,12(sp)
   11038:	dc000217 	ldw	r16,8(sp)
   1103c:	dec00804 	addi	sp,sp,32
   11040:	f800283a 	ret
   11044:	d809883a 	mov	r4,sp
   11048:	00105900 	call	10590 <__lo0bits>
   1104c:	d8c00017 	ldw	r3,0(sp)
   11050:	04000044 	movi	r16,1
   11054:	9c000415 	stw	r16,16(r19)
   11058:	98c00515 	stw	r3,20(r19)
   1105c:	10800804 	addi	r2,r2,32
   11060:	883fe126 	beq	r17,zero,10fe8 <__alt_exception_stack_pointer+0xf8010fe8>
   11064:	00c00d44 	movi	r3,53
   11068:	8c7ef344 	addi	r17,r17,-1075
   1106c:	88a3883a 	add	r17,r17,r2
   11070:	1885c83a 	sub	r2,r3,r2
   11074:	d8c00817 	ldw	r3,32(sp)
   11078:	94400015 	stw	r17,0(r18)
   1107c:	18800015 	stw	r2,0(r3)
   11080:	003fe706 	br	11020 <__alt_exception_stack_pointer+0xf8011020>
   11084:	01000804 	movi	r4,32
   11088:	2089c83a 	sub	r4,r4,r2
   1108c:	1908983a 	sll	r4,r3,r4
   11090:	d9400117 	ldw	r5,4(sp)
   11094:	1886d83a 	srl	r3,r3,r2
   11098:	2148b03a 	or	r4,r4,r5
   1109c:	99000515 	stw	r4,20(r19)
   110a0:	d8c00015 	stw	r3,0(sp)
   110a4:	003fca06 	br	10fd0 <__alt_exception_stack_pointer+0xf8010fd0>

000110a8 <__ratio>:
   110a8:	defff904 	addi	sp,sp,-28
   110ac:	dc400315 	stw	r17,12(sp)
   110b0:	2823883a 	mov	r17,r5
   110b4:	d9400104 	addi	r5,sp,4
   110b8:	dfc00615 	stw	ra,24(sp)
   110bc:	dcc00515 	stw	r19,20(sp)
   110c0:	dc800415 	stw	r18,16(sp)
   110c4:	2027883a 	mov	r19,r4
   110c8:	dc000215 	stw	r16,8(sp)
   110cc:	0010e500 	call	10e50 <__b2d>
   110d0:	d80b883a 	mov	r5,sp
   110d4:	8809883a 	mov	r4,r17
   110d8:	1025883a 	mov	r18,r2
   110dc:	1821883a 	mov	r16,r3
   110e0:	0010e500 	call	10e50 <__b2d>
   110e4:	8a000417 	ldw	r8,16(r17)
   110e8:	99000417 	ldw	r4,16(r19)
   110ec:	d9400117 	ldw	r5,4(sp)
   110f0:	2209c83a 	sub	r4,r4,r8
   110f4:	2010917a 	slli	r8,r4,5
   110f8:	d9000017 	ldw	r4,0(sp)
   110fc:	2909c83a 	sub	r4,r5,r4
   11100:	4109883a 	add	r4,r8,r4
   11104:	01000e0e 	bge	zero,r4,11140 <__ratio+0x98>
   11108:	2008953a 	slli	r4,r4,20
   1110c:	2421883a 	add	r16,r4,r16
   11110:	100d883a 	mov	r6,r2
   11114:	180f883a 	mov	r7,r3
   11118:	9009883a 	mov	r4,r18
   1111c:	800b883a 	mov	r5,r16
   11120:	00071bc0 	call	71bc <__divdf3>
   11124:	dfc00617 	ldw	ra,24(sp)
   11128:	dcc00517 	ldw	r19,20(sp)
   1112c:	dc800417 	ldw	r18,16(sp)
   11130:	dc400317 	ldw	r17,12(sp)
   11134:	dc000217 	ldw	r16,8(sp)
   11138:	dec00704 	addi	sp,sp,28
   1113c:	f800283a 	ret
   11140:	2008953a 	slli	r4,r4,20
   11144:	1907c83a 	sub	r3,r3,r4
   11148:	003ff106 	br	11110 <__alt_exception_stack_pointer+0xf8011110>

0001114c <_mprec_log10>:
   1114c:	defffe04 	addi	sp,sp,-8
   11150:	dc000015 	stw	r16,0(sp)
   11154:	dfc00115 	stw	ra,4(sp)
   11158:	008005c4 	movi	r2,23
   1115c:	2021883a 	mov	r16,r4
   11160:	11000d0e 	bge	r2,r4,11198 <_mprec_log10+0x4c>
   11164:	0005883a 	mov	r2,zero
   11168:	00cffc34 	movhi	r3,16368
   1116c:	843fffc4 	addi	r16,r16,-1
   11170:	000d883a 	mov	r6,zero
   11174:	01d00934 	movhi	r7,16420
   11178:	1009883a 	mov	r4,r2
   1117c:	180b883a 	mov	r5,r3
   11180:	0007de40 	call	7de4 <__muldf3>
   11184:	803ff91e 	bne	r16,zero,1116c <__alt_exception_stack_pointer+0xf801116c>
   11188:	dfc00117 	ldw	ra,4(sp)
   1118c:	dc000017 	ldw	r16,0(sp)
   11190:	dec00204 	addi	sp,sp,8
   11194:	f800283a 	ret
   11198:	202090fa 	slli	r16,r4,3
   1119c:	008000b4 	movhi	r2,2
   111a0:	10a36504 	addi	r2,r2,-29292
   111a4:	1421883a 	add	r16,r2,r16
   111a8:	80800017 	ldw	r2,0(r16)
   111ac:	80c00117 	ldw	r3,4(r16)
   111b0:	dfc00117 	ldw	ra,4(sp)
   111b4:	dc000017 	ldw	r16,0(sp)
   111b8:	dec00204 	addi	sp,sp,8
   111bc:	f800283a 	ret

000111c0 <__copybits>:
   111c0:	297fffc4 	addi	r5,r5,-1
   111c4:	280fd17a 	srai	r7,r5,5
   111c8:	30c00417 	ldw	r3,16(r6)
   111cc:	30800504 	addi	r2,r6,20
   111d0:	39c00044 	addi	r7,r7,1
   111d4:	18c7883a 	add	r3,r3,r3
   111d8:	39cf883a 	add	r7,r7,r7
   111dc:	18c7883a 	add	r3,r3,r3
   111e0:	39cf883a 	add	r7,r7,r7
   111e4:	10c7883a 	add	r3,r2,r3
   111e8:	21cf883a 	add	r7,r4,r7
   111ec:	10c00d2e 	bgeu	r2,r3,11224 <__copybits+0x64>
   111f0:	200b883a 	mov	r5,r4
   111f4:	12000017 	ldw	r8,0(r2)
   111f8:	29400104 	addi	r5,r5,4
   111fc:	10800104 	addi	r2,r2,4
   11200:	2a3fff15 	stw	r8,-4(r5)
   11204:	10fffb36 	bltu	r2,r3,111f4 <__alt_exception_stack_pointer+0xf80111f4>
   11208:	1985c83a 	sub	r2,r3,r6
   1120c:	10bffac4 	addi	r2,r2,-21
   11210:	1004d0ba 	srli	r2,r2,2
   11214:	10800044 	addi	r2,r2,1
   11218:	1085883a 	add	r2,r2,r2
   1121c:	1085883a 	add	r2,r2,r2
   11220:	2089883a 	add	r4,r4,r2
   11224:	21c0032e 	bgeu	r4,r7,11234 <__copybits+0x74>
   11228:	20000015 	stw	zero,0(r4)
   1122c:	21000104 	addi	r4,r4,4
   11230:	21fffd36 	bltu	r4,r7,11228 <__alt_exception_stack_pointer+0xf8011228>
   11234:	f800283a 	ret

00011238 <__any_on>:
   11238:	20c00417 	ldw	r3,16(r4)
   1123c:	2805d17a 	srai	r2,r5,5
   11240:	21000504 	addi	r4,r4,20
   11244:	18800d0e 	bge	r3,r2,1127c <__any_on+0x44>
   11248:	18c7883a 	add	r3,r3,r3
   1124c:	18c7883a 	add	r3,r3,r3
   11250:	20c7883a 	add	r3,r4,r3
   11254:	20c0192e 	bgeu	r4,r3,112bc <__any_on+0x84>
   11258:	18bfff17 	ldw	r2,-4(r3)
   1125c:	18ffff04 	addi	r3,r3,-4
   11260:	1000041e 	bne	r2,zero,11274 <__any_on+0x3c>
   11264:	20c0142e 	bgeu	r4,r3,112b8 <__any_on+0x80>
   11268:	18ffff04 	addi	r3,r3,-4
   1126c:	19400017 	ldw	r5,0(r3)
   11270:	283ffc26 	beq	r5,zero,11264 <__alt_exception_stack_pointer+0xf8011264>
   11274:	00800044 	movi	r2,1
   11278:	f800283a 	ret
   1127c:	10c00a0e 	bge	r2,r3,112a8 <__any_on+0x70>
   11280:	1085883a 	add	r2,r2,r2
   11284:	1085883a 	add	r2,r2,r2
   11288:	294007cc 	andi	r5,r5,31
   1128c:	2087883a 	add	r3,r4,r2
   11290:	283ff026 	beq	r5,zero,11254 <__alt_exception_stack_pointer+0xf8011254>
   11294:	19800017 	ldw	r6,0(r3)
   11298:	3144d83a 	srl	r2,r6,r5
   1129c:	114a983a 	sll	r5,r2,r5
   112a0:	317ff41e 	bne	r6,r5,11274 <__alt_exception_stack_pointer+0xf8011274>
   112a4:	003feb06 	br	11254 <__alt_exception_stack_pointer+0xf8011254>
   112a8:	1085883a 	add	r2,r2,r2
   112ac:	1085883a 	add	r2,r2,r2
   112b0:	2087883a 	add	r3,r4,r2
   112b4:	003fe706 	br	11254 <__alt_exception_stack_pointer+0xf8011254>
   112b8:	f800283a 	ret
   112bc:	0005883a 	mov	r2,zero
   112c0:	f800283a 	ret

000112c4 <_realloc_r>:
   112c4:	defff604 	addi	sp,sp,-40
   112c8:	dc800215 	stw	r18,8(sp)
   112cc:	dfc00915 	stw	ra,36(sp)
   112d0:	df000815 	stw	fp,32(sp)
   112d4:	ddc00715 	stw	r23,28(sp)
   112d8:	dd800615 	stw	r22,24(sp)
   112dc:	dd400515 	stw	r21,20(sp)
   112e0:	dd000415 	stw	r20,16(sp)
   112e4:	dcc00315 	stw	r19,12(sp)
   112e8:	dc400115 	stw	r17,4(sp)
   112ec:	dc000015 	stw	r16,0(sp)
   112f0:	3025883a 	mov	r18,r6
   112f4:	2800b726 	beq	r5,zero,115d4 <_realloc_r+0x310>
   112f8:	282b883a 	mov	r21,r5
   112fc:	2029883a 	mov	r20,r4
   11300:	0014e940 	call	14e94 <__malloc_lock>
   11304:	a8bfff17 	ldw	r2,-4(r21)
   11308:	043fff04 	movi	r16,-4
   1130c:	90c002c4 	addi	r3,r18,11
   11310:	01000584 	movi	r4,22
   11314:	acfffe04 	addi	r19,r21,-8
   11318:	1420703a 	and	r16,r2,r16
   1131c:	20c0332e 	bgeu	r4,r3,113ec <_realloc_r+0x128>
   11320:	047ffe04 	movi	r17,-8
   11324:	1c62703a 	and	r17,r3,r17
   11328:	8807883a 	mov	r3,r17
   1132c:	88005816 	blt	r17,zero,11490 <_realloc_r+0x1cc>
   11330:	8c805736 	bltu	r17,r18,11490 <_realloc_r+0x1cc>
   11334:	80c0300e 	bge	r16,r3,113f8 <_realloc_r+0x134>
   11338:	070000b4 	movhi	fp,2
   1133c:	e7267e04 	addi	fp,fp,-26120
   11340:	e1c00217 	ldw	r7,8(fp)
   11344:	9c09883a 	add	r4,r19,r16
   11348:	22000117 	ldw	r8,4(r4)
   1134c:	21c06326 	beq	r4,r7,114dc <_realloc_r+0x218>
   11350:	017fff84 	movi	r5,-2
   11354:	414a703a 	and	r5,r8,r5
   11358:	214b883a 	add	r5,r4,r5
   1135c:	29800117 	ldw	r6,4(r5)
   11360:	3180004c 	andi	r6,r6,1
   11364:	30003f26 	beq	r6,zero,11464 <_realloc_r+0x1a0>
   11368:	1080004c 	andi	r2,r2,1
   1136c:	10008326 	beq	r2,zero,1157c <_realloc_r+0x2b8>
   11370:	900b883a 	mov	r5,r18
   11374:	a009883a 	mov	r4,r20
   11378:	00096b80 	call	96b8 <_malloc_r>
   1137c:	1025883a 	mov	r18,r2
   11380:	10011e26 	beq	r2,zero,117fc <_realloc_r+0x538>
   11384:	a93fff17 	ldw	r4,-4(r21)
   11388:	10fffe04 	addi	r3,r2,-8
   1138c:	00bfff84 	movi	r2,-2
   11390:	2084703a 	and	r2,r4,r2
   11394:	9885883a 	add	r2,r19,r2
   11398:	1880ee26 	beq	r3,r2,11754 <_realloc_r+0x490>
   1139c:	81bfff04 	addi	r6,r16,-4
   113a0:	00800904 	movi	r2,36
   113a4:	1180b836 	bltu	r2,r6,11688 <_realloc_r+0x3c4>
   113a8:	00c004c4 	movi	r3,19
   113ac:	19809636 	bltu	r3,r6,11608 <_realloc_r+0x344>
   113b0:	9005883a 	mov	r2,r18
   113b4:	a807883a 	mov	r3,r21
   113b8:	19000017 	ldw	r4,0(r3)
   113bc:	11000015 	stw	r4,0(r2)
   113c0:	19000117 	ldw	r4,4(r3)
   113c4:	11000115 	stw	r4,4(r2)
   113c8:	18c00217 	ldw	r3,8(r3)
   113cc:	10c00215 	stw	r3,8(r2)
   113d0:	a80b883a 	mov	r5,r21
   113d4:	a009883a 	mov	r4,r20
   113d8:	000f1640 	call	f164 <_free_r>
   113dc:	a009883a 	mov	r4,r20
   113e0:	0014eb80 	call	14eb8 <__malloc_unlock>
   113e4:	9005883a 	mov	r2,r18
   113e8:	00001206 	br	11434 <_realloc_r+0x170>
   113ec:	00c00404 	movi	r3,16
   113f0:	1823883a 	mov	r17,r3
   113f4:	003fce06 	br	11330 <__alt_exception_stack_pointer+0xf8011330>
   113f8:	a825883a 	mov	r18,r21
   113fc:	8445c83a 	sub	r2,r16,r17
   11400:	00c003c4 	movi	r3,15
   11404:	18802636 	bltu	r3,r2,114a0 <_realloc_r+0x1dc>
   11408:	99800117 	ldw	r6,4(r19)
   1140c:	9c07883a 	add	r3,r19,r16
   11410:	3180004c 	andi	r6,r6,1
   11414:	3420b03a 	or	r16,r6,r16
   11418:	9c000115 	stw	r16,4(r19)
   1141c:	18800117 	ldw	r2,4(r3)
   11420:	10800054 	ori	r2,r2,1
   11424:	18800115 	stw	r2,4(r3)
   11428:	a009883a 	mov	r4,r20
   1142c:	0014eb80 	call	14eb8 <__malloc_unlock>
   11430:	9005883a 	mov	r2,r18
   11434:	dfc00917 	ldw	ra,36(sp)
   11438:	df000817 	ldw	fp,32(sp)
   1143c:	ddc00717 	ldw	r23,28(sp)
   11440:	dd800617 	ldw	r22,24(sp)
   11444:	dd400517 	ldw	r21,20(sp)
   11448:	dd000417 	ldw	r20,16(sp)
   1144c:	dcc00317 	ldw	r19,12(sp)
   11450:	dc800217 	ldw	r18,8(sp)
   11454:	dc400117 	ldw	r17,4(sp)
   11458:	dc000017 	ldw	r16,0(sp)
   1145c:	dec00a04 	addi	sp,sp,40
   11460:	f800283a 	ret
   11464:	017fff04 	movi	r5,-4
   11468:	414a703a 	and	r5,r8,r5
   1146c:	814d883a 	add	r6,r16,r5
   11470:	30c01f16 	blt	r6,r3,114f0 <_realloc_r+0x22c>
   11474:	20800317 	ldw	r2,12(r4)
   11478:	20c00217 	ldw	r3,8(r4)
   1147c:	a825883a 	mov	r18,r21
   11480:	3021883a 	mov	r16,r6
   11484:	18800315 	stw	r2,12(r3)
   11488:	10c00215 	stw	r3,8(r2)
   1148c:	003fdb06 	br	113fc <__alt_exception_stack_pointer+0xf80113fc>
   11490:	00800304 	movi	r2,12
   11494:	a0800015 	stw	r2,0(r20)
   11498:	0005883a 	mov	r2,zero
   1149c:	003fe506 	br	11434 <__alt_exception_stack_pointer+0xf8011434>
   114a0:	98c00117 	ldw	r3,4(r19)
   114a4:	9c4b883a 	add	r5,r19,r17
   114a8:	11000054 	ori	r4,r2,1
   114ac:	18c0004c 	andi	r3,r3,1
   114b0:	1c62b03a 	or	r17,r3,r17
   114b4:	9c400115 	stw	r17,4(r19)
   114b8:	29000115 	stw	r4,4(r5)
   114bc:	2885883a 	add	r2,r5,r2
   114c0:	10c00117 	ldw	r3,4(r2)
   114c4:	29400204 	addi	r5,r5,8
   114c8:	a009883a 	mov	r4,r20
   114cc:	18c00054 	ori	r3,r3,1
   114d0:	10c00115 	stw	r3,4(r2)
   114d4:	000f1640 	call	f164 <_free_r>
   114d8:	003fd306 	br	11428 <__alt_exception_stack_pointer+0xf8011428>
   114dc:	017fff04 	movi	r5,-4
   114e0:	414a703a 	and	r5,r8,r5
   114e4:	89800404 	addi	r6,r17,16
   114e8:	8151883a 	add	r8,r16,r5
   114ec:	4180590e 	bge	r8,r6,11654 <_realloc_r+0x390>
   114f0:	1080004c 	andi	r2,r2,1
   114f4:	103f9e1e 	bne	r2,zero,11370 <__alt_exception_stack_pointer+0xf8011370>
   114f8:	adbffe17 	ldw	r22,-8(r21)
   114fc:	00bfff04 	movi	r2,-4
   11500:	9dadc83a 	sub	r22,r19,r22
   11504:	b1800117 	ldw	r6,4(r22)
   11508:	3084703a 	and	r2,r6,r2
   1150c:	20002026 	beq	r4,zero,11590 <_realloc_r+0x2cc>
   11510:	80af883a 	add	r23,r16,r2
   11514:	b96f883a 	add	r23,r23,r5
   11518:	21c05f26 	beq	r4,r7,11698 <_realloc_r+0x3d4>
   1151c:	b8c01c16 	blt	r23,r3,11590 <_realloc_r+0x2cc>
   11520:	20800317 	ldw	r2,12(r4)
   11524:	20c00217 	ldw	r3,8(r4)
   11528:	81bfff04 	addi	r6,r16,-4
   1152c:	01000904 	movi	r4,36
   11530:	18800315 	stw	r2,12(r3)
   11534:	10c00215 	stw	r3,8(r2)
   11538:	b0c00217 	ldw	r3,8(r22)
   1153c:	b0800317 	ldw	r2,12(r22)
   11540:	b4800204 	addi	r18,r22,8
   11544:	18800315 	stw	r2,12(r3)
   11548:	10c00215 	stw	r3,8(r2)
   1154c:	21801b36 	bltu	r4,r6,115bc <_realloc_r+0x2f8>
   11550:	008004c4 	movi	r2,19
   11554:	1180352e 	bgeu	r2,r6,1162c <_realloc_r+0x368>
   11558:	a8800017 	ldw	r2,0(r21)
   1155c:	b0800215 	stw	r2,8(r22)
   11560:	a8800117 	ldw	r2,4(r21)
   11564:	b0800315 	stw	r2,12(r22)
   11568:	008006c4 	movi	r2,27
   1156c:	11807f36 	bltu	r2,r6,1176c <_realloc_r+0x4a8>
   11570:	b0800404 	addi	r2,r22,16
   11574:	ad400204 	addi	r21,r21,8
   11578:	00002d06 	br	11630 <_realloc_r+0x36c>
   1157c:	adbffe17 	ldw	r22,-8(r21)
   11580:	00bfff04 	movi	r2,-4
   11584:	9dadc83a 	sub	r22,r19,r22
   11588:	b1000117 	ldw	r4,4(r22)
   1158c:	2084703a 	and	r2,r4,r2
   11590:	b03f7726 	beq	r22,zero,11370 <__alt_exception_stack_pointer+0xf8011370>
   11594:	80af883a 	add	r23,r16,r2
   11598:	b8ff7516 	blt	r23,r3,11370 <__alt_exception_stack_pointer+0xf8011370>
   1159c:	b0800317 	ldw	r2,12(r22)
   115a0:	b0c00217 	ldw	r3,8(r22)
   115a4:	81bfff04 	addi	r6,r16,-4
   115a8:	01000904 	movi	r4,36
   115ac:	18800315 	stw	r2,12(r3)
   115b0:	10c00215 	stw	r3,8(r2)
   115b4:	b4800204 	addi	r18,r22,8
   115b8:	21bfe52e 	bgeu	r4,r6,11550 <__alt_exception_stack_pointer+0xf8011550>
   115bc:	a80b883a 	mov	r5,r21
   115c0:	9009883a 	mov	r4,r18
   115c4:	000ff880 	call	ff88 <memmove>
   115c8:	b821883a 	mov	r16,r23
   115cc:	b027883a 	mov	r19,r22
   115d0:	003f8a06 	br	113fc <__alt_exception_stack_pointer+0xf80113fc>
   115d4:	300b883a 	mov	r5,r6
   115d8:	dfc00917 	ldw	ra,36(sp)
   115dc:	df000817 	ldw	fp,32(sp)
   115e0:	ddc00717 	ldw	r23,28(sp)
   115e4:	dd800617 	ldw	r22,24(sp)
   115e8:	dd400517 	ldw	r21,20(sp)
   115ec:	dd000417 	ldw	r20,16(sp)
   115f0:	dcc00317 	ldw	r19,12(sp)
   115f4:	dc800217 	ldw	r18,8(sp)
   115f8:	dc400117 	ldw	r17,4(sp)
   115fc:	dc000017 	ldw	r16,0(sp)
   11600:	dec00a04 	addi	sp,sp,40
   11604:	00096b81 	jmpi	96b8 <_malloc_r>
   11608:	a8c00017 	ldw	r3,0(r21)
   1160c:	90c00015 	stw	r3,0(r18)
   11610:	a8c00117 	ldw	r3,4(r21)
   11614:	90c00115 	stw	r3,4(r18)
   11618:	00c006c4 	movi	r3,27
   1161c:	19804536 	bltu	r3,r6,11734 <_realloc_r+0x470>
   11620:	90800204 	addi	r2,r18,8
   11624:	a8c00204 	addi	r3,r21,8
   11628:	003f6306 	br	113b8 <__alt_exception_stack_pointer+0xf80113b8>
   1162c:	9005883a 	mov	r2,r18
   11630:	a8c00017 	ldw	r3,0(r21)
   11634:	b821883a 	mov	r16,r23
   11638:	b027883a 	mov	r19,r22
   1163c:	10c00015 	stw	r3,0(r2)
   11640:	a8c00117 	ldw	r3,4(r21)
   11644:	10c00115 	stw	r3,4(r2)
   11648:	a8c00217 	ldw	r3,8(r21)
   1164c:	10c00215 	stw	r3,8(r2)
   11650:	003f6a06 	br	113fc <__alt_exception_stack_pointer+0xf80113fc>
   11654:	9c67883a 	add	r19,r19,r17
   11658:	4445c83a 	sub	r2,r8,r17
   1165c:	e4c00215 	stw	r19,8(fp)
   11660:	10800054 	ori	r2,r2,1
   11664:	98800115 	stw	r2,4(r19)
   11668:	a8bfff17 	ldw	r2,-4(r21)
   1166c:	a009883a 	mov	r4,r20
   11670:	1080004c 	andi	r2,r2,1
   11674:	1462b03a 	or	r17,r2,r17
   11678:	ac7fff15 	stw	r17,-4(r21)
   1167c:	0014eb80 	call	14eb8 <__malloc_unlock>
   11680:	a805883a 	mov	r2,r21
   11684:	003f6b06 	br	11434 <__alt_exception_stack_pointer+0xf8011434>
   11688:	a80b883a 	mov	r5,r21
   1168c:	9009883a 	mov	r4,r18
   11690:	000ff880 	call	ff88 <memmove>
   11694:	003f4e06 	br	113d0 <__alt_exception_stack_pointer+0xf80113d0>
   11698:	89000404 	addi	r4,r17,16
   1169c:	b93fbc16 	blt	r23,r4,11590 <__alt_exception_stack_pointer+0xf8011590>
   116a0:	b0800317 	ldw	r2,12(r22)
   116a4:	b0c00217 	ldw	r3,8(r22)
   116a8:	81bfff04 	addi	r6,r16,-4
   116ac:	01000904 	movi	r4,36
   116b0:	18800315 	stw	r2,12(r3)
   116b4:	10c00215 	stw	r3,8(r2)
   116b8:	b4800204 	addi	r18,r22,8
   116bc:	21804336 	bltu	r4,r6,117cc <_realloc_r+0x508>
   116c0:	008004c4 	movi	r2,19
   116c4:	11803f2e 	bgeu	r2,r6,117c4 <_realloc_r+0x500>
   116c8:	a8800017 	ldw	r2,0(r21)
   116cc:	b0800215 	stw	r2,8(r22)
   116d0:	a8800117 	ldw	r2,4(r21)
   116d4:	b0800315 	stw	r2,12(r22)
   116d8:	008006c4 	movi	r2,27
   116dc:	11803f36 	bltu	r2,r6,117dc <_realloc_r+0x518>
   116e0:	b0800404 	addi	r2,r22,16
   116e4:	ad400204 	addi	r21,r21,8
   116e8:	a8c00017 	ldw	r3,0(r21)
   116ec:	10c00015 	stw	r3,0(r2)
   116f0:	a8c00117 	ldw	r3,4(r21)
   116f4:	10c00115 	stw	r3,4(r2)
   116f8:	a8c00217 	ldw	r3,8(r21)
   116fc:	10c00215 	stw	r3,8(r2)
   11700:	b447883a 	add	r3,r22,r17
   11704:	bc45c83a 	sub	r2,r23,r17
   11708:	e0c00215 	stw	r3,8(fp)
   1170c:	10800054 	ori	r2,r2,1
   11710:	18800115 	stw	r2,4(r3)
   11714:	b0800117 	ldw	r2,4(r22)
   11718:	a009883a 	mov	r4,r20
   1171c:	1080004c 	andi	r2,r2,1
   11720:	1462b03a 	or	r17,r2,r17
   11724:	b4400115 	stw	r17,4(r22)
   11728:	0014eb80 	call	14eb8 <__malloc_unlock>
   1172c:	9005883a 	mov	r2,r18
   11730:	003f4006 	br	11434 <__alt_exception_stack_pointer+0xf8011434>
   11734:	a8c00217 	ldw	r3,8(r21)
   11738:	90c00215 	stw	r3,8(r18)
   1173c:	a8c00317 	ldw	r3,12(r21)
   11740:	90c00315 	stw	r3,12(r18)
   11744:	30801126 	beq	r6,r2,1178c <_realloc_r+0x4c8>
   11748:	90800404 	addi	r2,r18,16
   1174c:	a8c00404 	addi	r3,r21,16
   11750:	003f1906 	br	113b8 <__alt_exception_stack_pointer+0xf80113b8>
   11754:	90ffff17 	ldw	r3,-4(r18)
   11758:	00bfff04 	movi	r2,-4
   1175c:	a825883a 	mov	r18,r21
   11760:	1884703a 	and	r2,r3,r2
   11764:	80a1883a 	add	r16,r16,r2
   11768:	003f2406 	br	113fc <__alt_exception_stack_pointer+0xf80113fc>
   1176c:	a8800217 	ldw	r2,8(r21)
   11770:	b0800415 	stw	r2,16(r22)
   11774:	a8800317 	ldw	r2,12(r21)
   11778:	b0800515 	stw	r2,20(r22)
   1177c:	31000a26 	beq	r6,r4,117a8 <_realloc_r+0x4e4>
   11780:	b0800604 	addi	r2,r22,24
   11784:	ad400404 	addi	r21,r21,16
   11788:	003fa906 	br	11630 <__alt_exception_stack_pointer+0xf8011630>
   1178c:	a9000417 	ldw	r4,16(r21)
   11790:	90800604 	addi	r2,r18,24
   11794:	a8c00604 	addi	r3,r21,24
   11798:	91000415 	stw	r4,16(r18)
   1179c:	a9000517 	ldw	r4,20(r21)
   117a0:	91000515 	stw	r4,20(r18)
   117a4:	003f0406 	br	113b8 <__alt_exception_stack_pointer+0xf80113b8>
   117a8:	a8c00417 	ldw	r3,16(r21)
   117ac:	ad400604 	addi	r21,r21,24
   117b0:	b0800804 	addi	r2,r22,32
   117b4:	b0c00615 	stw	r3,24(r22)
   117b8:	a8ffff17 	ldw	r3,-4(r21)
   117bc:	b0c00715 	stw	r3,28(r22)
   117c0:	003f9b06 	br	11630 <__alt_exception_stack_pointer+0xf8011630>
   117c4:	9005883a 	mov	r2,r18
   117c8:	003fc706 	br	116e8 <__alt_exception_stack_pointer+0xf80116e8>
   117cc:	a80b883a 	mov	r5,r21
   117d0:	9009883a 	mov	r4,r18
   117d4:	000ff880 	call	ff88 <memmove>
   117d8:	003fc906 	br	11700 <__alt_exception_stack_pointer+0xf8011700>
   117dc:	a8800217 	ldw	r2,8(r21)
   117e0:	b0800415 	stw	r2,16(r22)
   117e4:	a8800317 	ldw	r2,12(r21)
   117e8:	b0800515 	stw	r2,20(r22)
   117ec:	31000726 	beq	r6,r4,1180c <_realloc_r+0x548>
   117f0:	b0800604 	addi	r2,r22,24
   117f4:	ad400404 	addi	r21,r21,16
   117f8:	003fbb06 	br	116e8 <__alt_exception_stack_pointer+0xf80116e8>
   117fc:	a009883a 	mov	r4,r20
   11800:	0014eb80 	call	14eb8 <__malloc_unlock>
   11804:	0005883a 	mov	r2,zero
   11808:	003f0a06 	br	11434 <__alt_exception_stack_pointer+0xf8011434>
   1180c:	a8c00417 	ldw	r3,16(r21)
   11810:	ad400604 	addi	r21,r21,24
   11814:	b0800804 	addi	r2,r22,32
   11818:	b0c00615 	stw	r3,24(r22)
   1181c:	a8ffff17 	ldw	r3,-4(r21)
   11820:	b0c00715 	stw	r3,28(r22)
   11824:	003fb006 	br	116e8 <__alt_exception_stack_pointer+0xf80116e8>

00011828 <__fpclassifyd>:
   11828:	00a00034 	movhi	r2,32768
   1182c:	10bfffc4 	addi	r2,r2,-1
   11830:	2884703a 	and	r2,r5,r2
   11834:	10000726 	beq	r2,zero,11854 <__fpclassifyd+0x2c>
   11838:	00fffc34 	movhi	r3,65520
   1183c:	019ff834 	movhi	r6,32736
   11840:	28c7883a 	add	r3,r5,r3
   11844:	31bfffc4 	addi	r6,r6,-1
   11848:	30c00536 	bltu	r6,r3,11860 <__fpclassifyd+0x38>
   1184c:	00800104 	movi	r2,4
   11850:	f800283a 	ret
   11854:	2000021e 	bne	r4,zero,11860 <__fpclassifyd+0x38>
   11858:	00800084 	movi	r2,2
   1185c:	f800283a 	ret
   11860:	00dffc34 	movhi	r3,32752
   11864:	019ff834 	movhi	r6,32736
   11868:	28cb883a 	add	r5,r5,r3
   1186c:	31bfffc4 	addi	r6,r6,-1
   11870:	317ff62e 	bgeu	r6,r5,1184c <__alt_exception_stack_pointer+0xf801184c>
   11874:	01400434 	movhi	r5,16
   11878:	297fffc4 	addi	r5,r5,-1
   1187c:	28800236 	bltu	r5,r2,11888 <__fpclassifyd+0x60>
   11880:	008000c4 	movi	r2,3
   11884:	f800283a 	ret
   11888:	10c00226 	beq	r2,r3,11894 <__fpclassifyd+0x6c>
   1188c:	0005883a 	mov	r2,zero
   11890:	f800283a 	ret
   11894:	2005003a 	cmpeq	r2,r4,zero
   11898:	f800283a 	ret

0001189c <__sread>:
   1189c:	defffe04 	addi	sp,sp,-8
   118a0:	dc000015 	stw	r16,0(sp)
   118a4:	2821883a 	mov	r16,r5
   118a8:	2940038f 	ldh	r5,14(r5)
   118ac:	dfc00115 	stw	ra,4(sp)
   118b0:	00137e80 	call	137e8 <_read_r>
   118b4:	10000716 	blt	r2,zero,118d4 <__sread+0x38>
   118b8:	80c01417 	ldw	r3,80(r16)
   118bc:	1887883a 	add	r3,r3,r2
   118c0:	80c01415 	stw	r3,80(r16)
   118c4:	dfc00117 	ldw	ra,4(sp)
   118c8:	dc000017 	ldw	r16,0(sp)
   118cc:	dec00204 	addi	sp,sp,8
   118d0:	f800283a 	ret
   118d4:	80c0030b 	ldhu	r3,12(r16)
   118d8:	18fbffcc 	andi	r3,r3,61439
   118dc:	80c0030d 	sth	r3,12(r16)
   118e0:	dfc00117 	ldw	ra,4(sp)
   118e4:	dc000017 	ldw	r16,0(sp)
   118e8:	dec00204 	addi	sp,sp,8
   118ec:	f800283a 	ret

000118f0 <__seofread>:
   118f0:	0005883a 	mov	r2,zero
   118f4:	f800283a 	ret

000118f8 <__swrite>:
   118f8:	2880030b 	ldhu	r2,12(r5)
   118fc:	defffb04 	addi	sp,sp,-20
   11900:	dcc00315 	stw	r19,12(sp)
   11904:	dc800215 	stw	r18,8(sp)
   11908:	dc400115 	stw	r17,4(sp)
   1190c:	dc000015 	stw	r16,0(sp)
   11910:	dfc00415 	stw	ra,16(sp)
   11914:	10c0400c 	andi	r3,r2,256
   11918:	2821883a 	mov	r16,r5
   1191c:	2023883a 	mov	r17,r4
   11920:	3025883a 	mov	r18,r6
   11924:	3827883a 	mov	r19,r7
   11928:	18000526 	beq	r3,zero,11940 <__swrite+0x48>
   1192c:	2940038f 	ldh	r5,14(r5)
   11930:	01c00084 	movi	r7,2
   11934:	000d883a 	mov	r6,zero
   11938:	00137880 	call	13788 <_lseek_r>
   1193c:	8080030b 	ldhu	r2,12(r16)
   11940:	8140038f 	ldh	r5,14(r16)
   11944:	10bbffcc 	andi	r2,r2,61439
   11948:	980f883a 	mov	r7,r19
   1194c:	900d883a 	mov	r6,r18
   11950:	8809883a 	mov	r4,r17
   11954:	8080030d 	sth	r2,12(r16)
   11958:	dfc00417 	ldw	ra,16(sp)
   1195c:	dcc00317 	ldw	r19,12(sp)
   11960:	dc800217 	ldw	r18,8(sp)
   11964:	dc400117 	ldw	r17,4(sp)
   11968:	dc000017 	ldw	r16,0(sp)
   1196c:	dec00504 	addi	sp,sp,20
   11970:	001323c1 	jmpi	1323c <_write_r>

00011974 <__sseek>:
   11974:	defffe04 	addi	sp,sp,-8
   11978:	dc000015 	stw	r16,0(sp)
   1197c:	2821883a 	mov	r16,r5
   11980:	2940038f 	ldh	r5,14(r5)
   11984:	dfc00115 	stw	ra,4(sp)
   11988:	00137880 	call	13788 <_lseek_r>
   1198c:	00ffffc4 	movi	r3,-1
   11990:	10c00826 	beq	r2,r3,119b4 <__sseek+0x40>
   11994:	80c0030b 	ldhu	r3,12(r16)
   11998:	80801415 	stw	r2,80(r16)
   1199c:	18c40014 	ori	r3,r3,4096
   119a0:	80c0030d 	sth	r3,12(r16)
   119a4:	dfc00117 	ldw	ra,4(sp)
   119a8:	dc000017 	ldw	r16,0(sp)
   119ac:	dec00204 	addi	sp,sp,8
   119b0:	f800283a 	ret
   119b4:	80c0030b 	ldhu	r3,12(r16)
   119b8:	18fbffcc 	andi	r3,r3,61439
   119bc:	80c0030d 	sth	r3,12(r16)
   119c0:	dfc00117 	ldw	ra,4(sp)
   119c4:	dc000017 	ldw	r16,0(sp)
   119c8:	dec00204 	addi	sp,sp,8
   119cc:	f800283a 	ret

000119d0 <__sclose>:
   119d0:	2940038f 	ldh	r5,14(r5)
   119d4:	001329c1 	jmpi	1329c <_close_r>

000119d8 <strcmp>:
   119d8:	2144b03a 	or	r2,r4,r5
   119dc:	108000cc 	andi	r2,r2,3
   119e0:	1000171e 	bne	r2,zero,11a40 <strcmp+0x68>
   119e4:	20800017 	ldw	r2,0(r4)
   119e8:	28c00017 	ldw	r3,0(r5)
   119ec:	10c0141e 	bne	r2,r3,11a40 <strcmp+0x68>
   119f0:	027fbff4 	movhi	r9,65279
   119f4:	4a7fbfc4 	addi	r9,r9,-257
   119f8:	0086303a 	nor	r3,zero,r2
   119fc:	02202074 	movhi	r8,32897
   11a00:	1245883a 	add	r2,r2,r9
   11a04:	42202004 	addi	r8,r8,-32640
   11a08:	10c4703a 	and	r2,r2,r3
   11a0c:	1204703a 	and	r2,r2,r8
   11a10:	10000226 	beq	r2,zero,11a1c <strcmp+0x44>
   11a14:	00002306 	br	11aa4 <strcmp+0xcc>
   11a18:	1000221e 	bne	r2,zero,11aa4 <strcmp+0xcc>
   11a1c:	21000104 	addi	r4,r4,4
   11a20:	20c00017 	ldw	r3,0(r4)
   11a24:	29400104 	addi	r5,r5,4
   11a28:	29800017 	ldw	r6,0(r5)
   11a2c:	1a4f883a 	add	r7,r3,r9
   11a30:	00c4303a 	nor	r2,zero,r3
   11a34:	3884703a 	and	r2,r7,r2
   11a38:	1204703a 	and	r2,r2,r8
   11a3c:	19bff626 	beq	r3,r6,11a18 <__alt_exception_stack_pointer+0xf8011a18>
   11a40:	20800003 	ldbu	r2,0(r4)
   11a44:	10c03fcc 	andi	r3,r2,255
   11a48:	18c0201c 	xori	r3,r3,128
   11a4c:	18ffe004 	addi	r3,r3,-128
   11a50:	18000c26 	beq	r3,zero,11a84 <strcmp+0xac>
   11a54:	29800007 	ldb	r6,0(r5)
   11a58:	19800326 	beq	r3,r6,11a68 <strcmp+0x90>
   11a5c:	00001306 	br	11aac <strcmp+0xd4>
   11a60:	29800007 	ldb	r6,0(r5)
   11a64:	11800b1e 	bne	r2,r6,11a94 <strcmp+0xbc>
   11a68:	21000044 	addi	r4,r4,1
   11a6c:	20c00003 	ldbu	r3,0(r4)
   11a70:	29400044 	addi	r5,r5,1
   11a74:	18803fcc 	andi	r2,r3,255
   11a78:	1080201c 	xori	r2,r2,128
   11a7c:	10bfe004 	addi	r2,r2,-128
   11a80:	103ff71e 	bne	r2,zero,11a60 <__alt_exception_stack_pointer+0xf8011a60>
   11a84:	0007883a 	mov	r3,zero
   11a88:	28800003 	ldbu	r2,0(r5)
   11a8c:	1885c83a 	sub	r2,r3,r2
   11a90:	f800283a 	ret
   11a94:	28800003 	ldbu	r2,0(r5)
   11a98:	18c03fcc 	andi	r3,r3,255
   11a9c:	1885c83a 	sub	r2,r3,r2
   11aa0:	f800283a 	ret
   11aa4:	0005883a 	mov	r2,zero
   11aa8:	f800283a 	ret
   11aac:	10c03fcc 	andi	r3,r2,255
   11ab0:	003ff506 	br	11a88 <__alt_exception_stack_pointer+0xf8011a88>

00011ab4 <strcpy>:
   11ab4:	2906b03a 	or	r3,r5,r4
   11ab8:	18c000cc 	andi	r3,r3,3
   11abc:	2005883a 	mov	r2,r4
   11ac0:	1800161e 	bne	r3,zero,11b1c <strcpy+0x68>
   11ac4:	29c00017 	ldw	r7,0(r5)
   11ac8:	02ffbff4 	movhi	r11,65279
   11acc:	5affbfc4 	addi	r11,r11,-257
   11ad0:	02a02074 	movhi	r10,32897
   11ad4:	01c6303a 	nor	r3,zero,r7
   11ad8:	3ac9883a 	add	r4,r7,r11
   11adc:	52a02004 	addi	r10,r10,-32640
   11ae0:	20c6703a 	and	r3,r4,r3
   11ae4:	1a86703a 	and	r3,r3,r10
   11ae8:	18000c1e 	bne	r3,zero,11b1c <strcpy+0x68>
   11aec:	1011883a 	mov	r8,r2
   11af0:	41c00015 	stw	r7,0(r8)
   11af4:	29400104 	addi	r5,r5,4
   11af8:	29c00017 	ldw	r7,0(r5)
   11afc:	41800104 	addi	r6,r8,4
   11b00:	3011883a 	mov	r8,r6
   11b04:	3ad3883a 	add	r9,r7,r11
   11b08:	01c6303a 	nor	r3,zero,r7
   11b0c:	48c6703a 	and	r3,r9,r3
   11b10:	1a86703a 	and	r3,r3,r10
   11b14:	183ff626 	beq	r3,zero,11af0 <__alt_exception_stack_pointer+0xf8011af0>
   11b18:	00000106 	br	11b20 <strcpy+0x6c>
   11b1c:	100d883a 	mov	r6,r2
   11b20:	28c00003 	ldbu	r3,0(r5)
   11b24:	31800044 	addi	r6,r6,1
   11b28:	29400044 	addi	r5,r5,1
   11b2c:	30ffffc5 	stb	r3,-1(r6)
   11b30:	18c03fcc 	andi	r3,r3,255
   11b34:	18c0201c 	xori	r3,r3,128
   11b38:	18ffe004 	addi	r3,r3,-128
   11b3c:	183ff81e 	bne	r3,zero,11b20 <__alt_exception_stack_pointer+0xf8011b20>
   11b40:	f800283a 	ret

00011b44 <__sprint_r.part.0>:
   11b44:	28801917 	ldw	r2,100(r5)
   11b48:	defff604 	addi	sp,sp,-40
   11b4c:	dd400515 	stw	r21,20(sp)
   11b50:	dfc00915 	stw	ra,36(sp)
   11b54:	df000815 	stw	fp,32(sp)
   11b58:	ddc00715 	stw	r23,28(sp)
   11b5c:	dd800615 	stw	r22,24(sp)
   11b60:	dd000415 	stw	r20,16(sp)
   11b64:	dcc00315 	stw	r19,12(sp)
   11b68:	dc800215 	stw	r18,8(sp)
   11b6c:	dc400115 	stw	r17,4(sp)
   11b70:	dc000015 	stw	r16,0(sp)
   11b74:	1088000c 	andi	r2,r2,8192
   11b78:	302b883a 	mov	r21,r6
   11b7c:	10002e26 	beq	r2,zero,11c38 <__sprint_r.part.0+0xf4>
   11b80:	30800217 	ldw	r2,8(r6)
   11b84:	35800017 	ldw	r22,0(r6)
   11b88:	10002926 	beq	r2,zero,11c30 <__sprint_r.part.0+0xec>
   11b8c:	2827883a 	mov	r19,r5
   11b90:	2029883a 	mov	r20,r4
   11b94:	b5c00104 	addi	r23,r22,4
   11b98:	04bfffc4 	movi	r18,-1
   11b9c:	bc400017 	ldw	r17,0(r23)
   11ba0:	b4000017 	ldw	r16,0(r22)
   11ba4:	0039883a 	mov	fp,zero
   11ba8:	8822d0ba 	srli	r17,r17,2
   11bac:	8800031e 	bne	r17,zero,11bbc <__sprint_r.part.0+0x78>
   11bb0:	00001806 	br	11c14 <__sprint_r.part.0+0xd0>
   11bb4:	84000104 	addi	r16,r16,4
   11bb8:	8f001526 	beq	r17,fp,11c10 <__sprint_r.part.0+0xcc>
   11bbc:	81400017 	ldw	r5,0(r16)
   11bc0:	980d883a 	mov	r6,r19
   11bc4:	a009883a 	mov	r4,r20
   11bc8:	00136340 	call	13634 <_fputwc_r>
   11bcc:	e7000044 	addi	fp,fp,1
   11bd0:	14bff81e 	bne	r2,r18,11bb4 <__alt_exception_stack_pointer+0xf8011bb4>
   11bd4:	9005883a 	mov	r2,r18
   11bd8:	a8000215 	stw	zero,8(r21)
   11bdc:	a8000115 	stw	zero,4(r21)
   11be0:	dfc00917 	ldw	ra,36(sp)
   11be4:	df000817 	ldw	fp,32(sp)
   11be8:	ddc00717 	ldw	r23,28(sp)
   11bec:	dd800617 	ldw	r22,24(sp)
   11bf0:	dd400517 	ldw	r21,20(sp)
   11bf4:	dd000417 	ldw	r20,16(sp)
   11bf8:	dcc00317 	ldw	r19,12(sp)
   11bfc:	dc800217 	ldw	r18,8(sp)
   11c00:	dc400117 	ldw	r17,4(sp)
   11c04:	dc000017 	ldw	r16,0(sp)
   11c08:	dec00a04 	addi	sp,sp,40
   11c0c:	f800283a 	ret
   11c10:	a8800217 	ldw	r2,8(r21)
   11c14:	8c63883a 	add	r17,r17,r17
   11c18:	8c63883a 	add	r17,r17,r17
   11c1c:	1445c83a 	sub	r2,r2,r17
   11c20:	a8800215 	stw	r2,8(r21)
   11c24:	b5800204 	addi	r22,r22,8
   11c28:	bdc00204 	addi	r23,r23,8
   11c2c:	103fdb1e 	bne	r2,zero,11b9c <__alt_exception_stack_pointer+0xf8011b9c>
   11c30:	0005883a 	mov	r2,zero
   11c34:	003fe806 	br	11bd8 <__alt_exception_stack_pointer+0xf8011bd8>
   11c38:	000f4740 	call	f474 <__sfvwrite_r>
   11c3c:	003fe606 	br	11bd8 <__alt_exception_stack_pointer+0xf8011bd8>

00011c40 <__sprint_r>:
   11c40:	30c00217 	ldw	r3,8(r6)
   11c44:	18000126 	beq	r3,zero,11c4c <__sprint_r+0xc>
   11c48:	0011b441 	jmpi	11b44 <__sprint_r.part.0>
   11c4c:	30000115 	stw	zero,4(r6)
   11c50:	0005883a 	mov	r2,zero
   11c54:	f800283a 	ret

00011c58 <___vfiprintf_internal_r>:
   11c58:	deffca04 	addi	sp,sp,-216
   11c5c:	dd403115 	stw	r21,196(sp)
   11c60:	dfc03515 	stw	ra,212(sp)
   11c64:	df003415 	stw	fp,208(sp)
   11c68:	ddc03315 	stw	r23,204(sp)
   11c6c:	dd803215 	stw	r22,200(sp)
   11c70:	dd003015 	stw	r20,192(sp)
   11c74:	dcc02f15 	stw	r19,188(sp)
   11c78:	dc802e15 	stw	r18,184(sp)
   11c7c:	dc402d15 	stw	r17,180(sp)
   11c80:	dc002c15 	stw	r16,176(sp)
   11c84:	d9002115 	stw	r4,132(sp)
   11c88:	d9402015 	stw	r5,128(sp)
   11c8c:	d9c02215 	stw	r7,136(sp)
   11c90:	302b883a 	mov	r21,r6
   11c94:	20000226 	beq	r4,zero,11ca0 <___vfiprintf_internal_r+0x48>
   11c98:	20800e17 	ldw	r2,56(r4)
   11c9c:	1000cf26 	beq	r2,zero,11fdc <___vfiprintf_internal_r+0x384>
   11ca0:	d8c02017 	ldw	r3,128(sp)
   11ca4:	1880030b 	ldhu	r2,12(r3)
   11ca8:	10c8000c 	andi	r3,r2,8192
   11cac:	1800071e 	bne	r3,zero,11ccc <___vfiprintf_internal_r+0x74>
   11cb0:	d9402017 	ldw	r5,128(sp)
   11cb4:	00f7ffc4 	movi	r3,-8193
   11cb8:	10880014 	ori	r2,r2,8192
   11cbc:	29001917 	ldw	r4,100(r5)
   11cc0:	2880030d 	sth	r2,12(r5)
   11cc4:	20c6703a 	and	r3,r4,r3
   11cc8:	28c01915 	stw	r3,100(r5)
   11ccc:	10c0020c 	andi	r3,r2,8
   11cd0:	1800a526 	beq	r3,zero,11f68 <___vfiprintf_internal_r+0x310>
   11cd4:	d9002017 	ldw	r4,128(sp)
   11cd8:	20c00417 	ldw	r3,16(r4)
   11cdc:	1800a226 	beq	r3,zero,11f68 <___vfiprintf_internal_r+0x310>
   11ce0:	1080068c 	andi	r2,r2,26
   11ce4:	00c00284 	movi	r3,10
   11ce8:	10c0a826 	beq	r2,r3,11f8c <___vfiprintf_internal_r+0x334>
   11cec:	d9001a04 	addi	r4,sp,104
   11cf0:	d94019c4 	addi	r5,sp,103
   11cf4:	048000b4 	movhi	r18,2
   11cf8:	2145c83a 	sub	r2,r4,r5
   11cfc:	94a39704 	addi	r18,r18,-29092
   11d00:	d9001e15 	stw	r4,120(sp)
   11d04:	d9401f15 	stw	r5,124(sp)
   11d08:	dec01a15 	stw	sp,104(sp)
   11d0c:	d8001c15 	stw	zero,112(sp)
   11d10:	d8001b15 	stw	zero,108(sp)
   11d14:	d811883a 	mov	r8,sp
   11d18:	d8002615 	stw	zero,152(sp)
   11d1c:	d8002415 	stw	zero,144(sp)
   11d20:	d8802815 	stw	r2,160(sp)
   11d24:	a82d883a 	mov	r22,r21
   11d28:	b0800007 	ldb	r2,0(r22)
   11d2c:	10040d26 	beq	r2,zero,12d64 <___vfiprintf_internal_r+0x110c>
   11d30:	00c00944 	movi	r3,37
   11d34:	b029883a 	mov	r20,r22
   11d38:	10c0021e 	bne	r2,r3,11d44 <___vfiprintf_internal_r+0xec>
   11d3c:	00001606 	br	11d98 <___vfiprintf_internal_r+0x140>
   11d40:	10c00326 	beq	r2,r3,11d50 <___vfiprintf_internal_r+0xf8>
   11d44:	a5000044 	addi	r20,r20,1
   11d48:	a0800007 	ldb	r2,0(r20)
   11d4c:	103ffc1e 	bne	r2,zero,11d40 <__alt_exception_stack_pointer+0xf8011d40>
   11d50:	a5a1c83a 	sub	r16,r20,r22
   11d54:	80001026 	beq	r16,zero,11d98 <___vfiprintf_internal_r+0x140>
   11d58:	d8c01c17 	ldw	r3,112(sp)
   11d5c:	d8801b17 	ldw	r2,108(sp)
   11d60:	45800015 	stw	r22,0(r8)
   11d64:	80c7883a 	add	r3,r16,r3
   11d68:	10800044 	addi	r2,r2,1
   11d6c:	44000115 	stw	r16,4(r8)
   11d70:	d8c01c15 	stw	r3,112(sp)
   11d74:	d8801b15 	stw	r2,108(sp)
   11d78:	010001c4 	movi	r4,7
   11d7c:	2080750e 	bge	r4,r2,11f54 <___vfiprintf_internal_r+0x2fc>
   11d80:	1803951e 	bne	r3,zero,12bd8 <___vfiprintf_internal_r+0xf80>
   11d84:	d8c02417 	ldw	r3,144(sp)
   11d88:	d8001b15 	stw	zero,108(sp)
   11d8c:	d811883a 	mov	r8,sp
   11d90:	1c07883a 	add	r3,r3,r16
   11d94:	d8c02415 	stw	r3,144(sp)
   11d98:	a0800007 	ldb	r2,0(r20)
   11d9c:	1002e026 	beq	r2,zero,12920 <___vfiprintf_internal_r+0xcc8>
   11da0:	a5800044 	addi	r22,r20,1
   11da4:	a0c00047 	ldb	r3,1(r20)
   11da8:	d8001d85 	stb	zero,118(sp)
   11dac:	0027883a 	mov	r19,zero
   11db0:	d8002305 	stb	zero,140(sp)
   11db4:	043fffc4 	movi	r16,-1
   11db8:	d8002515 	stw	zero,148(sp)
   11dbc:	0023883a 	mov	r17,zero
   11dc0:	05001604 	movi	r20,88
   11dc4:	05400244 	movi	r21,9
   11dc8:	402f883a 	mov	r23,r8
   11dcc:	b5800044 	addi	r22,r22,1
   11dd0:	18bff804 	addi	r2,r3,-32
   11dd4:	a0827736 	bltu	r20,r2,127b4 <___vfiprintf_internal_r+0xb5c>
   11dd8:	100490ba 	slli	r2,r2,2
   11ddc:	01000074 	movhi	r4,1
   11de0:	21077c04 	addi	r4,r4,7664
   11de4:	1105883a 	add	r2,r2,r4
   11de8:	10800017 	ldw	r2,0(r2)
   11dec:	1000683a 	jmp	r2
   11df0:	000124b4 	movhi	zero,1170
   11df4:	000127b4 	movhi	zero,1182
   11df8:	000127b4 	movhi	zero,1182
   11dfc:	000124d0 	cmplti	zero,zero,1171
   11e00:	000127b4 	movhi	zero,1182
   11e04:	000127b4 	movhi	zero,1182
   11e08:	000127b4 	movhi	zero,1182
   11e0c:	000127b4 	movhi	zero,1182
   11e10:	000127b4 	movhi	zero,1182
   11e14:	000127b4 	movhi	zero,1182
   11e18:	000126d8 	cmpnei	zero,zero,1179
   11e1c:	000126fc 	xorhi	zero,zero,1179
   11e20:	000127b4 	movhi	zero,1182
   11e24:	00011ff4 	movhi	zero,1151
   11e28:	00012710 	cmplti	zero,zero,1180
   11e2c:	000127b4 	movhi	zero,1182
   11e30:	000124dc 	xori	zero,zero,1171
   11e34:	000124e8 	cmpgeui	zero,zero,1171
   11e38:	000124e8 	cmpgeui	zero,zero,1171
   11e3c:	000124e8 	cmpgeui	zero,zero,1171
   11e40:	000124e8 	cmpgeui	zero,zero,1171
   11e44:	000124e8 	cmpgeui	zero,zero,1171
   11e48:	000124e8 	cmpgeui	zero,zero,1171
   11e4c:	000124e8 	cmpgeui	zero,zero,1171
   11e50:	000124e8 	cmpgeui	zero,zero,1171
   11e54:	000124e8 	cmpgeui	zero,zero,1171
   11e58:	000127b4 	movhi	zero,1182
   11e5c:	000127b4 	movhi	zero,1182
   11e60:	000127b4 	movhi	zero,1182
   11e64:	000127b4 	movhi	zero,1182
   11e68:	000127b4 	movhi	zero,1182
   11e6c:	000127b4 	movhi	zero,1182
   11e70:	000127b4 	movhi	zero,1182
   11e74:	000127b4 	movhi	zero,1182
   11e78:	000127b4 	movhi	zero,1182
   11e7c:	000127b4 	movhi	zero,1182
   11e80:	00012528 	cmpgeui	zero,zero,1172
   11e84:	000127b4 	movhi	zero,1182
   11e88:	000127b4 	movhi	zero,1182
   11e8c:	000127b4 	movhi	zero,1182
   11e90:	000127b4 	movhi	zero,1182
   11e94:	000127b4 	movhi	zero,1182
   11e98:	000127b4 	movhi	zero,1182
   11e9c:	000127b4 	movhi	zero,1182
   11ea0:	000127b4 	movhi	zero,1182
   11ea4:	000127b4 	movhi	zero,1182
   11ea8:	000127b4 	movhi	zero,1182
   11eac:	00012564 	muli	zero,zero,1173
   11eb0:	000127b4 	movhi	zero,1182
   11eb4:	000127b4 	movhi	zero,1182
   11eb8:	000127b4 	movhi	zero,1182
   11ebc:	000127b4 	movhi	zero,1182
   11ec0:	000127b4 	movhi	zero,1182
   11ec4:	000125c0 	call	125c <init_keyboard+0x584>
   11ec8:	000127b4 	movhi	zero,1182
   11ecc:	000127b4 	movhi	zero,1182
   11ed0:	00012634 	movhi	zero,1176
   11ed4:	000127b4 	movhi	zero,1182
   11ed8:	000127b4 	movhi	zero,1182
   11edc:	000127b4 	movhi	zero,1182
   11ee0:	000127b4 	movhi	zero,1182
   11ee4:	000127b4 	movhi	zero,1182
   11ee8:	000127b4 	movhi	zero,1182
   11eec:	000127b4 	movhi	zero,1182
   11ef0:	000127b4 	movhi	zero,1182
   11ef4:	000127b4 	movhi	zero,1182
   11ef8:	000127b4 	movhi	zero,1182
   11efc:	000123dc 	xori	zero,zero,1167
   11f00:	0001240c 	andi	zero,zero,1168
   11f04:	000127b4 	movhi	zero,1182
   11f08:	000127b4 	movhi	zero,1182
   11f0c:	000127b4 	movhi	zero,1182
   11f10:	0001275c 	xori	zero,zero,1181
   11f14:	0001240c 	andi	zero,zero,1168
   11f18:	000127b4 	movhi	zero,1182
   11f1c:	000127b4 	movhi	zero,1182
   11f20:	000122b4 	movhi	zero,1162
   11f24:	000127b4 	movhi	zero,1182
   11f28:	000122c8 	cmpgei	zero,zero,1163
   11f2c:	00012300 	call	1230 <init_keyboard+0x558>
   11f30:	00012000 	call	1200 <init_keyboard+0x528>
   11f34:	000122a8 	cmpgeui	zero,zero,1162
   11f38:	000127b4 	movhi	zero,1182
   11f3c:	00012674 	movhi	zero,1177
   11f40:	000127b4 	movhi	zero,1182
   11f44:	000126c0 	call	126c <init_keyboard+0x594>
   11f48:	000127b4 	movhi	zero,1182
   11f4c:	000127b4 	movhi	zero,1182
   11f50:	00012384 	movi	zero,1166
   11f54:	42000204 	addi	r8,r8,8
   11f58:	d8c02417 	ldw	r3,144(sp)
   11f5c:	1c07883a 	add	r3,r3,r16
   11f60:	d8c02415 	stw	r3,144(sp)
   11f64:	003f8c06 	br	11d98 <__alt_exception_stack_pointer+0xf8011d98>
   11f68:	d9402017 	ldw	r5,128(sp)
   11f6c:	d9002117 	ldw	r4,132(sp)
   11f70:	000c4ac0 	call	c4ac <__swsetup_r>
   11f74:	1003c11e 	bne	r2,zero,12e7c <___vfiprintf_internal_r+0x1224>
   11f78:	d9402017 	ldw	r5,128(sp)
   11f7c:	00c00284 	movi	r3,10
   11f80:	2880030b 	ldhu	r2,12(r5)
   11f84:	1080068c 	andi	r2,r2,26
   11f88:	10ff581e 	bne	r2,r3,11cec <__alt_exception_stack_pointer+0xf8011cec>
   11f8c:	d8c02017 	ldw	r3,128(sp)
   11f90:	1880038f 	ldh	r2,14(r3)
   11f94:	103f5516 	blt	r2,zero,11cec <__alt_exception_stack_pointer+0xf8011cec>
   11f98:	d9c02217 	ldw	r7,136(sp)
   11f9c:	d9002117 	ldw	r4,132(sp)
   11fa0:	a80d883a 	mov	r6,r21
   11fa4:	180b883a 	mov	r5,r3
   11fa8:	00131800 	call	13180 <__sbprintf>
   11fac:	dfc03517 	ldw	ra,212(sp)
   11fb0:	df003417 	ldw	fp,208(sp)
   11fb4:	ddc03317 	ldw	r23,204(sp)
   11fb8:	dd803217 	ldw	r22,200(sp)
   11fbc:	dd403117 	ldw	r21,196(sp)
   11fc0:	dd003017 	ldw	r20,192(sp)
   11fc4:	dcc02f17 	ldw	r19,188(sp)
   11fc8:	dc802e17 	ldw	r18,184(sp)
   11fcc:	dc402d17 	ldw	r17,180(sp)
   11fd0:	dc002c17 	ldw	r16,176(sp)
   11fd4:	dec03604 	addi	sp,sp,216
   11fd8:	f800283a 	ret
   11fdc:	000eff00 	call	eff0 <__sinit>
   11fe0:	003f2f06 	br	11ca0 <__alt_exception_stack_pointer+0xf8011ca0>
   11fe4:	d8c02517 	ldw	r3,148(sp)
   11fe8:	d8802215 	stw	r2,136(sp)
   11fec:	00c7c83a 	sub	r3,zero,r3
   11ff0:	d8c02515 	stw	r3,148(sp)
   11ff4:	8c400114 	ori	r17,r17,4
   11ff8:	b0c00007 	ldb	r3,0(r22)
   11ffc:	003f7306 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   12000:	00800c04 	movi	r2,48
   12004:	d9402217 	ldw	r5,136(sp)
   12008:	d8801d05 	stb	r2,116(sp)
   1200c:	00801e04 	movi	r2,120
   12010:	d8801d45 	stb	r2,117(sp)
   12014:	d8001d85 	stb	zero,118(sp)
   12018:	b811883a 	mov	r8,r23
   1201c:	28c00104 	addi	r3,r5,4
   12020:	2cc00017 	ldw	r19,0(r5)
   12024:	0029883a 	mov	r20,zero
   12028:	88800094 	ori	r2,r17,2
   1202c:	80032516 	blt	r16,zero,12cc4 <___vfiprintf_internal_r+0x106c>
   12030:	00bfdfc4 	movi	r2,-129
   12034:	88a2703a 	and	r17,r17,r2
   12038:	d8c02215 	stw	r3,136(sp)
   1203c:	8c400094 	ori	r17,r17,2
   12040:	98032a1e 	bne	r19,zero,12cec <___vfiprintf_internal_r+0x1094>
   12044:	008000b4 	movhi	r2,2
   12048:	10a33704 	addi	r2,r2,-29476
   1204c:	d8802615 	stw	r2,152(sp)
   12050:	002b883a 	mov	r21,zero
   12054:	8001741e 	bne	r16,zero,12628 <___vfiprintf_internal_r+0x9d0>
   12058:	0021883a 	mov	r16,zero
   1205c:	0029883a 	mov	r20,zero
   12060:	ddc01a04 	addi	r23,sp,104
   12064:	8027883a 	mov	r19,r16
   12068:	8500010e 	bge	r16,r20,12070 <___vfiprintf_internal_r+0x418>
   1206c:	a027883a 	mov	r19,r20
   12070:	ad403fcc 	andi	r21,r21,255
   12074:	ad40201c 	xori	r21,r21,128
   12078:	ad7fe004 	addi	r21,r21,-128
   1207c:	a8000126 	beq	r21,zero,12084 <___vfiprintf_internal_r+0x42c>
   12080:	9cc00044 	addi	r19,r19,1
   12084:	89c0008c 	andi	r7,r17,2
   12088:	38000126 	beq	r7,zero,12090 <___vfiprintf_internal_r+0x438>
   1208c:	9cc00084 	addi	r19,r19,2
   12090:	88c0210c 	andi	r3,r17,132
   12094:	1801dd1e 	bne	r3,zero,1280c <___vfiprintf_internal_r+0xbb4>
   12098:	d9402517 	ldw	r5,148(sp)
   1209c:	2cebc83a 	sub	r21,r5,r19
   120a0:	0541da0e 	bge	zero,r21,1280c <___vfiprintf_internal_r+0xbb4>
   120a4:	07000404 	movi	fp,16
   120a8:	d8801c17 	ldw	r2,112(sp)
   120ac:	e543be0e 	bge	fp,r21,12fa8 <___vfiprintf_internal_r+0x1350>
   120b0:	014000b4 	movhi	r5,2
   120b4:	29639b04 	addi	r5,r5,-29076
   120b8:	dc002715 	stw	r16,156(sp)
   120bc:	d9801b17 	ldw	r6,108(sp)
   120c0:	a821883a 	mov	r16,r21
   120c4:	d9402315 	stw	r5,140(sp)
   120c8:	028001c4 	movi	r10,7
   120cc:	d9c02915 	stw	r7,164(sp)
   120d0:	182b883a 	mov	r21,r3
   120d4:	00000506 	br	120ec <___vfiprintf_internal_r+0x494>
   120d8:	31000084 	addi	r4,r6,2
   120dc:	42000204 	addi	r8,r8,8
   120e0:	180d883a 	mov	r6,r3
   120e4:	843ffc04 	addi	r16,r16,-16
   120e8:	e4000f0e 	bge	fp,r16,12128 <___vfiprintf_internal_r+0x4d0>
   120ec:	010000b4 	movhi	r4,2
   120f0:	10800404 	addi	r2,r2,16
   120f4:	30c00044 	addi	r3,r6,1
   120f8:	21239b04 	addi	r4,r4,-29076
   120fc:	41000015 	stw	r4,0(r8)
   12100:	47000115 	stw	fp,4(r8)
   12104:	d8801c15 	stw	r2,112(sp)
   12108:	d8c01b15 	stw	r3,108(sp)
   1210c:	50fff20e 	bge	r10,r3,120d8 <__alt_exception_stack_pointer+0xf80120d8>
   12110:	1001b21e 	bne	r2,zero,127dc <___vfiprintf_internal_r+0xb84>
   12114:	843ffc04 	addi	r16,r16,-16
   12118:	000d883a 	mov	r6,zero
   1211c:	01000044 	movi	r4,1
   12120:	d811883a 	mov	r8,sp
   12124:	e43ff116 	blt	fp,r16,120ec <__alt_exception_stack_pointer+0xf80120ec>
   12128:	a807883a 	mov	r3,r21
   1212c:	d9c02917 	ldw	r7,164(sp)
   12130:	802b883a 	mov	r21,r16
   12134:	dc002717 	ldw	r16,156(sp)
   12138:	d9402317 	ldw	r5,140(sp)
   1213c:	a885883a 	add	r2,r21,r2
   12140:	45400115 	stw	r21,4(r8)
   12144:	41400015 	stw	r5,0(r8)
   12148:	d8801c15 	stw	r2,112(sp)
   1214c:	d9001b15 	stw	r4,108(sp)
   12150:	014001c4 	movi	r5,7
   12154:	29026216 	blt	r5,r4,12ae0 <___vfiprintf_internal_r+0xe88>
   12158:	d9801d87 	ldb	r6,118(sp)
   1215c:	42000204 	addi	r8,r8,8
   12160:	21400044 	addi	r5,r4,1
   12164:	3001ae1e 	bne	r6,zero,12820 <___vfiprintf_internal_r+0xbc8>
   12168:	3801bb26 	beq	r7,zero,12858 <___vfiprintf_internal_r+0xc00>
   1216c:	d9001d04 	addi	r4,sp,116
   12170:	10800084 	addi	r2,r2,2
   12174:	41000015 	stw	r4,0(r8)
   12178:	01000084 	movi	r4,2
   1217c:	41000115 	stw	r4,4(r8)
   12180:	d8801c15 	stw	r2,112(sp)
   12184:	d9401b15 	stw	r5,108(sp)
   12188:	010001c4 	movi	r4,7
   1218c:	2142680e 	bge	r4,r5,12b30 <___vfiprintf_internal_r+0xed8>
   12190:	1002b11e 	bne	r2,zero,12c58 <___vfiprintf_internal_r+0x1000>
   12194:	01802004 	movi	r6,128
   12198:	01400044 	movi	r5,1
   1219c:	0009883a 	mov	r4,zero
   121a0:	d811883a 	mov	r8,sp
   121a4:	1981ae1e 	bne	r3,r6,12860 <___vfiprintf_internal_r+0xc08>
   121a8:	d8c02517 	ldw	r3,148(sp)
   121ac:	1cf9c83a 	sub	fp,r3,r19
   121b0:	0701ab0e 	bge	zero,fp,12860 <___vfiprintf_internal_r+0xc08>
   121b4:	05400404 	movi	r21,16
   121b8:	af03a90e 	bge	r21,fp,13060 <___vfiprintf_internal_r+0x1408>
   121bc:	014000b4 	movhi	r5,2
   121c0:	29639704 	addi	r5,r5,-29092
   121c4:	d9402315 	stw	r5,140(sp)
   121c8:	01c001c4 	movi	r7,7
   121cc:	00000506 	br	121e4 <___vfiprintf_internal_r+0x58c>
   121d0:	21800084 	addi	r6,r4,2
   121d4:	42000204 	addi	r8,r8,8
   121d8:	1809883a 	mov	r4,r3
   121dc:	e73ffc04 	addi	fp,fp,-16
   121e0:	af000d0e 	bge	r21,fp,12218 <___vfiprintf_internal_r+0x5c0>
   121e4:	10800404 	addi	r2,r2,16
   121e8:	20c00044 	addi	r3,r4,1
   121ec:	44800015 	stw	r18,0(r8)
   121f0:	45400115 	stw	r21,4(r8)
   121f4:	d8801c15 	stw	r2,112(sp)
   121f8:	d8c01b15 	stw	r3,108(sp)
   121fc:	38fff40e 	bge	r7,r3,121d0 <__alt_exception_stack_pointer+0xf80121d0>
   12200:	10022b1e 	bne	r2,zero,12ab0 <___vfiprintf_internal_r+0xe58>
   12204:	e73ffc04 	addi	fp,fp,-16
   12208:	01800044 	movi	r6,1
   1220c:	0009883a 	mov	r4,zero
   12210:	d811883a 	mov	r8,sp
   12214:	af3ff316 	blt	r21,fp,121e4 <__alt_exception_stack_pointer+0xf80121e4>
   12218:	d8c02317 	ldw	r3,140(sp)
   1221c:	1705883a 	add	r2,r2,fp
   12220:	47000115 	stw	fp,4(r8)
   12224:	40c00015 	stw	r3,0(r8)
   12228:	d8801c15 	stw	r2,112(sp)
   1222c:	d9801b15 	stw	r6,108(sp)
   12230:	00c001c4 	movi	r3,7
   12234:	19829416 	blt	r3,r6,12c88 <___vfiprintf_internal_r+0x1030>
   12238:	8521c83a 	sub	r16,r16,r20
   1223c:	42000204 	addi	r8,r8,8
   12240:	31400044 	addi	r5,r6,1
   12244:	3009883a 	mov	r4,r6
   12248:	04018716 	blt	zero,r16,12868 <___vfiprintf_internal_r+0xc10>
   1224c:	a085883a 	add	r2,r20,r2
   12250:	45c00015 	stw	r23,0(r8)
   12254:	45000115 	stw	r20,4(r8)
   12258:	d8801c15 	stw	r2,112(sp)
   1225c:	d9401b15 	stw	r5,108(sp)
   12260:	00c001c4 	movi	r3,7
   12264:	1941c20e 	bge	r3,r5,12970 <___vfiprintf_internal_r+0xd18>
   12268:	1002531e 	bne	r2,zero,12bb8 <___vfiprintf_internal_r+0xf60>
   1226c:	d8001b15 	stw	zero,108(sp)
   12270:	8c40010c 	andi	r17,r17,4
   12274:	88023226 	beq	r17,zero,12b40 <___vfiprintf_internal_r+0xee8>
   12278:	d9002517 	ldw	r4,148(sp)
   1227c:	24e3c83a 	sub	r17,r4,r19
   12280:	04432916 	blt	zero,r17,12f28 <___vfiprintf_internal_r+0x12d0>
   12284:	d8802517 	ldw	r2,148(sp)
   12288:	14c0010e 	bge	r2,r19,12290 <___vfiprintf_internal_r+0x638>
   1228c:	9805883a 	mov	r2,r19
   12290:	d8c02417 	ldw	r3,144(sp)
   12294:	1887883a 	add	r3,r3,r2
   12298:	d8c02415 	stw	r3,144(sp)
   1229c:	d8001b15 	stw	zero,108(sp)
   122a0:	d811883a 	mov	r8,sp
   122a4:	003ea006 	br	11d28 <__alt_exception_stack_pointer+0xf8011d28>
   122a8:	8c400814 	ori	r17,r17,32
   122ac:	b0c00007 	ldb	r3,0(r22)
   122b0:	003ec606 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   122b4:	b0c00007 	ldb	r3,0(r22)
   122b8:	00801b04 	movi	r2,108
   122bc:	18832026 	beq	r3,r2,12f40 <___vfiprintf_internal_r+0x12e8>
   122c0:	8c400414 	ori	r17,r17,16
   122c4:	003ec106 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   122c8:	9cc03fcc 	andi	r19,r19,255
   122cc:	b811883a 	mov	r8,r23
   122d0:	9803981e 	bne	r19,zero,13134 <___vfiprintf_internal_r+0x14dc>
   122d4:	8880080c 	andi	r2,r17,32
   122d8:	1002be26 	beq	r2,zero,12dd4 <___vfiprintf_internal_r+0x117c>
   122dc:	d9002217 	ldw	r4,136(sp)
   122e0:	d9402417 	ldw	r5,144(sp)
   122e4:	20800017 	ldw	r2,0(r4)
   122e8:	2807d7fa 	srai	r3,r5,31
   122ec:	21000104 	addi	r4,r4,4
   122f0:	d9002215 	stw	r4,136(sp)
   122f4:	11400015 	stw	r5,0(r2)
   122f8:	10c00115 	stw	r3,4(r2)
   122fc:	003e8a06 	br	11d28 <__alt_exception_stack_pointer+0xf8011d28>
   12300:	9cc03fcc 	andi	r19,r19,255
   12304:	b811883a 	mov	r8,r23
   12308:	9803871e 	bne	r19,zero,13128 <___vfiprintf_internal_r+0x14d0>
   1230c:	8880080c 	andi	r2,r17,32
   12310:	10009a26 	beq	r2,zero,1257c <___vfiprintf_internal_r+0x924>
   12314:	d9002217 	ldw	r4,136(sp)
   12318:	d8001d85 	stb	zero,118(sp)
   1231c:	20800204 	addi	r2,r4,8
   12320:	24c00017 	ldw	r19,0(r4)
   12324:	25000117 	ldw	r20,4(r4)
   12328:	8002a416 	blt	r16,zero,12dbc <___vfiprintf_internal_r+0x1164>
   1232c:	013fdfc4 	movi	r4,-129
   12330:	9d06b03a 	or	r3,r19,r20
   12334:	d8802215 	stw	r2,136(sp)
   12338:	8922703a 	and	r17,r17,r4
   1233c:	18009b26 	beq	r3,zero,125ac <___vfiprintf_internal_r+0x954>
   12340:	002b883a 	mov	r21,zero
   12344:	ddc01a04 	addi	r23,sp,104
   12348:	9806d0fa 	srli	r3,r19,3
   1234c:	a008977a 	slli	r4,r20,29
   12350:	a028d0fa 	srli	r20,r20,3
   12354:	9cc001cc 	andi	r19,r19,7
   12358:	98800c04 	addi	r2,r19,48
   1235c:	bdffffc4 	addi	r23,r23,-1
   12360:	20e6b03a 	or	r19,r4,r3
   12364:	b8800005 	stb	r2,0(r23)
   12368:	9d06b03a 	or	r3,r19,r20
   1236c:	183ff61e 	bne	r3,zero,12348 <__alt_exception_stack_pointer+0xf8012348>
   12370:	88c0004c 	andi	r3,r17,1
   12374:	18021f1e 	bne	r3,zero,12bf4 <___vfiprintf_internal_r+0xf9c>
   12378:	d9401e17 	ldw	r5,120(sp)
   1237c:	2de9c83a 	sub	r20,r5,r23
   12380:	003f3806 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   12384:	9cc03fcc 	andi	r19,r19,255
   12388:	b811883a 	mov	r8,r23
   1238c:	98034f1e 	bne	r19,zero,130cc <___vfiprintf_internal_r+0x1474>
   12390:	008000b4 	movhi	r2,2
   12394:	10a33704 	addi	r2,r2,-29476
   12398:	d8802615 	stw	r2,152(sp)
   1239c:	8880080c 	andi	r2,r17,32
   123a0:	1000ac26 	beq	r2,zero,12654 <___vfiprintf_internal_r+0x9fc>
   123a4:	d9002217 	ldw	r4,136(sp)
   123a8:	24c00017 	ldw	r19,0(r4)
   123ac:	25000117 	ldw	r20,4(r4)
   123b0:	21000204 	addi	r4,r4,8
   123b4:	d9002215 	stw	r4,136(sp)
   123b8:	8880004c 	andi	r2,r17,1
   123bc:	1001e726 	beq	r2,zero,12b5c <___vfiprintf_internal_r+0xf04>
   123c0:	9d04b03a 	or	r2,r19,r20
   123c4:	10025c1e 	bne	r2,zero,12d38 <___vfiprintf_internal_r+0x10e0>
   123c8:	d8001d85 	stb	zero,118(sp)
   123cc:	80024416 	blt	r16,zero,12ce0 <___vfiprintf_internal_r+0x1088>
   123d0:	00bfdfc4 	movi	r2,-129
   123d4:	88a2703a 	and	r17,r17,r2
   123d8:	003f1d06 	br	12050 <__alt_exception_stack_pointer+0xf8012050>
   123dc:	d8c02217 	ldw	r3,136(sp)
   123e0:	04c00044 	movi	r19,1
   123e4:	b811883a 	mov	r8,r23
   123e8:	18800017 	ldw	r2,0(r3)
   123ec:	18c00104 	addi	r3,r3,4
   123f0:	d8001d85 	stb	zero,118(sp)
   123f4:	d8801005 	stb	r2,64(sp)
   123f8:	d8c02215 	stw	r3,136(sp)
   123fc:	9829883a 	mov	r20,r19
   12400:	ddc01004 	addi	r23,sp,64
   12404:	0021883a 	mov	r16,zero
   12408:	003f1e06 	br	12084 <__alt_exception_stack_pointer+0xf8012084>
   1240c:	9cc03fcc 	andi	r19,r19,255
   12410:	b811883a 	mov	r8,r23
   12414:	9803331e 	bne	r19,zero,130e4 <___vfiprintf_internal_r+0x148c>
   12418:	8880080c 	andi	r2,r17,32
   1241c:	10004826 	beq	r2,zero,12540 <___vfiprintf_internal_r+0x8e8>
   12420:	d9002217 	ldw	r4,136(sp)
   12424:	20800117 	ldw	r2,4(r4)
   12428:	24c00017 	ldw	r19,0(r4)
   1242c:	21000204 	addi	r4,r4,8
   12430:	d9002215 	stw	r4,136(sp)
   12434:	1029883a 	mov	r20,r2
   12438:	10024c16 	blt	r2,zero,12d6c <___vfiprintf_internal_r+0x1114>
   1243c:	dd401d83 	ldbu	r21,118(sp)
   12440:	80007116 	blt	r16,zero,12608 <___vfiprintf_internal_r+0x9b0>
   12444:	00ffdfc4 	movi	r3,-129
   12448:	9d04b03a 	or	r2,r19,r20
   1244c:	88e2703a 	and	r17,r17,r3
   12450:	1000d126 	beq	r2,zero,12798 <___vfiprintf_internal_r+0xb40>
   12454:	a0023526 	beq	r20,zero,12d2c <___vfiprintf_internal_r+0x10d4>
   12458:	ddc01a04 	addi	r23,sp,104
   1245c:	4039883a 	mov	fp,r8
   12460:	9809883a 	mov	r4,r19
   12464:	a00b883a 	mov	r5,r20
   12468:	01800284 	movi	r6,10
   1246c:	000f883a 	mov	r7,zero
   12470:	00141840 	call	14184 <__umoddi3>
   12474:	10800c04 	addi	r2,r2,48
   12478:	bdffffc4 	addi	r23,r23,-1
   1247c:	9809883a 	mov	r4,r19
   12480:	a00b883a 	mov	r5,r20
   12484:	b8800005 	stb	r2,0(r23)
   12488:	01800284 	movi	r6,10
   1248c:	000f883a 	mov	r7,zero
   12490:	0013b880 	call	13b88 <__udivdi3>
   12494:	1027883a 	mov	r19,r2
   12498:	10c4b03a 	or	r2,r2,r3
   1249c:	1829883a 	mov	r20,r3
   124a0:	103fef1e 	bne	r2,zero,12460 <__alt_exception_stack_pointer+0xf8012460>
   124a4:	d9001e17 	ldw	r4,120(sp)
   124a8:	e011883a 	mov	r8,fp
   124ac:	25e9c83a 	sub	r20,r4,r23
   124b0:	003eec06 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   124b4:	d8802307 	ldb	r2,140(sp)
   124b8:	1002361e 	bne	r2,zero,12d94 <___vfiprintf_internal_r+0x113c>
   124bc:	00c00804 	movi	r3,32
   124c0:	d8c02305 	stb	r3,140(sp)
   124c4:	04c00044 	movi	r19,1
   124c8:	b0c00007 	ldb	r3,0(r22)
   124cc:	003e3f06 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   124d0:	8c400054 	ori	r17,r17,1
   124d4:	b0c00007 	ldb	r3,0(r22)
   124d8:	003e3c06 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   124dc:	8c402014 	ori	r17,r17,128
   124e0:	b0c00007 	ldb	r3,0(r22)
   124e4:	003e3906 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   124e8:	dc002715 	stw	r16,156(sp)
   124ec:	d8002515 	stw	zero,148(sp)
   124f0:	1f3ff404 	addi	fp,r3,-48
   124f4:	0009883a 	mov	r4,zero
   124f8:	b021883a 	mov	r16,r22
   124fc:	01400284 	movi	r5,10
   12500:	00068e80 	call	68e8 <__mulsi3>
   12504:	80c00007 	ldb	r3,0(r16)
   12508:	e089883a 	add	r4,fp,r2
   1250c:	b5800044 	addi	r22,r22,1
   12510:	1f3ff404 	addi	fp,r3,-48
   12514:	b021883a 	mov	r16,r22
   12518:	af3ff82e 	bgeu	r21,fp,124fc <__alt_exception_stack_pointer+0xf80124fc>
   1251c:	d9002515 	stw	r4,148(sp)
   12520:	dc002717 	ldw	r16,156(sp)
   12524:	003e2a06 	br	11dd0 <__alt_exception_stack_pointer+0xf8011dd0>
   12528:	9cc03fcc 	andi	r19,r19,255
   1252c:	b811883a 	mov	r8,r23
   12530:	9802e91e 	bne	r19,zero,130d8 <___vfiprintf_internal_r+0x1480>
   12534:	8c400414 	ori	r17,r17,16
   12538:	8880080c 	andi	r2,r17,32
   1253c:	103fb81e 	bne	r2,zero,12420 <__alt_exception_stack_pointer+0xf8012420>
   12540:	8880040c 	andi	r2,r17,16
   12544:	10022e26 	beq	r2,zero,12e00 <___vfiprintf_internal_r+0x11a8>
   12548:	d9402217 	ldw	r5,136(sp)
   1254c:	2cc00017 	ldw	r19,0(r5)
   12550:	29400104 	addi	r5,r5,4
   12554:	d9402215 	stw	r5,136(sp)
   12558:	9829d7fa 	srai	r20,r19,31
   1255c:	a005883a 	mov	r2,r20
   12560:	003fb506 	br	12438 <__alt_exception_stack_pointer+0xf8012438>
   12564:	9cc03fcc 	andi	r19,r19,255
   12568:	b811883a 	mov	r8,r23
   1256c:	9802fa1e 	bne	r19,zero,13158 <___vfiprintf_internal_r+0x1500>
   12570:	8c400414 	ori	r17,r17,16
   12574:	8880080c 	andi	r2,r17,32
   12578:	103f661e 	bne	r2,zero,12314 <__alt_exception_stack_pointer+0xf8012314>
   1257c:	8880040c 	andi	r2,r17,16
   12580:	10020626 	beq	r2,zero,12d9c <___vfiprintf_internal_r+0x1144>
   12584:	d9402217 	ldw	r5,136(sp)
   12588:	d8001d85 	stb	zero,118(sp)
   1258c:	0029883a 	mov	r20,zero
   12590:	28800104 	addi	r2,r5,4
   12594:	2cc00017 	ldw	r19,0(r5)
   12598:	80020816 	blt	r16,zero,12dbc <___vfiprintf_internal_r+0x1164>
   1259c:	00ffdfc4 	movi	r3,-129
   125a0:	d8802215 	stw	r2,136(sp)
   125a4:	88e2703a 	and	r17,r17,r3
   125a8:	983f651e 	bne	r19,zero,12340 <__alt_exception_stack_pointer+0xf8012340>
   125ac:	002b883a 	mov	r21,zero
   125b0:	8002cf26 	beq	r16,zero,130f0 <___vfiprintf_internal_r+0x1498>
   125b4:	0027883a 	mov	r19,zero
   125b8:	0029883a 	mov	r20,zero
   125bc:	003f6106 	br	12344 <__alt_exception_stack_pointer+0xf8012344>
   125c0:	9cc03fcc 	andi	r19,r19,255
   125c4:	b811883a 	mov	r8,r23
   125c8:	9802e01e 	bne	r19,zero,1314c <___vfiprintf_internal_r+0x14f4>
   125cc:	8c400414 	ori	r17,r17,16
   125d0:	8880080c 	andi	r2,r17,32
   125d4:	1000641e 	bne	r2,zero,12768 <___vfiprintf_internal_r+0xb10>
   125d8:	8880040c 	andi	r2,r17,16
   125dc:	1001c81e 	bne	r2,zero,12d00 <___vfiprintf_internal_r+0x10a8>
   125e0:	8880100c 	andi	r2,r17,64
   125e4:	d8001d85 	stb	zero,118(sp)
   125e8:	1002281e 	bne	r2,zero,12e8c <___vfiprintf_internal_r+0x1234>
   125ec:	d9002217 	ldw	r4,136(sp)
   125f0:	0029883a 	mov	r20,zero
   125f4:	20800104 	addi	r2,r4,4
   125f8:	24c00017 	ldw	r19,0(r4)
   125fc:	8001c60e 	bge	r16,zero,12d18 <___vfiprintf_internal_r+0x10c0>
   12600:	d8802215 	stw	r2,136(sp)
   12604:	002b883a 	mov	r21,zero
   12608:	9d04b03a 	or	r2,r19,r20
   1260c:	103f911e 	bne	r2,zero,12454 <__alt_exception_stack_pointer+0xf8012454>
   12610:	00800044 	movi	r2,1
   12614:	10803fcc 	andi	r2,r2,255
   12618:	00c00044 	movi	r3,1
   1261c:	10c05f26 	beq	r2,r3,1279c <___vfiprintf_internal_r+0xb44>
   12620:	00c00084 	movi	r3,2
   12624:	10ffe31e 	bne	r2,r3,125b4 <__alt_exception_stack_pointer+0xf80125b4>
   12628:	0027883a 	mov	r19,zero
   1262c:	0029883a 	mov	r20,zero
   12630:	00015106 	br	12b78 <___vfiprintf_internal_r+0xf20>
   12634:	9cc03fcc 	andi	r19,r19,255
   12638:	b811883a 	mov	r8,r23
   1263c:	9802c01e 	bne	r19,zero,13140 <___vfiprintf_internal_r+0x14e8>
   12640:	014000b4 	movhi	r5,2
   12644:	29633204 	addi	r5,r5,-29496
   12648:	d9402615 	stw	r5,152(sp)
   1264c:	8880080c 	andi	r2,r17,32
   12650:	103f541e 	bne	r2,zero,123a4 <__alt_exception_stack_pointer+0xf80123a4>
   12654:	8880040c 	andi	r2,r17,16
   12658:	1001f226 	beq	r2,zero,12e24 <___vfiprintf_internal_r+0x11cc>
   1265c:	d9402217 	ldw	r5,136(sp)
   12660:	0029883a 	mov	r20,zero
   12664:	2cc00017 	ldw	r19,0(r5)
   12668:	29400104 	addi	r5,r5,4
   1266c:	d9402215 	stw	r5,136(sp)
   12670:	003f5106 	br	123b8 <__alt_exception_stack_pointer+0xf80123b8>
   12674:	d8c02217 	ldw	r3,136(sp)
   12678:	b811883a 	mov	r8,r23
   1267c:	d8001d85 	stb	zero,118(sp)
   12680:	1dc00017 	ldw	r23,0(r3)
   12684:	1f000104 	addi	fp,r3,4
   12688:	b8025926 	beq	r23,zero,12ff0 <___vfiprintf_internal_r+0x1398>
   1268c:	80023316 	blt	r16,zero,12f5c <___vfiprintf_internal_r+0x1304>
   12690:	800d883a 	mov	r6,r16
   12694:	000b883a 	mov	r5,zero
   12698:	b809883a 	mov	r4,r23
   1269c:	da002a15 	stw	r8,168(sp)
   126a0:	000fd5c0 	call	fd5c <memchr>
   126a4:	da002a17 	ldw	r8,168(sp)
   126a8:	10026826 	beq	r2,zero,1304c <___vfiprintf_internal_r+0x13f4>
   126ac:	15e9c83a 	sub	r20,r2,r23
   126b0:	dd401d83 	ldbu	r21,118(sp)
   126b4:	df002215 	stw	fp,136(sp)
   126b8:	0021883a 	mov	r16,zero
   126bc:	003e6906 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   126c0:	9cc03fcc 	andi	r19,r19,255
   126c4:	b811883a 	mov	r8,r23
   126c8:	983fc126 	beq	r19,zero,125d0 <__alt_exception_stack_pointer+0xf80125d0>
   126cc:	d8c02303 	ldbu	r3,140(sp)
   126d0:	d8c01d85 	stb	r3,118(sp)
   126d4:	003fbe06 	br	125d0 <__alt_exception_stack_pointer+0xf80125d0>
   126d8:	d9002217 	ldw	r4,136(sp)
   126dc:	d9402217 	ldw	r5,136(sp)
   126e0:	21000017 	ldw	r4,0(r4)
   126e4:	28800104 	addi	r2,r5,4
   126e8:	d9002515 	stw	r4,148(sp)
   126ec:	203e3d16 	blt	r4,zero,11fe4 <__alt_exception_stack_pointer+0xf8011fe4>
   126f0:	d8802215 	stw	r2,136(sp)
   126f4:	b0c00007 	ldb	r3,0(r22)
   126f8:	003db406 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   126fc:	00c00ac4 	movi	r3,43
   12700:	d8c02305 	stb	r3,140(sp)
   12704:	04c00044 	movi	r19,1
   12708:	b0c00007 	ldb	r3,0(r22)
   1270c:	003daf06 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   12710:	b0c00007 	ldb	r3,0(r22)
   12714:	01000a84 	movi	r4,42
   12718:	b4000044 	addi	r16,r22,1
   1271c:	19025e26 	beq	r3,r4,13098 <___vfiprintf_internal_r+0x1440>
   12720:	1f3ff404 	addi	fp,r3,-48
   12724:	0009883a 	mov	r4,zero
   12728:	af025236 	bltu	r21,fp,13074 <___vfiprintf_internal_r+0x141c>
   1272c:	01400284 	movi	r5,10
   12730:	00068e80 	call	68e8 <__mulsi3>
   12734:	80c00007 	ldb	r3,0(r16)
   12738:	1709883a 	add	r4,r2,fp
   1273c:	85800044 	addi	r22,r16,1
   12740:	1f3ff404 	addi	fp,r3,-48
   12744:	b021883a 	mov	r16,r22
   12748:	af3ff82e 	bgeu	r21,fp,1272c <__alt_exception_stack_pointer+0xf801272c>
   1274c:	2021883a 	mov	r16,r4
   12750:	203d9f0e 	bge	r4,zero,11dd0 <__alt_exception_stack_pointer+0xf8011dd0>
   12754:	043fffc4 	movi	r16,-1
   12758:	003d9d06 	br	11dd0 <__alt_exception_stack_pointer+0xf8011dd0>
   1275c:	8c401014 	ori	r17,r17,64
   12760:	b0c00007 	ldb	r3,0(r22)
   12764:	003d9906 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   12768:	d9002217 	ldw	r4,136(sp)
   1276c:	d8001d85 	stb	zero,118(sp)
   12770:	20c00204 	addi	r3,r4,8
   12774:	24c00017 	ldw	r19,0(r4)
   12778:	25000117 	ldw	r20,4(r4)
   1277c:	8001e716 	blt	r16,zero,12f1c <___vfiprintf_internal_r+0x12c4>
   12780:	013fdfc4 	movi	r4,-129
   12784:	9d04b03a 	or	r2,r19,r20
   12788:	d8c02215 	stw	r3,136(sp)
   1278c:	8922703a 	and	r17,r17,r4
   12790:	002b883a 	mov	r21,zero
   12794:	103f2f1e 	bne	r2,zero,12454 <__alt_exception_stack_pointer+0xf8012454>
   12798:	803e2f26 	beq	r16,zero,12058 <__alt_exception_stack_pointer+0xf8012058>
   1279c:	0027883a 	mov	r19,zero
   127a0:	9cc00c04 	addi	r19,r19,48
   127a4:	dcc019c5 	stb	r19,103(sp)
   127a8:	dd002817 	ldw	r20,160(sp)
   127ac:	ddc019c4 	addi	r23,sp,103
   127b0:	003e2c06 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   127b4:	9cc03fcc 	andi	r19,r19,255
   127b8:	b811883a 	mov	r8,r23
   127bc:	9802571e 	bne	r19,zero,1311c <___vfiprintf_internal_r+0x14c4>
   127c0:	18005726 	beq	r3,zero,12920 <___vfiprintf_internal_r+0xcc8>
   127c4:	04c00044 	movi	r19,1
   127c8:	d8c01005 	stb	r3,64(sp)
   127cc:	d8001d85 	stb	zero,118(sp)
   127d0:	9829883a 	mov	r20,r19
   127d4:	ddc01004 	addi	r23,sp,64
   127d8:	003f0a06 	br	12404 <__alt_exception_stack_pointer+0xf8012404>
   127dc:	d9402017 	ldw	r5,128(sp)
   127e0:	d9002117 	ldw	r4,132(sp)
   127e4:	d9801a04 	addi	r6,sp,104
   127e8:	da802a15 	stw	r10,168(sp)
   127ec:	0011b440 	call	11b44 <__sprint_r.part.0>
   127f0:	da802a17 	ldw	r10,168(sp)
   127f4:	1000501e 	bne	r2,zero,12938 <___vfiprintf_internal_r+0xce0>
   127f8:	d9801b17 	ldw	r6,108(sp)
   127fc:	d8801c17 	ldw	r2,112(sp)
   12800:	d811883a 	mov	r8,sp
   12804:	31000044 	addi	r4,r6,1
   12808:	003e3606 	br	120e4 <__alt_exception_stack_pointer+0xf80120e4>
   1280c:	d9001b17 	ldw	r4,108(sp)
   12810:	d8801c17 	ldw	r2,112(sp)
   12814:	21400044 	addi	r5,r4,1
   12818:	d9801d87 	ldb	r6,118(sp)
   1281c:	303e5226 	beq	r6,zero,12168 <__alt_exception_stack_pointer+0xf8012168>
   12820:	01800044 	movi	r6,1
   12824:	d9001d84 	addi	r4,sp,118
   12828:	1185883a 	add	r2,r2,r6
   1282c:	41000015 	stw	r4,0(r8)
   12830:	41800115 	stw	r6,4(r8)
   12834:	d8801c15 	stw	r2,112(sp)
   12838:	d9401b15 	stw	r5,108(sp)
   1283c:	010001c4 	movi	r4,7
   12840:	2140b00e 	bge	r4,r5,12b04 <___vfiprintf_internal_r+0xeac>
   12844:	1000f61e 	bne	r2,zero,12c20 <___vfiprintf_internal_r+0xfc8>
   12848:	3800b31e 	bne	r7,zero,12b18 <___vfiprintf_internal_r+0xec0>
   1284c:	0009883a 	mov	r4,zero
   12850:	300b883a 	mov	r5,r6
   12854:	d811883a 	mov	r8,sp
   12858:	01802004 	movi	r6,128
   1285c:	19be5226 	beq	r3,r6,121a8 <__alt_exception_stack_pointer+0xf80121a8>
   12860:	8521c83a 	sub	r16,r16,r20
   12864:	043e790e 	bge	zero,r16,1224c <__alt_exception_stack_pointer+0xf801224c>
   12868:	05400404 	movi	r21,16
   1286c:	ac01b00e 	bge	r21,r16,12f30 <___vfiprintf_internal_r+0x12d8>
   12870:	014000b4 	movhi	r5,2
   12874:	29639704 	addi	r5,r5,-29092
   12878:	d9402315 	stw	r5,140(sp)
   1287c:	070001c4 	movi	fp,7
   12880:	00000506 	br	12898 <___vfiprintf_internal_r+0xc40>
   12884:	21400084 	addi	r5,r4,2
   12888:	42000204 	addi	r8,r8,8
   1288c:	1809883a 	mov	r4,r3
   12890:	843ffc04 	addi	r16,r16,-16
   12894:	ac000d0e 	bge	r21,r16,128cc <___vfiprintf_internal_r+0xc74>
   12898:	10800404 	addi	r2,r2,16
   1289c:	20c00044 	addi	r3,r4,1
   128a0:	44800015 	stw	r18,0(r8)
   128a4:	45400115 	stw	r21,4(r8)
   128a8:	d8801c15 	stw	r2,112(sp)
   128ac:	d8c01b15 	stw	r3,108(sp)
   128b0:	e0fff40e 	bge	fp,r3,12884 <__alt_exception_stack_pointer+0xf8012884>
   128b4:	1000101e 	bne	r2,zero,128f8 <___vfiprintf_internal_r+0xca0>
   128b8:	843ffc04 	addi	r16,r16,-16
   128bc:	01400044 	movi	r5,1
   128c0:	0009883a 	mov	r4,zero
   128c4:	d811883a 	mov	r8,sp
   128c8:	ac3ff316 	blt	r21,r16,12898 <__alt_exception_stack_pointer+0xf8012898>
   128cc:	d8c02317 	ldw	r3,140(sp)
   128d0:	1405883a 	add	r2,r2,r16
   128d4:	44000115 	stw	r16,4(r8)
   128d8:	40c00015 	stw	r3,0(r8)
   128dc:	d8801c15 	stw	r2,112(sp)
   128e0:	d9401b15 	stw	r5,108(sp)
   128e4:	00c001c4 	movi	r3,7
   128e8:	19401916 	blt	r3,r5,12950 <___vfiprintf_internal_r+0xcf8>
   128ec:	42000204 	addi	r8,r8,8
   128f0:	29400044 	addi	r5,r5,1
   128f4:	003e5506 	br	1224c <__alt_exception_stack_pointer+0xf801224c>
   128f8:	d9402017 	ldw	r5,128(sp)
   128fc:	d9002117 	ldw	r4,132(sp)
   12900:	d9801a04 	addi	r6,sp,104
   12904:	0011b440 	call	11b44 <__sprint_r.part.0>
   12908:	10000b1e 	bne	r2,zero,12938 <___vfiprintf_internal_r+0xce0>
   1290c:	d9001b17 	ldw	r4,108(sp)
   12910:	d8801c17 	ldw	r2,112(sp)
   12914:	d811883a 	mov	r8,sp
   12918:	21400044 	addi	r5,r4,1
   1291c:	003fdc06 	br	12890 <__alt_exception_stack_pointer+0xf8012890>
   12920:	d8801c17 	ldw	r2,112(sp)
   12924:	10000426 	beq	r2,zero,12938 <___vfiprintf_internal_r+0xce0>
   12928:	d9402017 	ldw	r5,128(sp)
   1292c:	d9002117 	ldw	r4,132(sp)
   12930:	d9801a04 	addi	r6,sp,104
   12934:	0011b440 	call	11b44 <__sprint_r.part.0>
   12938:	d9402017 	ldw	r5,128(sp)
   1293c:	2880030b 	ldhu	r2,12(r5)
   12940:	1080100c 	andi	r2,r2,64
   12944:	10014d1e 	bne	r2,zero,12e7c <___vfiprintf_internal_r+0x1224>
   12948:	d8802417 	ldw	r2,144(sp)
   1294c:	003d9706 	br	11fac <__alt_exception_stack_pointer+0xf8011fac>
   12950:	1000d21e 	bne	r2,zero,12c9c <___vfiprintf_internal_r+0x1044>
   12954:	00c00044 	movi	r3,1
   12958:	a005883a 	mov	r2,r20
   1295c:	ddc00015 	stw	r23,0(sp)
   12960:	dd000115 	stw	r20,4(sp)
   12964:	dd001c15 	stw	r20,112(sp)
   12968:	d8c01b15 	stw	r3,108(sp)
   1296c:	d811883a 	mov	r8,sp
   12970:	42000204 	addi	r8,r8,8
   12974:	8c40010c 	andi	r17,r17,4
   12978:	88004026 	beq	r17,zero,12a7c <___vfiprintf_internal_r+0xe24>
   1297c:	d9002517 	ldw	r4,148(sp)
   12980:	24e3c83a 	sub	r17,r4,r19
   12984:	04403d0e 	bge	zero,r17,12a7c <___vfiprintf_internal_r+0xe24>
   12988:	04000404 	movi	r16,16
   1298c:	8441a90e 	bge	r16,r17,13034 <___vfiprintf_internal_r+0x13dc>
   12990:	00c000b4 	movhi	r3,2
   12994:	18e39b04 	addi	r3,r3,-29076
   12998:	d9001b17 	ldw	r4,108(sp)
   1299c:	d8c02315 	stw	r3,140(sp)
   129a0:	050001c4 	movi	r20,7
   129a4:	dd402117 	ldw	r21,132(sp)
   129a8:	ddc02017 	ldw	r23,128(sp)
   129ac:	00000506 	br	129c4 <___vfiprintf_internal_r+0xd6c>
   129b0:	21400084 	addi	r5,r4,2
   129b4:	42000204 	addi	r8,r8,8
   129b8:	1809883a 	mov	r4,r3
   129bc:	8c7ffc04 	addi	r17,r17,-16
   129c0:	84400f0e 	bge	r16,r17,12a00 <___vfiprintf_internal_r+0xda8>
   129c4:	014000b4 	movhi	r5,2
   129c8:	10800404 	addi	r2,r2,16
   129cc:	20c00044 	addi	r3,r4,1
   129d0:	29639b04 	addi	r5,r5,-29076
   129d4:	41400015 	stw	r5,0(r8)
   129d8:	44000115 	stw	r16,4(r8)
   129dc:	d8801c15 	stw	r2,112(sp)
   129e0:	d8c01b15 	stw	r3,108(sp)
   129e4:	a0fff20e 	bge	r20,r3,129b0 <__alt_exception_stack_pointer+0xf80129b0>
   129e8:	1000141e 	bne	r2,zero,12a3c <___vfiprintf_internal_r+0xde4>
   129ec:	8c7ffc04 	addi	r17,r17,-16
   129f0:	01400044 	movi	r5,1
   129f4:	0009883a 	mov	r4,zero
   129f8:	d811883a 	mov	r8,sp
   129fc:	847ff116 	blt	r16,r17,129c4 <__alt_exception_stack_pointer+0xf80129c4>
   12a00:	d8c02317 	ldw	r3,140(sp)
   12a04:	1445883a 	add	r2,r2,r17
   12a08:	44400115 	stw	r17,4(r8)
   12a0c:	40c00015 	stw	r3,0(r8)
   12a10:	d8801c15 	stw	r2,112(sp)
   12a14:	d9401b15 	stw	r5,108(sp)
   12a18:	00c001c4 	movi	r3,7
   12a1c:	1940170e 	bge	r3,r5,12a7c <___vfiprintf_internal_r+0xe24>
   12a20:	1000101e 	bne	r2,zero,12a64 <___vfiprintf_internal_r+0xe0c>
   12a24:	d8802517 	ldw	r2,148(sp)
   12a28:	14c11616 	blt	r2,r19,12e84 <___vfiprintf_internal_r+0x122c>
   12a2c:	d9002417 	ldw	r4,144(sp)
   12a30:	2089883a 	add	r4,r4,r2
   12a34:	d9002415 	stw	r4,144(sp)
   12a38:	003e1806 	br	1229c <__alt_exception_stack_pointer+0xf801229c>
   12a3c:	d9801a04 	addi	r6,sp,104
   12a40:	b80b883a 	mov	r5,r23
   12a44:	a809883a 	mov	r4,r21
   12a48:	0011b440 	call	11b44 <__sprint_r.part.0>
   12a4c:	103fba1e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12a50:	d9001b17 	ldw	r4,108(sp)
   12a54:	d8801c17 	ldw	r2,112(sp)
   12a58:	d811883a 	mov	r8,sp
   12a5c:	21400044 	addi	r5,r4,1
   12a60:	003fd606 	br	129bc <__alt_exception_stack_pointer+0xf80129bc>
   12a64:	d9402017 	ldw	r5,128(sp)
   12a68:	d9002117 	ldw	r4,132(sp)
   12a6c:	d9801a04 	addi	r6,sp,104
   12a70:	0011b440 	call	11b44 <__sprint_r.part.0>
   12a74:	103fb01e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12a78:	d8801c17 	ldw	r2,112(sp)
   12a7c:	d8c02517 	ldw	r3,148(sp)
   12a80:	1cc0010e 	bge	r3,r19,12a88 <___vfiprintf_internal_r+0xe30>
   12a84:	9807883a 	mov	r3,r19
   12a88:	d9002417 	ldw	r4,144(sp)
   12a8c:	20c9883a 	add	r4,r4,r3
   12a90:	d9002415 	stw	r4,144(sp)
   12a94:	103e0126 	beq	r2,zero,1229c <__alt_exception_stack_pointer+0xf801229c>
   12a98:	d9402017 	ldw	r5,128(sp)
   12a9c:	d9002117 	ldw	r4,132(sp)
   12aa0:	d9801a04 	addi	r6,sp,104
   12aa4:	0011b440 	call	11b44 <__sprint_r.part.0>
   12aa8:	103dfc26 	beq	r2,zero,1229c <__alt_exception_stack_pointer+0xf801229c>
   12aac:	003fa206 	br	12938 <__alt_exception_stack_pointer+0xf8012938>
   12ab0:	d9402017 	ldw	r5,128(sp)
   12ab4:	d9002117 	ldw	r4,132(sp)
   12ab8:	d9801a04 	addi	r6,sp,104
   12abc:	d9c02b15 	stw	r7,172(sp)
   12ac0:	0011b440 	call	11b44 <__sprint_r.part.0>
   12ac4:	d9c02b17 	ldw	r7,172(sp)
   12ac8:	103f9b1e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12acc:	d9001b17 	ldw	r4,108(sp)
   12ad0:	d8801c17 	ldw	r2,112(sp)
   12ad4:	d811883a 	mov	r8,sp
   12ad8:	21800044 	addi	r6,r4,1
   12adc:	003dbf06 	br	121dc <__alt_exception_stack_pointer+0xf80121dc>
   12ae0:	1000d81e 	bne	r2,zero,12e44 <___vfiprintf_internal_r+0x11ec>
   12ae4:	d9001d87 	ldb	r4,118(sp)
   12ae8:	20000a26 	beq	r4,zero,12b14 <___vfiprintf_internal_r+0xebc>
   12aec:	00800044 	movi	r2,1
   12af0:	d9001d84 	addi	r4,sp,118
   12af4:	100b883a 	mov	r5,r2
   12af8:	d9000015 	stw	r4,0(sp)
   12afc:	d8800115 	stw	r2,4(sp)
   12b00:	d811883a 	mov	r8,sp
   12b04:	2809883a 	mov	r4,r5
   12b08:	42000204 	addi	r8,r8,8
   12b0c:	29400044 	addi	r5,r5,1
   12b10:	003d9506 	br	12168 <__alt_exception_stack_pointer+0xf8012168>
   12b14:	3800fd26 	beq	r7,zero,12f0c <___vfiprintf_internal_r+0x12b4>
   12b18:	00800084 	movi	r2,2
   12b1c:	d9001d04 	addi	r4,sp,116
   12b20:	d9000015 	stw	r4,0(sp)
   12b24:	d8800115 	stw	r2,4(sp)
   12b28:	01400044 	movi	r5,1
   12b2c:	d811883a 	mov	r8,sp
   12b30:	2809883a 	mov	r4,r5
   12b34:	42000204 	addi	r8,r8,8
   12b38:	29400044 	addi	r5,r5,1
   12b3c:	003f4606 	br	12858 <__alt_exception_stack_pointer+0xf8012858>
   12b40:	d8802517 	ldw	r2,148(sp)
   12b44:	14c0010e 	bge	r2,r19,12b4c <___vfiprintf_internal_r+0xef4>
   12b48:	9805883a 	mov	r2,r19
   12b4c:	d9402417 	ldw	r5,144(sp)
   12b50:	288b883a 	add	r5,r5,r2
   12b54:	d9402415 	stw	r5,144(sp)
   12b58:	003dd006 	br	1229c <__alt_exception_stack_pointer+0xf801229c>
   12b5c:	d8001d85 	stb	zero,118(sp)
   12b60:	80005d16 	blt	r16,zero,12cd8 <___vfiprintf_internal_r+0x1080>
   12b64:	00ffdfc4 	movi	r3,-129
   12b68:	9d04b03a 	or	r2,r19,r20
   12b6c:	88e2703a 	and	r17,r17,r3
   12b70:	103d3726 	beq	r2,zero,12050 <__alt_exception_stack_pointer+0xf8012050>
   12b74:	002b883a 	mov	r21,zero
   12b78:	d9002617 	ldw	r4,152(sp)
   12b7c:	ddc01a04 	addi	r23,sp,104
   12b80:	988003cc 	andi	r2,r19,15
   12b84:	a006973a 	slli	r3,r20,28
   12b88:	2085883a 	add	r2,r4,r2
   12b8c:	9826d13a 	srli	r19,r19,4
   12b90:	10800003 	ldbu	r2,0(r2)
   12b94:	a028d13a 	srli	r20,r20,4
   12b98:	bdffffc4 	addi	r23,r23,-1
   12b9c:	1ce6b03a 	or	r19,r3,r19
   12ba0:	b8800005 	stb	r2,0(r23)
   12ba4:	9d04b03a 	or	r2,r19,r20
   12ba8:	103ff51e 	bne	r2,zero,12b80 <__alt_exception_stack_pointer+0xf8012b80>
   12bac:	d8801e17 	ldw	r2,120(sp)
   12bb0:	15e9c83a 	sub	r20,r2,r23
   12bb4:	003d2b06 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   12bb8:	d9402017 	ldw	r5,128(sp)
   12bbc:	d9002117 	ldw	r4,132(sp)
   12bc0:	d9801a04 	addi	r6,sp,104
   12bc4:	0011b440 	call	11b44 <__sprint_r.part.0>
   12bc8:	103f5b1e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12bcc:	d8801c17 	ldw	r2,112(sp)
   12bd0:	d811883a 	mov	r8,sp
   12bd4:	003f6706 	br	12974 <__alt_exception_stack_pointer+0xf8012974>
   12bd8:	d9402017 	ldw	r5,128(sp)
   12bdc:	d9002117 	ldw	r4,132(sp)
   12be0:	d9801a04 	addi	r6,sp,104
   12be4:	0011b440 	call	11b44 <__sprint_r.part.0>
   12be8:	103f531e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12bec:	d811883a 	mov	r8,sp
   12bf0:	003cd906 	br	11f58 <__alt_exception_stack_pointer+0xf8011f58>
   12bf4:	10803fcc 	andi	r2,r2,255
   12bf8:	1080201c 	xori	r2,r2,128
   12bfc:	10bfe004 	addi	r2,r2,-128
   12c00:	00c00c04 	movi	r3,48
   12c04:	10ffe926 	beq	r2,r3,12bac <__alt_exception_stack_pointer+0xf8012bac>
   12c08:	b8ffffc5 	stb	r3,-1(r23)
   12c0c:	d8c01e17 	ldw	r3,120(sp)
   12c10:	b8bfffc4 	addi	r2,r23,-1
   12c14:	102f883a 	mov	r23,r2
   12c18:	18a9c83a 	sub	r20,r3,r2
   12c1c:	003d1106 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   12c20:	d9402017 	ldw	r5,128(sp)
   12c24:	d9002117 	ldw	r4,132(sp)
   12c28:	d9801a04 	addi	r6,sp,104
   12c2c:	d8c02a15 	stw	r3,168(sp)
   12c30:	d9c02b15 	stw	r7,172(sp)
   12c34:	0011b440 	call	11b44 <__sprint_r.part.0>
   12c38:	d8c02a17 	ldw	r3,168(sp)
   12c3c:	d9c02b17 	ldw	r7,172(sp)
   12c40:	103f3d1e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12c44:	d9001b17 	ldw	r4,108(sp)
   12c48:	d8801c17 	ldw	r2,112(sp)
   12c4c:	d811883a 	mov	r8,sp
   12c50:	21400044 	addi	r5,r4,1
   12c54:	003d4406 	br	12168 <__alt_exception_stack_pointer+0xf8012168>
   12c58:	d9402017 	ldw	r5,128(sp)
   12c5c:	d9002117 	ldw	r4,132(sp)
   12c60:	d9801a04 	addi	r6,sp,104
   12c64:	d8c02a15 	stw	r3,168(sp)
   12c68:	0011b440 	call	11b44 <__sprint_r.part.0>
   12c6c:	d8c02a17 	ldw	r3,168(sp)
   12c70:	103f311e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12c74:	d9001b17 	ldw	r4,108(sp)
   12c78:	d8801c17 	ldw	r2,112(sp)
   12c7c:	d811883a 	mov	r8,sp
   12c80:	21400044 	addi	r5,r4,1
   12c84:	003ef406 	br	12858 <__alt_exception_stack_pointer+0xf8012858>
   12c88:	1000bd1e 	bne	r2,zero,12f80 <___vfiprintf_internal_r+0x1328>
   12c8c:	01400044 	movi	r5,1
   12c90:	0009883a 	mov	r4,zero
   12c94:	d811883a 	mov	r8,sp
   12c98:	003ef106 	br	12860 <__alt_exception_stack_pointer+0xf8012860>
   12c9c:	d9402017 	ldw	r5,128(sp)
   12ca0:	d9002117 	ldw	r4,132(sp)
   12ca4:	d9801a04 	addi	r6,sp,104
   12ca8:	0011b440 	call	11b44 <__sprint_r.part.0>
   12cac:	103f221e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12cb0:	d9401b17 	ldw	r5,108(sp)
   12cb4:	d8801c17 	ldw	r2,112(sp)
   12cb8:	d811883a 	mov	r8,sp
   12cbc:	29400044 	addi	r5,r5,1
   12cc0:	003d6206 	br	1224c <__alt_exception_stack_pointer+0xf801224c>
   12cc4:	014000b4 	movhi	r5,2
   12cc8:	29633704 	addi	r5,r5,-29476
   12ccc:	d9402615 	stw	r5,152(sp)
   12cd0:	d8c02215 	stw	r3,136(sp)
   12cd4:	1023883a 	mov	r17,r2
   12cd8:	9d04b03a 	or	r2,r19,r20
   12cdc:	103fa51e 	bne	r2,zero,12b74 <__alt_exception_stack_pointer+0xf8012b74>
   12ce0:	002b883a 	mov	r21,zero
   12ce4:	00800084 	movi	r2,2
   12ce8:	003e4a06 	br	12614 <__alt_exception_stack_pointer+0xf8012614>
   12cec:	014000b4 	movhi	r5,2
   12cf0:	29633704 	addi	r5,r5,-29476
   12cf4:	002b883a 	mov	r21,zero
   12cf8:	d9402615 	stw	r5,152(sp)
   12cfc:	003f9e06 	br	12b78 <__alt_exception_stack_pointer+0xf8012b78>
   12d00:	d9402217 	ldw	r5,136(sp)
   12d04:	d8001d85 	stb	zero,118(sp)
   12d08:	0029883a 	mov	r20,zero
   12d0c:	28800104 	addi	r2,r5,4
   12d10:	2cc00017 	ldw	r19,0(r5)
   12d14:	803e3a16 	blt	r16,zero,12600 <__alt_exception_stack_pointer+0xf8012600>
   12d18:	00ffdfc4 	movi	r3,-129
   12d1c:	d8802215 	stw	r2,136(sp)
   12d20:	88e2703a 	and	r17,r17,r3
   12d24:	002b883a 	mov	r21,zero
   12d28:	983e9b26 	beq	r19,zero,12798 <__alt_exception_stack_pointer+0xf8012798>
   12d2c:	00800244 	movi	r2,9
   12d30:	14fdc936 	bltu	r2,r19,12458 <__alt_exception_stack_pointer+0xf8012458>
   12d34:	003e9a06 	br	127a0 <__alt_exception_stack_pointer+0xf80127a0>
   12d38:	00800c04 	movi	r2,48
   12d3c:	d8c01d45 	stb	r3,117(sp)
   12d40:	d8801d05 	stb	r2,116(sp)
   12d44:	d8001d85 	stb	zero,118(sp)
   12d48:	88c00094 	ori	r3,r17,2
   12d4c:	80009c16 	blt	r16,zero,12fc0 <___vfiprintf_internal_r+0x1368>
   12d50:	00bfdfc4 	movi	r2,-129
   12d54:	88a2703a 	and	r17,r17,r2
   12d58:	8c400094 	ori	r17,r17,2
   12d5c:	002b883a 	mov	r21,zero
   12d60:	003f8506 	br	12b78 <__alt_exception_stack_pointer+0xf8012b78>
   12d64:	b029883a 	mov	r20,r22
   12d68:	003c0b06 	br	11d98 <__alt_exception_stack_pointer+0xf8011d98>
   12d6c:	04e7c83a 	sub	r19,zero,r19
   12d70:	05400b44 	movi	r21,45
   12d74:	9804c03a 	cmpne	r2,r19,zero
   12d78:	0529c83a 	sub	r20,zero,r20
   12d7c:	dd401d85 	stb	r21,118(sp)
   12d80:	a0a9c83a 	sub	r20,r20,r2
   12d84:	80009716 	blt	r16,zero,12fe4 <___vfiprintf_internal_r+0x138c>
   12d88:	00bfdfc4 	movi	r2,-129
   12d8c:	88a2703a 	and	r17,r17,r2
   12d90:	003db006 	br	12454 <__alt_exception_stack_pointer+0xf8012454>
   12d94:	b0c00007 	ldb	r3,0(r22)
   12d98:	003c0c06 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   12d9c:	8880100c 	andi	r2,r17,64
   12da0:	d8001d85 	stb	zero,118(sp)
   12da4:	1000461e 	bne	r2,zero,12ec0 <___vfiprintf_internal_r+0x1268>
   12da8:	d9002217 	ldw	r4,136(sp)
   12dac:	0029883a 	mov	r20,zero
   12db0:	20800104 	addi	r2,r4,4
   12db4:	24c00017 	ldw	r19,0(r4)
   12db8:	803df80e 	bge	r16,zero,1259c <__alt_exception_stack_pointer+0xf801259c>
   12dbc:	9d06b03a 	or	r3,r19,r20
   12dc0:	d8802215 	stw	r2,136(sp)
   12dc4:	183d5e1e 	bne	r3,zero,12340 <__alt_exception_stack_pointer+0xf8012340>
   12dc8:	002b883a 	mov	r21,zero
   12dcc:	0005883a 	mov	r2,zero
   12dd0:	003e1006 	br	12614 <__alt_exception_stack_pointer+0xf8012614>
   12dd4:	8880040c 	andi	r2,r17,16
   12dd8:	1000321e 	bne	r2,zero,12ea4 <___vfiprintf_internal_r+0x124c>
   12ddc:	8c40100c 	andi	r17,r17,64
   12de0:	88008d26 	beq	r17,zero,13018 <___vfiprintf_internal_r+0x13c0>
   12de4:	d9402217 	ldw	r5,136(sp)
   12de8:	d8c02417 	ldw	r3,144(sp)
   12dec:	28800017 	ldw	r2,0(r5)
   12df0:	29400104 	addi	r5,r5,4
   12df4:	d9402215 	stw	r5,136(sp)
   12df8:	10c0000d 	sth	r3,0(r2)
   12dfc:	003bca06 	br	11d28 <__alt_exception_stack_pointer+0xf8011d28>
   12e00:	8880100c 	andi	r2,r17,64
   12e04:	10003a26 	beq	r2,zero,12ef0 <___vfiprintf_internal_r+0x1298>
   12e08:	d8802217 	ldw	r2,136(sp)
   12e0c:	14c0000f 	ldh	r19,0(r2)
   12e10:	10800104 	addi	r2,r2,4
   12e14:	d8802215 	stw	r2,136(sp)
   12e18:	9829d7fa 	srai	r20,r19,31
   12e1c:	a005883a 	mov	r2,r20
   12e20:	003d8506 	br	12438 <__alt_exception_stack_pointer+0xf8012438>
   12e24:	8880100c 	andi	r2,r17,64
   12e28:	10002b26 	beq	r2,zero,12ed8 <___vfiprintf_internal_r+0x1280>
   12e2c:	d8802217 	ldw	r2,136(sp)
   12e30:	0029883a 	mov	r20,zero
   12e34:	14c0000b 	ldhu	r19,0(r2)
   12e38:	10800104 	addi	r2,r2,4
   12e3c:	d8802215 	stw	r2,136(sp)
   12e40:	003d5d06 	br	123b8 <__alt_exception_stack_pointer+0xf80123b8>
   12e44:	d9402017 	ldw	r5,128(sp)
   12e48:	d9002117 	ldw	r4,132(sp)
   12e4c:	d9801a04 	addi	r6,sp,104
   12e50:	d8c02a15 	stw	r3,168(sp)
   12e54:	d9c02b15 	stw	r7,172(sp)
   12e58:	0011b440 	call	11b44 <__sprint_r.part.0>
   12e5c:	d8c02a17 	ldw	r3,168(sp)
   12e60:	d9c02b17 	ldw	r7,172(sp)
   12e64:	103eb41e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12e68:	d9001b17 	ldw	r4,108(sp)
   12e6c:	d8801c17 	ldw	r2,112(sp)
   12e70:	d811883a 	mov	r8,sp
   12e74:	21400044 	addi	r5,r4,1
   12e78:	003e6706 	br	12818 <__alt_exception_stack_pointer+0xf8012818>
   12e7c:	00bfffc4 	movi	r2,-1
   12e80:	003c4a06 	br	11fac <__alt_exception_stack_pointer+0xf8011fac>
   12e84:	9805883a 	mov	r2,r19
   12e88:	003ee806 	br	12a2c <__alt_exception_stack_pointer+0xf8012a2c>
   12e8c:	d8c02217 	ldw	r3,136(sp)
   12e90:	0029883a 	mov	r20,zero
   12e94:	18800104 	addi	r2,r3,4
   12e98:	1cc0000b 	ldhu	r19,0(r3)
   12e9c:	803f9e0e 	bge	r16,zero,12d18 <__alt_exception_stack_pointer+0xf8012d18>
   12ea0:	003dd706 	br	12600 <__alt_exception_stack_pointer+0xf8012600>
   12ea4:	d8c02217 	ldw	r3,136(sp)
   12ea8:	d9002417 	ldw	r4,144(sp)
   12eac:	18800017 	ldw	r2,0(r3)
   12eb0:	18c00104 	addi	r3,r3,4
   12eb4:	d8c02215 	stw	r3,136(sp)
   12eb8:	11000015 	stw	r4,0(r2)
   12ebc:	003b9a06 	br	11d28 <__alt_exception_stack_pointer+0xf8011d28>
   12ec0:	d8c02217 	ldw	r3,136(sp)
   12ec4:	0029883a 	mov	r20,zero
   12ec8:	18800104 	addi	r2,r3,4
   12ecc:	1cc0000b 	ldhu	r19,0(r3)
   12ed0:	803db20e 	bge	r16,zero,1259c <__alt_exception_stack_pointer+0xf801259c>
   12ed4:	003fb906 	br	12dbc <__alt_exception_stack_pointer+0xf8012dbc>
   12ed8:	d9002217 	ldw	r4,136(sp)
   12edc:	0029883a 	mov	r20,zero
   12ee0:	24c00017 	ldw	r19,0(r4)
   12ee4:	21000104 	addi	r4,r4,4
   12ee8:	d9002215 	stw	r4,136(sp)
   12eec:	003d3206 	br	123b8 <__alt_exception_stack_pointer+0xf80123b8>
   12ef0:	d8c02217 	ldw	r3,136(sp)
   12ef4:	1cc00017 	ldw	r19,0(r3)
   12ef8:	18c00104 	addi	r3,r3,4
   12efc:	d8c02215 	stw	r3,136(sp)
   12f00:	9829d7fa 	srai	r20,r19,31
   12f04:	a005883a 	mov	r2,r20
   12f08:	003d4b06 	br	12438 <__alt_exception_stack_pointer+0xf8012438>
   12f0c:	0009883a 	mov	r4,zero
   12f10:	01400044 	movi	r5,1
   12f14:	d811883a 	mov	r8,sp
   12f18:	003e4f06 	br	12858 <__alt_exception_stack_pointer+0xf8012858>
   12f1c:	d8c02215 	stw	r3,136(sp)
   12f20:	002b883a 	mov	r21,zero
   12f24:	003db806 	br	12608 <__alt_exception_stack_pointer+0xf8012608>
   12f28:	d811883a 	mov	r8,sp
   12f2c:	003e9606 	br	12988 <__alt_exception_stack_pointer+0xf8012988>
   12f30:	010000b4 	movhi	r4,2
   12f34:	21239704 	addi	r4,r4,-29092
   12f38:	d9002315 	stw	r4,140(sp)
   12f3c:	003e6306 	br	128cc <__alt_exception_stack_pointer+0xf80128cc>
   12f40:	b0c00043 	ldbu	r3,1(r22)
   12f44:	8c400814 	ori	r17,r17,32
   12f48:	b5800044 	addi	r22,r22,1
   12f4c:	18c03fcc 	andi	r3,r3,255
   12f50:	18c0201c 	xori	r3,r3,128
   12f54:	18ffe004 	addi	r3,r3,-128
   12f58:	003b9c06 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   12f5c:	b809883a 	mov	r4,r23
   12f60:	da002a15 	stw	r8,168(sp)
   12f64:	000a0580 	call	a058 <strlen>
   12f68:	1029883a 	mov	r20,r2
   12f6c:	dd401d83 	ldbu	r21,118(sp)
   12f70:	df002215 	stw	fp,136(sp)
   12f74:	0021883a 	mov	r16,zero
   12f78:	da002a17 	ldw	r8,168(sp)
   12f7c:	003c3906 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   12f80:	d9402017 	ldw	r5,128(sp)
   12f84:	d9002117 	ldw	r4,132(sp)
   12f88:	d9801a04 	addi	r6,sp,104
   12f8c:	0011b440 	call	11b44 <__sprint_r.part.0>
   12f90:	103e691e 	bne	r2,zero,12938 <__alt_exception_stack_pointer+0xf8012938>
   12f94:	d9001b17 	ldw	r4,108(sp)
   12f98:	d8801c17 	ldw	r2,112(sp)
   12f9c:	d811883a 	mov	r8,sp
   12fa0:	21400044 	addi	r5,r4,1
   12fa4:	003e2e06 	br	12860 <__alt_exception_stack_pointer+0xf8012860>
   12fa8:	010000b4 	movhi	r4,2
   12fac:	21239b04 	addi	r4,r4,-29076
   12fb0:	d9002315 	stw	r4,140(sp)
   12fb4:	d9001b17 	ldw	r4,108(sp)
   12fb8:	21000044 	addi	r4,r4,1
   12fbc:	003c5e06 	br	12138 <__alt_exception_stack_pointer+0xf8012138>
   12fc0:	002b883a 	mov	r21,zero
   12fc4:	00800084 	movi	r2,2
   12fc8:	10803fcc 	andi	r2,r2,255
   12fcc:	01000044 	movi	r4,1
   12fd0:	11002b26 	beq	r2,r4,13080 <___vfiprintf_internal_r+0x1428>
   12fd4:	01000084 	movi	r4,2
   12fd8:	11002b1e 	bne	r2,r4,13088 <___vfiprintf_internal_r+0x1430>
   12fdc:	1823883a 	mov	r17,r3
   12fe0:	003ee506 	br	12b78 <__alt_exception_stack_pointer+0xf8012b78>
   12fe4:	8807883a 	mov	r3,r17
   12fe8:	00800044 	movi	r2,1
   12fec:	003ff606 	br	12fc8 <__alt_exception_stack_pointer+0xf8012fc8>
   12ff0:	00800184 	movi	r2,6
   12ff4:	1400012e 	bgeu	r2,r16,12ffc <___vfiprintf_internal_r+0x13a4>
   12ff8:	1021883a 	mov	r16,r2
   12ffc:	8029883a 	mov	r20,r16
   13000:	8027883a 	mov	r19,r16
   13004:	80002216 	blt	r16,zero,13090 <___vfiprintf_internal_r+0x1438>
   13008:	05c000b4 	movhi	r23,2
   1300c:	df002215 	stw	fp,136(sp)
   13010:	bde33c04 	addi	r23,r23,-29456
   13014:	003cfb06 	br	12404 <__alt_exception_stack_pointer+0xf8012404>
   13018:	d9002217 	ldw	r4,136(sp)
   1301c:	d9402417 	ldw	r5,144(sp)
   13020:	20800017 	ldw	r2,0(r4)
   13024:	21000104 	addi	r4,r4,4
   13028:	d9002215 	stw	r4,136(sp)
   1302c:	11400015 	stw	r5,0(r2)
   13030:	003b3d06 	br	11d28 <__alt_exception_stack_pointer+0xf8011d28>
   13034:	014000b4 	movhi	r5,2
   13038:	29639b04 	addi	r5,r5,-29076
   1303c:	d9402315 	stw	r5,140(sp)
   13040:	d9401b17 	ldw	r5,108(sp)
   13044:	29400044 	addi	r5,r5,1
   13048:	003e6d06 	br	12a00 <__alt_exception_stack_pointer+0xf8012a00>
   1304c:	8029883a 	mov	r20,r16
   13050:	dd401d83 	ldbu	r21,118(sp)
   13054:	df002215 	stw	fp,136(sp)
   13058:	0021883a 	mov	r16,zero
   1305c:	003c0106 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   13060:	00c000b4 	movhi	r3,2
   13064:	18e39704 	addi	r3,r3,-29092
   13068:	d8c02315 	stw	r3,140(sp)
   1306c:	280d883a 	mov	r6,r5
   13070:	003c6906 	br	12218 <__alt_exception_stack_pointer+0xf8012218>
   13074:	802d883a 	mov	r22,r16
   13078:	0021883a 	mov	r16,zero
   1307c:	003b5406 	br	11dd0 <__alt_exception_stack_pointer+0xf8011dd0>
   13080:	1823883a 	mov	r17,r3
   13084:	003cf306 	br	12454 <__alt_exception_stack_pointer+0xf8012454>
   13088:	1823883a 	mov	r17,r3
   1308c:	003cad06 	br	12344 <__alt_exception_stack_pointer+0xf8012344>
   13090:	0027883a 	mov	r19,zero
   13094:	003fdc06 	br	13008 <__alt_exception_stack_pointer+0xf8013008>
   13098:	d9402217 	ldw	r5,136(sp)
   1309c:	8005883a 	mov	r2,r16
   130a0:	b0c00043 	ldbu	r3,1(r22)
   130a4:	2c000017 	ldw	r16,0(r5)
   130a8:	29000104 	addi	r4,r5,4
   130ac:	d9002215 	stw	r4,136(sp)
   130b0:	102d883a 	mov	r22,r2
   130b4:	803fa50e 	bge	r16,zero,12f4c <__alt_exception_stack_pointer+0xf8012f4c>
   130b8:	18c03fcc 	andi	r3,r3,255
   130bc:	18c0201c 	xori	r3,r3,128
   130c0:	043fffc4 	movi	r16,-1
   130c4:	18ffe004 	addi	r3,r3,-128
   130c8:	003b4006 	br	11dcc <__alt_exception_stack_pointer+0xf8011dcc>
   130cc:	d9402303 	ldbu	r5,140(sp)
   130d0:	d9401d85 	stb	r5,118(sp)
   130d4:	003cae06 	br	12390 <__alt_exception_stack_pointer+0xf8012390>
   130d8:	d8c02303 	ldbu	r3,140(sp)
   130dc:	d8c01d85 	stb	r3,118(sp)
   130e0:	003d1406 	br	12534 <__alt_exception_stack_pointer+0xf8012534>
   130e4:	d8c02303 	ldbu	r3,140(sp)
   130e8:	d8c01d85 	stb	r3,118(sp)
   130ec:	003cca06 	br	12418 <__alt_exception_stack_pointer+0xf8012418>
   130f0:	8880004c 	andi	r2,r17,1
   130f4:	002b883a 	mov	r21,zero
   130f8:	10000526 	beq	r2,zero,13110 <___vfiprintf_internal_r+0x14b8>
   130fc:	00800c04 	movi	r2,48
   13100:	d88019c5 	stb	r2,103(sp)
   13104:	dd002817 	ldw	r20,160(sp)
   13108:	ddc019c4 	addi	r23,sp,103
   1310c:	003bd506 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   13110:	0029883a 	mov	r20,zero
   13114:	ddc01a04 	addi	r23,sp,104
   13118:	003bd206 	br	12064 <__alt_exception_stack_pointer+0xf8012064>
   1311c:	d9002303 	ldbu	r4,140(sp)
   13120:	d9001d85 	stb	r4,118(sp)
   13124:	003da606 	br	127c0 <__alt_exception_stack_pointer+0xf80127c0>
   13128:	d8c02303 	ldbu	r3,140(sp)
   1312c:	d8c01d85 	stb	r3,118(sp)
   13130:	003c7606 	br	1230c <__alt_exception_stack_pointer+0xf801230c>
   13134:	d8c02303 	ldbu	r3,140(sp)
   13138:	d8c01d85 	stb	r3,118(sp)
   1313c:	003c6506 	br	122d4 <__alt_exception_stack_pointer+0xf80122d4>
   13140:	d9002303 	ldbu	r4,140(sp)
   13144:	d9001d85 	stb	r4,118(sp)
   13148:	003d3d06 	br	12640 <__alt_exception_stack_pointer+0xf8012640>
   1314c:	d8c02303 	ldbu	r3,140(sp)
   13150:	d8c01d85 	stb	r3,118(sp)
   13154:	003d1d06 	br	125cc <__alt_exception_stack_pointer+0xf80125cc>
   13158:	d8c02303 	ldbu	r3,140(sp)
   1315c:	d8c01d85 	stb	r3,118(sp)
   13160:	003d0306 	br	12570 <__alt_exception_stack_pointer+0xf8012570>

00013164 <__vfiprintf_internal>:
   13164:	008000b4 	movhi	r2,2
   13168:	10ac8004 	addi	r2,r2,-19968
   1316c:	300f883a 	mov	r7,r6
   13170:	280d883a 	mov	r6,r5
   13174:	200b883a 	mov	r5,r4
   13178:	11000017 	ldw	r4,0(r2)
   1317c:	0011c581 	jmpi	11c58 <___vfiprintf_internal_r>

00013180 <__sbprintf>:
   13180:	2880030b 	ldhu	r2,12(r5)
   13184:	2ac01917 	ldw	r11,100(r5)
   13188:	2a80038b 	ldhu	r10,14(r5)
   1318c:	2a400717 	ldw	r9,28(r5)
   13190:	2a000917 	ldw	r8,36(r5)
   13194:	defee204 	addi	sp,sp,-1144
   13198:	00c10004 	movi	r3,1024
   1319c:	dc011a15 	stw	r16,1128(sp)
   131a0:	10bfff4c 	andi	r2,r2,65533
   131a4:	2821883a 	mov	r16,r5
   131a8:	d8cb883a 	add	r5,sp,r3
   131ac:	dc811c15 	stw	r18,1136(sp)
   131b0:	dc411b15 	stw	r17,1132(sp)
   131b4:	dfc11d15 	stw	ra,1140(sp)
   131b8:	2025883a 	mov	r18,r4
   131bc:	d881030d 	sth	r2,1036(sp)
   131c0:	dac11915 	stw	r11,1124(sp)
   131c4:	da81038d 	sth	r10,1038(sp)
   131c8:	da410715 	stw	r9,1052(sp)
   131cc:	da010915 	stw	r8,1060(sp)
   131d0:	dec10015 	stw	sp,1024(sp)
   131d4:	dec10415 	stw	sp,1040(sp)
   131d8:	d8c10215 	stw	r3,1032(sp)
   131dc:	d8c10515 	stw	r3,1044(sp)
   131e0:	d8010615 	stw	zero,1048(sp)
   131e4:	0011c580 	call	11c58 <___vfiprintf_internal_r>
   131e8:	1023883a 	mov	r17,r2
   131ec:	10000416 	blt	r2,zero,13200 <__sbprintf+0x80>
   131f0:	d9410004 	addi	r5,sp,1024
   131f4:	9009883a 	mov	r4,r18
   131f8:	000ec040 	call	ec04 <_fflush_r>
   131fc:	10000d1e 	bne	r2,zero,13234 <__sbprintf+0xb4>
   13200:	d881030b 	ldhu	r2,1036(sp)
   13204:	1080100c 	andi	r2,r2,64
   13208:	10000326 	beq	r2,zero,13218 <__sbprintf+0x98>
   1320c:	8080030b 	ldhu	r2,12(r16)
   13210:	10801014 	ori	r2,r2,64
   13214:	8080030d 	sth	r2,12(r16)
   13218:	8805883a 	mov	r2,r17
   1321c:	dfc11d17 	ldw	ra,1140(sp)
   13220:	dc811c17 	ldw	r18,1136(sp)
   13224:	dc411b17 	ldw	r17,1132(sp)
   13228:	dc011a17 	ldw	r16,1128(sp)
   1322c:	dec11e04 	addi	sp,sp,1144
   13230:	f800283a 	ret
   13234:	047fffc4 	movi	r17,-1
   13238:	003ff106 	br	13200 <__alt_exception_stack_pointer+0xf8013200>

0001323c <_write_r>:
   1323c:	defffd04 	addi	sp,sp,-12
   13240:	2805883a 	mov	r2,r5
   13244:	dc000015 	stw	r16,0(sp)
   13248:	040000b4 	movhi	r16,2
   1324c:	dc400115 	stw	r17,4(sp)
   13250:	300b883a 	mov	r5,r6
   13254:	84357604 	addi	r16,r16,-10792
   13258:	2023883a 	mov	r17,r4
   1325c:	380d883a 	mov	r6,r7
   13260:	1009883a 	mov	r4,r2
   13264:	dfc00215 	stw	ra,8(sp)
   13268:	80000015 	stw	zero,0(r16)
   1326c:	00152700 	call	15270 <write>
   13270:	00ffffc4 	movi	r3,-1
   13274:	10c00526 	beq	r2,r3,1328c <_write_r+0x50>
   13278:	dfc00217 	ldw	ra,8(sp)
   1327c:	dc400117 	ldw	r17,4(sp)
   13280:	dc000017 	ldw	r16,0(sp)
   13284:	dec00304 	addi	sp,sp,12
   13288:	f800283a 	ret
   1328c:	80c00017 	ldw	r3,0(r16)
   13290:	183ff926 	beq	r3,zero,13278 <__alt_exception_stack_pointer+0xf8013278>
   13294:	88c00015 	stw	r3,0(r17)
   13298:	003ff706 	br	13278 <__alt_exception_stack_pointer+0xf8013278>

0001329c <_close_r>:
   1329c:	defffd04 	addi	sp,sp,-12
   132a0:	dc000015 	stw	r16,0(sp)
   132a4:	040000b4 	movhi	r16,2
   132a8:	dc400115 	stw	r17,4(sp)
   132ac:	84357604 	addi	r16,r16,-10792
   132b0:	2023883a 	mov	r17,r4
   132b4:	2809883a 	mov	r4,r5
   132b8:	dfc00215 	stw	ra,8(sp)
   132bc:	80000015 	stw	zero,0(r16)
   132c0:	00147840 	call	14784 <close>
   132c4:	00ffffc4 	movi	r3,-1
   132c8:	10c00526 	beq	r2,r3,132e0 <_close_r+0x44>
   132cc:	dfc00217 	ldw	ra,8(sp)
   132d0:	dc400117 	ldw	r17,4(sp)
   132d4:	dc000017 	ldw	r16,0(sp)
   132d8:	dec00304 	addi	sp,sp,12
   132dc:	f800283a 	ret
   132e0:	80c00017 	ldw	r3,0(r16)
   132e4:	183ff926 	beq	r3,zero,132cc <__alt_exception_stack_pointer+0xf80132cc>
   132e8:	88c00015 	stw	r3,0(r17)
   132ec:	003ff706 	br	132cc <__alt_exception_stack_pointer+0xf80132cc>

000132f0 <_calloc_r>:
   132f0:	defffe04 	addi	sp,sp,-8
   132f4:	2805883a 	mov	r2,r5
   132f8:	dc000015 	stw	r16,0(sp)
   132fc:	300b883a 	mov	r5,r6
   13300:	2021883a 	mov	r16,r4
   13304:	1009883a 	mov	r4,r2
   13308:	dfc00115 	stw	ra,4(sp)
   1330c:	00068e80 	call	68e8 <__mulsi3>
   13310:	100b883a 	mov	r5,r2
   13314:	8009883a 	mov	r4,r16
   13318:	00096b80 	call	96b8 <_malloc_r>
   1331c:	10002926 	beq	r2,zero,133c4 <_calloc_r+0xd4>
   13320:	11bfff17 	ldw	r6,-4(r2)
   13324:	1021883a 	mov	r16,r2
   13328:	00bfff04 	movi	r2,-4
   1332c:	308c703a 	and	r6,r6,r2
   13330:	00c00904 	movi	r3,36
   13334:	308d883a 	add	r6,r6,r2
   13338:	19801636 	bltu	r3,r6,13394 <_calloc_r+0xa4>
   1333c:	008004c4 	movi	r2,19
   13340:	11800b2e 	bgeu	r2,r6,13370 <_calloc_r+0x80>
   13344:	80000015 	stw	zero,0(r16)
   13348:	80000115 	stw	zero,4(r16)
   1334c:	008006c4 	movi	r2,27
   13350:	11801a2e 	bgeu	r2,r6,133bc <_calloc_r+0xcc>
   13354:	80000215 	stw	zero,8(r16)
   13358:	80000315 	stw	zero,12(r16)
   1335c:	30c0151e 	bne	r6,r3,133b4 <_calloc_r+0xc4>
   13360:	80000415 	stw	zero,16(r16)
   13364:	80800604 	addi	r2,r16,24
   13368:	80000515 	stw	zero,20(r16)
   1336c:	00000106 	br	13374 <_calloc_r+0x84>
   13370:	8005883a 	mov	r2,r16
   13374:	10000015 	stw	zero,0(r2)
   13378:	10000115 	stw	zero,4(r2)
   1337c:	10000215 	stw	zero,8(r2)
   13380:	8005883a 	mov	r2,r16
   13384:	dfc00117 	ldw	ra,4(sp)
   13388:	dc000017 	ldw	r16,0(sp)
   1338c:	dec00204 	addi	sp,sp,8
   13390:	f800283a 	ret
   13394:	000b883a 	mov	r5,zero
   13398:	8009883a 	mov	r4,r16
   1339c:	00100e40 	call	100e4 <memset>
   133a0:	8005883a 	mov	r2,r16
   133a4:	dfc00117 	ldw	ra,4(sp)
   133a8:	dc000017 	ldw	r16,0(sp)
   133ac:	dec00204 	addi	sp,sp,8
   133b0:	f800283a 	ret
   133b4:	80800404 	addi	r2,r16,16
   133b8:	003fee06 	br	13374 <__alt_exception_stack_pointer+0xf8013374>
   133bc:	80800204 	addi	r2,r16,8
   133c0:	003fec06 	br	13374 <__alt_exception_stack_pointer+0xf8013374>
   133c4:	0005883a 	mov	r2,zero
   133c8:	003fee06 	br	13384 <__alt_exception_stack_pointer+0xf8013384>

000133cc <_fclose_r>:
   133cc:	28003926 	beq	r5,zero,134b4 <_fclose_r+0xe8>
   133d0:	defffc04 	addi	sp,sp,-16
   133d4:	dc400115 	stw	r17,4(sp)
   133d8:	dc000015 	stw	r16,0(sp)
   133dc:	dfc00315 	stw	ra,12(sp)
   133e0:	dc800215 	stw	r18,8(sp)
   133e4:	2023883a 	mov	r17,r4
   133e8:	2821883a 	mov	r16,r5
   133ec:	20000226 	beq	r4,zero,133f8 <_fclose_r+0x2c>
   133f0:	20800e17 	ldw	r2,56(r4)
   133f4:	10002726 	beq	r2,zero,13494 <_fclose_r+0xc8>
   133f8:	8080030f 	ldh	r2,12(r16)
   133fc:	1000071e 	bne	r2,zero,1341c <_fclose_r+0x50>
   13400:	0005883a 	mov	r2,zero
   13404:	dfc00317 	ldw	ra,12(sp)
   13408:	dc800217 	ldw	r18,8(sp)
   1340c:	dc400117 	ldw	r17,4(sp)
   13410:	dc000017 	ldw	r16,0(sp)
   13414:	dec00404 	addi	sp,sp,16
   13418:	f800283a 	ret
   1341c:	800b883a 	mov	r5,r16
   13420:	8809883a 	mov	r4,r17
   13424:	000e9e80 	call	e9e8 <__sflush_r>
   13428:	1025883a 	mov	r18,r2
   1342c:	80800b17 	ldw	r2,44(r16)
   13430:	10000426 	beq	r2,zero,13444 <_fclose_r+0x78>
   13434:	81400717 	ldw	r5,28(r16)
   13438:	8809883a 	mov	r4,r17
   1343c:	103ee83a 	callr	r2
   13440:	10001616 	blt	r2,zero,1349c <_fclose_r+0xd0>
   13444:	8080030b 	ldhu	r2,12(r16)
   13448:	1080200c 	andi	r2,r2,128
   1344c:	1000151e 	bne	r2,zero,134a4 <_fclose_r+0xd8>
   13450:	81400c17 	ldw	r5,48(r16)
   13454:	28000526 	beq	r5,zero,1346c <_fclose_r+0xa0>
   13458:	80801004 	addi	r2,r16,64
   1345c:	28800226 	beq	r5,r2,13468 <_fclose_r+0x9c>
   13460:	8809883a 	mov	r4,r17
   13464:	000f1640 	call	f164 <_free_r>
   13468:	80000c15 	stw	zero,48(r16)
   1346c:	81401117 	ldw	r5,68(r16)
   13470:	28000326 	beq	r5,zero,13480 <_fclose_r+0xb4>
   13474:	8809883a 	mov	r4,r17
   13478:	000f1640 	call	f164 <_free_r>
   1347c:	80001115 	stw	zero,68(r16)
   13480:	000f0000 	call	f000 <__sfp_lock_acquire>
   13484:	8000030d 	sth	zero,12(r16)
   13488:	000f0040 	call	f004 <__sfp_lock_release>
   1348c:	9005883a 	mov	r2,r18
   13490:	003fdc06 	br	13404 <__alt_exception_stack_pointer+0xf8013404>
   13494:	000eff00 	call	eff0 <__sinit>
   13498:	003fd706 	br	133f8 <__alt_exception_stack_pointer+0xf80133f8>
   1349c:	04bfffc4 	movi	r18,-1
   134a0:	003fe806 	br	13444 <__alt_exception_stack_pointer+0xf8013444>
   134a4:	81400417 	ldw	r5,16(r16)
   134a8:	8809883a 	mov	r4,r17
   134ac:	000f1640 	call	f164 <_free_r>
   134b0:	003fe706 	br	13450 <__alt_exception_stack_pointer+0xf8013450>
   134b4:	0005883a 	mov	r2,zero
   134b8:	f800283a 	ret

000134bc <fclose>:
   134bc:	008000b4 	movhi	r2,2
   134c0:	10ac8004 	addi	r2,r2,-19968
   134c4:	200b883a 	mov	r5,r4
   134c8:	11000017 	ldw	r4,0(r2)
   134cc:	00133cc1 	jmpi	133cc <_fclose_r>

000134d0 <__fputwc>:
   134d0:	defff804 	addi	sp,sp,-32
   134d4:	dcc00415 	stw	r19,16(sp)
   134d8:	dc800315 	stw	r18,12(sp)
   134dc:	dc000115 	stw	r16,4(sp)
   134e0:	dfc00715 	stw	ra,28(sp)
   134e4:	dd400615 	stw	r21,24(sp)
   134e8:	dd000515 	stw	r20,20(sp)
   134ec:	dc400215 	stw	r17,8(sp)
   134f0:	2027883a 	mov	r19,r4
   134f4:	2825883a 	mov	r18,r5
   134f8:	3021883a 	mov	r16,r6
   134fc:	000fb4c0 	call	fb4c <__locale_mb_cur_max>
   13500:	00c00044 	movi	r3,1
   13504:	10c03e26 	beq	r2,r3,13600 <__fputwc+0x130>
   13508:	81c01704 	addi	r7,r16,92
   1350c:	900d883a 	mov	r6,r18
   13510:	d80b883a 	mov	r5,sp
   13514:	9809883a 	mov	r4,r19
   13518:	00139a00 	call	139a0 <_wcrtomb_r>
   1351c:	1029883a 	mov	r20,r2
   13520:	00bfffc4 	movi	r2,-1
   13524:	a0802026 	beq	r20,r2,135a8 <__fputwc+0xd8>
   13528:	d9400003 	ldbu	r5,0(sp)
   1352c:	a0001c26 	beq	r20,zero,135a0 <__fputwc+0xd0>
   13530:	0023883a 	mov	r17,zero
   13534:	05400284 	movi	r21,10
   13538:	00000906 	br	13560 <__fputwc+0x90>
   1353c:	80800017 	ldw	r2,0(r16)
   13540:	11400005 	stb	r5,0(r2)
   13544:	80c00017 	ldw	r3,0(r16)
   13548:	18c00044 	addi	r3,r3,1
   1354c:	80c00015 	stw	r3,0(r16)
   13550:	8c400044 	addi	r17,r17,1
   13554:	dc45883a 	add	r2,sp,r17
   13558:	8d00112e 	bgeu	r17,r20,135a0 <__fputwc+0xd0>
   1355c:	11400003 	ldbu	r5,0(r2)
   13560:	80c00217 	ldw	r3,8(r16)
   13564:	18ffffc4 	addi	r3,r3,-1
   13568:	80c00215 	stw	r3,8(r16)
   1356c:	183ff30e 	bge	r3,zero,1353c <__alt_exception_stack_pointer+0xf801353c>
   13570:	80800617 	ldw	r2,24(r16)
   13574:	18801916 	blt	r3,r2,135dc <__fputwc+0x10c>
   13578:	80800017 	ldw	r2,0(r16)
   1357c:	11400005 	stb	r5,0(r2)
   13580:	80800017 	ldw	r2,0(r16)
   13584:	10c00003 	ldbu	r3,0(r2)
   13588:	10800044 	addi	r2,r2,1
   1358c:	1d402326 	beq	r3,r21,1361c <__fputwc+0x14c>
   13590:	80800015 	stw	r2,0(r16)
   13594:	8c400044 	addi	r17,r17,1
   13598:	dc45883a 	add	r2,sp,r17
   1359c:	8d3fef36 	bltu	r17,r20,1355c <__alt_exception_stack_pointer+0xf801355c>
   135a0:	9005883a 	mov	r2,r18
   135a4:	00000406 	br	135b8 <__fputwc+0xe8>
   135a8:	80c0030b 	ldhu	r3,12(r16)
   135ac:	a005883a 	mov	r2,r20
   135b0:	18c01014 	ori	r3,r3,64
   135b4:	80c0030d 	sth	r3,12(r16)
   135b8:	dfc00717 	ldw	ra,28(sp)
   135bc:	dd400617 	ldw	r21,24(sp)
   135c0:	dd000517 	ldw	r20,20(sp)
   135c4:	dcc00417 	ldw	r19,16(sp)
   135c8:	dc800317 	ldw	r18,12(sp)
   135cc:	dc400217 	ldw	r17,8(sp)
   135d0:	dc000117 	ldw	r16,4(sp)
   135d4:	dec00804 	addi	sp,sp,32
   135d8:	f800283a 	ret
   135dc:	800d883a 	mov	r6,r16
   135e0:	29403fcc 	andi	r5,r5,255
   135e4:	9809883a 	mov	r4,r19
   135e8:	00138480 	call	13848 <__swbuf_r>
   135ec:	10bfffe0 	cmpeqi	r2,r2,-1
   135f0:	10803fcc 	andi	r2,r2,255
   135f4:	103fd626 	beq	r2,zero,13550 <__alt_exception_stack_pointer+0xf8013550>
   135f8:	00bfffc4 	movi	r2,-1
   135fc:	003fee06 	br	135b8 <__alt_exception_stack_pointer+0xf80135b8>
   13600:	90ffffc4 	addi	r3,r18,-1
   13604:	01003f84 	movi	r4,254
   13608:	20ffbf36 	bltu	r4,r3,13508 <__alt_exception_stack_pointer+0xf8013508>
   1360c:	900b883a 	mov	r5,r18
   13610:	dc800005 	stb	r18,0(sp)
   13614:	1029883a 	mov	r20,r2
   13618:	003fc506 	br	13530 <__alt_exception_stack_pointer+0xf8013530>
   1361c:	800d883a 	mov	r6,r16
   13620:	a80b883a 	mov	r5,r21
   13624:	9809883a 	mov	r4,r19
   13628:	00138480 	call	13848 <__swbuf_r>
   1362c:	10bfffe0 	cmpeqi	r2,r2,-1
   13630:	003fef06 	br	135f0 <__alt_exception_stack_pointer+0xf80135f0>

00013634 <_fputwc_r>:
   13634:	3080030b 	ldhu	r2,12(r6)
   13638:	10c8000c 	andi	r3,r2,8192
   1363c:	1800051e 	bne	r3,zero,13654 <_fputwc_r+0x20>
   13640:	30c01917 	ldw	r3,100(r6)
   13644:	10880014 	ori	r2,r2,8192
   13648:	3080030d 	sth	r2,12(r6)
   1364c:	18880014 	ori	r2,r3,8192
   13650:	30801915 	stw	r2,100(r6)
   13654:	00134d01 	jmpi	134d0 <__fputwc>

00013658 <fputwc>:
   13658:	008000b4 	movhi	r2,2
   1365c:	defffc04 	addi	sp,sp,-16
   13660:	10ac8004 	addi	r2,r2,-19968
   13664:	dc000115 	stw	r16,4(sp)
   13668:	14000017 	ldw	r16,0(r2)
   1366c:	dc400215 	stw	r17,8(sp)
   13670:	dfc00315 	stw	ra,12(sp)
   13674:	2023883a 	mov	r17,r4
   13678:	80000226 	beq	r16,zero,13684 <fputwc+0x2c>
   1367c:	80800e17 	ldw	r2,56(r16)
   13680:	10001026 	beq	r2,zero,136c4 <fputwc+0x6c>
   13684:	2880030b 	ldhu	r2,12(r5)
   13688:	10c8000c 	andi	r3,r2,8192
   1368c:	1800051e 	bne	r3,zero,136a4 <fputwc+0x4c>
   13690:	28c01917 	ldw	r3,100(r5)
   13694:	10880014 	ori	r2,r2,8192
   13698:	2880030d 	sth	r2,12(r5)
   1369c:	18880014 	ori	r2,r3,8192
   136a0:	28801915 	stw	r2,100(r5)
   136a4:	280d883a 	mov	r6,r5
   136a8:	8009883a 	mov	r4,r16
   136ac:	880b883a 	mov	r5,r17
   136b0:	dfc00317 	ldw	ra,12(sp)
   136b4:	dc400217 	ldw	r17,8(sp)
   136b8:	dc000117 	ldw	r16,4(sp)
   136bc:	dec00404 	addi	sp,sp,16
   136c0:	00134d01 	jmpi	134d0 <__fputwc>
   136c4:	8009883a 	mov	r4,r16
   136c8:	d9400015 	stw	r5,0(sp)
   136cc:	000eff00 	call	eff0 <__sinit>
   136d0:	d9400017 	ldw	r5,0(sp)
   136d4:	003feb06 	br	13684 <__alt_exception_stack_pointer+0xf8013684>

000136d8 <_fstat_r>:
   136d8:	defffd04 	addi	sp,sp,-12
   136dc:	2805883a 	mov	r2,r5
   136e0:	dc000015 	stw	r16,0(sp)
   136e4:	040000b4 	movhi	r16,2
   136e8:	dc400115 	stw	r17,4(sp)
   136ec:	84357604 	addi	r16,r16,-10792
   136f0:	2023883a 	mov	r17,r4
   136f4:	300b883a 	mov	r5,r6
   136f8:	1009883a 	mov	r4,r2
   136fc:	dfc00215 	stw	ra,8(sp)
   13700:	80000015 	stw	zero,0(r16)
   13704:	0014a740 	call	14a74 <fstat>
   13708:	00ffffc4 	movi	r3,-1
   1370c:	10c00526 	beq	r2,r3,13724 <_fstat_r+0x4c>
   13710:	dfc00217 	ldw	ra,8(sp)
   13714:	dc400117 	ldw	r17,4(sp)
   13718:	dc000017 	ldw	r16,0(sp)
   1371c:	dec00304 	addi	sp,sp,12
   13720:	f800283a 	ret
   13724:	80c00017 	ldw	r3,0(r16)
   13728:	183ff926 	beq	r3,zero,13710 <__alt_exception_stack_pointer+0xf8013710>
   1372c:	88c00015 	stw	r3,0(r17)
   13730:	003ff706 	br	13710 <__alt_exception_stack_pointer+0xf8013710>

00013734 <_isatty_r>:
   13734:	defffd04 	addi	sp,sp,-12
   13738:	dc000015 	stw	r16,0(sp)
   1373c:	040000b4 	movhi	r16,2
   13740:	dc400115 	stw	r17,4(sp)
   13744:	84357604 	addi	r16,r16,-10792
   13748:	2023883a 	mov	r17,r4
   1374c:	2809883a 	mov	r4,r5
   13750:	dfc00215 	stw	ra,8(sp)
   13754:	80000015 	stw	zero,0(r16)
   13758:	0014b680 	call	14b68 <isatty>
   1375c:	00ffffc4 	movi	r3,-1
   13760:	10c00526 	beq	r2,r3,13778 <_isatty_r+0x44>
   13764:	dfc00217 	ldw	ra,8(sp)
   13768:	dc400117 	ldw	r17,4(sp)
   1376c:	dc000017 	ldw	r16,0(sp)
   13770:	dec00304 	addi	sp,sp,12
   13774:	f800283a 	ret
   13778:	80c00017 	ldw	r3,0(r16)
   1377c:	183ff926 	beq	r3,zero,13764 <__alt_exception_stack_pointer+0xf8013764>
   13780:	88c00015 	stw	r3,0(r17)
   13784:	003ff706 	br	13764 <__alt_exception_stack_pointer+0xf8013764>

00013788 <_lseek_r>:
   13788:	defffd04 	addi	sp,sp,-12
   1378c:	2805883a 	mov	r2,r5
   13790:	dc000015 	stw	r16,0(sp)
   13794:	040000b4 	movhi	r16,2
   13798:	dc400115 	stw	r17,4(sp)
   1379c:	300b883a 	mov	r5,r6
   137a0:	84357604 	addi	r16,r16,-10792
   137a4:	2023883a 	mov	r17,r4
   137a8:	380d883a 	mov	r6,r7
   137ac:	1009883a 	mov	r4,r2
   137b0:	dfc00215 	stw	ra,8(sp)
   137b4:	80000015 	stw	zero,0(r16)
   137b8:	0014d3c0 	call	14d3c <lseek>
   137bc:	00ffffc4 	movi	r3,-1
   137c0:	10c00526 	beq	r2,r3,137d8 <_lseek_r+0x50>
   137c4:	dfc00217 	ldw	ra,8(sp)
   137c8:	dc400117 	ldw	r17,4(sp)
   137cc:	dc000017 	ldw	r16,0(sp)
   137d0:	dec00304 	addi	sp,sp,12
   137d4:	f800283a 	ret
   137d8:	80c00017 	ldw	r3,0(r16)
   137dc:	183ff926 	beq	r3,zero,137c4 <__alt_exception_stack_pointer+0xf80137c4>
   137e0:	88c00015 	stw	r3,0(r17)
   137e4:	003ff706 	br	137c4 <__alt_exception_stack_pointer+0xf80137c4>

000137e8 <_read_r>:
   137e8:	defffd04 	addi	sp,sp,-12
   137ec:	2805883a 	mov	r2,r5
   137f0:	dc000015 	stw	r16,0(sp)
   137f4:	040000b4 	movhi	r16,2
   137f8:	dc400115 	stw	r17,4(sp)
   137fc:	300b883a 	mov	r5,r6
   13800:	84357604 	addi	r16,r16,-10792
   13804:	2023883a 	mov	r17,r4
   13808:	380d883a 	mov	r6,r7
   1380c:	1009883a 	mov	r4,r2
   13810:	dfc00215 	stw	ra,8(sp)
   13814:	80000015 	stw	zero,0(r16)
   13818:	0014f180 	call	14f18 <read>
   1381c:	00ffffc4 	movi	r3,-1
   13820:	10c00526 	beq	r2,r3,13838 <_read_r+0x50>
   13824:	dfc00217 	ldw	ra,8(sp)
   13828:	dc400117 	ldw	r17,4(sp)
   1382c:	dc000017 	ldw	r16,0(sp)
   13830:	dec00304 	addi	sp,sp,12
   13834:	f800283a 	ret
   13838:	80c00017 	ldw	r3,0(r16)
   1383c:	183ff926 	beq	r3,zero,13824 <__alt_exception_stack_pointer+0xf8013824>
   13840:	88c00015 	stw	r3,0(r17)
   13844:	003ff706 	br	13824 <__alt_exception_stack_pointer+0xf8013824>

00013848 <__swbuf_r>:
   13848:	defffb04 	addi	sp,sp,-20
   1384c:	dcc00315 	stw	r19,12(sp)
   13850:	dc800215 	stw	r18,8(sp)
   13854:	dc000015 	stw	r16,0(sp)
   13858:	dfc00415 	stw	ra,16(sp)
   1385c:	dc400115 	stw	r17,4(sp)
   13860:	2025883a 	mov	r18,r4
   13864:	2827883a 	mov	r19,r5
   13868:	3021883a 	mov	r16,r6
   1386c:	20000226 	beq	r4,zero,13878 <__swbuf_r+0x30>
   13870:	20800e17 	ldw	r2,56(r4)
   13874:	10004226 	beq	r2,zero,13980 <__swbuf_r+0x138>
   13878:	80800617 	ldw	r2,24(r16)
   1387c:	8100030b 	ldhu	r4,12(r16)
   13880:	80800215 	stw	r2,8(r16)
   13884:	2080020c 	andi	r2,r4,8
   13888:	10003626 	beq	r2,zero,13964 <__swbuf_r+0x11c>
   1388c:	80c00417 	ldw	r3,16(r16)
   13890:	18003426 	beq	r3,zero,13964 <__swbuf_r+0x11c>
   13894:	2088000c 	andi	r2,r4,8192
   13898:	9c403fcc 	andi	r17,r19,255
   1389c:	10001a26 	beq	r2,zero,13908 <__swbuf_r+0xc0>
   138a0:	80800017 	ldw	r2,0(r16)
   138a4:	81000517 	ldw	r4,20(r16)
   138a8:	10c7c83a 	sub	r3,r2,r3
   138ac:	1900200e 	bge	r3,r4,13930 <__swbuf_r+0xe8>
   138b0:	18c00044 	addi	r3,r3,1
   138b4:	81000217 	ldw	r4,8(r16)
   138b8:	11400044 	addi	r5,r2,1
   138bc:	81400015 	stw	r5,0(r16)
   138c0:	213fffc4 	addi	r4,r4,-1
   138c4:	81000215 	stw	r4,8(r16)
   138c8:	14c00005 	stb	r19,0(r2)
   138cc:	80800517 	ldw	r2,20(r16)
   138d0:	10c01e26 	beq	r2,r3,1394c <__swbuf_r+0x104>
   138d4:	8080030b 	ldhu	r2,12(r16)
   138d8:	1080004c 	andi	r2,r2,1
   138dc:	10000226 	beq	r2,zero,138e8 <__swbuf_r+0xa0>
   138e0:	00800284 	movi	r2,10
   138e4:	88801926 	beq	r17,r2,1394c <__swbuf_r+0x104>
   138e8:	8805883a 	mov	r2,r17
   138ec:	dfc00417 	ldw	ra,16(sp)
   138f0:	dcc00317 	ldw	r19,12(sp)
   138f4:	dc800217 	ldw	r18,8(sp)
   138f8:	dc400117 	ldw	r17,4(sp)
   138fc:	dc000017 	ldw	r16,0(sp)
   13900:	dec00504 	addi	sp,sp,20
   13904:	f800283a 	ret
   13908:	81401917 	ldw	r5,100(r16)
   1390c:	00b7ffc4 	movi	r2,-8193
   13910:	21080014 	ori	r4,r4,8192
   13914:	2884703a 	and	r2,r5,r2
   13918:	80801915 	stw	r2,100(r16)
   1391c:	80800017 	ldw	r2,0(r16)
   13920:	8100030d 	sth	r4,12(r16)
   13924:	81000517 	ldw	r4,20(r16)
   13928:	10c7c83a 	sub	r3,r2,r3
   1392c:	193fe016 	blt	r3,r4,138b0 <__alt_exception_stack_pointer+0xf80138b0>
   13930:	800b883a 	mov	r5,r16
   13934:	9009883a 	mov	r4,r18
   13938:	000ec040 	call	ec04 <_fflush_r>
   1393c:	1000071e 	bne	r2,zero,1395c <__swbuf_r+0x114>
   13940:	80800017 	ldw	r2,0(r16)
   13944:	00c00044 	movi	r3,1
   13948:	003fda06 	br	138b4 <__alt_exception_stack_pointer+0xf80138b4>
   1394c:	800b883a 	mov	r5,r16
   13950:	9009883a 	mov	r4,r18
   13954:	000ec040 	call	ec04 <_fflush_r>
   13958:	103fe326 	beq	r2,zero,138e8 <__alt_exception_stack_pointer+0xf80138e8>
   1395c:	00bfffc4 	movi	r2,-1
   13960:	003fe206 	br	138ec <__alt_exception_stack_pointer+0xf80138ec>
   13964:	800b883a 	mov	r5,r16
   13968:	9009883a 	mov	r4,r18
   1396c:	000c4ac0 	call	c4ac <__swsetup_r>
   13970:	103ffa1e 	bne	r2,zero,1395c <__alt_exception_stack_pointer+0xf801395c>
   13974:	8100030b 	ldhu	r4,12(r16)
   13978:	80c00417 	ldw	r3,16(r16)
   1397c:	003fc506 	br	13894 <__alt_exception_stack_pointer+0xf8013894>
   13980:	000eff00 	call	eff0 <__sinit>
   13984:	003fbc06 	br	13878 <__alt_exception_stack_pointer+0xf8013878>

00013988 <__swbuf>:
   13988:	008000b4 	movhi	r2,2
   1398c:	10ac8004 	addi	r2,r2,-19968
   13990:	280d883a 	mov	r6,r5
   13994:	200b883a 	mov	r5,r4
   13998:	11000017 	ldw	r4,0(r2)
   1399c:	00138481 	jmpi	13848 <__swbuf_r>

000139a0 <_wcrtomb_r>:
   139a0:	defff604 	addi	sp,sp,-40
   139a4:	008000b4 	movhi	r2,2
   139a8:	dc800815 	stw	r18,32(sp)
   139ac:	dc400715 	stw	r17,28(sp)
   139b0:	dc000615 	stw	r16,24(sp)
   139b4:	10ac8404 	addi	r2,r2,-19952
   139b8:	dfc00915 	stw	ra,36(sp)
   139bc:	2021883a 	mov	r16,r4
   139c0:	3823883a 	mov	r17,r7
   139c4:	14800017 	ldw	r18,0(r2)
   139c8:	28001426 	beq	r5,zero,13a1c <_wcrtomb_r+0x7c>
   139cc:	d9400415 	stw	r5,16(sp)
   139d0:	d9800515 	stw	r6,20(sp)
   139d4:	000fb400 	call	fb40 <__locale_charset>
   139d8:	d9800517 	ldw	r6,20(sp)
   139dc:	d9400417 	ldw	r5,16(sp)
   139e0:	100f883a 	mov	r7,r2
   139e4:	dc400015 	stw	r17,0(sp)
   139e8:	8009883a 	mov	r4,r16
   139ec:	903ee83a 	callr	r18
   139f0:	00ffffc4 	movi	r3,-1
   139f4:	10c0031e 	bne	r2,r3,13a04 <_wcrtomb_r+0x64>
   139f8:	88000015 	stw	zero,0(r17)
   139fc:	00c02284 	movi	r3,138
   13a00:	80c00015 	stw	r3,0(r16)
   13a04:	dfc00917 	ldw	ra,36(sp)
   13a08:	dc800817 	ldw	r18,32(sp)
   13a0c:	dc400717 	ldw	r17,28(sp)
   13a10:	dc000617 	ldw	r16,24(sp)
   13a14:	dec00a04 	addi	sp,sp,40
   13a18:	f800283a 	ret
   13a1c:	000fb400 	call	fb40 <__locale_charset>
   13a20:	100f883a 	mov	r7,r2
   13a24:	dc400015 	stw	r17,0(sp)
   13a28:	000d883a 	mov	r6,zero
   13a2c:	d9400104 	addi	r5,sp,4
   13a30:	8009883a 	mov	r4,r16
   13a34:	903ee83a 	callr	r18
   13a38:	003fed06 	br	139f0 <__alt_exception_stack_pointer+0xf80139f0>

00013a3c <wcrtomb>:
   13a3c:	defff604 	addi	sp,sp,-40
   13a40:	008000b4 	movhi	r2,2
   13a44:	dc800615 	stw	r18,24(sp)
   13a48:	dc400515 	stw	r17,20(sp)
   13a4c:	10ac8004 	addi	r2,r2,-19968
   13a50:	dfc00915 	stw	ra,36(sp)
   13a54:	dd000815 	stw	r20,32(sp)
   13a58:	dcc00715 	stw	r19,28(sp)
   13a5c:	dc000415 	stw	r16,16(sp)
   13a60:	3025883a 	mov	r18,r6
   13a64:	14400017 	ldw	r17,0(r2)
   13a68:	20001926 	beq	r4,zero,13ad0 <wcrtomb+0x94>
   13a6c:	008000b4 	movhi	r2,2
   13a70:	10ac8404 	addi	r2,r2,-19952
   13a74:	15000017 	ldw	r20,0(r2)
   13a78:	2021883a 	mov	r16,r4
   13a7c:	2827883a 	mov	r19,r5
   13a80:	000fb400 	call	fb40 <__locale_charset>
   13a84:	100f883a 	mov	r7,r2
   13a88:	dc800015 	stw	r18,0(sp)
   13a8c:	980d883a 	mov	r6,r19
   13a90:	800b883a 	mov	r5,r16
   13a94:	8809883a 	mov	r4,r17
   13a98:	a03ee83a 	callr	r20
   13a9c:	00ffffc4 	movi	r3,-1
   13aa0:	10c0031e 	bne	r2,r3,13ab0 <wcrtomb+0x74>
   13aa4:	90000015 	stw	zero,0(r18)
   13aa8:	00c02284 	movi	r3,138
   13aac:	88c00015 	stw	r3,0(r17)
   13ab0:	dfc00917 	ldw	ra,36(sp)
   13ab4:	dd000817 	ldw	r20,32(sp)
   13ab8:	dcc00717 	ldw	r19,28(sp)
   13abc:	dc800617 	ldw	r18,24(sp)
   13ac0:	dc400517 	ldw	r17,20(sp)
   13ac4:	dc000417 	ldw	r16,16(sp)
   13ac8:	dec00a04 	addi	sp,sp,40
   13acc:	f800283a 	ret
   13ad0:	008000b4 	movhi	r2,2
   13ad4:	10ac8404 	addi	r2,r2,-19952
   13ad8:	14000017 	ldw	r16,0(r2)
   13adc:	000fb400 	call	fb40 <__locale_charset>
   13ae0:	100f883a 	mov	r7,r2
   13ae4:	dc800015 	stw	r18,0(sp)
   13ae8:	000d883a 	mov	r6,zero
   13aec:	d9400104 	addi	r5,sp,4
   13af0:	8809883a 	mov	r4,r17
   13af4:	803ee83a 	callr	r16
   13af8:	003fe806 	br	13a9c <__alt_exception_stack_pointer+0xf8013a9c>

00013afc <__ascii_wctomb>:
   13afc:	28000526 	beq	r5,zero,13b14 <__ascii_wctomb+0x18>
   13b00:	00803fc4 	movi	r2,255
   13b04:	11800536 	bltu	r2,r6,13b1c <__ascii_wctomb+0x20>
   13b08:	29800005 	stb	r6,0(r5)
   13b0c:	00800044 	movi	r2,1
   13b10:	f800283a 	ret
   13b14:	0005883a 	mov	r2,zero
   13b18:	f800283a 	ret
   13b1c:	00802284 	movi	r2,138
   13b20:	20800015 	stw	r2,0(r4)
   13b24:	00bfffc4 	movi	r2,-1
   13b28:	f800283a 	ret

00013b2c <_wctomb_r>:
   13b2c:	008000b4 	movhi	r2,2
   13b30:	defff904 	addi	sp,sp,-28
   13b34:	10ac8404 	addi	r2,r2,-19952
   13b38:	dfc00615 	stw	ra,24(sp)
   13b3c:	dc400515 	stw	r17,20(sp)
   13b40:	dc000415 	stw	r16,16(sp)
   13b44:	3823883a 	mov	r17,r7
   13b48:	14000017 	ldw	r16,0(r2)
   13b4c:	d9000115 	stw	r4,4(sp)
   13b50:	d9400215 	stw	r5,8(sp)
   13b54:	d9800315 	stw	r6,12(sp)
   13b58:	000fb400 	call	fb40 <__locale_charset>
   13b5c:	d9800317 	ldw	r6,12(sp)
   13b60:	d9400217 	ldw	r5,8(sp)
   13b64:	d9000117 	ldw	r4,4(sp)
   13b68:	100f883a 	mov	r7,r2
   13b6c:	dc400015 	stw	r17,0(sp)
   13b70:	803ee83a 	callr	r16
   13b74:	dfc00617 	ldw	ra,24(sp)
   13b78:	dc400517 	ldw	r17,20(sp)
   13b7c:	dc000417 	ldw	r16,16(sp)
   13b80:	dec00704 	addi	sp,sp,28
   13b84:	f800283a 	ret

00013b88 <__udivdi3>:
   13b88:	defff404 	addi	sp,sp,-48
   13b8c:	dcc00515 	stw	r19,20(sp)
   13b90:	dc000215 	stw	r16,8(sp)
   13b94:	dfc00b15 	stw	ra,44(sp)
   13b98:	df000a15 	stw	fp,40(sp)
   13b9c:	ddc00915 	stw	r23,36(sp)
   13ba0:	dd800815 	stw	r22,32(sp)
   13ba4:	dd400715 	stw	r21,28(sp)
   13ba8:	dd000615 	stw	r20,24(sp)
   13bac:	dc800415 	stw	r18,16(sp)
   13bb0:	dc400315 	stw	r17,12(sp)
   13bb4:	2027883a 	mov	r19,r4
   13bb8:	2821883a 	mov	r16,r5
   13bbc:	3800461e 	bne	r7,zero,13cd8 <__udivdi3+0x150>
   13bc0:	3023883a 	mov	r17,r6
   13bc4:	2025883a 	mov	r18,r4
   13bc8:	2980572e 	bgeu	r5,r6,13d28 <__udivdi3+0x1a0>
   13bcc:	00bfffd4 	movui	r2,65535
   13bd0:	282d883a 	mov	r22,r5
   13bd4:	1180b236 	bltu	r2,r6,13ea0 <__udivdi3+0x318>
   13bd8:	00803fc4 	movi	r2,255
   13bdc:	1185803a 	cmpltu	r2,r2,r6
   13be0:	100490fa 	slli	r2,r2,3
   13be4:	3086d83a 	srl	r3,r6,r2
   13be8:	010000b4 	movhi	r4,2
   13bec:	2122ec04 	addi	r4,r4,-29776
   13bf0:	20c7883a 	add	r3,r4,r3
   13bf4:	18c00003 	ldbu	r3,0(r3)
   13bf8:	1885883a 	add	r2,r3,r2
   13bfc:	00c00804 	movi	r3,32
   13c00:	1887c83a 	sub	r3,r3,r2
   13c04:	18000526 	beq	r3,zero,13c1c <__udivdi3+0x94>
   13c08:	80e0983a 	sll	r16,r16,r3
   13c0c:	9884d83a 	srl	r2,r19,r2
   13c10:	30e2983a 	sll	r17,r6,r3
   13c14:	98e4983a 	sll	r18,r19,r3
   13c18:	142cb03a 	or	r22,r2,r16
   13c1c:	882ad43a 	srli	r21,r17,16
   13c20:	b009883a 	mov	r4,r22
   13c24:	8d3fffcc 	andi	r20,r17,65535
   13c28:	a80b883a 	mov	r5,r21
   13c2c:	00068900 	call	6890 <__umodsi3>
   13c30:	b009883a 	mov	r4,r22
   13c34:	a80b883a 	mov	r5,r21
   13c38:	1027883a 	mov	r19,r2
   13c3c:	000682c0 	call	682c <__udivsi3>
   13c40:	100b883a 	mov	r5,r2
   13c44:	a009883a 	mov	r4,r20
   13c48:	102d883a 	mov	r22,r2
   13c4c:	00068e80 	call	68e8 <__mulsi3>
   13c50:	9826943a 	slli	r19,r19,16
   13c54:	9006d43a 	srli	r3,r18,16
   13c58:	1cc6b03a 	or	r3,r3,r19
   13c5c:	1880052e 	bgeu	r3,r2,13c74 <__udivdi3+0xec>
   13c60:	1c47883a 	add	r3,r3,r17
   13c64:	b13fffc4 	addi	r4,r22,-1
   13c68:	1c400136 	bltu	r3,r17,13c70 <__udivdi3+0xe8>
   13c6c:	18814236 	bltu	r3,r2,14178 <__udivdi3+0x5f0>
   13c70:	202d883a 	mov	r22,r4
   13c74:	18a1c83a 	sub	r16,r3,r2
   13c78:	8009883a 	mov	r4,r16
   13c7c:	a80b883a 	mov	r5,r21
   13c80:	00068900 	call	6890 <__umodsi3>
   13c84:	1027883a 	mov	r19,r2
   13c88:	8009883a 	mov	r4,r16
   13c8c:	a80b883a 	mov	r5,r21
   13c90:	9826943a 	slli	r19,r19,16
   13c94:	000682c0 	call	682c <__udivsi3>
   13c98:	100b883a 	mov	r5,r2
   13c9c:	a009883a 	mov	r4,r20
   13ca0:	94bfffcc 	andi	r18,r18,65535
   13ca4:	1021883a 	mov	r16,r2
   13ca8:	94e4b03a 	or	r18,r18,r19
   13cac:	00068e80 	call	68e8 <__mulsi3>
   13cb0:	9080052e 	bgeu	r18,r2,13cc8 <__udivdi3+0x140>
   13cb4:	8ca5883a 	add	r18,r17,r18
   13cb8:	80ffffc4 	addi	r3,r16,-1
   13cbc:	94410c36 	bltu	r18,r17,140f0 <__udivdi3+0x568>
   13cc0:	90810b2e 	bgeu	r18,r2,140f0 <__udivdi3+0x568>
   13cc4:	843fff84 	addi	r16,r16,-2
   13cc8:	b004943a 	slli	r2,r22,16
   13ccc:	0007883a 	mov	r3,zero
   13cd0:	1404b03a 	or	r2,r2,r16
   13cd4:	00005e06 	br	13e50 <__udivdi3+0x2c8>
   13cd8:	29c05b36 	bltu	r5,r7,13e48 <__udivdi3+0x2c0>
   13cdc:	00bfffd4 	movui	r2,65535
   13ce0:	11c0672e 	bgeu	r2,r7,13e80 <__udivdi3+0x2f8>
   13ce4:	00804034 	movhi	r2,256
   13ce8:	10bfffc4 	addi	r2,r2,-1
   13cec:	11c10a36 	bltu	r2,r7,14118 <__udivdi3+0x590>
   13cf0:	00800404 	movi	r2,16
   13cf4:	3886d83a 	srl	r3,r7,r2
   13cf8:	010000b4 	movhi	r4,2
   13cfc:	2122ec04 	addi	r4,r4,-29776
   13d00:	20c7883a 	add	r3,r4,r3
   13d04:	18c00003 	ldbu	r3,0(r3)
   13d08:	05c00804 	movi	r23,32
   13d0c:	1885883a 	add	r2,r3,r2
   13d10:	b8afc83a 	sub	r23,r23,r2
   13d14:	b800671e 	bne	r23,zero,13eb4 <__udivdi3+0x32c>
   13d18:	3c010536 	bltu	r7,r16,14130 <__udivdi3+0x5a8>
   13d1c:	9985403a 	cmpgeu	r2,r19,r6
   13d20:	0007883a 	mov	r3,zero
   13d24:	00004a06 	br	13e50 <__udivdi3+0x2c8>
   13d28:	3000041e 	bne	r6,zero,13d3c <__udivdi3+0x1b4>
   13d2c:	000b883a 	mov	r5,zero
   13d30:	01000044 	movi	r4,1
   13d34:	000682c0 	call	682c <__udivsi3>
   13d38:	1023883a 	mov	r17,r2
   13d3c:	00bfffd4 	movui	r2,65535
   13d40:	1440532e 	bgeu	r2,r17,13e90 <__udivdi3+0x308>
   13d44:	00804034 	movhi	r2,256
   13d48:	10bfffc4 	addi	r2,r2,-1
   13d4c:	1440f436 	bltu	r2,r17,14120 <__udivdi3+0x598>
   13d50:	00800404 	movi	r2,16
   13d54:	8886d83a 	srl	r3,r17,r2
   13d58:	010000b4 	movhi	r4,2
   13d5c:	2122ec04 	addi	r4,r4,-29776
   13d60:	20c7883a 	add	r3,r4,r3
   13d64:	18c00003 	ldbu	r3,0(r3)
   13d68:	1885883a 	add	r2,r3,r2
   13d6c:	00c00804 	movi	r3,32
   13d70:	1887c83a 	sub	r3,r3,r2
   13d74:	1800a51e 	bne	r3,zero,1400c <__udivdi3+0x484>
   13d78:	882ad43a 	srli	r21,r17,16
   13d7c:	8461c83a 	sub	r16,r16,r17
   13d80:	8d3fffcc 	andi	r20,r17,65535
   13d84:	00c00044 	movi	r3,1
   13d88:	a80b883a 	mov	r5,r21
   13d8c:	8009883a 	mov	r4,r16
   13d90:	d8c00115 	stw	r3,4(sp)
   13d94:	00068900 	call	6890 <__umodsi3>
   13d98:	a80b883a 	mov	r5,r21
   13d9c:	8009883a 	mov	r4,r16
   13da0:	1027883a 	mov	r19,r2
   13da4:	000682c0 	call	682c <__udivsi3>
   13da8:	a00b883a 	mov	r5,r20
   13dac:	1009883a 	mov	r4,r2
   13db0:	102d883a 	mov	r22,r2
   13db4:	00068e80 	call	68e8 <__mulsi3>
   13db8:	9826943a 	slli	r19,r19,16
   13dbc:	900ed43a 	srli	r7,r18,16
   13dc0:	d8c00117 	ldw	r3,4(sp)
   13dc4:	3cceb03a 	or	r7,r7,r19
   13dc8:	3880052e 	bgeu	r7,r2,13de0 <__udivdi3+0x258>
   13dcc:	3c4f883a 	add	r7,r7,r17
   13dd0:	b13fffc4 	addi	r4,r22,-1
   13dd4:	3c400136 	bltu	r7,r17,13ddc <__udivdi3+0x254>
   13dd8:	3880e436 	bltu	r7,r2,1416c <__udivdi3+0x5e4>
   13ddc:	202d883a 	mov	r22,r4
   13de0:	38a1c83a 	sub	r16,r7,r2
   13de4:	8009883a 	mov	r4,r16
   13de8:	a80b883a 	mov	r5,r21
   13dec:	d8c00115 	stw	r3,4(sp)
   13df0:	00068900 	call	6890 <__umodsi3>
   13df4:	1027883a 	mov	r19,r2
   13df8:	8009883a 	mov	r4,r16
   13dfc:	a80b883a 	mov	r5,r21
   13e00:	9826943a 	slli	r19,r19,16
   13e04:	000682c0 	call	682c <__udivsi3>
   13e08:	a00b883a 	mov	r5,r20
   13e0c:	1009883a 	mov	r4,r2
   13e10:	94bfffcc 	andi	r18,r18,65535
   13e14:	1021883a 	mov	r16,r2
   13e18:	94e4b03a 	or	r18,r18,r19
   13e1c:	00068e80 	call	68e8 <__mulsi3>
   13e20:	d8c00117 	ldw	r3,4(sp)
   13e24:	9080052e 	bgeu	r18,r2,13e3c <__udivdi3+0x2b4>
   13e28:	8ca5883a 	add	r18,r17,r18
   13e2c:	813fffc4 	addi	r4,r16,-1
   13e30:	9440ad36 	bltu	r18,r17,140e8 <__udivdi3+0x560>
   13e34:	9080ac2e 	bgeu	r18,r2,140e8 <__udivdi3+0x560>
   13e38:	843fff84 	addi	r16,r16,-2
   13e3c:	b004943a 	slli	r2,r22,16
   13e40:	1404b03a 	or	r2,r2,r16
   13e44:	00000206 	br	13e50 <__udivdi3+0x2c8>
   13e48:	0007883a 	mov	r3,zero
   13e4c:	0005883a 	mov	r2,zero
   13e50:	dfc00b17 	ldw	ra,44(sp)
   13e54:	df000a17 	ldw	fp,40(sp)
   13e58:	ddc00917 	ldw	r23,36(sp)
   13e5c:	dd800817 	ldw	r22,32(sp)
   13e60:	dd400717 	ldw	r21,28(sp)
   13e64:	dd000617 	ldw	r20,24(sp)
   13e68:	dcc00517 	ldw	r19,20(sp)
   13e6c:	dc800417 	ldw	r18,16(sp)
   13e70:	dc400317 	ldw	r17,12(sp)
   13e74:	dc000217 	ldw	r16,8(sp)
   13e78:	dec00c04 	addi	sp,sp,48
   13e7c:	f800283a 	ret
   13e80:	00803fc4 	movi	r2,255
   13e84:	11c5803a 	cmpltu	r2,r2,r7
   13e88:	100490fa 	slli	r2,r2,3
   13e8c:	003f9906 	br	13cf4 <__alt_exception_stack_pointer+0xf8013cf4>
   13e90:	00803fc4 	movi	r2,255
   13e94:	1445803a 	cmpltu	r2,r2,r17
   13e98:	100490fa 	slli	r2,r2,3
   13e9c:	003fad06 	br	13d54 <__alt_exception_stack_pointer+0xf8013d54>
   13ea0:	00804034 	movhi	r2,256
   13ea4:	10bfffc4 	addi	r2,r2,-1
   13ea8:	11809f36 	bltu	r2,r6,14128 <__udivdi3+0x5a0>
   13eac:	00800404 	movi	r2,16
   13eb0:	003f4c06 	br	13be4 <__alt_exception_stack_pointer+0xf8013be4>
   13eb4:	3dce983a 	sll	r7,r7,r23
   13eb8:	30b8d83a 	srl	fp,r6,r2
   13ebc:	80a2d83a 	srl	r17,r16,r2
   13ec0:	35cc983a 	sll	r6,r6,r23
   13ec4:	3f38b03a 	or	fp,r7,fp
   13ec8:	e024d43a 	srli	r18,fp,16
   13ecc:	9884d83a 	srl	r2,r19,r2
   13ed0:	85e0983a 	sll	r16,r16,r23
   13ed4:	8809883a 	mov	r4,r17
   13ed8:	900b883a 	mov	r5,r18
   13edc:	d9800015 	stw	r6,0(sp)
   13ee0:	1420b03a 	or	r16,r2,r16
   13ee4:	00068900 	call	6890 <__umodsi3>
   13ee8:	900b883a 	mov	r5,r18
   13eec:	8809883a 	mov	r4,r17
   13ef0:	1029883a 	mov	r20,r2
   13ef4:	e5bfffcc 	andi	r22,fp,65535
   13ef8:	000682c0 	call	682c <__udivsi3>
   13efc:	100b883a 	mov	r5,r2
   13f00:	b009883a 	mov	r4,r22
   13f04:	102b883a 	mov	r21,r2
   13f08:	00068e80 	call	68e8 <__mulsi3>
   13f0c:	a028943a 	slli	r20,r20,16
   13f10:	8006d43a 	srli	r3,r16,16
   13f14:	1d06b03a 	or	r3,r3,r20
   13f18:	1880042e 	bgeu	r3,r2,13f2c <__udivdi3+0x3a4>
   13f1c:	1f07883a 	add	r3,r3,fp
   13f20:	a93fffc4 	addi	r4,r21,-1
   13f24:	1f00892e 	bgeu	r3,fp,1414c <__udivdi3+0x5c4>
   13f28:	202b883a 	mov	r21,r4
   13f2c:	18a3c83a 	sub	r17,r3,r2
   13f30:	8809883a 	mov	r4,r17
   13f34:	900b883a 	mov	r5,r18
   13f38:	00068900 	call	6890 <__umodsi3>
   13f3c:	1029883a 	mov	r20,r2
   13f40:	8809883a 	mov	r4,r17
   13f44:	900b883a 	mov	r5,r18
   13f48:	a028943a 	slli	r20,r20,16
   13f4c:	000682c0 	call	682c <__udivsi3>
   13f50:	100b883a 	mov	r5,r2
   13f54:	b009883a 	mov	r4,r22
   13f58:	843fffcc 	andi	r16,r16,65535
   13f5c:	1023883a 	mov	r17,r2
   13f60:	8520b03a 	or	r16,r16,r20
   13f64:	00068e80 	call	68e8 <__mulsi3>
   13f68:	8080042e 	bgeu	r16,r2,13f7c <__udivdi3+0x3f4>
   13f6c:	8721883a 	add	r16,r16,fp
   13f70:	88ffffc4 	addi	r3,r17,-1
   13f74:	8700712e 	bgeu	r16,fp,1413c <__udivdi3+0x5b4>
   13f78:	1823883a 	mov	r17,r3
   13f7c:	a80e943a 	slli	r7,r21,16
   13f80:	d8c00017 	ldw	r3,0(sp)
   13f84:	80a1c83a 	sub	r16,r16,r2
   13f88:	3c64b03a 	or	r18,r7,r17
   13f8c:	1d3fffcc 	andi	r20,r3,65535
   13f90:	9022d43a 	srli	r17,r18,16
   13f94:	95bfffcc 	andi	r22,r18,65535
   13f98:	a00b883a 	mov	r5,r20
   13f9c:	b009883a 	mov	r4,r22
   13fa0:	182ad43a 	srli	r21,r3,16
   13fa4:	00068e80 	call	68e8 <__mulsi3>
   13fa8:	a00b883a 	mov	r5,r20
   13fac:	8809883a 	mov	r4,r17
   13fb0:	1039883a 	mov	fp,r2
   13fb4:	00068e80 	call	68e8 <__mulsi3>
   13fb8:	8809883a 	mov	r4,r17
   13fbc:	a80b883a 	mov	r5,r21
   13fc0:	1029883a 	mov	r20,r2
   13fc4:	00068e80 	call	68e8 <__mulsi3>
   13fc8:	a80b883a 	mov	r5,r21
   13fcc:	b009883a 	mov	r4,r22
   13fd0:	1023883a 	mov	r17,r2
   13fd4:	00068e80 	call	68e8 <__mulsi3>
   13fd8:	e006d43a 	srli	r3,fp,16
   13fdc:	1505883a 	add	r2,r2,r20
   13fe0:	1887883a 	add	r3,r3,r2
   13fe4:	1d00022e 	bgeu	r3,r20,13ff0 <__udivdi3+0x468>
   13fe8:	00800074 	movhi	r2,1
   13fec:	88a3883a 	add	r17,r17,r2
   13ff0:	1804d43a 	srli	r2,r3,16
   13ff4:	1463883a 	add	r17,r2,r17
   13ff8:	84404436 	bltu	r16,r17,1410c <__udivdi3+0x584>
   13ffc:	84403e26 	beq	r16,r17,140f8 <__udivdi3+0x570>
   14000:	9005883a 	mov	r2,r18
   14004:	0007883a 	mov	r3,zero
   14008:	003f9106 	br	13e50 <__alt_exception_stack_pointer+0xf8013e50>
   1400c:	88e2983a 	sll	r17,r17,r3
   14010:	80aed83a 	srl	r23,r16,r2
   14014:	80e0983a 	sll	r16,r16,r3
   14018:	882ad43a 	srli	r21,r17,16
   1401c:	9884d83a 	srl	r2,r19,r2
   14020:	b809883a 	mov	r4,r23
   14024:	a80b883a 	mov	r5,r21
   14028:	98e4983a 	sll	r18,r19,r3
   1402c:	142cb03a 	or	r22,r2,r16
   14030:	00068900 	call	6890 <__umodsi3>
   14034:	b809883a 	mov	r4,r23
   14038:	a80b883a 	mov	r5,r21
   1403c:	1027883a 	mov	r19,r2
   14040:	8d3fffcc 	andi	r20,r17,65535
   14044:	000682c0 	call	682c <__udivsi3>
   14048:	a009883a 	mov	r4,r20
   1404c:	100b883a 	mov	r5,r2
   14050:	102f883a 	mov	r23,r2
   14054:	00068e80 	call	68e8 <__mulsi3>
   14058:	9826943a 	slli	r19,r19,16
   1405c:	b008d43a 	srli	r4,r22,16
   14060:	24c8b03a 	or	r4,r4,r19
   14064:	2080062e 	bgeu	r4,r2,14080 <__udivdi3+0x4f8>
   14068:	2449883a 	add	r4,r4,r17
   1406c:	b8ffffc4 	addi	r3,r23,-1
   14070:	24403c36 	bltu	r4,r17,14164 <__udivdi3+0x5dc>
   14074:	20803b2e 	bgeu	r4,r2,14164 <__udivdi3+0x5dc>
   14078:	bdffff84 	addi	r23,r23,-2
   1407c:	2449883a 	add	r4,r4,r17
   14080:	20a1c83a 	sub	r16,r4,r2
   14084:	a80b883a 	mov	r5,r21
   14088:	8009883a 	mov	r4,r16
   1408c:	00068900 	call	6890 <__umodsi3>
   14090:	a80b883a 	mov	r5,r21
   14094:	8009883a 	mov	r4,r16
   14098:	1027883a 	mov	r19,r2
   1409c:	000682c0 	call	682c <__udivsi3>
   140a0:	a009883a 	mov	r4,r20
   140a4:	100b883a 	mov	r5,r2
   140a8:	9826943a 	slli	r19,r19,16
   140ac:	1039883a 	mov	fp,r2
   140b0:	00068e80 	call	68e8 <__mulsi3>
   140b4:	b13fffcc 	andi	r4,r22,65535
   140b8:	24c8b03a 	or	r4,r4,r19
   140bc:	2080062e 	bgeu	r4,r2,140d8 <__udivdi3+0x550>
   140c0:	2449883a 	add	r4,r4,r17
   140c4:	e0ffffc4 	addi	r3,fp,-1
   140c8:	24402436 	bltu	r4,r17,1415c <__udivdi3+0x5d4>
   140cc:	2080232e 	bgeu	r4,r2,1415c <__udivdi3+0x5d4>
   140d0:	e73fff84 	addi	fp,fp,-2
   140d4:	2449883a 	add	r4,r4,r17
   140d8:	b82e943a 	slli	r23,r23,16
   140dc:	20a1c83a 	sub	r16,r4,r2
   140e0:	bf06b03a 	or	r3,r23,fp
   140e4:	003f2806 	br	13d88 <__alt_exception_stack_pointer+0xf8013d88>
   140e8:	2021883a 	mov	r16,r4
   140ec:	003f5306 	br	13e3c <__alt_exception_stack_pointer+0xf8013e3c>
   140f0:	1821883a 	mov	r16,r3
   140f4:	003ef406 	br	13cc8 <__alt_exception_stack_pointer+0xf8013cc8>
   140f8:	1806943a 	slli	r3,r3,16
   140fc:	9de6983a 	sll	r19,r19,r23
   14100:	e73fffcc 	andi	fp,fp,65535
   14104:	1f07883a 	add	r3,r3,fp
   14108:	98ffbd2e 	bgeu	r19,r3,14000 <__alt_exception_stack_pointer+0xf8014000>
   1410c:	90bfffc4 	addi	r2,r18,-1
   14110:	0007883a 	mov	r3,zero
   14114:	003f4e06 	br	13e50 <__alt_exception_stack_pointer+0xf8013e50>
   14118:	00800604 	movi	r2,24
   1411c:	003ef506 	br	13cf4 <__alt_exception_stack_pointer+0xf8013cf4>
   14120:	00800604 	movi	r2,24
   14124:	003f0b06 	br	13d54 <__alt_exception_stack_pointer+0xf8013d54>
   14128:	00800604 	movi	r2,24
   1412c:	003ead06 	br	13be4 <__alt_exception_stack_pointer+0xf8013be4>
   14130:	0007883a 	mov	r3,zero
   14134:	00800044 	movi	r2,1
   14138:	003f4506 	br	13e50 <__alt_exception_stack_pointer+0xf8013e50>
   1413c:	80bf8e2e 	bgeu	r16,r2,13f78 <__alt_exception_stack_pointer+0xf8013f78>
   14140:	8c7fff84 	addi	r17,r17,-2
   14144:	8721883a 	add	r16,r16,fp
   14148:	003f8c06 	br	13f7c <__alt_exception_stack_pointer+0xf8013f7c>
   1414c:	18bf762e 	bgeu	r3,r2,13f28 <__alt_exception_stack_pointer+0xf8013f28>
   14150:	ad7fff84 	addi	r21,r21,-2
   14154:	1f07883a 	add	r3,r3,fp
   14158:	003f7406 	br	13f2c <__alt_exception_stack_pointer+0xf8013f2c>
   1415c:	1839883a 	mov	fp,r3
   14160:	003fdd06 	br	140d8 <__alt_exception_stack_pointer+0xf80140d8>
   14164:	182f883a 	mov	r23,r3
   14168:	003fc506 	br	14080 <__alt_exception_stack_pointer+0xf8014080>
   1416c:	b5bfff84 	addi	r22,r22,-2
   14170:	3c4f883a 	add	r7,r7,r17
   14174:	003f1a06 	br	13de0 <__alt_exception_stack_pointer+0xf8013de0>
   14178:	b5bfff84 	addi	r22,r22,-2
   1417c:	1c47883a 	add	r3,r3,r17
   14180:	003ebc06 	br	13c74 <__alt_exception_stack_pointer+0xf8013c74>

00014184 <__umoddi3>:
   14184:	defff304 	addi	sp,sp,-52
   14188:	df000b15 	stw	fp,44(sp)
   1418c:	dc400415 	stw	r17,16(sp)
   14190:	dc000315 	stw	r16,12(sp)
   14194:	dfc00c15 	stw	ra,48(sp)
   14198:	ddc00a15 	stw	r23,40(sp)
   1419c:	dd800915 	stw	r22,36(sp)
   141a0:	dd400815 	stw	r21,32(sp)
   141a4:	dd000715 	stw	r20,28(sp)
   141a8:	dcc00615 	stw	r19,24(sp)
   141ac:	dc800515 	stw	r18,20(sp)
   141b0:	2021883a 	mov	r16,r4
   141b4:	2823883a 	mov	r17,r5
   141b8:	2839883a 	mov	fp,r5
   141bc:	3800401e 	bne	r7,zero,142c0 <__umoddi3+0x13c>
   141c0:	3027883a 	mov	r19,r6
   141c4:	2029883a 	mov	r20,r4
   141c8:	2980552e 	bgeu	r5,r6,14320 <__umoddi3+0x19c>
   141cc:	00bfffd4 	movui	r2,65535
   141d0:	1180a236 	bltu	r2,r6,1445c <__umoddi3+0x2d8>
   141d4:	01003fc4 	movi	r4,255
   141d8:	2189803a 	cmpltu	r4,r4,r6
   141dc:	200890fa 	slli	r4,r4,3
   141e0:	3104d83a 	srl	r2,r6,r4
   141e4:	00c000b4 	movhi	r3,2
   141e8:	18e2ec04 	addi	r3,r3,-29776
   141ec:	1885883a 	add	r2,r3,r2
   141f0:	10c00003 	ldbu	r3,0(r2)
   141f4:	00800804 	movi	r2,32
   141f8:	1909883a 	add	r4,r3,r4
   141fc:	1125c83a 	sub	r18,r2,r4
   14200:	90000526 	beq	r18,zero,14218 <__umoddi3+0x94>
   14204:	8ca2983a 	sll	r17,r17,r18
   14208:	8108d83a 	srl	r4,r16,r4
   1420c:	34a6983a 	sll	r19,r6,r18
   14210:	84a8983a 	sll	r20,r16,r18
   14214:	2478b03a 	or	fp,r4,r17
   14218:	982cd43a 	srli	r22,r19,16
   1421c:	e009883a 	mov	r4,fp
   14220:	9dffffcc 	andi	r23,r19,65535
   14224:	b00b883a 	mov	r5,r22
   14228:	00068900 	call	6890 <__umodsi3>
   1422c:	b00b883a 	mov	r5,r22
   14230:	e009883a 	mov	r4,fp
   14234:	102b883a 	mov	r21,r2
   14238:	000682c0 	call	682c <__udivsi3>
   1423c:	100b883a 	mov	r5,r2
   14240:	b809883a 	mov	r4,r23
   14244:	00068e80 	call	68e8 <__mulsi3>
   14248:	a82a943a 	slli	r21,r21,16
   1424c:	a006d43a 	srli	r3,r20,16
   14250:	1d46b03a 	or	r3,r3,r21
   14254:	1880032e 	bgeu	r3,r2,14264 <__umoddi3+0xe0>
   14258:	1cc7883a 	add	r3,r3,r19
   1425c:	1cc00136 	bltu	r3,r19,14264 <__umoddi3+0xe0>
   14260:	18813136 	bltu	r3,r2,14728 <__umoddi3+0x5a4>
   14264:	18a1c83a 	sub	r16,r3,r2
   14268:	b00b883a 	mov	r5,r22
   1426c:	8009883a 	mov	r4,r16
   14270:	00068900 	call	6890 <__umodsi3>
   14274:	b00b883a 	mov	r5,r22
   14278:	8009883a 	mov	r4,r16
   1427c:	1023883a 	mov	r17,r2
   14280:	000682c0 	call	682c <__udivsi3>
   14284:	100b883a 	mov	r5,r2
   14288:	b809883a 	mov	r4,r23
   1428c:	8822943a 	slli	r17,r17,16
   14290:	00068e80 	call	68e8 <__mulsi3>
   14294:	a0ffffcc 	andi	r3,r20,65535
   14298:	1c46b03a 	or	r3,r3,r17
   1429c:	1880042e 	bgeu	r3,r2,142b0 <__umoddi3+0x12c>
   142a0:	1cc7883a 	add	r3,r3,r19
   142a4:	1cc00236 	bltu	r3,r19,142b0 <__umoddi3+0x12c>
   142a8:	1880012e 	bgeu	r3,r2,142b0 <__umoddi3+0x12c>
   142ac:	1cc7883a 	add	r3,r3,r19
   142b0:	1885c83a 	sub	r2,r3,r2
   142b4:	1484d83a 	srl	r2,r2,r18
   142b8:	0007883a 	mov	r3,zero
   142bc:	00005306 	br	1440c <__umoddi3+0x288>
   142c0:	29c05036 	bltu	r5,r7,14404 <__umoddi3+0x280>
   142c4:	00bfffd4 	movui	r2,65535
   142c8:	11c05c2e 	bgeu	r2,r7,1443c <__umoddi3+0x2b8>
   142cc:	00804034 	movhi	r2,256
   142d0:	10bfffc4 	addi	r2,r2,-1
   142d4:	11c10636 	bltu	r2,r7,146f0 <__umoddi3+0x56c>
   142d8:	01000404 	movi	r4,16
   142dc:	3904d83a 	srl	r2,r7,r4
   142e0:	00c000b4 	movhi	r3,2
   142e4:	18e2ec04 	addi	r3,r3,-29776
   142e8:	1885883a 	add	r2,r3,r2
   142ec:	14c00003 	ldbu	r19,0(r2)
   142f0:	00c00804 	movi	r3,32
   142f4:	9927883a 	add	r19,r19,r4
   142f8:	1ce9c83a 	sub	r20,r3,r19
   142fc:	a0005c1e 	bne	r20,zero,14470 <__umoddi3+0x2ec>
   14300:	3c400136 	bltu	r7,r17,14308 <__umoddi3+0x184>
   14304:	81810a36 	bltu	r16,r6,14730 <__umoddi3+0x5ac>
   14308:	8185c83a 	sub	r2,r16,r6
   1430c:	89e3c83a 	sub	r17,r17,r7
   14310:	8089803a 	cmpltu	r4,r16,r2
   14314:	8939c83a 	sub	fp,r17,r4
   14318:	e007883a 	mov	r3,fp
   1431c:	00003b06 	br	1440c <__umoddi3+0x288>
   14320:	3000041e 	bne	r6,zero,14334 <__umoddi3+0x1b0>
   14324:	000b883a 	mov	r5,zero
   14328:	01000044 	movi	r4,1
   1432c:	000682c0 	call	682c <__udivsi3>
   14330:	1027883a 	mov	r19,r2
   14334:	00bfffd4 	movui	r2,65535
   14338:	14c0442e 	bgeu	r2,r19,1444c <__umoddi3+0x2c8>
   1433c:	00804034 	movhi	r2,256
   14340:	10bfffc4 	addi	r2,r2,-1
   14344:	14c0ec36 	bltu	r2,r19,146f8 <__umoddi3+0x574>
   14348:	00800404 	movi	r2,16
   1434c:	9886d83a 	srl	r3,r19,r2
   14350:	010000b4 	movhi	r4,2
   14354:	2122ec04 	addi	r4,r4,-29776
   14358:	20c7883a 	add	r3,r4,r3
   1435c:	18c00003 	ldbu	r3,0(r3)
   14360:	1887883a 	add	r3,r3,r2
   14364:	00800804 	movi	r2,32
   14368:	10e5c83a 	sub	r18,r2,r3
   1436c:	9000ab1e 	bne	r18,zero,1461c <__umoddi3+0x498>
   14370:	982cd43a 	srli	r22,r19,16
   14374:	8ce3c83a 	sub	r17,r17,r19
   14378:	9dffffcc 	andi	r23,r19,65535
   1437c:	b00b883a 	mov	r5,r22
   14380:	8809883a 	mov	r4,r17
   14384:	00068900 	call	6890 <__umodsi3>
   14388:	b00b883a 	mov	r5,r22
   1438c:	8809883a 	mov	r4,r17
   14390:	102b883a 	mov	r21,r2
   14394:	000682c0 	call	682c <__udivsi3>
   14398:	b80b883a 	mov	r5,r23
   1439c:	1009883a 	mov	r4,r2
   143a0:	00068e80 	call	68e8 <__mulsi3>
   143a4:	a82a943a 	slli	r21,r21,16
   143a8:	a006d43a 	srli	r3,r20,16
   143ac:	1d46b03a 	or	r3,r3,r21
   143b0:	1880042e 	bgeu	r3,r2,143c4 <__umoddi3+0x240>
   143b4:	1cc7883a 	add	r3,r3,r19
   143b8:	1cc00236 	bltu	r3,r19,143c4 <__umoddi3+0x240>
   143bc:	1880012e 	bgeu	r3,r2,143c4 <__umoddi3+0x240>
   143c0:	1cc7883a 	add	r3,r3,r19
   143c4:	18a1c83a 	sub	r16,r3,r2
   143c8:	b00b883a 	mov	r5,r22
   143cc:	8009883a 	mov	r4,r16
   143d0:	00068900 	call	6890 <__umodsi3>
   143d4:	1023883a 	mov	r17,r2
   143d8:	b00b883a 	mov	r5,r22
   143dc:	8009883a 	mov	r4,r16
   143e0:	000682c0 	call	682c <__udivsi3>
   143e4:	8822943a 	slli	r17,r17,16
   143e8:	b80b883a 	mov	r5,r23
   143ec:	1009883a 	mov	r4,r2
   143f0:	00068e80 	call	68e8 <__mulsi3>
   143f4:	a53fffcc 	andi	r20,r20,65535
   143f8:	a446b03a 	or	r3,r20,r17
   143fc:	18bfac2e 	bgeu	r3,r2,142b0 <__alt_exception_stack_pointer+0xf80142b0>
   14400:	003fa706 	br	142a0 <__alt_exception_stack_pointer+0xf80142a0>
   14404:	2005883a 	mov	r2,r4
   14408:	2807883a 	mov	r3,r5
   1440c:	dfc00c17 	ldw	ra,48(sp)
   14410:	df000b17 	ldw	fp,44(sp)
   14414:	ddc00a17 	ldw	r23,40(sp)
   14418:	dd800917 	ldw	r22,36(sp)
   1441c:	dd400817 	ldw	r21,32(sp)
   14420:	dd000717 	ldw	r20,28(sp)
   14424:	dcc00617 	ldw	r19,24(sp)
   14428:	dc800517 	ldw	r18,20(sp)
   1442c:	dc400417 	ldw	r17,16(sp)
   14430:	dc000317 	ldw	r16,12(sp)
   14434:	dec00d04 	addi	sp,sp,52
   14438:	f800283a 	ret
   1443c:	04c03fc4 	movi	r19,255
   14440:	99c9803a 	cmpltu	r4,r19,r7
   14444:	200890fa 	slli	r4,r4,3
   14448:	003fa406 	br	142dc <__alt_exception_stack_pointer+0xf80142dc>
   1444c:	00803fc4 	movi	r2,255
   14450:	14c5803a 	cmpltu	r2,r2,r19
   14454:	100490fa 	slli	r2,r2,3
   14458:	003fbc06 	br	1434c <__alt_exception_stack_pointer+0xf801434c>
   1445c:	00804034 	movhi	r2,256
   14460:	10bfffc4 	addi	r2,r2,-1
   14464:	1180a636 	bltu	r2,r6,14700 <__umoddi3+0x57c>
   14468:	01000404 	movi	r4,16
   1446c:	003f5c06 	br	141e0 <__alt_exception_stack_pointer+0xf80141e0>
   14470:	3d0e983a 	sll	r7,r7,r20
   14474:	34ead83a 	srl	r21,r6,r19
   14478:	8cc6d83a 	srl	r3,r17,r19
   1447c:	8d10983a 	sll	r8,r17,r20
   14480:	3d6ab03a 	or	r21,r7,r21
   14484:	a82cd43a 	srli	r22,r21,16
   14488:	84e2d83a 	srl	r17,r16,r19
   1448c:	1809883a 	mov	r4,r3
   14490:	b00b883a 	mov	r5,r22
   14494:	8a22b03a 	or	r17,r17,r8
   14498:	3524983a 	sll	r18,r6,r20
   1449c:	dc400015 	stw	r17,0(sp)
   144a0:	d8c00115 	stw	r3,4(sp)
   144a4:	00068900 	call	6890 <__umodsi3>
   144a8:	d8c00117 	ldw	r3,4(sp)
   144ac:	b00b883a 	mov	r5,r22
   144b0:	1039883a 	mov	fp,r2
   144b4:	1809883a 	mov	r4,r3
   144b8:	000682c0 	call	682c <__udivsi3>
   144bc:	adffffcc 	andi	r23,r21,65535
   144c0:	100b883a 	mov	r5,r2
   144c4:	b809883a 	mov	r4,r23
   144c8:	1023883a 	mov	r17,r2
   144cc:	00068e80 	call	68e8 <__mulsi3>
   144d0:	d9400017 	ldw	r5,0(sp)
   144d4:	e008943a 	slli	r4,fp,16
   144d8:	8520983a 	sll	r16,r16,r20
   144dc:	2806d43a 	srli	r3,r5,16
   144e0:	1906b03a 	or	r3,r3,r4
   144e4:	1880042e 	bgeu	r3,r2,144f8 <__umoddi3+0x374>
   144e8:	1d47883a 	add	r3,r3,r21
   144ec:	893fffc4 	addi	r4,r17,-1
   144f0:	1d40892e 	bgeu	r3,r21,14718 <__umoddi3+0x594>
   144f4:	2023883a 	mov	r17,r4
   144f8:	18b9c83a 	sub	fp,r3,r2
   144fc:	b00b883a 	mov	r5,r22
   14500:	e009883a 	mov	r4,fp
   14504:	00068900 	call	6890 <__umodsi3>
   14508:	b00b883a 	mov	r5,r22
   1450c:	e009883a 	mov	r4,fp
   14510:	d8800215 	stw	r2,8(sp)
   14514:	000682c0 	call	682c <__udivsi3>
   14518:	100b883a 	mov	r5,r2
   1451c:	b809883a 	mov	r4,r23
   14520:	102d883a 	mov	r22,r2
   14524:	00068e80 	call	68e8 <__mulsi3>
   14528:	d9800217 	ldw	r6,8(sp)
   1452c:	d8c00017 	ldw	r3,0(sp)
   14530:	300c943a 	slli	r6,r6,16
   14534:	1a3fffcc 	andi	r8,r3,65535
   14538:	4190b03a 	or	r8,r8,r6
   1453c:	4080042e 	bgeu	r8,r2,14550 <__umoddi3+0x3cc>
   14540:	4551883a 	add	r8,r8,r21
   14544:	b0ffffc4 	addi	r3,r22,-1
   14548:	45406f2e 	bgeu	r8,r21,14708 <__umoddi3+0x584>
   1454c:	182d883a 	mov	r22,r3
   14550:	880e943a 	slli	r7,r17,16
   14554:	9006d43a 	srli	r3,r18,16
   14558:	91bfffcc 	andi	r6,r18,65535
   1455c:	3dacb03a 	or	r22,r7,r22
   14560:	b02ed43a 	srli	r23,r22,16
   14564:	b5bfffcc 	andi	r22,r22,65535
   14568:	300b883a 	mov	r5,r6
   1456c:	b009883a 	mov	r4,r22
   14570:	40a3c83a 	sub	r17,r8,r2
   14574:	d8c00115 	stw	r3,4(sp)
   14578:	d9800215 	stw	r6,8(sp)
   1457c:	00068e80 	call	68e8 <__mulsi3>
   14580:	d9800217 	ldw	r6,8(sp)
   14584:	b809883a 	mov	r4,r23
   14588:	1039883a 	mov	fp,r2
   1458c:	300b883a 	mov	r5,r6
   14590:	00068e80 	call	68e8 <__mulsi3>
   14594:	d8c00117 	ldw	r3,4(sp)
   14598:	b809883a 	mov	r4,r23
   1459c:	d8800215 	stw	r2,8(sp)
   145a0:	180b883a 	mov	r5,r3
   145a4:	00068e80 	call	68e8 <__mulsi3>
   145a8:	d8c00117 	ldw	r3,4(sp)
   145ac:	b009883a 	mov	r4,r22
   145b0:	102f883a 	mov	r23,r2
   145b4:	180b883a 	mov	r5,r3
   145b8:	00068e80 	call	68e8 <__mulsi3>
   145bc:	d9800217 	ldw	r6,8(sp)
   145c0:	e006d43a 	srli	r3,fp,16
   145c4:	1185883a 	add	r2,r2,r6
   145c8:	1885883a 	add	r2,r3,r2
   145cc:	1180022e 	bgeu	r2,r6,145d8 <__umoddi3+0x454>
   145d0:	00c00074 	movhi	r3,1
   145d4:	b8ef883a 	add	r23,r23,r3
   145d8:	1006d43a 	srli	r3,r2,16
   145dc:	1004943a 	slli	r2,r2,16
   145e0:	e73fffcc 	andi	fp,fp,65535
   145e4:	1dc7883a 	add	r3,r3,r23
   145e8:	1739883a 	add	fp,r2,fp
   145ec:	88c03a36 	bltu	r17,r3,146d8 <__umoddi3+0x554>
   145f0:	88c05126 	beq	r17,r3,14738 <__umoddi3+0x5b4>
   145f4:	88c9c83a 	sub	r4,r17,r3
   145f8:	e00f883a 	mov	r7,fp
   145fc:	81cfc83a 	sub	r7,r16,r7
   14600:	81c7803a 	cmpltu	r3,r16,r7
   14604:	20c7c83a 	sub	r3,r4,r3
   14608:	1cc4983a 	sll	r2,r3,r19
   1460c:	3d0ed83a 	srl	r7,r7,r20
   14610:	1d06d83a 	srl	r3,r3,r20
   14614:	11c4b03a 	or	r2,r2,r7
   14618:	003f7c06 	br	1440c <__alt_exception_stack_pointer+0xf801440c>
   1461c:	9ca6983a 	sll	r19,r19,r18
   14620:	88f8d83a 	srl	fp,r17,r3
   14624:	80c4d83a 	srl	r2,r16,r3
   14628:	982cd43a 	srli	r22,r19,16
   1462c:	8ca2983a 	sll	r17,r17,r18
   14630:	e009883a 	mov	r4,fp
   14634:	b00b883a 	mov	r5,r22
   14638:	146ab03a 	or	r21,r2,r17
   1463c:	00068900 	call	6890 <__umodsi3>
   14640:	b00b883a 	mov	r5,r22
   14644:	e009883a 	mov	r4,fp
   14648:	1029883a 	mov	r20,r2
   1464c:	9dffffcc 	andi	r23,r19,65535
   14650:	000682c0 	call	682c <__udivsi3>
   14654:	b809883a 	mov	r4,r23
   14658:	100b883a 	mov	r5,r2
   1465c:	00068e80 	call	68e8 <__mulsi3>
   14660:	a008943a 	slli	r4,r20,16
   14664:	a806d43a 	srli	r3,r21,16
   14668:	84a8983a 	sll	r20,r16,r18
   1466c:	1906b03a 	or	r3,r3,r4
   14670:	1880042e 	bgeu	r3,r2,14684 <__umoddi3+0x500>
   14674:	1cc7883a 	add	r3,r3,r19
   14678:	1cc00236 	bltu	r3,r19,14684 <__umoddi3+0x500>
   1467c:	1880012e 	bgeu	r3,r2,14684 <__umoddi3+0x500>
   14680:	1cc7883a 	add	r3,r3,r19
   14684:	18a3c83a 	sub	r17,r3,r2
   14688:	b00b883a 	mov	r5,r22
   1468c:	8809883a 	mov	r4,r17
   14690:	00068900 	call	6890 <__umodsi3>
   14694:	b00b883a 	mov	r5,r22
   14698:	8809883a 	mov	r4,r17
   1469c:	1021883a 	mov	r16,r2
   146a0:	000682c0 	call	682c <__udivsi3>
   146a4:	100b883a 	mov	r5,r2
   146a8:	b809883a 	mov	r4,r23
   146ac:	8020943a 	slli	r16,r16,16
   146b0:	00068e80 	call	68e8 <__mulsi3>
   146b4:	a8ffffcc 	andi	r3,r21,65535
   146b8:	1c06b03a 	or	r3,r3,r16
   146bc:	1880042e 	bgeu	r3,r2,146d0 <__umoddi3+0x54c>
   146c0:	1cc7883a 	add	r3,r3,r19
   146c4:	1cc00236 	bltu	r3,r19,146d0 <__umoddi3+0x54c>
   146c8:	1880012e 	bgeu	r3,r2,146d0 <__umoddi3+0x54c>
   146cc:	1cc7883a 	add	r3,r3,r19
   146d0:	18a3c83a 	sub	r17,r3,r2
   146d4:	003f2906 	br	1437c <__alt_exception_stack_pointer+0xf801437c>
   146d8:	e48fc83a 	sub	r7,fp,r18
   146dc:	1d49c83a 	sub	r4,r3,r21
   146e0:	e1f9803a 	cmpltu	fp,fp,r7
   146e4:	2739c83a 	sub	fp,r4,fp
   146e8:	8f09c83a 	sub	r4,r17,fp
   146ec:	003fc306 	br	145fc <__alt_exception_stack_pointer+0xf80145fc>
   146f0:	01000604 	movi	r4,24
   146f4:	003ef906 	br	142dc <__alt_exception_stack_pointer+0xf80142dc>
   146f8:	00800604 	movi	r2,24
   146fc:	003f1306 	br	1434c <__alt_exception_stack_pointer+0xf801434c>
   14700:	01000604 	movi	r4,24
   14704:	003eb606 	br	141e0 <__alt_exception_stack_pointer+0xf80141e0>
   14708:	40bf902e 	bgeu	r8,r2,1454c <__alt_exception_stack_pointer+0xf801454c>
   1470c:	b5bfff84 	addi	r22,r22,-2
   14710:	4551883a 	add	r8,r8,r21
   14714:	003f8e06 	br	14550 <__alt_exception_stack_pointer+0xf8014550>
   14718:	18bf762e 	bgeu	r3,r2,144f4 <__alt_exception_stack_pointer+0xf80144f4>
   1471c:	8c7fff84 	addi	r17,r17,-2
   14720:	1d47883a 	add	r3,r3,r21
   14724:	003f7406 	br	144f8 <__alt_exception_stack_pointer+0xf80144f8>
   14728:	1cc7883a 	add	r3,r3,r19
   1472c:	003ecd06 	br	14264 <__alt_exception_stack_pointer+0xf8014264>
   14730:	8005883a 	mov	r2,r16
   14734:	003ef806 	br	14318 <__alt_exception_stack_pointer+0xf8014318>
   14738:	873fe736 	bltu	r16,fp,146d8 <__alt_exception_stack_pointer+0xf80146d8>
   1473c:	e00f883a 	mov	r7,fp
   14740:	0009883a 	mov	r4,zero
   14744:	003fad06 	br	145fc <__alt_exception_stack_pointer+0xf80145fc>

00014748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14748:	defffe04 	addi	sp,sp,-8
   1474c:	dfc00115 	stw	ra,4(sp)
   14750:	df000015 	stw	fp,0(sp)
   14754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14758:	d0a01117 	ldw	r2,-32700(gp)
   1475c:	10000326 	beq	r2,zero,1476c <alt_get_errno+0x24>
   14760:	d0a01117 	ldw	r2,-32700(gp)
   14764:	103ee83a 	callr	r2
   14768:	00000106 	br	14770 <alt_get_errno+0x28>
   1476c:	d0a8f904 	addi	r2,gp,-23580
}
   14770:	e037883a 	mov	sp,fp
   14774:	dfc00117 	ldw	ra,4(sp)
   14778:	df000017 	ldw	fp,0(sp)
   1477c:	dec00204 	addi	sp,sp,8
   14780:	f800283a 	ret

00014784 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   14784:	defffb04 	addi	sp,sp,-20
   14788:	dfc00415 	stw	ra,16(sp)
   1478c:	df000315 	stw	fp,12(sp)
   14790:	df000304 	addi	fp,sp,12
   14794:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   14798:	e0bfff17 	ldw	r2,-4(fp)
   1479c:	10000816 	blt	r2,zero,147c0 <close+0x3c>
   147a0:	01400304 	movi	r5,12
   147a4:	e13fff17 	ldw	r4,-4(fp)
   147a8:	00068e80 	call	68e8 <__mulsi3>
   147ac:	1007883a 	mov	r3,r2
   147b0:	008000b4 	movhi	r2,2
   147b4:	10a7a804 	addi	r2,r2,-24928
   147b8:	1885883a 	add	r2,r3,r2
   147bc:	00000106 	br	147c4 <close+0x40>
   147c0:	0005883a 	mov	r2,zero
   147c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   147c8:	e0bffd17 	ldw	r2,-12(fp)
   147cc:	10001926 	beq	r2,zero,14834 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   147d0:	e0bffd17 	ldw	r2,-12(fp)
   147d4:	10800017 	ldw	r2,0(r2)
   147d8:	10800417 	ldw	r2,16(r2)
   147dc:	10000626 	beq	r2,zero,147f8 <close+0x74>
   147e0:	e0bffd17 	ldw	r2,-12(fp)
   147e4:	10800017 	ldw	r2,0(r2)
   147e8:	10800417 	ldw	r2,16(r2)
   147ec:	e13ffd17 	ldw	r4,-12(fp)
   147f0:	103ee83a 	callr	r2
   147f4:	00000106 	br	147fc <close+0x78>
   147f8:	0005883a 	mov	r2,zero
   147fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   14800:	e13fff17 	ldw	r4,-4(fp)
   14804:	001501c0 	call	1501c <alt_release_fd>
    if (rval < 0)
   14808:	e0bffe17 	ldw	r2,-8(fp)
   1480c:	1000070e 	bge	r2,zero,1482c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   14810:	00147480 	call	14748 <alt_get_errno>
   14814:	1007883a 	mov	r3,r2
   14818:	e0bffe17 	ldw	r2,-8(fp)
   1481c:	0085c83a 	sub	r2,zero,r2
   14820:	18800015 	stw	r2,0(r3)
      return -1;
   14824:	00bfffc4 	movi	r2,-1
   14828:	00000706 	br	14848 <close+0xc4>
    }
    return 0;
   1482c:	0005883a 	mov	r2,zero
   14830:	00000506 	br	14848 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14834:	00147480 	call	14748 <alt_get_errno>
   14838:	1007883a 	mov	r3,r2
   1483c:	00801444 	movi	r2,81
   14840:	18800015 	stw	r2,0(r3)
    return -1;
   14844:	00bfffc4 	movi	r2,-1
  }
}
   14848:	e037883a 	mov	sp,fp
   1484c:	dfc00117 	ldw	ra,4(sp)
   14850:	df000017 	ldw	fp,0(sp)
   14854:	dec00204 	addi	sp,sp,8
   14858:	f800283a 	ret

0001485c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1485c:	defffc04 	addi	sp,sp,-16
   14860:	df000315 	stw	fp,12(sp)
   14864:	df000304 	addi	fp,sp,12
   14868:	e13ffd15 	stw	r4,-12(fp)
   1486c:	e17ffe15 	stw	r5,-8(fp)
   14870:	e1bfff15 	stw	r6,-4(fp)
  return len;
   14874:	e0bfff17 	ldw	r2,-4(fp)
}
   14878:	e037883a 	mov	sp,fp
   1487c:	df000017 	ldw	fp,0(sp)
   14880:	dec00104 	addi	sp,sp,4
   14884:	f800283a 	ret

00014888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14888:	defffe04 	addi	sp,sp,-8
   1488c:	dfc00115 	stw	ra,4(sp)
   14890:	df000015 	stw	fp,0(sp)
   14894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14898:	d0a01117 	ldw	r2,-32700(gp)
   1489c:	10000326 	beq	r2,zero,148ac <alt_get_errno+0x24>
   148a0:	d0a01117 	ldw	r2,-32700(gp)
   148a4:	103ee83a 	callr	r2
   148a8:	00000106 	br	148b0 <alt_get_errno+0x28>
   148ac:	d0a8f904 	addi	r2,gp,-23580
}
   148b0:	e037883a 	mov	sp,fp
   148b4:	dfc00117 	ldw	ra,4(sp)
   148b8:	df000017 	ldw	fp,0(sp)
   148bc:	dec00204 	addi	sp,sp,8
   148c0:	f800283a 	ret

000148c4 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
   148c4:	defffc04 	addi	sp,sp,-16
   148c8:	dfc00315 	stw	ra,12(sp)
   148cc:	df000215 	stw	fp,8(sp)
   148d0:	df000204 	addi	fp,sp,8
   148d4:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
   148d8:	d1600d04 	addi	r5,gp,-32716
   148dc:	e13fff17 	ldw	r4,-4(fp)
   148e0:	00149a80 	call	149a8 <alt_find_dev>
   148e4:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
   148e8:	e0bffe17 	ldw	r2,-8(fp)
   148ec:	1000041e 	bne	r2,zero,14900 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   148f0:	00148880 	call	14888 <alt_get_errno>
   148f4:	1007883a 	mov	r3,r2
   148f8:	008004c4 	movi	r2,19
   148fc:	18800015 	stw	r2,0(r3)
  }

  return dev;
   14900:	e0bffe17 	ldw	r2,-8(fp)
}
   14904:	e037883a 	mov	sp,fp
   14908:	dfc00117 	ldw	ra,4(sp)
   1490c:	df000017 	ldw	fp,0(sp)
   14910:	dec00204 	addi	sp,sp,8
   14914:	f800283a 	ret

00014918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14918:	defffe04 	addi	sp,sp,-8
   1491c:	dfc00115 	stw	ra,4(sp)
   14920:	df000015 	stw	fp,0(sp)
   14924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14928:	d0a01117 	ldw	r2,-32700(gp)
   1492c:	10000326 	beq	r2,zero,1493c <alt_get_errno+0x24>
   14930:	d0a01117 	ldw	r2,-32700(gp)
   14934:	103ee83a 	callr	r2
   14938:	00000106 	br	14940 <alt_get_errno+0x28>
   1493c:	d0a8f904 	addi	r2,gp,-23580
}
   14940:	e037883a 	mov	sp,fp
   14944:	dfc00117 	ldw	ra,4(sp)
   14948:	df000017 	ldw	fp,0(sp)
   1494c:	dec00204 	addi	sp,sp,8
   14950:	f800283a 	ret

00014954 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
   14954:	defffc04 	addi	sp,sp,-16
   14958:	dfc00315 	stw	ra,12(sp)
   1495c:	df000215 	stw	fp,8(sp)
   14960:	df000204 	addi	fp,sp,8
   14964:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
   14968:	d1600f04 	addi	r5,gp,-32708
   1496c:	e13fff17 	ldw	r4,-4(fp)
   14970:	00149a80 	call	149a8 <alt_find_dev>
   14974:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
   14978:	e0bffe17 	ldw	r2,-8(fp)
   1497c:	1000041e 	bne	r2,zero,14990 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   14980:	00149180 	call	14918 <alt_get_errno>
   14984:	1007883a 	mov	r3,r2
   14988:	008004c4 	movi	r2,19
   1498c:	18800015 	stw	r2,0(r3)
  }

  return dev;
   14990:	e0bffe17 	ldw	r2,-8(fp)
}
   14994:	e037883a 	mov	sp,fp
   14998:	dfc00117 	ldw	ra,4(sp)
   1499c:	df000017 	ldw	fp,0(sp)
   149a0:	dec00204 	addi	sp,sp,8
   149a4:	f800283a 	ret

000149a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   149a8:	defffa04 	addi	sp,sp,-24
   149ac:	dfc00515 	stw	ra,20(sp)
   149b0:	df000415 	stw	fp,16(sp)
   149b4:	df000404 	addi	fp,sp,16
   149b8:	e13ffe15 	stw	r4,-8(fp)
   149bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   149c0:	e0bfff17 	ldw	r2,-4(fp)
   149c4:	10800017 	ldw	r2,0(r2)
   149c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   149cc:	e13ffe17 	ldw	r4,-8(fp)
   149d0:	000a0580 	call	a058 <strlen>
   149d4:	10800044 	addi	r2,r2,1
   149d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   149dc:	00000d06 	br	14a14 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   149e0:	e0bffc17 	ldw	r2,-16(fp)
   149e4:	10800217 	ldw	r2,8(r2)
   149e8:	e0fffd17 	ldw	r3,-12(fp)
   149ec:	180d883a 	mov	r6,r3
   149f0:	e17ffe17 	ldw	r5,-8(fp)
   149f4:	1009883a 	mov	r4,r2
   149f8:	0017da40 	call	17da4 <memcmp>
   149fc:	1000021e 	bne	r2,zero,14a08 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14a00:	e0bffc17 	ldw	r2,-16(fp)
   14a04:	00000706 	br	14a24 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14a08:	e0bffc17 	ldw	r2,-16(fp)
   14a0c:	10800017 	ldw	r2,0(r2)
   14a10:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14a14:	e0fffc17 	ldw	r3,-16(fp)
   14a18:	e0bfff17 	ldw	r2,-4(fp)
   14a1c:	18bff01e 	bne	r3,r2,149e0 <__alt_exception_stack_pointer+0xf80149e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14a20:	0005883a 	mov	r2,zero
}
   14a24:	e037883a 	mov	sp,fp
   14a28:	dfc00117 	ldw	ra,4(sp)
   14a2c:	df000017 	ldw	fp,0(sp)
   14a30:	dec00204 	addi	sp,sp,8
   14a34:	f800283a 	ret

00014a38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14a38:	defffe04 	addi	sp,sp,-8
   14a3c:	dfc00115 	stw	ra,4(sp)
   14a40:	df000015 	stw	fp,0(sp)
   14a44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14a48:	d0a01117 	ldw	r2,-32700(gp)
   14a4c:	10000326 	beq	r2,zero,14a5c <alt_get_errno+0x24>
   14a50:	d0a01117 	ldw	r2,-32700(gp)
   14a54:	103ee83a 	callr	r2
   14a58:	00000106 	br	14a60 <alt_get_errno+0x28>
   14a5c:	d0a8f904 	addi	r2,gp,-23580
}
   14a60:	e037883a 	mov	sp,fp
   14a64:	dfc00117 	ldw	ra,4(sp)
   14a68:	df000017 	ldw	fp,0(sp)
   14a6c:	dec00204 	addi	sp,sp,8
   14a70:	f800283a 	ret

00014a74 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   14a74:	defffb04 	addi	sp,sp,-20
   14a78:	dfc00415 	stw	ra,16(sp)
   14a7c:	df000315 	stw	fp,12(sp)
   14a80:	df000304 	addi	fp,sp,12
   14a84:	e13ffe15 	stw	r4,-8(fp)
   14a88:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14a8c:	e0bffe17 	ldw	r2,-8(fp)
   14a90:	10000816 	blt	r2,zero,14ab4 <fstat+0x40>
   14a94:	01400304 	movi	r5,12
   14a98:	e13ffe17 	ldw	r4,-8(fp)
   14a9c:	00068e80 	call	68e8 <__mulsi3>
   14aa0:	1007883a 	mov	r3,r2
   14aa4:	008000b4 	movhi	r2,2
   14aa8:	10a7a804 	addi	r2,r2,-24928
   14aac:	1885883a 	add	r2,r3,r2
   14ab0:	00000106 	br	14ab8 <fstat+0x44>
   14ab4:	0005883a 	mov	r2,zero
   14ab8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   14abc:	e0bffd17 	ldw	r2,-12(fp)
   14ac0:	10001026 	beq	r2,zero,14b04 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   14ac4:	e0bffd17 	ldw	r2,-12(fp)
   14ac8:	10800017 	ldw	r2,0(r2)
   14acc:	10800817 	ldw	r2,32(r2)
   14ad0:	10000726 	beq	r2,zero,14af0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   14ad4:	e0bffd17 	ldw	r2,-12(fp)
   14ad8:	10800017 	ldw	r2,0(r2)
   14adc:	10800817 	ldw	r2,32(r2)
   14ae0:	e17fff17 	ldw	r5,-4(fp)
   14ae4:	e13ffd17 	ldw	r4,-12(fp)
   14ae8:	103ee83a 	callr	r2
   14aec:	00000a06 	br	14b18 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   14af0:	e0bfff17 	ldw	r2,-4(fp)
   14af4:	00c80004 	movi	r3,8192
   14af8:	10c00115 	stw	r3,4(r2)
      return 0;
   14afc:	0005883a 	mov	r2,zero
   14b00:	00000506 	br	14b18 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14b04:	0014a380 	call	14a38 <alt_get_errno>
   14b08:	1007883a 	mov	r3,r2
   14b0c:	00801444 	movi	r2,81
   14b10:	18800015 	stw	r2,0(r3)
    return -1;
   14b14:	00bfffc4 	movi	r2,-1
  }
}
   14b18:	e037883a 	mov	sp,fp
   14b1c:	dfc00117 	ldw	ra,4(sp)
   14b20:	df000017 	ldw	fp,0(sp)
   14b24:	dec00204 	addi	sp,sp,8
   14b28:	f800283a 	ret

00014b2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b2c:	defffe04 	addi	sp,sp,-8
   14b30:	dfc00115 	stw	ra,4(sp)
   14b34:	df000015 	stw	fp,0(sp)
   14b38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b3c:	d0a01117 	ldw	r2,-32700(gp)
   14b40:	10000326 	beq	r2,zero,14b50 <alt_get_errno+0x24>
   14b44:	d0a01117 	ldw	r2,-32700(gp)
   14b48:	103ee83a 	callr	r2
   14b4c:	00000106 	br	14b54 <alt_get_errno+0x28>
   14b50:	d0a8f904 	addi	r2,gp,-23580
}
   14b54:	e037883a 	mov	sp,fp
   14b58:	dfc00117 	ldw	ra,4(sp)
   14b5c:	df000017 	ldw	fp,0(sp)
   14b60:	dec00204 	addi	sp,sp,8
   14b64:	f800283a 	ret

00014b68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   14b68:	deffed04 	addi	sp,sp,-76
   14b6c:	dfc01215 	stw	ra,72(sp)
   14b70:	df001115 	stw	fp,68(sp)
   14b74:	df001104 	addi	fp,sp,68
   14b78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14b7c:	e0bfff17 	ldw	r2,-4(fp)
   14b80:	10000816 	blt	r2,zero,14ba4 <isatty+0x3c>
   14b84:	01400304 	movi	r5,12
   14b88:	e13fff17 	ldw	r4,-4(fp)
   14b8c:	00068e80 	call	68e8 <__mulsi3>
   14b90:	1007883a 	mov	r3,r2
   14b94:	008000b4 	movhi	r2,2
   14b98:	10a7a804 	addi	r2,r2,-24928
   14b9c:	1885883a 	add	r2,r3,r2
   14ba0:	00000106 	br	14ba8 <isatty+0x40>
   14ba4:	0005883a 	mov	r2,zero
   14ba8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   14bac:	e0bfef17 	ldw	r2,-68(fp)
   14bb0:	10000e26 	beq	r2,zero,14bec <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   14bb4:	e0bfef17 	ldw	r2,-68(fp)
   14bb8:	10800017 	ldw	r2,0(r2)
   14bbc:	10800817 	ldw	r2,32(r2)
   14bc0:	1000021e 	bne	r2,zero,14bcc <isatty+0x64>
    {
      return 1;
   14bc4:	00800044 	movi	r2,1
   14bc8:	00000d06 	br	14c00 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   14bcc:	e0bff004 	addi	r2,fp,-64
   14bd0:	100b883a 	mov	r5,r2
   14bd4:	e13fff17 	ldw	r4,-4(fp)
   14bd8:	0014a740 	call	14a74 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   14bdc:	e0bff117 	ldw	r2,-60(fp)
   14be0:	10880020 	cmpeqi	r2,r2,8192
   14be4:	10803fcc 	andi	r2,r2,255
   14be8:	00000506 	br	14c00 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14bec:	0014b2c0 	call	14b2c <alt_get_errno>
   14bf0:	1007883a 	mov	r3,r2
   14bf4:	00801444 	movi	r2,81
   14bf8:	18800015 	stw	r2,0(r3)
    return 0;
   14bfc:	0005883a 	mov	r2,zero
  }
}
   14c00:	e037883a 	mov	sp,fp
   14c04:	dfc00117 	ldw	ra,4(sp)
   14c08:	df000017 	ldw	fp,0(sp)
   14c0c:	dec00204 	addi	sp,sp,8
   14c10:	f800283a 	ret

00014c14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14c14:	defffc04 	addi	sp,sp,-16
   14c18:	df000315 	stw	fp,12(sp)
   14c1c:	df000304 	addi	fp,sp,12
   14c20:	e13ffd15 	stw	r4,-12(fp)
   14c24:	e17ffe15 	stw	r5,-8(fp)
   14c28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   14c2c:	e0fffe17 	ldw	r3,-8(fp)
   14c30:	e0bffd17 	ldw	r2,-12(fp)
   14c34:	18800c26 	beq	r3,r2,14c68 <alt_load_section+0x54>
  {
    while( to != end )
   14c38:	00000806 	br	14c5c <alt_load_section+0x48>
    {
      *to++ = *from++;
   14c3c:	e0bffe17 	ldw	r2,-8(fp)
   14c40:	10c00104 	addi	r3,r2,4
   14c44:	e0fffe15 	stw	r3,-8(fp)
   14c48:	e0fffd17 	ldw	r3,-12(fp)
   14c4c:	19000104 	addi	r4,r3,4
   14c50:	e13ffd15 	stw	r4,-12(fp)
   14c54:	18c00017 	ldw	r3,0(r3)
   14c58:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   14c5c:	e0fffe17 	ldw	r3,-8(fp)
   14c60:	e0bfff17 	ldw	r2,-4(fp)
   14c64:	18bff51e 	bne	r3,r2,14c3c <__alt_exception_stack_pointer+0xf8014c3c>
    {
      *to++ = *from++;
    }
  }
}
   14c68:	0001883a 	nop
   14c6c:	e037883a 	mov	sp,fp
   14c70:	df000017 	ldw	fp,0(sp)
   14c74:	dec00104 	addi	sp,sp,4
   14c78:	f800283a 	ret

00014c7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   14c7c:	defffe04 	addi	sp,sp,-8
   14c80:	dfc00115 	stw	ra,4(sp)
   14c84:	df000015 	stw	fp,0(sp)
   14c88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   14c8c:	018000b4 	movhi	r6,2
   14c90:	31ac9204 	addi	r6,r6,-19896
   14c94:	014000b4 	movhi	r5,2
   14c98:	2963bc04 	addi	r5,r5,-28944
   14c9c:	010000b4 	movhi	r4,2
   14ca0:	212c9204 	addi	r4,r4,-19896
   14ca4:	0014c140 	call	14c14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   14ca8:	01800034 	movhi	r6,0
   14cac:	31808f04 	addi	r6,r6,572
   14cb0:	01400034 	movhi	r5,0
   14cb4:	29400804 	addi	r5,r5,32
   14cb8:	01000034 	movhi	r4,0
   14cbc:	21000804 	addi	r4,r4,32
   14cc0:	0014c140 	call	14c14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14cc4:	018000b4 	movhi	r6,2
   14cc8:	31a3bc04 	addi	r6,r6,-28944
   14ccc:	014000b4 	movhi	r5,2
   14cd0:	29603b04 	addi	r5,r5,-32532
   14cd4:	010000b4 	movhi	r4,2
   14cd8:	21203b04 	addi	r4,r4,-32532
   14cdc:	0014c140 	call	14c14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14ce0:	00170c40 	call	170c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14ce4:	00172840 	call	17284 <alt_icache_flush_all>
}
   14ce8:	0001883a 	nop
   14cec:	e037883a 	mov	sp,fp
   14cf0:	dfc00117 	ldw	ra,4(sp)
   14cf4:	df000017 	ldw	fp,0(sp)
   14cf8:	dec00204 	addi	sp,sp,8
   14cfc:	f800283a 	ret

00014d00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14d00:	defffe04 	addi	sp,sp,-8
   14d04:	dfc00115 	stw	ra,4(sp)
   14d08:	df000015 	stw	fp,0(sp)
   14d0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14d10:	d0a01117 	ldw	r2,-32700(gp)
   14d14:	10000326 	beq	r2,zero,14d24 <alt_get_errno+0x24>
   14d18:	d0a01117 	ldw	r2,-32700(gp)
   14d1c:	103ee83a 	callr	r2
   14d20:	00000106 	br	14d28 <alt_get_errno+0x28>
   14d24:	d0a8f904 	addi	r2,gp,-23580
}
   14d28:	e037883a 	mov	sp,fp
   14d2c:	dfc00117 	ldw	ra,4(sp)
   14d30:	df000017 	ldw	fp,0(sp)
   14d34:	dec00204 	addi	sp,sp,8
   14d38:	f800283a 	ret

00014d3c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14d3c:	defff904 	addi	sp,sp,-28
   14d40:	dfc00615 	stw	ra,24(sp)
   14d44:	df000515 	stw	fp,20(sp)
   14d48:	df000504 	addi	fp,sp,20
   14d4c:	e13ffd15 	stw	r4,-12(fp)
   14d50:	e17ffe15 	stw	r5,-8(fp)
   14d54:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   14d58:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14d5c:	e0bffd17 	ldw	r2,-12(fp)
   14d60:	10000816 	blt	r2,zero,14d84 <lseek+0x48>
   14d64:	01400304 	movi	r5,12
   14d68:	e13ffd17 	ldw	r4,-12(fp)
   14d6c:	00068e80 	call	68e8 <__mulsi3>
   14d70:	1007883a 	mov	r3,r2
   14d74:	008000b4 	movhi	r2,2
   14d78:	10a7a804 	addi	r2,r2,-24928
   14d7c:	1885883a 	add	r2,r3,r2
   14d80:	00000106 	br	14d88 <lseek+0x4c>
   14d84:	0005883a 	mov	r2,zero
   14d88:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   14d8c:	e0bffc17 	ldw	r2,-16(fp)
   14d90:	10001026 	beq	r2,zero,14dd4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14d94:	e0bffc17 	ldw	r2,-16(fp)
   14d98:	10800017 	ldw	r2,0(r2)
   14d9c:	10800717 	ldw	r2,28(r2)
   14da0:	10000926 	beq	r2,zero,14dc8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14da4:	e0bffc17 	ldw	r2,-16(fp)
   14da8:	10800017 	ldw	r2,0(r2)
   14dac:	10800717 	ldw	r2,28(r2)
   14db0:	e1bfff17 	ldw	r6,-4(fp)
   14db4:	e17ffe17 	ldw	r5,-8(fp)
   14db8:	e13ffc17 	ldw	r4,-16(fp)
   14dbc:	103ee83a 	callr	r2
   14dc0:	e0bffb15 	stw	r2,-20(fp)
   14dc4:	00000506 	br	14ddc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14dc8:	00bfde84 	movi	r2,-134
   14dcc:	e0bffb15 	stw	r2,-20(fp)
   14dd0:	00000206 	br	14ddc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   14dd4:	00bfebc4 	movi	r2,-81
   14dd8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   14ddc:	e0bffb17 	ldw	r2,-20(fp)
   14de0:	1000070e 	bge	r2,zero,14e00 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   14de4:	0014d000 	call	14d00 <alt_get_errno>
   14de8:	1007883a 	mov	r3,r2
   14dec:	e0bffb17 	ldw	r2,-20(fp)
   14df0:	0085c83a 	sub	r2,zero,r2
   14df4:	18800015 	stw	r2,0(r3)
    rc = -1;
   14df8:	00bfffc4 	movi	r2,-1
   14dfc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   14e00:	e0bffb17 	ldw	r2,-20(fp)
}
   14e04:	e037883a 	mov	sp,fp
   14e08:	dfc00117 	ldw	ra,4(sp)
   14e0c:	df000017 	ldw	fp,0(sp)
   14e10:	dec00204 	addi	sp,sp,8
   14e14:	f800283a 	ret

00014e18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14e18:	defffd04 	addi	sp,sp,-12
   14e1c:	dfc00215 	stw	ra,8(sp)
   14e20:	df000115 	stw	fp,4(sp)
   14e24:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14e28:	0009883a 	mov	r4,zero
   14e2c:	00153a40 	call	153a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14e30:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14e34:	00153dc0 	call	153dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14e38:	018000b4 	movhi	r6,2
   14e3c:	31a3a204 	addi	r6,r6,-29048
   14e40:	014000b4 	movhi	r5,2
   14e44:	2963a704 	addi	r5,r5,-29028
   14e48:	010000b4 	movhi	r4,2
   14e4c:	2123a204 	addi	r4,r4,-29048
   14e50:	00176280 	call	17628 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14e54:	00171c40 	call	171c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14e58:	01000074 	movhi	r4,1
   14e5c:	211c8904 	addi	r4,r4,29220
   14e60:	0017d580 	call	17d58 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14e64:	d0a8fd17 	ldw	r2,-23564(gp)
   14e68:	d0e8fe17 	ldw	r3,-23560(gp)
   14e6c:	d128ff17 	ldw	r4,-23556(gp)
   14e70:	200d883a 	mov	r6,r4
   14e74:	180b883a 	mov	r5,r3
   14e78:	1009883a 	mov	r4,r2
   14e7c:	00024440 	call	2444 <main>
   14e80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14e84:	01000044 	movi	r4,1
   14e88:	00147840 	call	14784 <close>
  exit (result);
   14e8c:	e13fff17 	ldw	r4,-4(fp)
   14e90:	0017d6c0 	call	17d6c <exit>

00014e94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14e94:	defffe04 	addi	sp,sp,-8
   14e98:	df000115 	stw	fp,4(sp)
   14e9c:	df000104 	addi	fp,sp,4
   14ea0:	e13fff15 	stw	r4,-4(fp)
}
   14ea4:	0001883a 	nop
   14ea8:	e037883a 	mov	sp,fp
   14eac:	df000017 	ldw	fp,0(sp)
   14eb0:	dec00104 	addi	sp,sp,4
   14eb4:	f800283a 	ret

00014eb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14eb8:	defffe04 	addi	sp,sp,-8
   14ebc:	df000115 	stw	fp,4(sp)
   14ec0:	df000104 	addi	fp,sp,4
   14ec4:	e13fff15 	stw	r4,-4(fp)
}
   14ec8:	0001883a 	nop
   14ecc:	e037883a 	mov	sp,fp
   14ed0:	df000017 	ldw	fp,0(sp)
   14ed4:	dec00104 	addi	sp,sp,4
   14ed8:	f800283a 	ret

00014edc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14edc:	defffe04 	addi	sp,sp,-8
   14ee0:	dfc00115 	stw	ra,4(sp)
   14ee4:	df000015 	stw	fp,0(sp)
   14ee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14eec:	d0a01117 	ldw	r2,-32700(gp)
   14ef0:	10000326 	beq	r2,zero,14f00 <alt_get_errno+0x24>
   14ef4:	d0a01117 	ldw	r2,-32700(gp)
   14ef8:	103ee83a 	callr	r2
   14efc:	00000106 	br	14f04 <alt_get_errno+0x28>
   14f00:	d0a8f904 	addi	r2,gp,-23580
}
   14f04:	e037883a 	mov	sp,fp
   14f08:	dfc00117 	ldw	ra,4(sp)
   14f0c:	df000017 	ldw	fp,0(sp)
   14f10:	dec00204 	addi	sp,sp,8
   14f14:	f800283a 	ret

00014f18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14f18:	defff904 	addi	sp,sp,-28
   14f1c:	dfc00615 	stw	ra,24(sp)
   14f20:	df000515 	stw	fp,20(sp)
   14f24:	df000504 	addi	fp,sp,20
   14f28:	e13ffd15 	stw	r4,-12(fp)
   14f2c:	e17ffe15 	stw	r5,-8(fp)
   14f30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14f34:	e0bffd17 	ldw	r2,-12(fp)
   14f38:	10000816 	blt	r2,zero,14f5c <read+0x44>
   14f3c:	01400304 	movi	r5,12
   14f40:	e13ffd17 	ldw	r4,-12(fp)
   14f44:	00068e80 	call	68e8 <__mulsi3>
   14f48:	1007883a 	mov	r3,r2
   14f4c:	008000b4 	movhi	r2,2
   14f50:	10a7a804 	addi	r2,r2,-24928
   14f54:	1885883a 	add	r2,r3,r2
   14f58:	00000106 	br	14f60 <read+0x48>
   14f5c:	0005883a 	mov	r2,zero
   14f60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14f64:	e0bffb17 	ldw	r2,-20(fp)
   14f68:	10002226 	beq	r2,zero,14ff4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14f6c:	e0bffb17 	ldw	r2,-20(fp)
   14f70:	10800217 	ldw	r2,8(r2)
   14f74:	108000cc 	andi	r2,r2,3
   14f78:	10800060 	cmpeqi	r2,r2,1
   14f7c:	1000181e 	bne	r2,zero,14fe0 <read+0xc8>
        (fd->dev->read))
   14f80:	e0bffb17 	ldw	r2,-20(fp)
   14f84:	10800017 	ldw	r2,0(r2)
   14f88:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14f8c:	10001426 	beq	r2,zero,14fe0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14f90:	e0bffb17 	ldw	r2,-20(fp)
   14f94:	10800017 	ldw	r2,0(r2)
   14f98:	10800517 	ldw	r2,20(r2)
   14f9c:	e0ffff17 	ldw	r3,-4(fp)
   14fa0:	180d883a 	mov	r6,r3
   14fa4:	e17ffe17 	ldw	r5,-8(fp)
   14fa8:	e13ffb17 	ldw	r4,-20(fp)
   14fac:	103ee83a 	callr	r2
   14fb0:	e0bffc15 	stw	r2,-16(fp)
   14fb4:	e0bffc17 	ldw	r2,-16(fp)
   14fb8:	1000070e 	bge	r2,zero,14fd8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   14fbc:	0014edc0 	call	14edc <alt_get_errno>
   14fc0:	1007883a 	mov	r3,r2
   14fc4:	e0bffc17 	ldw	r2,-16(fp)
   14fc8:	0085c83a 	sub	r2,zero,r2
   14fcc:	18800015 	stw	r2,0(r3)
          return -1;
   14fd0:	00bfffc4 	movi	r2,-1
   14fd4:	00000c06 	br	15008 <read+0xf0>
        }
        return rval;
   14fd8:	e0bffc17 	ldw	r2,-16(fp)
   14fdc:	00000a06 	br	15008 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14fe0:	0014edc0 	call	14edc <alt_get_errno>
   14fe4:	1007883a 	mov	r3,r2
   14fe8:	00800344 	movi	r2,13
   14fec:	18800015 	stw	r2,0(r3)
   14ff0:	00000406 	br	15004 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14ff4:	0014edc0 	call	14edc <alt_get_errno>
   14ff8:	1007883a 	mov	r3,r2
   14ffc:	00801444 	movi	r2,81
   15000:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15004:	00bfffc4 	movi	r2,-1
}
   15008:	e037883a 	mov	sp,fp
   1500c:	dfc00117 	ldw	ra,4(sp)
   15010:	df000017 	ldw	fp,0(sp)
   15014:	dec00204 	addi	sp,sp,8
   15018:	f800283a 	ret

0001501c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1501c:	defffc04 	addi	sp,sp,-16
   15020:	dfc00315 	stw	ra,12(sp)
   15024:	df000215 	stw	fp,8(sp)
   15028:	dc000115 	stw	r16,4(sp)
   1502c:	df000204 	addi	fp,sp,8
   15030:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   15034:	e0bffe17 	ldw	r2,-8(fp)
   15038:	108000d0 	cmplti	r2,r2,3
   1503c:	1000111e 	bne	r2,zero,15084 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   15040:	040000b4 	movhi	r16,2
   15044:	8427a804 	addi	r16,r16,-24928
   15048:	e0bffe17 	ldw	r2,-8(fp)
   1504c:	01400304 	movi	r5,12
   15050:	1009883a 	mov	r4,r2
   15054:	00068e80 	call	68e8 <__mulsi3>
   15058:	8085883a 	add	r2,r16,r2
   1505c:	10800204 	addi	r2,r2,8
   15060:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   15064:	040000b4 	movhi	r16,2
   15068:	8427a804 	addi	r16,r16,-24928
   1506c:	e0bffe17 	ldw	r2,-8(fp)
   15070:	01400304 	movi	r5,12
   15074:	1009883a 	mov	r4,r2
   15078:	00068e80 	call	68e8 <__mulsi3>
   1507c:	8085883a 	add	r2,r16,r2
   15080:	10000015 	stw	zero,0(r2)
  }
}
   15084:	0001883a 	nop
   15088:	e6ffff04 	addi	sp,fp,-4
   1508c:	dfc00217 	ldw	ra,8(sp)
   15090:	df000117 	ldw	fp,4(sp)
   15094:	dc000017 	ldw	r16,0(sp)
   15098:	dec00304 	addi	sp,sp,12
   1509c:	f800283a 	ret

000150a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   150a0:	defff904 	addi	sp,sp,-28
   150a4:	df000615 	stw	fp,24(sp)
   150a8:	df000604 	addi	fp,sp,24
   150ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   150b0:	0005303a 	rdctl	r2,status
   150b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150b8:	e0fffe17 	ldw	r3,-8(fp)
   150bc:	00bfff84 	movi	r2,-2
   150c0:	1884703a 	and	r2,r3,r2
   150c4:	1001703a 	wrctl	status,r2
  
  return context;
   150c8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   150cc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   150d0:	d0a01217 	ldw	r2,-32696(gp)
   150d4:	10c000c4 	addi	r3,r2,3
   150d8:	00bfff04 	movi	r2,-4
   150dc:	1884703a 	and	r2,r3,r2
   150e0:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   150e4:	d0e01217 	ldw	r3,-32696(gp)
   150e8:	e0bfff17 	ldw	r2,-4(fp)
   150ec:	1887883a 	add	r3,r3,r2
   150f0:	00820034 	movhi	r2,2048
   150f4:	10bf0004 	addi	r2,r2,-1024
   150f8:	10c0062e 	bgeu	r2,r3,15114 <sbrk+0x74>
   150fc:	e0bffb17 	ldw	r2,-20(fp)
   15100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15104:	e0bffa17 	ldw	r2,-24(fp)
   15108:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1510c:	00bfffc4 	movi	r2,-1
   15110:	00000b06 	br	15140 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   15114:	d0a01217 	ldw	r2,-32696(gp)
   15118:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1511c:	d0e01217 	ldw	r3,-32696(gp)
   15120:	e0bfff17 	ldw	r2,-4(fp)
   15124:	1885883a 	add	r2,r3,r2
   15128:	d0a01215 	stw	r2,-32696(gp)
   1512c:	e0bffb17 	ldw	r2,-20(fp)
   15130:	e0bffc15 	stw	r2,-16(fp)
   15134:	e0bffc17 	ldw	r2,-16(fp)
   15138:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1513c:	e0bffd17 	ldw	r2,-12(fp)
} 
   15140:	e037883a 	mov	sp,fp
   15144:	df000017 	ldw	fp,0(sp)
   15148:	dec00104 	addi	sp,sp,4
   1514c:	f800283a 	ret

00015150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15150:	defffe04 	addi	sp,sp,-8
   15154:	dfc00115 	stw	ra,4(sp)
   15158:	df000015 	stw	fp,0(sp)
   1515c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15160:	d0a01117 	ldw	r2,-32700(gp)
   15164:	10000326 	beq	r2,zero,15174 <alt_get_errno+0x24>
   15168:	d0a01117 	ldw	r2,-32700(gp)
   1516c:	103ee83a 	callr	r2
   15170:	00000106 	br	15178 <alt_get_errno+0x28>
   15174:	d0a8f904 	addi	r2,gp,-23580
}
   15178:	e037883a 	mov	sp,fp
   1517c:	dfc00117 	ldw	ra,4(sp)
   15180:	df000017 	ldw	fp,0(sp)
   15184:	dec00204 	addi	sp,sp,8
   15188:	f800283a 	ret

0001518c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1518c:	defffc04 	addi	sp,sp,-16
   15190:	dfc00315 	stw	ra,12(sp)
   15194:	df000215 	stw	fp,8(sp)
   15198:	df000204 	addi	fp,sp,8
   1519c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   151a0:	d0a90217 	ldw	r2,-23544(gp)
  clock_t ticks = alt_nticks(); 
   151a4:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   151a8:	d0a90117 	ldw	r2,-23548(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   151ac:	1000061e 	bne	r2,zero,151c8 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   151b0:	00151500 	call	15150 <alt_get_errno>
   151b4:	1007883a 	mov	r3,r2
   151b8:	00801604 	movi	r2,88
   151bc:	18800015 	stw	r2,0(r3)
    return 0;
   151c0:	0005883a 	mov	r2,zero
   151c4:	00000a06 	br	151f0 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   151c8:	e0bfff17 	ldw	r2,-4(fp)
   151cc:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   151d0:	e0bfff17 	ldw	r2,-4(fp)
   151d4:	e0fffe17 	ldw	r3,-8(fp)
   151d8:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   151dc:	e0bfff17 	ldw	r2,-4(fp)
   151e0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   151e4:	e0bfff17 	ldw	r2,-4(fp)
   151e8:	10000315 	stw	zero,12(r2)

  return ticks;
   151ec:	e0bffe17 	ldw	r2,-8(fp)
}
   151f0:	e037883a 	mov	sp,fp
   151f4:	dfc00117 	ldw	ra,4(sp)
   151f8:	df000017 	ldw	fp,0(sp)
   151fc:	dec00204 	addi	sp,sp,8
   15200:	f800283a 	ret

00015204 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   15204:	defffd04 	addi	sp,sp,-12
   15208:	dfc00215 	stw	ra,8(sp)
   1520c:	df000115 	stw	fp,4(sp)
   15210:	df000104 	addi	fp,sp,4
   15214:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   15218:	e13fff17 	ldw	r4,-4(fp)
   1521c:	0016f6c0 	call	16f6c <alt_busy_sleep>
}
   15220:	e037883a 	mov	sp,fp
   15224:	dfc00117 	ldw	ra,4(sp)
   15228:	df000017 	ldw	fp,0(sp)
   1522c:	dec00204 	addi	sp,sp,8
   15230:	f800283a 	ret

00015234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15234:	defffe04 	addi	sp,sp,-8
   15238:	dfc00115 	stw	ra,4(sp)
   1523c:	df000015 	stw	fp,0(sp)
   15240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15244:	d0a01117 	ldw	r2,-32700(gp)
   15248:	10000326 	beq	r2,zero,15258 <alt_get_errno+0x24>
   1524c:	d0a01117 	ldw	r2,-32700(gp)
   15250:	103ee83a 	callr	r2
   15254:	00000106 	br	1525c <alt_get_errno+0x28>
   15258:	d0a8f904 	addi	r2,gp,-23580
}
   1525c:	e037883a 	mov	sp,fp
   15260:	dfc00117 	ldw	ra,4(sp)
   15264:	df000017 	ldw	fp,0(sp)
   15268:	dec00204 	addi	sp,sp,8
   1526c:	f800283a 	ret

00015270 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   15270:	defff904 	addi	sp,sp,-28
   15274:	dfc00615 	stw	ra,24(sp)
   15278:	df000515 	stw	fp,20(sp)
   1527c:	df000504 	addi	fp,sp,20
   15280:	e13ffd15 	stw	r4,-12(fp)
   15284:	e17ffe15 	stw	r5,-8(fp)
   15288:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1528c:	e0bffd17 	ldw	r2,-12(fp)
   15290:	10000816 	blt	r2,zero,152b4 <write+0x44>
   15294:	01400304 	movi	r5,12
   15298:	e13ffd17 	ldw	r4,-12(fp)
   1529c:	00068e80 	call	68e8 <__mulsi3>
   152a0:	1007883a 	mov	r3,r2
   152a4:	008000b4 	movhi	r2,2
   152a8:	10a7a804 	addi	r2,r2,-24928
   152ac:	1885883a 	add	r2,r3,r2
   152b0:	00000106 	br	152b8 <write+0x48>
   152b4:	0005883a 	mov	r2,zero
   152b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   152bc:	e0bffb17 	ldw	r2,-20(fp)
   152c0:	10002126 	beq	r2,zero,15348 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   152c4:	e0bffb17 	ldw	r2,-20(fp)
   152c8:	10800217 	ldw	r2,8(r2)
   152cc:	108000cc 	andi	r2,r2,3
   152d0:	10001826 	beq	r2,zero,15334 <write+0xc4>
   152d4:	e0bffb17 	ldw	r2,-20(fp)
   152d8:	10800017 	ldw	r2,0(r2)
   152dc:	10800617 	ldw	r2,24(r2)
   152e0:	10001426 	beq	r2,zero,15334 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   152e4:	e0bffb17 	ldw	r2,-20(fp)
   152e8:	10800017 	ldw	r2,0(r2)
   152ec:	10800617 	ldw	r2,24(r2)
   152f0:	e0ffff17 	ldw	r3,-4(fp)
   152f4:	180d883a 	mov	r6,r3
   152f8:	e17ffe17 	ldw	r5,-8(fp)
   152fc:	e13ffb17 	ldw	r4,-20(fp)
   15300:	103ee83a 	callr	r2
   15304:	e0bffc15 	stw	r2,-16(fp)
   15308:	e0bffc17 	ldw	r2,-16(fp)
   1530c:	1000070e 	bge	r2,zero,1532c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   15310:	00152340 	call	15234 <alt_get_errno>
   15314:	1007883a 	mov	r3,r2
   15318:	e0bffc17 	ldw	r2,-16(fp)
   1531c:	0085c83a 	sub	r2,zero,r2
   15320:	18800015 	stw	r2,0(r3)
        return -1;
   15324:	00bfffc4 	movi	r2,-1
   15328:	00000c06 	br	1535c <write+0xec>
      }
      return rval;
   1532c:	e0bffc17 	ldw	r2,-16(fp)
   15330:	00000a06 	br	1535c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   15334:	00152340 	call	15234 <alt_get_errno>
   15338:	1007883a 	mov	r3,r2
   1533c:	00800344 	movi	r2,13
   15340:	18800015 	stw	r2,0(r3)
   15344:	00000406 	br	15358 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   15348:	00152340 	call	15234 <alt_get_errno>
   1534c:	1007883a 	mov	r3,r2
   15350:	00801444 	movi	r2,81
   15354:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15358:	00bfffc4 	movi	r2,-1
}
   1535c:	e037883a 	mov	sp,fp
   15360:	dfc00117 	ldw	ra,4(sp)
   15364:	df000017 	ldw	fp,0(sp)
   15368:	dec00204 	addi	sp,sp,8
   1536c:	f800283a 	ret

00015370 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15370:	defffd04 	addi	sp,sp,-12
   15374:	dfc00215 	stw	ra,8(sp)
   15378:	df000115 	stw	fp,4(sp)
   1537c:	df000104 	addi	fp,sp,4
   15380:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15384:	d1600a04 	addi	r5,gp,-32728
   15388:	e13fff17 	ldw	r4,-4(fp)
   1538c:	00171200 	call	17120 <alt_dev_llist_insert>
}
   15390:	e037883a 	mov	sp,fp
   15394:	dfc00117 	ldw	ra,4(sp)
   15398:	df000017 	ldw	fp,0(sp)
   1539c:	dec00204 	addi	sp,sp,8
   153a0:	f800283a 	ret

000153a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   153a4:	defffd04 	addi	sp,sp,-12
   153a8:	dfc00215 	stw	ra,8(sp)
   153ac:	df000115 	stw	fp,4(sp)
   153b0:	df000104 	addi	fp,sp,4
   153b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   153b8:	0017acc0 	call	17acc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   153bc:	00800044 	movi	r2,1
   153c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   153c4:	0001883a 	nop
   153c8:	e037883a 	mov	sp,fp
   153cc:	dfc00117 	ldw	ra,4(sp)
   153d0:	df000017 	ldw	fp,0(sp)
   153d4:	dec00204 	addi	sp,sp,8
   153d8:	f800283a 	ret

000153dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   153dc:	defffc04 	addi	sp,sp,-16
   153e0:	dfc00315 	stw	ra,12(sp)
   153e4:	df000215 	stw	fp,8(sp)
   153e8:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   153ec:	01c0fa04 	movi	r7,1000
   153f0:	01800044 	movi	r6,1
   153f4:	000b883a 	mov	r5,zero
   153f8:	01020034 	movhi	r4,2048
   153fc:	210c0804 	addi	r4,r4,12320
   15400:	0016dc40 	call	16dc4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( COPY_DMA, copy_dma);
   15404:	00800084 	movi	r2,2
   15408:	d8800015 	stw	r2,0(sp)
   1540c:	000f883a 	mov	r7,zero
   15410:	01820034 	movhi	r6,2048
   15414:	318c0004 	addi	r6,r6,12288
   15418:	014000b4 	movhi	r5,2
   1541c:	29683804 	addi	r5,r5,-24352
   15420:	010000b4 	movhi	r4,2
   15424:	21283104 	addi	r4,r4,-24380
   15428:	00162300 	call	16230 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1542c:	000d883a 	mov	r6,zero
   15430:	000b883a 	mov	r5,zero
   15434:	010000b4 	movhi	r4,2
   15438:	21284904 	addi	r4,r4,-24284
   1543c:	00164480 	call	16448 <altera_avalon_jtag_uart_init>
   15440:	010000b4 	movhi	r4,2
   15444:	21283f04 	addi	r4,r4,-24324
   15448:	00153700 	call	15370 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_DMA, pixel_dma);
   1544c:	008000b4 	movhi	r2,2
   15450:	10ac5704 	addi	r2,r2,-20132
   15454:	10800a17 	ldw	r2,40(r2)
   15458:	10800017 	ldw	r2,0(r2)
   1545c:	1007883a 	mov	r3,r2
   15460:	008000b4 	movhi	r2,2
   15464:	10ac5704 	addi	r2,r2,-20132
   15468:	10c00b15 	stw	r3,44(r2)
   1546c:	008000b4 	movhi	r2,2
   15470:	10ac5704 	addi	r2,r2,-20132
   15474:	10800a17 	ldw	r2,40(r2)
   15478:	10800104 	addi	r2,r2,4
   1547c:	10800017 	ldw	r2,0(r2)
   15480:	1007883a 	mov	r3,r2
   15484:	008000b4 	movhi	r2,2
   15488:	10ac5704 	addi	r2,r2,-20132
   1548c:	10c00c15 	stw	r3,48(r2)
   15490:	008000b4 	movhi	r2,2
   15494:	10ac5704 	addi	r2,r2,-20132
   15498:	10800a17 	ldw	r2,40(r2)
   1549c:	10800204 	addi	r2,r2,8
   154a0:	10800017 	ldw	r2,0(r2)
   154a4:	10ffffcc 	andi	r3,r2,65535
   154a8:	008000b4 	movhi	r2,2
   154ac:	10ac5704 	addi	r2,r2,-20132
   154b0:	10c00f15 	stw	r3,60(r2)
   154b4:	008000b4 	movhi	r2,2
   154b8:	10ac5704 	addi	r2,r2,-20132
   154bc:	10800a17 	ldw	r2,40(r2)
   154c0:	10800204 	addi	r2,r2,8
   154c4:	10800017 	ldw	r2,0(r2)
   154c8:	1006d43a 	srli	r3,r2,16
   154cc:	008000b4 	movhi	r2,2
   154d0:	10ac5704 	addi	r2,r2,-20132
   154d4:	10c01015 	stw	r3,64(r2)
   154d8:	008000b4 	movhi	r2,2
   154dc:	10ac5704 	addi	r2,r2,-20132
   154e0:	10800a17 	ldw	r2,40(r2)
   154e4:	10800304 	addi	r2,r2,12
   154e8:	10800017 	ldw	r2,0(r2)
   154ec:	1005d07a 	srai	r2,r2,1
   154f0:	10c0004c 	andi	r3,r2,1
   154f4:	008000b4 	movhi	r2,2
   154f8:	10ac5704 	addi	r2,r2,-20132
   154fc:	10c00d15 	stw	r3,52(r2)
   15500:	008000b4 	movhi	r2,2
   15504:	10ac5704 	addi	r2,r2,-20132
   15508:	10800a17 	ldw	r2,40(r2)
   1550c:	10800304 	addi	r2,r2,12
   15510:	10800017 	ldw	r2,0(r2)
   15514:	1005d13a 	srai	r2,r2,4
   15518:	10c003cc 	andi	r3,r2,15
   1551c:	008000b4 	movhi	r2,2
   15520:	10ac5704 	addi	r2,r2,-20132
   15524:	10c00e15 	stw	r3,56(r2)
   15528:	008000b4 	movhi	r2,2
   1552c:	10ac5704 	addi	r2,r2,-20132
   15530:	10800a17 	ldw	r2,40(r2)
   15534:	10800304 	addi	r2,r2,12
   15538:	10800017 	ldw	r2,0(r2)
   1553c:	1005d43a 	srai	r2,r2,16
   15540:	e0bfff05 	stb	r2,-4(fp)
   15544:	008000b4 	movhi	r2,2
   15548:	10ac5704 	addi	r2,r2,-20132
   1554c:	10800a17 	ldw	r2,40(r2)
   15550:	10800304 	addi	r2,r2,12
   15554:	10800017 	ldw	r2,0(r2)
   15558:	1004d63a 	srli	r2,r2,24
   1555c:	e0bfff45 	stb	r2,-3(fp)
   15560:	008000b4 	movhi	r2,2
   15564:	10ac5704 	addi	r2,r2,-20132
   15568:	10800e17 	ldw	r2,56(r2)
   1556c:	10800058 	cmpnei	r2,r2,1
   15570:	1000041e 	bne	r2,zero,15584 <alt_sys_init+0x1a8>
   15574:	008000b4 	movhi	r2,2
   15578:	10ac5704 	addi	r2,r2,-20132
   1557c:	10001115 	stw	zero,68(r2)
   15580:	00000e06 	br	155bc <alt_sys_init+0x1e0>
   15584:	008000b4 	movhi	r2,2
   15588:	10ac5704 	addi	r2,r2,-20132
   1558c:	10800e17 	ldw	r2,56(r2)
   15590:	10800098 	cmpnei	r2,r2,2
   15594:	1000051e 	bne	r2,zero,155ac <alt_sys_init+0x1d0>
   15598:	008000b4 	movhi	r2,2
   1559c:	10ac5704 	addi	r2,r2,-20132
   155a0:	00c00044 	movi	r3,1
   155a4:	10c01115 	stw	r3,68(r2)
   155a8:	00000406 	br	155bc <alt_sys_init+0x1e0>
   155ac:	008000b4 	movhi	r2,2
   155b0:	10ac5704 	addi	r2,r2,-20132
   155b4:	00c00084 	movi	r3,2
   155b8:	10c01115 	stw	r3,68(r2)
   155bc:	e0bfff03 	ldbu	r2,-4(fp)
   155c0:	00c00804 	movi	r3,32
   155c4:	1885c83a 	sub	r2,r3,r2
   155c8:	00ffffc4 	movi	r3,-1
   155cc:	1886d83a 	srl	r3,r3,r2
   155d0:	008000b4 	movhi	r2,2
   155d4:	10ac5704 	addi	r2,r2,-20132
   155d8:	10c01215 	stw	r3,72(r2)
   155dc:	e0ffff03 	ldbu	r3,-4(fp)
   155e0:	008000b4 	movhi	r2,2
   155e4:	10ac5704 	addi	r2,r2,-20132
   155e8:	10801117 	ldw	r2,68(r2)
   155ec:	1887883a 	add	r3,r3,r2
   155f0:	008000b4 	movhi	r2,2
   155f4:	10ac5704 	addi	r2,r2,-20132
   155f8:	10c01315 	stw	r3,76(r2)
   155fc:	e0bfff43 	ldbu	r2,-3(fp)
   15600:	00c00804 	movi	r3,32
   15604:	1885c83a 	sub	r2,r3,r2
   15608:	00ffffc4 	movi	r3,-1
   1560c:	1886d83a 	srl	r3,r3,r2
   15610:	008000b4 	movhi	r2,2
   15614:	10ac5704 	addi	r2,r2,-20132
   15618:	10c01415 	stw	r3,80(r2)
   1561c:	010000b4 	movhi	r4,2
   15620:	212c5704 	addi	r4,r4,-20132
   15624:	00153700 	call	15370 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_RESAMPLER, vga_resampler);
   15628:	008000b4 	movhi	r2,2
   1562c:	10ac6c04 	addi	r2,r2,-20048
   15630:	10800a17 	ldw	r2,40(r2)
   15634:	10800017 	ldw	r2,0(r2)
   15638:	10c003cc 	andi	r3,r2,15
   1563c:	008000b4 	movhi	r2,2
   15640:	10ac6c04 	addi	r2,r2,-20048
   15644:	10c00b15 	stw	r3,44(r2)
   15648:	008000b4 	movhi	r2,2
   1564c:	10ac6c04 	addi	r2,r2,-20048
   15650:	10800a17 	ldw	r2,40(r2)
   15654:	10800017 	ldw	r2,0(r2)
   15658:	1005d13a 	srai	r2,r2,4
   1565c:	10c0004c 	andi	r3,r2,1
   15660:	008000b4 	movhi	r2,2
   15664:	10ac6c04 	addi	r2,r2,-20048
   15668:	10c00c15 	stw	r3,48(r2)
   1566c:	008000b4 	movhi	r2,2
   15670:	10ac6c04 	addi	r2,r2,-20048
   15674:	10800a17 	ldw	r2,40(r2)
   15678:	10800017 	ldw	r2,0(r2)
   1567c:	1005d17a 	srai	r2,r2,5
   15680:	10c0004c 	andi	r3,r2,1
   15684:	008000b4 	movhi	r2,2
   15688:	10ac6c04 	addi	r2,r2,-20048
   1568c:	10c00d15 	stw	r3,52(r2)
   15690:	008000b4 	movhi	r2,2
   15694:	10ac6c04 	addi	r2,r2,-20048
   15698:	10800a17 	ldw	r2,40(r2)
   1569c:	10800017 	ldw	r2,0(r2)
   156a0:	1005d43a 	srai	r2,r2,16
   156a4:	10c003cc 	andi	r3,r2,15
   156a8:	008000b4 	movhi	r2,2
   156ac:	10ac6c04 	addi	r2,r2,-20048
   156b0:	10c00e15 	stw	r3,56(r2)
   156b4:	008000b4 	movhi	r2,2
   156b8:	10ac6c04 	addi	r2,r2,-20048
   156bc:	10800a17 	ldw	r2,40(r2)
   156c0:	10800017 	ldw	r2,0(r2)
   156c4:	1005d53a 	srai	r2,r2,20
   156c8:	10c0004c 	andi	r3,r2,1
   156cc:	008000b4 	movhi	r2,2
   156d0:	10ac6c04 	addi	r2,r2,-20048
   156d4:	10c00f15 	stw	r3,60(r2)
   156d8:	008000b4 	movhi	r2,2
   156dc:	10ac6c04 	addi	r2,r2,-20048
   156e0:	10800a17 	ldw	r2,40(r2)
   156e4:	10800017 	ldw	r2,0(r2)
   156e8:	1005d57a 	srai	r2,r2,21
   156ec:	10c0004c 	andi	r3,r2,1
   156f0:	008000b4 	movhi	r2,2
   156f4:	10ac6c04 	addi	r2,r2,-20048
   156f8:	10c01015 	stw	r3,64(r2)
   156fc:	010000b4 	movhi	r4,2
   15700:	212c6c04 	addi	r4,r4,-20048
   15704:	00153700 	call	15370 <alt_dev_reg>
}
   15708:	0001883a 	nop
   1570c:	e037883a 	mov	sp,fp
   15710:	dfc00117 	ldw	ra,4(sp)
   15714:	df000017 	ldw	fp,0(sp)
   15718:	dec00204 	addi	sp,sp,8
   1571c:	f800283a 	ret

00015720 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
   15720:	defffd04 	addi	sp,sp,-12
   15724:	dfc00215 	stw	ra,8(sp)
   15728:	df000115 	stw	fp,4(sp)
   1572c:	df000104 	addi	fp,sp,4
   15730:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
   15734:	d1600f04 	addi	r5,gp,-32708
   15738:	e13fff17 	ldw	r4,-4(fp)
   1573c:	00171200 	call	17120 <alt_dev_llist_insert>
}
   15740:	e037883a 	mov	sp,fp
   15744:	dfc00117 	ldw	ra,4(sp)
   15748:	df000017 	ldw	fp,0(sp)
   1574c:	dec00204 	addi	sp,sp,8
   15750:	f800283a 	ret

00015754 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
   15754:	defffd04 	addi	sp,sp,-12
   15758:	dfc00215 	stw	ra,8(sp)
   1575c:	df000115 	stw	fp,4(sp)
   15760:	df000104 	addi	fp,sp,4
   15764:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
   15768:	d1600d04 	addi	r5,gp,-32716
   1576c:	e13fff17 	ldw	r4,-4(fp)
   15770:	00171200 	call	17120 <alt_dev_llist_insert>
}
   15774:	e037883a 	mov	sp,fp
   15778:	dfc00117 	ldw	ra,4(sp)
   1577c:	df000017 	ldw	fp,0(sp)
   15780:	dec00204 	addi	sp,sp,8
   15784:	f800283a 	ret

00015788 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
   15788:	defffc04 	addi	sp,sp,-16
   1578c:	df000315 	stw	fp,12(sp)
   15790:	df000304 	addi	fp,sp,12
   15794:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
   15798:	e0bfff17 	ldw	r2,-4(fp)
   1579c:	10c00117 	ldw	r3,4(r2)
   157a0:	e0bfff17 	ldw	r2,-4(fp)
   157a4:	10800217 	ldw	r2,8(r2)
   157a8:	18802e26 	beq	r3,r2,15864 <alt_avalon_dma_launch_bidir+0xdc>
   157ac:	e0bfff17 	ldw	r2,-4(fp)
   157b0:	10c00317 	ldw	r3,12(r2)
   157b4:	e0bfff17 	ldw	r2,-4(fp)
   157b8:	10800417 	ldw	r2,16(r2)
   157bc:	18802926 	beq	r3,r2,15864 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
   157c0:	e0bfff17 	ldw	r2,-4(fp)
   157c4:	00c00044 	movi	r3,1
   157c8:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
   157cc:	e0bfff17 	ldw	r2,-4(fp)
   157d0:	10800117 	ldw	r2,4(r2)
   157d4:	1004913a 	slli	r2,r2,4
   157d8:	10800904 	addi	r2,r2,36
   157dc:	e0ffff17 	ldw	r3,-4(fp)
   157e0:	1885883a 	add	r2,r3,r2
   157e4:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
   157e8:	e0bfff17 	ldw	r2,-4(fp)
   157ec:	10800317 	ldw	r2,12(r2)
   157f0:	1004913a 	slli	r2,r2,4
   157f4:	10801904 	addi	r2,r2,100
   157f8:	e0ffff17 	ldw	r3,-4(fp)
   157fc:	1885883a 	add	r2,r3,r2
   15800:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   15804:	e0bfff17 	ldw	r2,-4(fp)
   15808:	10800017 	ldw	r2,0(r2)
   1580c:	10800104 	addi	r2,r2,4
   15810:	e0fffd17 	ldw	r3,-12(fp)
   15814:	18c00017 	ldw	r3,0(r3)
   15818:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   1581c:	e0bfff17 	ldw	r2,-4(fp)
   15820:	10800017 	ldw	r2,0(r2)
   15824:	10800204 	addi	r2,r2,8
   15828:	e0fffe17 	ldw	r3,-8(fp)
   1582c:	18c00017 	ldw	r3,0(r3)
   15830:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
   15834:	e0bfff17 	ldw	r2,-4(fp)
   15838:	10800017 	ldw	r2,0(r2)
   1583c:	11000304 	addi	r4,r2,12
   15840:	e0bffd17 	ldw	r2,-12(fp)
   15844:	11400117 	ldw	r5,4(r2)
   15848:	e0bffe17 	ldw	r2,-8(fp)
   1584c:	10c00117 	ldw	r3,4(r2)
   15850:	2805883a 	mov	r2,r5
   15854:	1880012e 	bgeu	r3,r2,1585c <alt_avalon_dma_launch_bidir+0xd4>
   15858:	1805883a 	mov	r2,r3
   1585c:	20800035 	stwio	r2,0(r4)
   15860:	00000206 	br	1586c <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
   15864:	e0bfff17 	ldw	r2,-4(fp)
   15868:	10000815 	stw	zero,32(r2)
  }
}
   1586c:	0001883a 	nop
   15870:	e037883a 	mov	sp,fp
   15874:	df000017 	ldw	fp,0(sp)
   15878:	dec00104 	addi	sp,sp,4
   1587c:	f800283a 	ret

00015880 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
   15880:	defffd04 	addi	sp,sp,-12
   15884:	df000215 	stw	fp,8(sp)
   15888:	df000204 	addi	fp,sp,8
   1588c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
   15890:	e0bfff17 	ldw	r2,-4(fp)
   15894:	10c00117 	ldw	r3,4(r2)
   15898:	e0bfff17 	ldw	r2,-4(fp)
   1589c:	10800217 	ldw	r2,8(r2)
   158a0:	18801726 	beq	r3,r2,15900 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
   158a4:	e0bfff17 	ldw	r2,-4(fp)
   158a8:	00c00044 	movi	r3,1
   158ac:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
   158b0:	e0bfff17 	ldw	r2,-4(fp)
   158b4:	10800117 	ldw	r2,4(r2)
   158b8:	1004913a 	slli	r2,r2,4
   158bc:	10800904 	addi	r2,r2,36
   158c0:	e0ffff17 	ldw	r3,-4(fp)
   158c4:	1885883a 	add	r2,r3,r2
   158c8:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   158cc:	e0bfff17 	ldw	r2,-4(fp)
   158d0:	10800017 	ldw	r2,0(r2)
   158d4:	10800104 	addi	r2,r2,4
   158d8:	e0fffe17 	ldw	r3,-8(fp)
   158dc:	18c00017 	ldw	r3,0(r3)
   158e0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
   158e4:	e0bfff17 	ldw	r2,-4(fp)
   158e8:	10800017 	ldw	r2,0(r2)
   158ec:	10800304 	addi	r2,r2,12
   158f0:	e0fffe17 	ldw	r3,-8(fp)
   158f4:	18c00117 	ldw	r3,4(r3)
   158f8:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
   158fc:	00000206 	br	15908 <alt_avalon_dma_launch_txonly+0x88>
    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  }
  else
  {
    priv->active = 0;
   15900:	e0bfff17 	ldw	r2,-4(fp)
   15904:	10000815 	stw	zero,32(r2)
  }
}
   15908:	0001883a 	nop
   1590c:	e037883a 	mov	sp,fp
   15910:	df000017 	ldw	fp,0(sp)
   15914:	dec00104 	addi	sp,sp,4
   15918:	f800283a 	ret

0001591c <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
   1591c:	defffd04 	addi	sp,sp,-12
   15920:	df000215 	stw	fp,8(sp)
   15924:	df000204 	addi	fp,sp,8
   15928:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
   1592c:	e0bfff17 	ldw	r2,-4(fp)
   15930:	10c00317 	ldw	r3,12(r2)
   15934:	e0bfff17 	ldw	r2,-4(fp)
   15938:	10800417 	ldw	r2,16(r2)
   1593c:	18801726 	beq	r3,r2,1599c <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
   15940:	e0bfff17 	ldw	r2,-4(fp)
   15944:	00c00044 	movi	r3,1
   15948:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
   1594c:	e0bfff17 	ldw	r2,-4(fp)
   15950:	10800317 	ldw	r2,12(r2)
   15954:	1004913a 	slli	r2,r2,4
   15958:	10801904 	addi	r2,r2,100
   1595c:	e0ffff17 	ldw	r3,-4(fp)
   15960:	1885883a 	add	r2,r3,r2
   15964:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   15968:	e0bfff17 	ldw	r2,-4(fp)
   1596c:	10800017 	ldw	r2,0(r2)
   15970:	10800204 	addi	r2,r2,8
   15974:	e0fffe17 	ldw	r3,-8(fp)
   15978:	18c00017 	ldw	r3,0(r3)
   1597c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
   15980:	e0bfff17 	ldw	r2,-4(fp)
   15984:	10800017 	ldw	r2,0(r2)
   15988:	10800304 	addi	r2,r2,12
   1598c:	e0fffe17 	ldw	r3,-8(fp)
   15990:	18c00117 	ldw	r3,4(r3)
   15994:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
   15998:	00000206 	br	159a4 <alt_avalon_dma_launch_rxonly+0x88>
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  }
  else
  {
    priv->active = 0;
   1599c:	e0bfff17 	ldw	r2,-4(fp)
   159a0:	10000815 	stw	zero,32(r2)
  }
}
   159a4:	0001883a 	nop
   159a8:	e037883a 	mov	sp,fp
   159ac:	df000017 	ldw	fp,0(sp)
   159b0:	dec00104 	addi	sp,sp,4
   159b4:	f800283a 	ret

000159b8 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
   159b8:	defffa04 	addi	sp,sp,-24
   159bc:	df000515 	stw	fp,20(sp)
   159c0:	df000504 	addi	fp,sp,20
   159c4:	e13ffd15 	stw	r4,-12(fp)
   159c8:	e17ffe15 	stw	r5,-8(fp)
   159cc:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
   159d0:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
   159d4:	e0bffd17 	ldw	r2,-12(fp)
   159d8:	10c00117 	ldw	r3,4(r2)
   159dc:	e0bffd17 	ldw	r2,-12(fp)
   159e0:	10800217 	ldw	r2,8(r2)
   159e4:	18800a1e 	bne	r3,r2,15a10 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
   159e8:	e0bffd17 	ldw	r2,-12(fp)
   159ec:	10c00317 	ldw	r3,12(r2)
   159f0:	e0bffd17 	ldw	r2,-12(fp)
   159f4:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
   159f8:	1880051e 	bne	r3,r2,15a10 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
   159fc:	e0bffd17 	ldw	r2,-12(fp)
   15a00:	10800017 	ldw	r2,0(r2)
   15a04:	10800304 	addi	r2,r2,12
   15a08:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
   15a0c:	10000226 	beq	r2,zero,15a18 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
   15a10:	00bffec4 	movi	r2,-5
   15a14:	0000b506 	br	15cec <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
   15a18:	e0bffe17 	ldw	r2,-8(fp)
   15a1c:	108002a8 	cmpgeui	r2,r2,10
   15a20:	1000781e 	bne	r2,zero,15c04 <alt_avalon_dma_ioctl+0x24c>
   15a24:	e0bffe17 	ldw	r2,-8(fp)
   15a28:	100690ba 	slli	r3,r2,2
   15a2c:	00800074 	movhi	r2,1
   15a30:	10969004 	addi	r2,r2,23104
   15a34:	1885883a 	add	r2,r3,r2
   15a38:	10800017 	ldw	r2,0(r2)
   15a3c:	1000683a 	jmp	r2
   15a40:	00015c04 	movi	zero,1392
   15a44:	00015a68 	cmpgeui	zero,zero,1385
   15a48:	00015ac0 	call	15ac <init_keyboard+0x8d4>
   15a4c:	00015aec 	andhi	zero,zero,1387
   15a50:	00015b44 	movi	zero,1389
   15a54:	00015b70 	cmpltui	zero,zero,1389
   15a58:	00015b8c 	andi	zero,zero,1390
   15a5c:	00015bac 	andhi	zero,zero,1390
   15a60:	00015bcc 	andi	zero,zero,1391
   15a64:	00015bec 	andhi	zero,zero,1391
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
   15a68:	e0bffd17 	ldw	r2,-12(fp)
   15a6c:	10800517 	ldw	r2,20(r2)
   15a70:	1080100c 	andi	r2,r2,64
   15a74:	10000f1e 	bne	r2,zero,15ab4 <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
   15a78:	e0bffd17 	ldw	r2,-12(fp)
   15a7c:	10800017 	ldw	r2,0(r2)
   15a80:	10800104 	addi	r2,r2,4
   15a84:	e0ffff17 	ldw	r3,-4(fp)
   15a88:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
   15a8c:	e0bffd17 	ldw	r2,-12(fp)
   15a90:	10800517 	ldw	r2,20(r2)
   15a94:	10c00814 	ori	r3,r2,32
   15a98:	e0bffd17 	ldw	r2,-12(fp)
   15a9c:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
   15aa0:	e0fffd17 	ldw	r3,-12(fp)
   15aa4:	00800074 	movhi	r2,1
   15aa8:	10964704 	addi	r2,r2,22812
   15aac:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
   15ab0:	00005606 	br	15c0c <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
   15ab4:	00bffec4 	movi	r2,-5
   15ab8:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
   15abc:	00005306 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
   15ac0:	e0bffd17 	ldw	r2,-12(fp)
   15ac4:	10c00517 	ldw	r3,20(r2)
   15ac8:	00bff7c4 	movi	r2,-33
   15acc:	1886703a 	and	r3,r3,r2
   15ad0:	e0bffd17 	ldw	r2,-12(fp)
   15ad4:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
   15ad8:	e0fffd17 	ldw	r3,-12(fp)
   15adc:	00800074 	movhi	r2,1
   15ae0:	1095e204 	addi	r2,r2,22408
   15ae4:	18800715 	stw	r2,28(r3)
    break;
   15ae8:	00004806 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
   15aec:	e0bffd17 	ldw	r2,-12(fp)
   15af0:	10800517 	ldw	r2,20(r2)
   15af4:	1080080c 	andi	r2,r2,32
   15af8:	10000f1e 	bne	r2,zero,15b38 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
   15afc:	e0bffd17 	ldw	r2,-12(fp)
   15b00:	10800017 	ldw	r2,0(r2)
   15b04:	10800204 	addi	r2,r2,8
   15b08:	e0ffff17 	ldw	r3,-4(fp)
   15b0c:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
   15b10:	e0bffd17 	ldw	r2,-12(fp)
   15b14:	10800517 	ldw	r2,20(r2)
   15b18:	10c01014 	ori	r3,r2,64
   15b1c:	e0bffd17 	ldw	r2,-12(fp)
   15b20:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
   15b24:	e0fffd17 	ldw	r3,-12(fp)
   15b28:	00800074 	movhi	r2,1
   15b2c:	10962004 	addi	r2,r2,22656
   15b30:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
   15b34:	00003506 	br	15c0c <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
   15b38:	00bffec4 	movi	r2,-5
   15b3c:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
   15b40:	00003206 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
   15b44:	e0bffd17 	ldw	r2,-12(fp)
   15b48:	10c00517 	ldw	r3,20(r2)
   15b4c:	00bfefc4 	movi	r2,-65
   15b50:	1886703a 	and	r3,r3,r2
   15b54:	e0bffd17 	ldw	r2,-12(fp)
   15b58:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
   15b5c:	e0fffd17 	ldw	r3,-12(fp)
   15b60:	00800074 	movhi	r2,1
   15b64:	1095e204 	addi	r2,r2,22408
   15b68:	18800715 	stw	r2,28(r3)
    break;
   15b6c:	00002706 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   15b70:	e0bffd17 	ldw	r2,-12(fp)
   15b74:	10c00517 	ldw	r3,20(r2)
   15b78:	00bffc04 	movi	r2,-16
   15b7c:	1886703a 	and	r3,r3,r2
   15b80:	e0bffd17 	ldw	r2,-12(fp)
   15b84:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
   15b88:	00002006 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   15b8c:	e0bffd17 	ldw	r2,-12(fp)
   15b90:	10c00517 	ldw	r3,20(r2)
   15b94:	00bffc04 	movi	r2,-16
   15b98:	1884703a 	and	r2,r3,r2
   15b9c:	10c00054 	ori	r3,r2,1
   15ba0:	e0bffd17 	ldw	r2,-12(fp)
   15ba4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
   15ba8:	00001806 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   15bac:	e0bffd17 	ldw	r2,-12(fp)
   15bb0:	10c00517 	ldw	r3,20(r2)
   15bb4:	00bffc04 	movi	r2,-16
   15bb8:	1884703a 	and	r2,r3,r2
   15bbc:	10c000d4 	ori	r3,r2,3
   15bc0:	e0bffd17 	ldw	r2,-12(fp)
   15bc4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
   15bc8:	00001006 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   15bcc:	e0bffd17 	ldw	r2,-12(fp)
   15bd0:	10c00517 	ldw	r3,20(r2)
   15bd4:	00bffc04 	movi	r2,-16
   15bd8:	1884703a 	and	r2,r3,r2
   15bdc:	10c001d4 	ori	r3,r2,7
   15be0:	e0bffd17 	ldw	r2,-12(fp)
   15be4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
   15be8:	00000806 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   15bec:	e0bffd17 	ldw	r2,-12(fp)
   15bf0:	10800517 	ldw	r2,20(r2)
   15bf4:	10c003d4 	ori	r3,r2,15
   15bf8:	e0bffd17 	ldw	r2,-12(fp)
   15bfc:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
   15c00:	00000206 	br	15c0c <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
   15c04:	00bff9c4 	movi	r2,-25
   15c08:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
   15c0c:	e0bffb17 	ldw	r2,-20(fp)
   15c10:	1000351e 	bne	r2,zero,15ce8 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
   15c14:	e0bffd17 	ldw	r2,-12(fp)
   15c18:	10800517 	ldw	r2,20(r2)
   15c1c:	108003cc 	andi	r2,r2,15
   15c20:	10c00060 	cmpeqi	r3,r2,1
   15c24:	1800091e 	bne	r3,zero,15c4c <alt_avalon_dma_ioctl+0x294>
   15c28:	0080052e 	bgeu	zero,r2,15c40 <alt_avalon_dma_ioctl+0x288>
   15c2c:	10c000e0 	cmpeqi	r3,r2,3
   15c30:	1800091e 	bne	r3,zero,15c58 <alt_avalon_dma_ioctl+0x2a0>
   15c34:	108001e0 	cmpeqi	r2,r2,7
   15c38:	10000a1e 	bne	r2,zero,15c64 <alt_avalon_dma_ioctl+0x2ac>
   15c3c:	00000c06 	br	15c70 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
   15c40:	00800044 	movi	r2,1
   15c44:	e0bffc15 	stw	r2,-16(fp)
       break;
   15c48:	00000b06 	br	15c78 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
   15c4c:	00800084 	movi	r2,2
   15c50:	e0bffc15 	stw	r2,-16(fp)
       break;
   15c54:	00000806 	br	15c78 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
   15c58:	00800104 	movi	r2,4
   15c5c:	e0bffc15 	stw	r2,-16(fp)
       break;
   15c60:	00000506 	br	15c78 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
   15c64:	00810004 	movi	r2,1024
   15c68:	e0bffc15 	stw	r2,-16(fp)
       break;
   15c6c:	00000206 	br	15c78 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
   15c70:	00820004 	movi	r2,2048
   15c74:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
   15c78:	e0bffd17 	ldw	r2,-12(fp)
   15c7c:	10800517 	ldw	r2,20(r2)
   15c80:	1080080c 	andi	r2,r2,32
   15c84:	10000726 	beq	r2,zero,15ca4 <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   15c88:	e0bffd17 	ldw	r2,-12(fp)
   15c8c:	10800017 	ldw	r2,0(r2)
   15c90:	10800604 	addi	r2,r2,24
   15c94:	e0fffc17 	ldw	r3,-16(fp)
   15c98:	18c07e14 	ori	r3,r3,504
   15c9c:	10c00035 	stwio	r3,0(r2)
   15ca0:	00001106 	br	15ce8 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
   15ca4:	e0bffd17 	ldw	r2,-12(fp)
   15ca8:	10800517 	ldw	r2,20(r2)
   15cac:	1080100c 	andi	r2,r2,64
   15cb0:	10000726 	beq	r2,zero,15cd0 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   15cb4:	e0bffd17 	ldw	r2,-12(fp)
   15cb8:	10800017 	ldw	r2,0(r2)
   15cbc:	10800604 	addi	r2,r2,24
   15cc0:	e0fffc17 	ldw	r3,-16(fp)
   15cc4:	18c0be14 	ori	r3,r3,760
   15cc8:	10c00035 	stwio	r3,0(r2)
   15ccc:	00000606 	br	15ce8 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   15cd0:	e0bffd17 	ldw	r2,-12(fp)
   15cd4:	10800017 	ldw	r2,0(r2)
   15cd8:	10800604 	addi	r2,r2,24
   15cdc:	e0fffc17 	ldw	r3,-16(fp)
   15ce0:	18c03e14 	ori	r3,r3,248
   15ce4:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
   15ce8:	e0bffb17 	ldw	r2,-20(fp)
}
   15cec:	e037883a 	mov	sp,fp
   15cf0:	df000017 	ldw	fp,0(sp)
   15cf4:	dec00104 	addi	sp,sp,4
   15cf8:	f800283a 	ret

00015cfc <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
   15cfc:	defffb04 	addi	sp,sp,-20
   15d00:	dfc00415 	stw	ra,16(sp)
   15d04:	df000315 	stw	fp,12(sp)
   15d08:	df000304 	addi	fp,sp,12
   15d0c:	e13ffd15 	stw	r4,-12(fp)
   15d10:	e17ffe15 	stw	r5,-8(fp)
   15d14:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
   15d18:	e0bffd17 	ldw	r2,-12(fp)
   15d1c:	10800617 	ldw	r2,24(r2)
   15d20:	e1bfff17 	ldw	r6,-4(fp)
   15d24:	e17ffe17 	ldw	r5,-8(fp)
   15d28:	1009883a 	mov	r4,r2
   15d2c:	00159b80 	call	159b8 <alt_avalon_dma_ioctl>
             req,
             arg);
}
   15d30:	e037883a 	mov	sp,fp
   15d34:	dfc00117 	ldw	ra,4(sp)
   15d38:	df000017 	ldw	fp,0(sp)
   15d3c:	dec00204 	addi	sp,sp,8
   15d40:	f800283a 	ret

00015d44 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
   15d44:	defffb04 	addi	sp,sp,-20
   15d48:	dfc00415 	stw	ra,16(sp)
   15d4c:	df000315 	stw	fp,12(sp)
   15d50:	df000304 	addi	fp,sp,12
   15d54:	e13ffd15 	stw	r4,-12(fp)
   15d58:	e17ffe15 	stw	r5,-8(fp)
   15d5c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
   15d60:	e0bffd17 	ldw	r2,-12(fp)
   15d64:	10800617 	ldw	r2,24(r2)
   15d68:	e1bfff17 	ldw	r6,-4(fp)
   15d6c:	e17ffe17 	ldw	r5,-8(fp)
   15d70:	1009883a 	mov	r4,r2
   15d74:	00159b80 	call	159b8 <alt_avalon_dma_ioctl>
             req,
             arg);
}
   15d78:	e037883a 	mov	sp,fp
   15d7c:	dfc00117 	ldw	ra,4(sp)
   15d80:	df000017 	ldw	fp,0(sp)
   15d84:	dec00204 	addi	sp,sp,8
   15d88:	f800283a 	ret

00015d8c <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
   15d8c:	defff404 	addi	sp,sp,-48
   15d90:	dfc00b15 	stw	ra,44(sp)
   15d94:	df000a15 	stw	fp,40(sp)
   15d98:	df000a04 	addi	fp,sp,40
   15d9c:	e13ffc15 	stw	r4,-16(fp)
   15da0:	e17ffd15 	stw	r5,-12(fp)
   15da4:	e1bffe15 	stw	r6,-8(fp)
   15da8:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
   15dac:	e0bffc17 	ldw	r2,-16(fp)
   15db0:	10800617 	ldw	r2,24(r2)
   15db4:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   15db8:	e0bff617 	ldw	r2,-40(fp)
   15dbc:	10800517 	ldw	r2,20(r2)
   15dc0:	108003cc 	andi	r2,r2,15
   15dc4:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
   15dc8:	e0fffd17 	ldw	r3,-12(fp)
   15dcc:	e0bff717 	ldw	r2,-36(fp)
   15dd0:	1884703a 	and	r2,r3,r2
   15dd4:	1000081e 	bne	r2,zero,15df8 <alt_avalon_dma_prepare+0x6c>
   15dd8:	e0fffe17 	ldw	r3,-8(fp)
   15ddc:	e0bff717 	ldw	r2,-36(fp)
   15de0:	1884703a 	and	r2,r3,r2
   15de4:	1000041e 	bne	r2,zero,15df8 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
   15de8:	e0bff617 	ldw	r2,-40(fp)
   15dec:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
   15df0:	e0bffe17 	ldw	r2,-8(fp)
   15df4:	1880022e 	bgeu	r3,r2,15e00 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
   15df8:	00bffa84 	movi	r2,-22
   15dfc:	00002c06 	br	15eb0 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
   15e00:	e0bff617 	ldw	r2,-40(fp)
   15e04:	10800317 	ldw	r2,12(r2)
   15e08:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
   15e0c:	e0bff617 	ldw	r2,-40(fp)
   15e10:	10800417 	ldw	r2,16(r2)
   15e14:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
   15e18:	e0bff917 	ldw	r2,-28(fp)
   15e1c:	1004913a 	slli	r2,r2,4
   15e20:	10801904 	addi	r2,r2,100
   15e24:	e0fff617 	ldw	r3,-40(fp)
   15e28:	1885883a 	add	r2,r3,r2
   15e2c:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   15e30:	e0bff917 	ldw	r2,-28(fp)
   15e34:	10800044 	addi	r2,r2,1
   15e38:	108000cc 	andi	r2,r2,3
   15e3c:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
   15e40:	e0fffb17 	ldw	r3,-20(fp)
   15e44:	e0bff817 	ldw	r2,-32(fp)
   15e48:	1880021e 	bne	r3,r2,15e54 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
   15e4c:	00bff904 	movi	r2,-28
   15e50:	00001706 	br	15eb0 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
   15e54:	e0bffa17 	ldw	r2,-24(fp)
   15e58:	e0fffd17 	ldw	r3,-12(fp)
   15e5c:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
   15e60:	e0bffa17 	ldw	r2,-24(fp)
   15e64:	e0fffe17 	ldw	r3,-8(fp)
   15e68:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
   15e6c:	e0bffa17 	ldw	r2,-24(fp)
   15e70:	e0ffff17 	ldw	r3,-4(fp)
   15e74:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
   15e78:	e0bffa17 	ldw	r2,-24(fp)
   15e7c:	e0c00217 	ldw	r3,8(fp)
   15e80:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
   15e84:	e0bff617 	ldw	r2,-40(fp)
   15e88:	e0fffb17 	ldw	r3,-20(fp)
   15e8c:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
   15e90:	e0bff617 	ldw	r2,-40(fp)
   15e94:	10800817 	ldw	r2,32(r2)
   15e98:	1000041e 	bne	r2,zero,15eac <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
   15e9c:	e0bff617 	ldw	r2,-40(fp)
   15ea0:	10800717 	ldw	r2,28(r2)
   15ea4:	e13ff617 	ldw	r4,-40(fp)
   15ea8:	103ee83a 	callr	r2
  }

  return 0;
   15eac:	0005883a 	mov	r2,zero
}
   15eb0:	e037883a 	mov	sp,fp
   15eb4:	dfc00117 	ldw	ra,4(sp)
   15eb8:	df000017 	ldw	fp,0(sp)
   15ebc:	dec00204 	addi	sp,sp,8
   15ec0:	f800283a 	ret

00015ec4 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
   15ec4:	defffb04 	addi	sp,sp,-20
   15ec8:	df000415 	stw	fp,16(sp)
   15ecc:	df000404 	addi	fp,sp,16
   15ed0:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   15ed4:	e0bfff17 	ldw	r2,-4(fp)
   15ed8:	10800617 	ldw	r2,24(r2)
   15edc:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
   15ee0:	e0bffc17 	ldw	r2,-16(fp)
   15ee4:	10800117 	ldw	r2,4(r2)
   15ee8:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
   15eec:	e0bffc17 	ldw	r2,-16(fp)
   15ef0:	10800217 	ldw	r2,8(r2)
   15ef4:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
   15ef8:	e0bffd17 	ldw	r2,-12(fp)
   15efc:	e0fffe17 	ldw	r3,-8(fp)
   15f00:	1880052e 	bgeu	r3,r2,15f18 <alt_avalon_dma_space+0x54>
   15f04:	e0fffd17 	ldw	r3,-12(fp)
   15f08:	e0bffe17 	ldw	r2,-8(fp)
   15f0c:	1885c83a 	sub	r2,r3,r2
   15f10:	10bfffc4 	addi	r2,r2,-1
   15f14:	00000406 	br	15f28 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
   15f18:	e0fffd17 	ldw	r3,-12(fp)
   15f1c:	e0bffe17 	ldw	r2,-8(fp)
   15f20:	1885c83a 	sub	r2,r3,r2
   15f24:	108000c4 	addi	r2,r2,3
}
   15f28:	e037883a 	mov	sp,fp
   15f2c:	df000017 	ldw	fp,0(sp)
   15f30:	dec00104 	addi	sp,sp,4
   15f34:	f800283a 	ret

00015f38 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
   15f38:	defff404 	addi	sp,sp,-48
   15f3c:	dfc00b15 	stw	ra,44(sp)
   15f40:	df000a15 	stw	fp,40(sp)
   15f44:	df000a04 	addi	fp,sp,40
   15f48:	e13ffc15 	stw	r4,-16(fp)
   15f4c:	e17ffd15 	stw	r5,-12(fp)
   15f50:	e1bffe15 	stw	r6,-8(fp)
   15f54:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   15f58:	e0bffc17 	ldw	r2,-16(fp)
   15f5c:	10800617 	ldw	r2,24(r2)
   15f60:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   15f64:	e0bff617 	ldw	r2,-40(fp)
   15f68:	10800517 	ldw	r2,20(r2)
   15f6c:	108003cc 	andi	r2,r2,15
   15f70:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
   15f74:	e0fffd17 	ldw	r3,-12(fp)
   15f78:	e0bff717 	ldw	r2,-36(fp)
   15f7c:	1884703a 	and	r2,r3,r2
   15f80:	1000081e 	bne	r2,zero,15fa4 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
   15f84:	e0fffe17 	ldw	r3,-8(fp)
   15f88:	e0bff717 	ldw	r2,-36(fp)
   15f8c:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
   15f90:	1000041e 	bne	r2,zero,15fa4 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
   15f94:	e0bff617 	ldw	r2,-40(fp)
   15f98:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
   15f9c:	e0bffe17 	ldw	r2,-8(fp)
   15fa0:	1880022e 	bgeu	r3,r2,15fac <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
   15fa4:	00bffa84 	movi	r2,-22
   15fa8:	00002c06 	br	1605c <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
   15fac:	e0bff617 	ldw	r2,-40(fp)
   15fb0:	10800117 	ldw	r2,4(r2)
   15fb4:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
   15fb8:	e0bff617 	ldw	r2,-40(fp)
   15fbc:	10800217 	ldw	r2,8(r2)
   15fc0:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
   15fc4:	e0bff917 	ldw	r2,-28(fp)
   15fc8:	1004913a 	slli	r2,r2,4
   15fcc:	10800904 	addi	r2,r2,36
   15fd0:	e0fff617 	ldw	r3,-40(fp)
   15fd4:	1885883a 	add	r2,r3,r2
   15fd8:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   15fdc:	e0bff917 	ldw	r2,-28(fp)
   15fe0:	10800044 	addi	r2,r2,1
   15fe4:	108000cc 	andi	r2,r2,3
   15fe8:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
   15fec:	e0fffb17 	ldw	r3,-20(fp)
   15ff0:	e0bff817 	ldw	r2,-32(fp)
   15ff4:	1880021e 	bne	r3,r2,16000 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
   15ff8:	00bff904 	movi	r2,-28
   15ffc:	00001706 	br	1605c <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
   16000:	e0bffa17 	ldw	r2,-24(fp)
   16004:	e0fffd17 	ldw	r3,-12(fp)
   16008:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
   1600c:	e0bffa17 	ldw	r2,-24(fp)
   16010:	e0fffe17 	ldw	r3,-8(fp)
   16014:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
   16018:	e0bffa17 	ldw	r2,-24(fp)
   1601c:	e0ffff17 	ldw	r3,-4(fp)
   16020:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
   16024:	e0bffa17 	ldw	r2,-24(fp)
   16028:	e0c00217 	ldw	r3,8(fp)
   1602c:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
   16030:	e0bff617 	ldw	r2,-40(fp)
   16034:	e0fffb17 	ldw	r3,-20(fp)
   16038:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
   1603c:	e0bff617 	ldw	r2,-40(fp)
   16040:	10800817 	ldw	r2,32(r2)
   16044:	1000041e 	bne	r2,zero,16058 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
   16048:	e0bff617 	ldw	r2,-40(fp)
   1604c:	10800717 	ldw	r2,28(r2)
   16050:	e13ff617 	ldw	r4,-40(fp)
   16054:	103ee83a 	callr	r2
  }

  return 0;
   16058:	0005883a 	mov	r2,zero
}
   1605c:	e037883a 	mov	sp,fp
   16060:	dfc00117 	ldw	ra,4(sp)
   16064:	df000017 	ldw	fp,0(sp)
   16068:	dec00204 	addi	sp,sp,8
   1606c:	f800283a 	ret

00016070 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
   16070:	defff104 	addi	sp,sp,-60
   16074:	dfc00e15 	stw	ra,56(sp)
   16078:	df000d15 	stw	fp,52(sp)
   1607c:	df000d04 	addi	fp,sp,52
   16080:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
   16084:	e0bfff17 	ldw	r2,-4(fp)
   16088:	e0bff315 	stw	r2,-52(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
   1608c:	e0bff317 	ldw	r2,-52(fp)
   16090:	10800517 	ldw	r2,20(r2)
   16094:	1080080c 	andi	r2,r2,32
   16098:	e0bff415 	stw	r2,-48(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
   1609c:	e0bff317 	ldw	r2,-52(fp)
   160a0:	10800517 	ldw	r2,20(r2)
   160a4:	1080100c 	andi	r2,r2,64
   160a8:	e0bff515 	stw	r2,-44(fp)

  tx_start = priv->tx_start;
   160ac:	e0bff317 	ldw	r2,-52(fp)
   160b0:	10800117 	ldw	r2,4(r2)
   160b4:	e0bff615 	stw	r2,-40(fp)
  rx_start = priv->rx_start;
   160b8:	e0bff317 	ldw	r2,-52(fp)
   160bc:	10800317 	ldw	r2,12(r2)
   160c0:	e0bff715 	stw	r2,-36(fp)

  tx_slot = &priv->tx_buf[tx_start];
   160c4:	e0bff617 	ldw	r2,-40(fp)
   160c8:	1004913a 	slli	r2,r2,4
   160cc:	10800904 	addi	r2,r2,36
   160d0:	e0fff317 	ldw	r3,-52(fp)
   160d4:	1885883a 	add	r2,r3,r2
   160d8:	e0bff815 	stw	r2,-32(fp)
  rx_slot = &priv->rx_buf[rx_start];
   160dc:	e0bff717 	ldw	r2,-36(fp)
   160e0:	1004913a 	slli	r2,r2,4
   160e4:	10801904 	addi	r2,r2,100
   160e8:	e0fff317 	ldw	r3,-52(fp)
   160ec:	1885883a 	add	r2,r3,r2
   160f0:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
   160f4:	e0bff417 	ldw	r2,-48(fp)
   160f8:	1000051e 	bne	r2,zero,16110 <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   160fc:	e0bff617 	ldw	r2,-40(fp)
   16100:	10800044 	addi	r2,r2,1
   16104:	10c000cc 	andi	r3,r2,3
   16108:	e0bff317 	ldw	r2,-52(fp)
   1610c:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
   16110:	e0bff517 	ldw	r2,-44(fp)
   16114:	1000051e 	bne	r2,zero,1612c <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   16118:	e0bff717 	ldw	r2,-36(fp)
   1611c:	10800044 	addi	r2,r2,1
   16120:	10c000cc 	andi	r3,r2,3
   16124:	e0bff317 	ldw	r2,-52(fp)
   16128:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
   1612c:	e0bff317 	ldw	r2,-52(fp)
   16130:	10800017 	ldw	r2,0(r2)
   16134:	0007883a 	mov	r3,zero
   16138:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
   1613c:	e0bff317 	ldw	r2,-52(fp)
   16140:	10800017 	ldw	r2,0(r2)
   16144:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
   16148:	e0bff317 	ldw	r2,-52(fp)
   1614c:	10800717 	ldw	r2,28(r2)
   16150:	e13ff317 	ldw	r4,-52(fp)
   16154:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
   16158:	e0bff417 	ldw	r2,-48(fp)
   1615c:	1000151e 	bne	r2,zero,161b4 <alt_avalon_dma_irq+0x144>
   16160:	e0bff817 	ldw	r2,-32(fp)
   16164:	10800217 	ldw	r2,8(r2)
   16168:	10001226 	beq	r2,zero,161b4 <alt_avalon_dma_irq+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1616c:	0005303a 	rdctl	r2,status
   16170:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16174:	e0fffc17 	ldw	r3,-16(fp)
   16178:	00bfff84 	movi	r2,-2
   1617c:	1884703a 	and	r2,r3,r2
   16180:	1001703a 	wrctl	status,r2
  
  return context;
   16184:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
   16188:	e0bffb15 	stw	r2,-20(fp)
    tx_slot->done (tx_slot->handle);
   1618c:	e0bff817 	ldw	r2,-32(fp)
   16190:	10800217 	ldw	r2,8(r2)
   16194:	e0fff817 	ldw	r3,-32(fp)
   16198:	18c00317 	ldw	r3,12(r3)
   1619c:	1809883a 	mov	r4,r3
   161a0:	103ee83a 	callr	r2
   161a4:	e0bffb17 	ldw	r2,-20(fp)
   161a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161ac:	e0bffe17 	ldw	r2,-8(fp)
   161b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
   161b4:	e0bff517 	ldw	r2,-44(fp)
   161b8:	1000171e 	bne	r2,zero,16218 <alt_avalon_dma_irq+0x1a8>
   161bc:	e0bff917 	ldw	r2,-28(fp)
   161c0:	10800217 	ldw	r2,8(r2)
   161c4:	10001426 	beq	r2,zero,16218 <alt_avalon_dma_irq+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161c8:	0005303a 	rdctl	r2,status
   161cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161d0:	e0fffd17 	ldw	r3,-12(fp)
   161d4:	00bfff84 	movi	r2,-2
   161d8:	1884703a 	and	r2,r3,r2
   161dc:	1001703a 	wrctl	status,r2
  
  return context;
   161e0:	e0bffd17 	ldw	r2,-12(fp)
  {
    cpu_sr = alt_irq_disable_all();
   161e4:	e0bffb15 	stw	r2,-20(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
   161e8:	e0bff917 	ldw	r2,-28(fp)
   161ec:	10800217 	ldw	r2,8(r2)
   161f0:	e0fff917 	ldw	r3,-28(fp)
   161f4:	19000317 	ldw	r4,12(r3)
   161f8:	e0fff917 	ldw	r3,-28(fp)
   161fc:	18c00017 	ldw	r3,0(r3)
   16200:	180b883a 	mov	r5,r3
   16204:	103ee83a 	callr	r2
   16208:	e0bffb17 	ldw	r2,-20(fp)
   1620c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16210:	e0bffa17 	ldw	r2,-24(fp)
   16214:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   16218:	0001883a 	nop
   1621c:	e037883a 	mov	sp,fp
   16220:	dfc00117 	ldw	ra,4(sp)
   16224:	df000017 	ldw	fp,0(sp)
   16228:	dec00204 	addi	sp,sp,8
   1622c:	f800283a 	ret

00016230 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
   16230:	defff904 	addi	sp,sp,-28
   16234:	dfc00615 	stw	ra,24(sp)
   16238:	df000515 	stw	fp,20(sp)
   1623c:	df000504 	addi	fp,sp,20
   16240:	e13ffc15 	stw	r4,-16(fp)
   16244:	e17ffd15 	stw	r5,-12(fp)
   16248:	e1bffe15 	stw	r6,-8(fp)
   1624c:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   16250:	e0bffe17 	ldw	r2,-8(fp)
   16254:	10800604 	addi	r2,r2,24
   16258:	00c40004 	movi	r3,4096
   1625c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   16260:	e0bffe17 	ldw	r2,-8(fp)
   16264:	10800604 	addi	r2,r2,24
   16268:	00c40004 	movi	r3,4096
   1626c:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
   16270:	e0bffe17 	ldw	r2,-8(fp)
   16274:	10800604 	addi	r2,r2,24
   16278:	00c03f04 	movi	r3,252
   1627c:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
   16280:	0007883a 	mov	r3,zero
   16284:	e0bffe17 	ldw	r2,-8(fp)
   16288:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
   1628c:	e0bffc17 	ldw	r2,-16(fp)
   16290:	10800617 	ldw	r2,24(r2)
   16294:	d8000015 	stw	zero,0(sp)
   16298:	100f883a 	mov	r7,r2
   1629c:	01800074 	movhi	r6,1
   162a0:	31981c04 	addi	r6,r6,24688
   162a4:	e1400217 	ldw	r5,8(fp)
   162a8:	e13fff17 	ldw	r4,-4(fp)
   162ac:	00172a40 	call	172a4 <alt_ic_isr_register>
   162b0:	10000616 	blt	r2,zero,162cc <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
   162b4:	e0bffc17 	ldw	r2,-16(fp)
   162b8:	1009883a 	mov	r4,r2
   162bc:	00157200 	call	15720 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
   162c0:	e0bffd17 	ldw	r2,-12(fp)
   162c4:	1009883a 	mov	r4,r2
   162c8:	00157540 	call	15754 <alt_dma_rxchan_reg>
  }
}
   162cc:	0001883a 	nop
   162d0:	e037883a 	mov	sp,fp
   162d4:	dfc00117 	ldw	ra,4(sp)
   162d8:	df000017 	ldw	fp,0(sp)
   162dc:	dec00204 	addi	sp,sp,8
   162e0:	f800283a 	ret

000162e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   162e4:	defffa04 	addi	sp,sp,-24
   162e8:	dfc00515 	stw	ra,20(sp)
   162ec:	df000415 	stw	fp,16(sp)
   162f0:	df000404 	addi	fp,sp,16
   162f4:	e13ffd15 	stw	r4,-12(fp)
   162f8:	e17ffe15 	stw	r5,-8(fp)
   162fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16300:	e0bffd17 	ldw	r2,-12(fp)
   16304:	10800017 	ldw	r2,0(r2)
   16308:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1630c:	e0bffc17 	ldw	r2,-16(fp)
   16310:	10c00a04 	addi	r3,r2,40
   16314:	e0bffd17 	ldw	r2,-12(fp)
   16318:	10800217 	ldw	r2,8(r2)
   1631c:	100f883a 	mov	r7,r2
   16320:	e1bfff17 	ldw	r6,-4(fp)
   16324:	e17ffe17 	ldw	r5,-8(fp)
   16328:	1809883a 	mov	r4,r3
   1632c:	001690c0 	call	1690c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   16330:	e037883a 	mov	sp,fp
   16334:	dfc00117 	ldw	ra,4(sp)
   16338:	df000017 	ldw	fp,0(sp)
   1633c:	dec00204 	addi	sp,sp,8
   16340:	f800283a 	ret

00016344 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   16344:	defffa04 	addi	sp,sp,-24
   16348:	dfc00515 	stw	ra,20(sp)
   1634c:	df000415 	stw	fp,16(sp)
   16350:	df000404 	addi	fp,sp,16
   16354:	e13ffd15 	stw	r4,-12(fp)
   16358:	e17ffe15 	stw	r5,-8(fp)
   1635c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16360:	e0bffd17 	ldw	r2,-12(fp)
   16364:	10800017 	ldw	r2,0(r2)
   16368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1636c:	e0bffc17 	ldw	r2,-16(fp)
   16370:	10c00a04 	addi	r3,r2,40
   16374:	e0bffd17 	ldw	r2,-12(fp)
   16378:	10800217 	ldw	r2,8(r2)
   1637c:	100f883a 	mov	r7,r2
   16380:	e1bfff17 	ldw	r6,-4(fp)
   16384:	e17ffe17 	ldw	r5,-8(fp)
   16388:	1809883a 	mov	r4,r3
   1638c:	0016b280 	call	16b28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   16390:	e037883a 	mov	sp,fp
   16394:	dfc00117 	ldw	ra,4(sp)
   16398:	df000017 	ldw	fp,0(sp)
   1639c:	dec00204 	addi	sp,sp,8
   163a0:	f800283a 	ret

000163a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   163a4:	defffc04 	addi	sp,sp,-16
   163a8:	dfc00315 	stw	ra,12(sp)
   163ac:	df000215 	stw	fp,8(sp)
   163b0:	df000204 	addi	fp,sp,8
   163b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   163b8:	e0bfff17 	ldw	r2,-4(fp)
   163bc:	10800017 	ldw	r2,0(r2)
   163c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   163c4:	e0bffe17 	ldw	r2,-8(fp)
   163c8:	10c00a04 	addi	r3,r2,40
   163cc:	e0bfff17 	ldw	r2,-4(fp)
   163d0:	10800217 	ldw	r2,8(r2)
   163d4:	100b883a 	mov	r5,r2
   163d8:	1809883a 	mov	r4,r3
   163dc:	00167b40 	call	167b4 <altera_avalon_jtag_uart_close>
}
   163e0:	e037883a 	mov	sp,fp
   163e4:	dfc00117 	ldw	ra,4(sp)
   163e8:	df000017 	ldw	fp,0(sp)
   163ec:	dec00204 	addi	sp,sp,8
   163f0:	f800283a 	ret

000163f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   163f4:	defffa04 	addi	sp,sp,-24
   163f8:	dfc00515 	stw	ra,20(sp)
   163fc:	df000415 	stw	fp,16(sp)
   16400:	df000404 	addi	fp,sp,16
   16404:	e13ffd15 	stw	r4,-12(fp)
   16408:	e17ffe15 	stw	r5,-8(fp)
   1640c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   16410:	e0bffd17 	ldw	r2,-12(fp)
   16414:	10800017 	ldw	r2,0(r2)
   16418:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1641c:	e0bffc17 	ldw	r2,-16(fp)
   16420:	10800a04 	addi	r2,r2,40
   16424:	e1bfff17 	ldw	r6,-4(fp)
   16428:	e17ffe17 	ldw	r5,-8(fp)
   1642c:	1009883a 	mov	r4,r2
   16430:	001681c0 	call	1681c <altera_avalon_jtag_uart_ioctl>
}
   16434:	e037883a 	mov	sp,fp
   16438:	dfc00117 	ldw	ra,4(sp)
   1643c:	df000017 	ldw	fp,0(sp)
   16440:	dec00204 	addi	sp,sp,8
   16444:	f800283a 	ret

00016448 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   16448:	defffa04 	addi	sp,sp,-24
   1644c:	dfc00515 	stw	ra,20(sp)
   16450:	df000415 	stw	fp,16(sp)
   16454:	df000404 	addi	fp,sp,16
   16458:	e13ffd15 	stw	r4,-12(fp)
   1645c:	e17ffe15 	stw	r5,-8(fp)
   16460:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16464:	e0bffd17 	ldw	r2,-12(fp)
   16468:	00c00044 	movi	r3,1
   1646c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   16470:	e0bffd17 	ldw	r2,-12(fp)
   16474:	10800017 	ldw	r2,0(r2)
   16478:	10800104 	addi	r2,r2,4
   1647c:	1007883a 	mov	r3,r2
   16480:	e0bffd17 	ldw	r2,-12(fp)
   16484:	10800817 	ldw	r2,32(r2)
   16488:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1648c:	e0bffe17 	ldw	r2,-8(fp)
   16490:	e0ffff17 	ldw	r3,-4(fp)
   16494:	d8000015 	stw	zero,0(sp)
   16498:	e1fffd17 	ldw	r7,-12(fp)
   1649c:	01800074 	movhi	r6,1
   164a0:	31994204 	addi	r6,r6,25864
   164a4:	180b883a 	mov	r5,r3
   164a8:	1009883a 	mov	r4,r2
   164ac:	00172a40 	call	172a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   164b0:	e0bffd17 	ldw	r2,-12(fp)
   164b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   164b8:	e0bffd17 	ldw	r2,-12(fp)
   164bc:	10800204 	addi	r2,r2,8
   164c0:	d0e90117 	ldw	r3,-23548(gp)
   164c4:	e1fffd17 	ldw	r7,-12(fp)
   164c8:	01800074 	movhi	r6,1
   164cc:	3199c504 	addi	r6,r6,26388
   164d0:	180b883a 	mov	r5,r3
   164d4:	1009883a 	mov	r4,r2
   164d8:	0016e400 	call	16e40 <alt_alarm_start>
   164dc:	1000040e 	bge	r2,zero,164f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   164e0:	e0fffd17 	ldw	r3,-12(fp)
   164e4:	00a00034 	movhi	r2,32768
   164e8:	10bfffc4 	addi	r2,r2,-1
   164ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   164f0:	0001883a 	nop
   164f4:	e037883a 	mov	sp,fp
   164f8:	dfc00117 	ldw	ra,4(sp)
   164fc:	df000017 	ldw	fp,0(sp)
   16500:	dec00204 	addi	sp,sp,8
   16504:	f800283a 	ret

00016508 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   16508:	defff804 	addi	sp,sp,-32
   1650c:	df000715 	stw	fp,28(sp)
   16510:	df000704 	addi	fp,sp,28
   16514:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   16518:	e0bfff17 	ldw	r2,-4(fp)
   1651c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   16520:	e0bffb17 	ldw	r2,-20(fp)
   16524:	10800017 	ldw	r2,0(r2)
   16528:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1652c:	e0bffc17 	ldw	r2,-16(fp)
   16530:	10800104 	addi	r2,r2,4
   16534:	10800037 	ldwio	r2,0(r2)
   16538:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1653c:	e0bffd17 	ldw	r2,-12(fp)
   16540:	1080c00c 	andi	r2,r2,768
   16544:	10006d26 	beq	r2,zero,166fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16548:	e0bffd17 	ldw	r2,-12(fp)
   1654c:	1080400c 	andi	r2,r2,256
   16550:	10003526 	beq	r2,zero,16628 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   16554:	00800074 	movhi	r2,1
   16558:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1655c:	e0bffb17 	ldw	r2,-20(fp)
   16560:	10800a17 	ldw	r2,40(r2)
   16564:	10800044 	addi	r2,r2,1
   16568:	1081ffcc 	andi	r2,r2,2047
   1656c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   16570:	e0bffb17 	ldw	r2,-20(fp)
   16574:	10c00b17 	ldw	r3,44(r2)
   16578:	e0bffe17 	ldw	r2,-8(fp)
   1657c:	18801526 	beq	r3,r2,165d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16580:	e0bffc17 	ldw	r2,-16(fp)
   16584:	10800037 	ldwio	r2,0(r2)
   16588:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1658c:	e0bff917 	ldw	r2,-28(fp)
   16590:	10a0000c 	andi	r2,r2,32768
   16594:	10001126 	beq	r2,zero,165dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16598:	e0bffb17 	ldw	r2,-20(fp)
   1659c:	10800a17 	ldw	r2,40(r2)
   165a0:	e0fff917 	ldw	r3,-28(fp)
   165a4:	1809883a 	mov	r4,r3
   165a8:	e0fffb17 	ldw	r3,-20(fp)
   165ac:	1885883a 	add	r2,r3,r2
   165b0:	10800e04 	addi	r2,r2,56
   165b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   165b8:	e0bffb17 	ldw	r2,-20(fp)
   165bc:	10800a17 	ldw	r2,40(r2)
   165c0:	10800044 	addi	r2,r2,1
   165c4:	10c1ffcc 	andi	r3,r2,2047
   165c8:	e0bffb17 	ldw	r2,-20(fp)
   165cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   165d0:	003fe206 	br	1655c <__alt_exception_stack_pointer+0xf801655c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   165d4:	0001883a 	nop
   165d8:	00000106 	br	165e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   165dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   165e0:	e0bff917 	ldw	r2,-28(fp)
   165e4:	10bfffec 	andhi	r2,r2,65535
   165e8:	10000f26 	beq	r2,zero,16628 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   165ec:	e0bffb17 	ldw	r2,-20(fp)
   165f0:	10c00817 	ldw	r3,32(r2)
   165f4:	00bfff84 	movi	r2,-2
   165f8:	1886703a 	and	r3,r3,r2
   165fc:	e0bffb17 	ldw	r2,-20(fp)
   16600:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   16604:	e0bffc17 	ldw	r2,-16(fp)
   16608:	10800104 	addi	r2,r2,4
   1660c:	1007883a 	mov	r3,r2
   16610:	e0bffb17 	ldw	r2,-20(fp)
   16614:	10800817 	ldw	r2,32(r2)
   16618:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1661c:	e0bffc17 	ldw	r2,-16(fp)
   16620:	10800104 	addi	r2,r2,4
   16624:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   16628:	e0bffd17 	ldw	r2,-12(fp)
   1662c:	1080800c 	andi	r2,r2,512
   16630:	103fbe26 	beq	r2,zero,1652c <__alt_exception_stack_pointer+0xf801652c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   16634:	e0bffd17 	ldw	r2,-12(fp)
   16638:	1004d43a 	srli	r2,r2,16
   1663c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   16640:	00001406 	br	16694 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   16644:	e0bffc17 	ldw	r2,-16(fp)
   16648:	e0fffb17 	ldw	r3,-20(fp)
   1664c:	18c00d17 	ldw	r3,52(r3)
   16650:	e13ffb17 	ldw	r4,-20(fp)
   16654:	20c7883a 	add	r3,r4,r3
   16658:	18c20e04 	addi	r3,r3,2104
   1665c:	18c00003 	ldbu	r3,0(r3)
   16660:	18c03fcc 	andi	r3,r3,255
   16664:	18c0201c 	xori	r3,r3,128
   16668:	18ffe004 	addi	r3,r3,-128
   1666c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16670:	e0bffb17 	ldw	r2,-20(fp)
   16674:	10800d17 	ldw	r2,52(r2)
   16678:	10800044 	addi	r2,r2,1
   1667c:	10c1ffcc 	andi	r3,r2,2047
   16680:	e0bffb17 	ldw	r2,-20(fp)
   16684:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   16688:	e0bffa17 	ldw	r2,-24(fp)
   1668c:	10bfffc4 	addi	r2,r2,-1
   16690:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   16694:	e0bffa17 	ldw	r2,-24(fp)
   16698:	10000526 	beq	r2,zero,166b0 <altera_avalon_jtag_uart_irq+0x1a8>
   1669c:	e0bffb17 	ldw	r2,-20(fp)
   166a0:	10c00d17 	ldw	r3,52(r2)
   166a4:	e0bffb17 	ldw	r2,-20(fp)
   166a8:	10800c17 	ldw	r2,48(r2)
   166ac:	18bfe51e 	bne	r3,r2,16644 <__alt_exception_stack_pointer+0xf8016644>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   166b0:	e0bffa17 	ldw	r2,-24(fp)
   166b4:	103f9d26 	beq	r2,zero,1652c <__alt_exception_stack_pointer+0xf801652c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   166b8:	e0bffb17 	ldw	r2,-20(fp)
   166bc:	10c00817 	ldw	r3,32(r2)
   166c0:	00bfff44 	movi	r2,-3
   166c4:	1886703a 	and	r3,r3,r2
   166c8:	e0bffb17 	ldw	r2,-20(fp)
   166cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   166d0:	e0bffb17 	ldw	r2,-20(fp)
   166d4:	10800017 	ldw	r2,0(r2)
   166d8:	10800104 	addi	r2,r2,4
   166dc:	1007883a 	mov	r3,r2
   166e0:	e0bffb17 	ldw	r2,-20(fp)
   166e4:	10800817 	ldw	r2,32(r2)
   166e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   166ec:	e0bffc17 	ldw	r2,-16(fp)
   166f0:	10800104 	addi	r2,r2,4
   166f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   166f8:	003f8c06 	br	1652c <__alt_exception_stack_pointer+0xf801652c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   166fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   16700:	0001883a 	nop
   16704:	e037883a 	mov	sp,fp
   16708:	df000017 	ldw	fp,0(sp)
   1670c:	dec00104 	addi	sp,sp,4
   16710:	f800283a 	ret

00016714 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16714:	defff804 	addi	sp,sp,-32
   16718:	df000715 	stw	fp,28(sp)
   1671c:	df000704 	addi	fp,sp,28
   16720:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16724:	e0bffb17 	ldw	r2,-20(fp)
   16728:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1672c:	e0bff917 	ldw	r2,-28(fp)
   16730:	10800017 	ldw	r2,0(r2)
   16734:	10800104 	addi	r2,r2,4
   16738:	10800037 	ldwio	r2,0(r2)
   1673c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   16740:	e0bffa17 	ldw	r2,-24(fp)
   16744:	1081000c 	andi	r2,r2,1024
   16748:	10000b26 	beq	r2,zero,16778 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1674c:	e0bff917 	ldw	r2,-28(fp)
   16750:	10800017 	ldw	r2,0(r2)
   16754:	10800104 	addi	r2,r2,4
   16758:	1007883a 	mov	r3,r2
   1675c:	e0bff917 	ldw	r2,-28(fp)
   16760:	10800817 	ldw	r2,32(r2)
   16764:	10810014 	ori	r2,r2,1024
   16768:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1676c:	e0bff917 	ldw	r2,-28(fp)
   16770:	10000915 	stw	zero,36(r2)
   16774:	00000a06 	br	167a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   16778:	e0bff917 	ldw	r2,-28(fp)
   1677c:	10c00917 	ldw	r3,36(r2)
   16780:	00a00034 	movhi	r2,32768
   16784:	10bfff04 	addi	r2,r2,-4
   16788:	10c00536 	bltu	r2,r3,167a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1678c:	e0bff917 	ldw	r2,-28(fp)
   16790:	10800917 	ldw	r2,36(r2)
   16794:	10c00044 	addi	r3,r2,1
   16798:	e0bff917 	ldw	r2,-28(fp)
   1679c:	10c00915 	stw	r3,36(r2)
   167a0:	d0a90117 	ldw	r2,-23548(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   167a4:	e037883a 	mov	sp,fp
   167a8:	df000017 	ldw	fp,0(sp)
   167ac:	dec00104 	addi	sp,sp,4
   167b0:	f800283a 	ret

000167b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   167b4:	defffd04 	addi	sp,sp,-12
   167b8:	df000215 	stw	fp,8(sp)
   167bc:	df000204 	addi	fp,sp,8
   167c0:	e13ffe15 	stw	r4,-8(fp)
   167c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   167c8:	00000506 	br	167e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   167cc:	e0bfff17 	ldw	r2,-4(fp)
   167d0:	1090000c 	andi	r2,r2,16384
   167d4:	10000226 	beq	r2,zero,167e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   167d8:	00bffd44 	movi	r2,-11
   167dc:	00000b06 	br	1680c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   167e0:	e0bffe17 	ldw	r2,-8(fp)
   167e4:	10c00d17 	ldw	r3,52(r2)
   167e8:	e0bffe17 	ldw	r2,-8(fp)
   167ec:	10800c17 	ldw	r2,48(r2)
   167f0:	18800526 	beq	r3,r2,16808 <altera_avalon_jtag_uart_close+0x54>
   167f4:	e0bffe17 	ldw	r2,-8(fp)
   167f8:	10c00917 	ldw	r3,36(r2)
   167fc:	e0bffe17 	ldw	r2,-8(fp)
   16800:	10800117 	ldw	r2,4(r2)
   16804:	18bff136 	bltu	r3,r2,167cc <__alt_exception_stack_pointer+0xf80167cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16808:	0005883a 	mov	r2,zero
}
   1680c:	e037883a 	mov	sp,fp
   16810:	df000017 	ldw	fp,0(sp)
   16814:	dec00104 	addi	sp,sp,4
   16818:	f800283a 	ret

0001681c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1681c:	defffa04 	addi	sp,sp,-24
   16820:	df000515 	stw	fp,20(sp)
   16824:	df000504 	addi	fp,sp,20
   16828:	e13ffd15 	stw	r4,-12(fp)
   1682c:	e17ffe15 	stw	r5,-8(fp)
   16830:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   16834:	00bff9c4 	movi	r2,-25
   16838:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1683c:	e0bffe17 	ldw	r2,-8(fp)
   16840:	10da8060 	cmpeqi	r3,r2,27137
   16844:	1800031e 	bne	r3,zero,16854 <altera_avalon_jtag_uart_ioctl+0x38>
   16848:	109a80a0 	cmpeqi	r2,r2,27138
   1684c:	1000181e 	bne	r2,zero,168b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   16850:	00002906 	br	168f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16854:	e0bffd17 	ldw	r2,-12(fp)
   16858:	10c00117 	ldw	r3,4(r2)
   1685c:	00a00034 	movhi	r2,32768
   16860:	10bfffc4 	addi	r2,r2,-1
   16864:	18802126 	beq	r3,r2,168ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   16868:	e0bfff17 	ldw	r2,-4(fp)
   1686c:	10800017 	ldw	r2,0(r2)
   16870:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16874:	e0bffc17 	ldw	r2,-16(fp)
   16878:	10800090 	cmplti	r2,r2,2
   1687c:	1000061e 	bne	r2,zero,16898 <altera_avalon_jtag_uart_ioctl+0x7c>
   16880:	e0fffc17 	ldw	r3,-16(fp)
   16884:	00a00034 	movhi	r2,32768
   16888:	10bfffc4 	addi	r2,r2,-1
   1688c:	18800226 	beq	r3,r2,16898 <altera_avalon_jtag_uart_ioctl+0x7c>
   16890:	e0bffc17 	ldw	r2,-16(fp)
   16894:	00000206 	br	168a0 <altera_avalon_jtag_uart_ioctl+0x84>
   16898:	00a00034 	movhi	r2,32768
   1689c:	10bfff84 	addi	r2,r2,-2
   168a0:	e0fffd17 	ldw	r3,-12(fp)
   168a4:	18800115 	stw	r2,4(r3)
      rc = 0;
   168a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   168ac:	00000f06 	br	168ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   168b0:	e0bffd17 	ldw	r2,-12(fp)
   168b4:	10c00117 	ldw	r3,4(r2)
   168b8:	00a00034 	movhi	r2,32768
   168bc:	10bfffc4 	addi	r2,r2,-1
   168c0:	18800c26 	beq	r3,r2,168f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   168c4:	e0bffd17 	ldw	r2,-12(fp)
   168c8:	10c00917 	ldw	r3,36(r2)
   168cc:	e0bffd17 	ldw	r2,-12(fp)
   168d0:	10800117 	ldw	r2,4(r2)
   168d4:	1885803a 	cmpltu	r2,r3,r2
   168d8:	10c03fcc 	andi	r3,r2,255
   168dc:	e0bfff17 	ldw	r2,-4(fp)
   168e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   168e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   168e8:	00000206 	br	168f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   168ec:	0001883a 	nop
   168f0:	00000106 	br	168f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   168f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   168f8:	e0bffb17 	ldw	r2,-20(fp)
}
   168fc:	e037883a 	mov	sp,fp
   16900:	df000017 	ldw	fp,0(sp)
   16904:	dec00104 	addi	sp,sp,4
   16908:	f800283a 	ret

0001690c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1690c:	defff304 	addi	sp,sp,-52
   16910:	dfc00c15 	stw	ra,48(sp)
   16914:	df000b15 	stw	fp,44(sp)
   16918:	df000b04 	addi	fp,sp,44
   1691c:	e13ffc15 	stw	r4,-16(fp)
   16920:	e17ffd15 	stw	r5,-12(fp)
   16924:	e1bffe15 	stw	r6,-8(fp)
   16928:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1692c:	e0bffd17 	ldw	r2,-12(fp)
   16930:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16934:	00004706 	br	16a54 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16938:	e0bffc17 	ldw	r2,-16(fp)
   1693c:	10800a17 	ldw	r2,40(r2)
   16940:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   16944:	e0bffc17 	ldw	r2,-16(fp)
   16948:	10800b17 	ldw	r2,44(r2)
   1694c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   16950:	e0fff717 	ldw	r3,-36(fp)
   16954:	e0bff817 	ldw	r2,-32(fp)
   16958:	18800536 	bltu	r3,r2,16970 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1695c:	e0fff717 	ldw	r3,-36(fp)
   16960:	e0bff817 	ldw	r2,-32(fp)
   16964:	1885c83a 	sub	r2,r3,r2
   16968:	e0bff615 	stw	r2,-40(fp)
   1696c:	00000406 	br	16980 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   16970:	00c20004 	movi	r3,2048
   16974:	e0bff817 	ldw	r2,-32(fp)
   16978:	1885c83a 	sub	r2,r3,r2
   1697c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   16980:	e0bff617 	ldw	r2,-40(fp)
   16984:	10001e26 	beq	r2,zero,16a00 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   16988:	e0fffe17 	ldw	r3,-8(fp)
   1698c:	e0bff617 	ldw	r2,-40(fp)
   16990:	1880022e 	bgeu	r3,r2,1699c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   16994:	e0bffe17 	ldw	r2,-8(fp)
   16998:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1699c:	e0bffc17 	ldw	r2,-16(fp)
   169a0:	10c00e04 	addi	r3,r2,56
   169a4:	e0bff817 	ldw	r2,-32(fp)
   169a8:	1885883a 	add	r2,r3,r2
   169ac:	e1bff617 	ldw	r6,-40(fp)
   169b0:	100b883a 	mov	r5,r2
   169b4:	e13ff517 	ldw	r4,-44(fp)
   169b8:	000fe400 	call	fe40 <memcpy>
      ptr   += n;
   169bc:	e0fff517 	ldw	r3,-44(fp)
   169c0:	e0bff617 	ldw	r2,-40(fp)
   169c4:	1885883a 	add	r2,r3,r2
   169c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   169cc:	e0fffe17 	ldw	r3,-8(fp)
   169d0:	e0bff617 	ldw	r2,-40(fp)
   169d4:	1885c83a 	sub	r2,r3,r2
   169d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   169dc:	e0fff817 	ldw	r3,-32(fp)
   169e0:	e0bff617 	ldw	r2,-40(fp)
   169e4:	1885883a 	add	r2,r3,r2
   169e8:	10c1ffcc 	andi	r3,r2,2047
   169ec:	e0bffc17 	ldw	r2,-16(fp)
   169f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   169f4:	e0bffe17 	ldw	r2,-8(fp)
   169f8:	00bfcf16 	blt	zero,r2,16938 <__alt_exception_stack_pointer+0xf8016938>
   169fc:	00000106 	br	16a04 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   16a00:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   16a04:	e0fff517 	ldw	r3,-44(fp)
   16a08:	e0bffd17 	ldw	r2,-12(fp)
   16a0c:	1880141e 	bne	r3,r2,16a60 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16a10:	e0bfff17 	ldw	r2,-4(fp)
   16a14:	1090000c 	andi	r2,r2,16384
   16a18:	1000131e 	bne	r2,zero,16a68 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16a1c:	0001883a 	nop
   16a20:	e0bffc17 	ldw	r2,-16(fp)
   16a24:	10c00a17 	ldw	r3,40(r2)
   16a28:	e0bff717 	ldw	r2,-36(fp)
   16a2c:	1880051e 	bne	r3,r2,16a44 <altera_avalon_jtag_uart_read+0x138>
   16a30:	e0bffc17 	ldw	r2,-16(fp)
   16a34:	10c00917 	ldw	r3,36(r2)
   16a38:	e0bffc17 	ldw	r2,-16(fp)
   16a3c:	10800117 	ldw	r2,4(r2)
   16a40:	18bff736 	bltu	r3,r2,16a20 <__alt_exception_stack_pointer+0xf8016a20>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   16a44:	e0bffc17 	ldw	r2,-16(fp)
   16a48:	10c00a17 	ldw	r3,40(r2)
   16a4c:	e0bff717 	ldw	r2,-36(fp)
   16a50:	18800726 	beq	r3,r2,16a70 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16a54:	e0bffe17 	ldw	r2,-8(fp)
   16a58:	00bfb716 	blt	zero,r2,16938 <__alt_exception_stack_pointer+0xf8016938>
   16a5c:	00000506 	br	16a74 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   16a60:	0001883a 	nop
   16a64:	00000306 	br	16a74 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   16a68:	0001883a 	nop
   16a6c:	00000106 	br	16a74 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   16a70:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   16a74:	e0fff517 	ldw	r3,-44(fp)
   16a78:	e0bffd17 	ldw	r2,-12(fp)
   16a7c:	18801826 	beq	r3,r2,16ae0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a80:	0005303a 	rdctl	r2,status
   16a84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a88:	e0fffb17 	ldw	r3,-20(fp)
   16a8c:	00bfff84 	movi	r2,-2
   16a90:	1884703a 	and	r2,r3,r2
   16a94:	1001703a 	wrctl	status,r2
  
  return context;
   16a98:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   16a9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16aa0:	e0bffc17 	ldw	r2,-16(fp)
   16aa4:	10800817 	ldw	r2,32(r2)
   16aa8:	10c00054 	ori	r3,r2,1
   16aac:	e0bffc17 	ldw	r2,-16(fp)
   16ab0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16ab4:	e0bffc17 	ldw	r2,-16(fp)
   16ab8:	10800017 	ldw	r2,0(r2)
   16abc:	10800104 	addi	r2,r2,4
   16ac0:	1007883a 	mov	r3,r2
   16ac4:	e0bffc17 	ldw	r2,-16(fp)
   16ac8:	10800817 	ldw	r2,32(r2)
   16acc:	18800035 	stwio	r2,0(r3)
   16ad0:	e0bffa17 	ldw	r2,-24(fp)
   16ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ad8:	e0bff917 	ldw	r2,-28(fp)
   16adc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16ae0:	e0fff517 	ldw	r3,-44(fp)
   16ae4:	e0bffd17 	ldw	r2,-12(fp)
   16ae8:	18800426 	beq	r3,r2,16afc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   16aec:	e0fff517 	ldw	r3,-44(fp)
   16af0:	e0bffd17 	ldw	r2,-12(fp)
   16af4:	1885c83a 	sub	r2,r3,r2
   16af8:	00000606 	br	16b14 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   16afc:	e0bfff17 	ldw	r2,-4(fp)
   16b00:	1090000c 	andi	r2,r2,16384
   16b04:	10000226 	beq	r2,zero,16b10 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   16b08:	00bffd44 	movi	r2,-11
   16b0c:	00000106 	br	16b14 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   16b10:	00bffec4 	movi	r2,-5
}
   16b14:	e037883a 	mov	sp,fp
   16b18:	dfc00117 	ldw	ra,4(sp)
   16b1c:	df000017 	ldw	fp,0(sp)
   16b20:	dec00204 	addi	sp,sp,8
   16b24:	f800283a 	ret

00016b28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16b28:	defff304 	addi	sp,sp,-52
   16b2c:	dfc00c15 	stw	ra,48(sp)
   16b30:	df000b15 	stw	fp,44(sp)
   16b34:	df000b04 	addi	fp,sp,44
   16b38:	e13ffc15 	stw	r4,-16(fp)
   16b3c:	e17ffd15 	stw	r5,-12(fp)
   16b40:	e1bffe15 	stw	r6,-8(fp)
   16b44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   16b48:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16b4c:	e0bffd17 	ldw	r2,-12(fp)
   16b50:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16b54:	00003706 	br	16c34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16b58:	e0bffc17 	ldw	r2,-16(fp)
   16b5c:	10800c17 	ldw	r2,48(r2)
   16b60:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   16b64:	e0bffc17 	ldw	r2,-16(fp)
   16b68:	10800d17 	ldw	r2,52(r2)
   16b6c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   16b70:	e0fff917 	ldw	r3,-28(fp)
   16b74:	e0bff517 	ldw	r2,-44(fp)
   16b78:	1880062e 	bgeu	r3,r2,16b94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   16b7c:	e0fff517 	ldw	r3,-44(fp)
   16b80:	e0bff917 	ldw	r2,-28(fp)
   16b84:	1885c83a 	sub	r2,r3,r2
   16b88:	10bfffc4 	addi	r2,r2,-1
   16b8c:	e0bff615 	stw	r2,-40(fp)
   16b90:	00000b06 	br	16bc0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   16b94:	e0bff517 	ldw	r2,-44(fp)
   16b98:	10000526 	beq	r2,zero,16bb0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16b9c:	00c20004 	movi	r3,2048
   16ba0:	e0bff917 	ldw	r2,-28(fp)
   16ba4:	1885c83a 	sub	r2,r3,r2
   16ba8:	e0bff615 	stw	r2,-40(fp)
   16bac:	00000406 	br	16bc0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16bb0:	00c1ffc4 	movi	r3,2047
   16bb4:	e0bff917 	ldw	r2,-28(fp)
   16bb8:	1885c83a 	sub	r2,r3,r2
   16bbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   16bc0:	e0bff617 	ldw	r2,-40(fp)
   16bc4:	10001e26 	beq	r2,zero,16c40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   16bc8:	e0fffe17 	ldw	r3,-8(fp)
   16bcc:	e0bff617 	ldw	r2,-40(fp)
   16bd0:	1880022e 	bgeu	r3,r2,16bdc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   16bd4:	e0bffe17 	ldw	r2,-8(fp)
   16bd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16bdc:	e0bffc17 	ldw	r2,-16(fp)
   16be0:	10c20e04 	addi	r3,r2,2104
   16be4:	e0bff917 	ldw	r2,-28(fp)
   16be8:	1885883a 	add	r2,r3,r2
   16bec:	e1bff617 	ldw	r6,-40(fp)
   16bf0:	e17ffd17 	ldw	r5,-12(fp)
   16bf4:	1009883a 	mov	r4,r2
   16bf8:	000fe400 	call	fe40 <memcpy>
      ptr   += n;
   16bfc:	e0fffd17 	ldw	r3,-12(fp)
   16c00:	e0bff617 	ldw	r2,-40(fp)
   16c04:	1885883a 	add	r2,r3,r2
   16c08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16c0c:	e0fffe17 	ldw	r3,-8(fp)
   16c10:	e0bff617 	ldw	r2,-40(fp)
   16c14:	1885c83a 	sub	r2,r3,r2
   16c18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16c1c:	e0fff917 	ldw	r3,-28(fp)
   16c20:	e0bff617 	ldw	r2,-40(fp)
   16c24:	1885883a 	add	r2,r3,r2
   16c28:	10c1ffcc 	andi	r3,r2,2047
   16c2c:	e0bffc17 	ldw	r2,-16(fp)
   16c30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16c34:	e0bffe17 	ldw	r2,-8(fp)
   16c38:	00bfc716 	blt	zero,r2,16b58 <__alt_exception_stack_pointer+0xf8016b58>
   16c3c:	00000106 	br	16c44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   16c40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c44:	0005303a 	rdctl	r2,status
   16c48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c4c:	e0fffb17 	ldw	r3,-20(fp)
   16c50:	00bfff84 	movi	r2,-2
   16c54:	1884703a 	and	r2,r3,r2
   16c58:	1001703a 	wrctl	status,r2
  
  return context;
   16c5c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16c60:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16c64:	e0bffc17 	ldw	r2,-16(fp)
   16c68:	10800817 	ldw	r2,32(r2)
   16c6c:	10c00094 	ori	r3,r2,2
   16c70:	e0bffc17 	ldw	r2,-16(fp)
   16c74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16c78:	e0bffc17 	ldw	r2,-16(fp)
   16c7c:	10800017 	ldw	r2,0(r2)
   16c80:	10800104 	addi	r2,r2,4
   16c84:	1007883a 	mov	r3,r2
   16c88:	e0bffc17 	ldw	r2,-16(fp)
   16c8c:	10800817 	ldw	r2,32(r2)
   16c90:	18800035 	stwio	r2,0(r3)
   16c94:	e0bffa17 	ldw	r2,-24(fp)
   16c98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c9c:	e0bff817 	ldw	r2,-32(fp)
   16ca0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16ca4:	e0bffe17 	ldw	r2,-8(fp)
   16ca8:	0080100e 	bge	zero,r2,16cec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   16cac:	e0bfff17 	ldw	r2,-4(fp)
   16cb0:	1090000c 	andi	r2,r2,16384
   16cb4:	1000101e 	bne	r2,zero,16cf8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16cb8:	0001883a 	nop
   16cbc:	e0bffc17 	ldw	r2,-16(fp)
   16cc0:	10c00d17 	ldw	r3,52(r2)
   16cc4:	e0bff517 	ldw	r2,-44(fp)
   16cc8:	1880051e 	bne	r3,r2,16ce0 <altera_avalon_jtag_uart_write+0x1b8>
   16ccc:	e0bffc17 	ldw	r2,-16(fp)
   16cd0:	10c00917 	ldw	r3,36(r2)
   16cd4:	e0bffc17 	ldw	r2,-16(fp)
   16cd8:	10800117 	ldw	r2,4(r2)
   16cdc:	18bff736 	bltu	r3,r2,16cbc <__alt_exception_stack_pointer+0xf8016cbc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16ce0:	e0bffc17 	ldw	r2,-16(fp)
   16ce4:	10800917 	ldw	r2,36(r2)
   16ce8:	1000051e 	bne	r2,zero,16d00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   16cec:	e0bffe17 	ldw	r2,-8(fp)
   16cf0:	00bfd016 	blt	zero,r2,16c34 <__alt_exception_stack_pointer+0xf8016c34>
   16cf4:	00000306 	br	16d04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16cf8:	0001883a 	nop
   16cfc:	00000106 	br	16d04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16d00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   16d04:	e0fffd17 	ldw	r3,-12(fp)
   16d08:	e0bff717 	ldw	r2,-36(fp)
   16d0c:	18800426 	beq	r3,r2,16d20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   16d10:	e0fffd17 	ldw	r3,-12(fp)
   16d14:	e0bff717 	ldw	r2,-36(fp)
   16d18:	1885c83a 	sub	r2,r3,r2
   16d1c:	00000606 	br	16d38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   16d20:	e0bfff17 	ldw	r2,-4(fp)
   16d24:	1090000c 	andi	r2,r2,16384
   16d28:	10000226 	beq	r2,zero,16d34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   16d2c:	00bffd44 	movi	r2,-11
   16d30:	00000106 	br	16d38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16d34:	00bffec4 	movi	r2,-5
}
   16d38:	e037883a 	mov	sp,fp
   16d3c:	dfc00117 	ldw	ra,4(sp)
   16d40:	df000017 	ldw	fp,0(sp)
   16d44:	dec00204 	addi	sp,sp,8
   16d48:	f800283a 	ret

00016d4c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16d4c:	defffa04 	addi	sp,sp,-24
   16d50:	dfc00515 	stw	ra,20(sp)
   16d54:	df000415 	stw	fp,16(sp)
   16d58:	df000404 	addi	fp,sp,16
   16d5c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16d60:	0007883a 	mov	r3,zero
   16d64:	e0bfff17 	ldw	r2,-4(fp)
   16d68:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16d6c:	e0bfff17 	ldw	r2,-4(fp)
   16d70:	10800104 	addi	r2,r2,4
   16d74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d78:	0005303a 	rdctl	r2,status
   16d7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d80:	e0fffd17 	ldw	r3,-12(fp)
   16d84:	00bfff84 	movi	r2,-2
   16d88:	1884703a 	and	r2,r3,r2
   16d8c:	1001703a 	wrctl	status,r2
  
  return context;
   16d90:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16d94:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   16d98:	00179c40 	call	179c4 <alt_tick>
   16d9c:	e0bffc17 	ldw	r2,-16(fp)
   16da0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16da4:	e0bffe17 	ldw	r2,-8(fp)
   16da8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16dac:	0001883a 	nop
   16db0:	e037883a 	mov	sp,fp
   16db4:	dfc00117 	ldw	ra,4(sp)
   16db8:	df000017 	ldw	fp,0(sp)
   16dbc:	dec00204 	addi	sp,sp,8
   16dc0:	f800283a 	ret

00016dc4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16dc4:	defff804 	addi	sp,sp,-32
   16dc8:	dfc00715 	stw	ra,28(sp)
   16dcc:	df000615 	stw	fp,24(sp)
   16dd0:	df000604 	addi	fp,sp,24
   16dd4:	e13ffc15 	stw	r4,-16(fp)
   16dd8:	e17ffd15 	stw	r5,-12(fp)
   16ddc:	e1bffe15 	stw	r6,-8(fp)
   16de0:	e1ffff15 	stw	r7,-4(fp)
   16de4:	e0bfff17 	ldw	r2,-4(fp)
   16de8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16dec:	d0a90117 	ldw	r2,-23548(gp)
   16df0:	1000021e 	bne	r2,zero,16dfc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   16df4:	e0bffb17 	ldw	r2,-20(fp)
   16df8:	d0a90115 	stw	r2,-23548(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16dfc:	e0bffc17 	ldw	r2,-16(fp)
   16e00:	10800104 	addi	r2,r2,4
   16e04:	00c001c4 	movi	r3,7
   16e08:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   16e0c:	d8000015 	stw	zero,0(sp)
   16e10:	e1fffc17 	ldw	r7,-16(fp)
   16e14:	01800074 	movhi	r6,1
   16e18:	319b5304 	addi	r6,r6,27980
   16e1c:	e17ffe17 	ldw	r5,-8(fp)
   16e20:	e13ffd17 	ldw	r4,-12(fp)
   16e24:	00172a40 	call	172a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   16e28:	0001883a 	nop
   16e2c:	e037883a 	mov	sp,fp
   16e30:	dfc00117 	ldw	ra,4(sp)
   16e34:	df000017 	ldw	fp,0(sp)
   16e38:	dec00204 	addi	sp,sp,8
   16e3c:	f800283a 	ret

00016e40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   16e40:	defff504 	addi	sp,sp,-44
   16e44:	df000a15 	stw	fp,40(sp)
   16e48:	df000a04 	addi	fp,sp,40
   16e4c:	e13ffc15 	stw	r4,-16(fp)
   16e50:	e17ffd15 	stw	r5,-12(fp)
   16e54:	e1bffe15 	stw	r6,-8(fp)
   16e58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   16e5c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16e60:	d0a90117 	ldw	r2,-23548(gp)
  
  if (alt_ticks_per_second ())
   16e64:	10003c26 	beq	r2,zero,16f58 <alt_alarm_start+0x118>
  {
    if (alarm)
   16e68:	e0bffc17 	ldw	r2,-16(fp)
   16e6c:	10003826 	beq	r2,zero,16f50 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   16e70:	e0bffc17 	ldw	r2,-16(fp)
   16e74:	e0fffe17 	ldw	r3,-8(fp)
   16e78:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   16e7c:	e0bffc17 	ldw	r2,-16(fp)
   16e80:	e0ffff17 	ldw	r3,-4(fp)
   16e84:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e88:	0005303a 	rdctl	r2,status
   16e8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e90:	e0fff917 	ldw	r3,-28(fp)
   16e94:	00bfff84 	movi	r2,-2
   16e98:	1884703a 	and	r2,r3,r2
   16e9c:	1001703a 	wrctl	status,r2
  
  return context;
   16ea0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   16ea4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16ea8:	d0a90217 	ldw	r2,-23544(gp)
      
      current_nticks = alt_nticks();
   16eac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   16eb0:	e0fffd17 	ldw	r3,-12(fp)
   16eb4:	e0bff617 	ldw	r2,-40(fp)
   16eb8:	1885883a 	add	r2,r3,r2
   16ebc:	10c00044 	addi	r3,r2,1
   16ec0:	e0bffc17 	ldw	r2,-16(fp)
   16ec4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   16ec8:	e0bffc17 	ldw	r2,-16(fp)
   16ecc:	10c00217 	ldw	r3,8(r2)
   16ed0:	e0bff617 	ldw	r2,-40(fp)
   16ed4:	1880042e 	bgeu	r3,r2,16ee8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   16ed8:	e0bffc17 	ldw	r2,-16(fp)
   16edc:	00c00044 	movi	r3,1
   16ee0:	10c00405 	stb	r3,16(r2)
   16ee4:	00000206 	br	16ef0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   16ee8:	e0bffc17 	ldw	r2,-16(fp)
   16eec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16ef0:	e0bffc17 	ldw	r2,-16(fp)
   16ef4:	d0e01304 	addi	r3,gp,-32692
   16ef8:	e0fffa15 	stw	r3,-24(fp)
   16efc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16f00:	e0bffb17 	ldw	r2,-20(fp)
   16f04:	e0fffa17 	ldw	r3,-24(fp)
   16f08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16f0c:	e0bffa17 	ldw	r2,-24(fp)
   16f10:	10c00017 	ldw	r3,0(r2)
   16f14:	e0bffb17 	ldw	r2,-20(fp)
   16f18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16f1c:	e0bffa17 	ldw	r2,-24(fp)
   16f20:	10800017 	ldw	r2,0(r2)
   16f24:	e0fffb17 	ldw	r3,-20(fp)
   16f28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16f2c:	e0bffa17 	ldw	r2,-24(fp)
   16f30:	e0fffb17 	ldw	r3,-20(fp)
   16f34:	10c00015 	stw	r3,0(r2)
   16f38:	e0bff817 	ldw	r2,-32(fp)
   16f3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f40:	e0bff717 	ldw	r2,-36(fp)
   16f44:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   16f48:	0005883a 	mov	r2,zero
   16f4c:	00000306 	br	16f5c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   16f50:	00bffa84 	movi	r2,-22
   16f54:	00000106 	br	16f5c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   16f58:	00bfde84 	movi	r2,-134
  }
}
   16f5c:	e037883a 	mov	sp,fp
   16f60:	df000017 	ldw	fp,0(sp)
   16f64:	dec00104 	addi	sp,sp,4
   16f68:	f800283a 	ret

00016f6c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   16f6c:	defffa04 	addi	sp,sp,-24
   16f70:	dfc00515 	stw	ra,20(sp)
   16f74:	df000415 	stw	fp,16(sp)
   16f78:	df000404 	addi	fp,sp,16
   16f7c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   16f80:	00800244 	movi	r2,9
   16f84:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   16f88:	014003f4 	movhi	r5,15
   16f8c:	29509004 	addi	r5,r5,16960
   16f90:	e13ffd17 	ldw	r4,-12(fp)
   16f94:	00068e80 	call	68e8 <__mulsi3>
   16f98:	100b883a 	mov	r5,r2
   16f9c:	0100bef4 	movhi	r4,763
   16fa0:	213c2004 	addi	r4,r4,-3968
   16fa4:	000682c0 	call	682c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   16fa8:	100b883a 	mov	r5,r2
   16fac:	01200034 	movhi	r4,32768
   16fb0:	213fffc4 	addi	r4,r4,-1
   16fb4:	000682c0 	call	682c <__udivsi3>
   16fb8:	100b883a 	mov	r5,r2
   16fbc:	e13fff17 	ldw	r4,-4(fp)
   16fc0:	000682c0 	call	682c <__udivsi3>
   16fc4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   16fc8:	e0bffe17 	ldw	r2,-8(fp)
   16fcc:	10002a26 	beq	r2,zero,17078 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   16fd0:	e03ffc15 	stw	zero,-16(fp)
   16fd4:	00001706 	br	17034 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   16fd8:	00a00034 	movhi	r2,32768
   16fdc:	10bfffc4 	addi	r2,r2,-1
   16fe0:	10bfffc4 	addi	r2,r2,-1
   16fe4:	103ffe1e 	bne	r2,zero,16fe0 <__alt_exception_stack_pointer+0xf8016fe0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   16fe8:	014003f4 	movhi	r5,15
   16fec:	29509004 	addi	r5,r5,16960
   16ff0:	e13ffd17 	ldw	r4,-12(fp)
   16ff4:	00068e80 	call	68e8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   16ff8:	100b883a 	mov	r5,r2
   16ffc:	0100bef4 	movhi	r4,763
   17000:	213c2004 	addi	r4,r4,-3968
   17004:	000682c0 	call	682c <__udivsi3>
   17008:	100b883a 	mov	r5,r2
   1700c:	01200034 	movhi	r4,32768
   17010:	213fffc4 	addi	r4,r4,-1
   17014:	000682c0 	call	682c <__udivsi3>
   17018:	1007883a 	mov	r3,r2
   1701c:	e0bfff17 	ldw	r2,-4(fp)
   17020:	10c5c83a 	sub	r2,r2,r3
   17024:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   17028:	e0bffc17 	ldw	r2,-16(fp)
   1702c:	10800044 	addi	r2,r2,1
   17030:	e0bffc15 	stw	r2,-16(fp)
   17034:	e0fffc17 	ldw	r3,-16(fp)
   17038:	e0bffe17 	ldw	r2,-8(fp)
   1703c:	18bfe616 	blt	r3,r2,16fd8 <__alt_exception_stack_pointer+0xf8016fd8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   17040:	014003f4 	movhi	r5,15
   17044:	29509004 	addi	r5,r5,16960
   17048:	e13ffd17 	ldw	r4,-12(fp)
   1704c:	00068e80 	call	68e8 <__mulsi3>
   17050:	100b883a 	mov	r5,r2
   17054:	0100bef4 	movhi	r4,763
   17058:	213c2004 	addi	r4,r4,-3968
   1705c:	000682c0 	call	682c <__udivsi3>
   17060:	e17fff17 	ldw	r5,-4(fp)
   17064:	1009883a 	mov	r4,r2
   17068:	00068e80 	call	68e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1706c:	10bfffc4 	addi	r2,r2,-1
   17070:	103ffe1e 	bne	r2,zero,1706c <__alt_exception_stack_pointer+0xf801706c>
   17074:	00000d06 	br	170ac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   17078:	014003f4 	movhi	r5,15
   1707c:	29509004 	addi	r5,r5,16960
   17080:	e13ffd17 	ldw	r4,-12(fp)
   17084:	00068e80 	call	68e8 <__mulsi3>
   17088:	100b883a 	mov	r5,r2
   1708c:	0100bef4 	movhi	r4,763
   17090:	213c2004 	addi	r4,r4,-3968
   17094:	000682c0 	call	682c <__udivsi3>
   17098:	e17fff17 	ldw	r5,-4(fp)
   1709c:	1009883a 	mov	r4,r2
   170a0:	00068e80 	call	68e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   170a4:	10bfffc4 	addi	r2,r2,-1
   170a8:	00bffe16 	blt	zero,r2,170a4 <__alt_exception_stack_pointer+0xf80170a4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   170ac:	0005883a 	mov	r2,zero
}
   170b0:	e037883a 	mov	sp,fp
   170b4:	dfc00117 	ldw	ra,4(sp)
   170b8:	df000017 	ldw	fp,0(sp)
   170bc:	dec00204 	addi	sp,sp,8
   170c0:	f800283a 	ret

000170c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   170c4:	deffff04 	addi	sp,sp,-4
   170c8:	df000015 	stw	fp,0(sp)
   170cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   170d0:	0001883a 	nop
   170d4:	e037883a 	mov	sp,fp
   170d8:	df000017 	ldw	fp,0(sp)
   170dc:	dec00104 	addi	sp,sp,4
   170e0:	f800283a 	ret

000170e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   170e4:	defffe04 	addi	sp,sp,-8
   170e8:	dfc00115 	stw	ra,4(sp)
   170ec:	df000015 	stw	fp,0(sp)
   170f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   170f4:	d0a01117 	ldw	r2,-32700(gp)
   170f8:	10000326 	beq	r2,zero,17108 <alt_get_errno+0x24>
   170fc:	d0a01117 	ldw	r2,-32700(gp)
   17100:	103ee83a 	callr	r2
   17104:	00000106 	br	1710c <alt_get_errno+0x28>
   17108:	d0a8f904 	addi	r2,gp,-23580
}
   1710c:	e037883a 	mov	sp,fp
   17110:	dfc00117 	ldw	ra,4(sp)
   17114:	df000017 	ldw	fp,0(sp)
   17118:	dec00204 	addi	sp,sp,8
   1711c:	f800283a 	ret

00017120 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   17120:	defffa04 	addi	sp,sp,-24
   17124:	dfc00515 	stw	ra,20(sp)
   17128:	df000415 	stw	fp,16(sp)
   1712c:	df000404 	addi	fp,sp,16
   17130:	e13ffe15 	stw	r4,-8(fp)
   17134:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   17138:	e0bffe17 	ldw	r2,-8(fp)
   1713c:	10000326 	beq	r2,zero,1714c <alt_dev_llist_insert+0x2c>
   17140:	e0bffe17 	ldw	r2,-8(fp)
   17144:	10800217 	ldw	r2,8(r2)
   17148:	1000061e 	bne	r2,zero,17164 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1714c:	00170e40 	call	170e4 <alt_get_errno>
   17150:	1007883a 	mov	r3,r2
   17154:	00800584 	movi	r2,22
   17158:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1715c:	00bffa84 	movi	r2,-22
   17160:	00001306 	br	171b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   17164:	e0bffe17 	ldw	r2,-8(fp)
   17168:	e0ffff17 	ldw	r3,-4(fp)
   1716c:	e0fffc15 	stw	r3,-16(fp)
   17170:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   17174:	e0bffd17 	ldw	r2,-12(fp)
   17178:	e0fffc17 	ldw	r3,-16(fp)
   1717c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   17180:	e0bffc17 	ldw	r2,-16(fp)
   17184:	10c00017 	ldw	r3,0(r2)
   17188:	e0bffd17 	ldw	r2,-12(fp)
   1718c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   17190:	e0bffc17 	ldw	r2,-16(fp)
   17194:	10800017 	ldw	r2,0(r2)
   17198:	e0fffd17 	ldw	r3,-12(fp)
   1719c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   171a0:	e0bffc17 	ldw	r2,-16(fp)
   171a4:	e0fffd17 	ldw	r3,-12(fp)
   171a8:	10c00015 	stw	r3,0(r2)

  return 0;  
   171ac:	0005883a 	mov	r2,zero
}
   171b0:	e037883a 	mov	sp,fp
   171b4:	dfc00117 	ldw	ra,4(sp)
   171b8:	df000017 	ldw	fp,0(sp)
   171bc:	dec00204 	addi	sp,sp,8
   171c0:	f800283a 	ret

000171c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   171c4:	defffd04 	addi	sp,sp,-12
   171c8:	dfc00215 	stw	ra,8(sp)
   171cc:	df000115 	stw	fp,4(sp)
   171d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   171d4:	008000b4 	movhi	r2,2
   171d8:	10a03a04 	addi	r2,r2,-32536
   171dc:	e0bfff15 	stw	r2,-4(fp)
   171e0:	00000606 	br	171fc <_do_ctors+0x38>
        (*ctor) (); 
   171e4:	e0bfff17 	ldw	r2,-4(fp)
   171e8:	10800017 	ldw	r2,0(r2)
   171ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   171f0:	e0bfff17 	ldw	r2,-4(fp)
   171f4:	10bfff04 	addi	r2,r2,-4
   171f8:	e0bfff15 	stw	r2,-4(fp)
   171fc:	e0ffff17 	ldw	r3,-4(fp)
   17200:	008000b4 	movhi	r2,2
   17204:	10a03b04 	addi	r2,r2,-32532
   17208:	18bff62e 	bgeu	r3,r2,171e4 <__alt_exception_stack_pointer+0xf80171e4>
        (*ctor) (); 
}
   1720c:	0001883a 	nop
   17210:	e037883a 	mov	sp,fp
   17214:	dfc00117 	ldw	ra,4(sp)
   17218:	df000017 	ldw	fp,0(sp)
   1721c:	dec00204 	addi	sp,sp,8
   17220:	f800283a 	ret

00017224 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   17224:	defffd04 	addi	sp,sp,-12
   17228:	dfc00215 	stw	ra,8(sp)
   1722c:	df000115 	stw	fp,4(sp)
   17230:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17234:	008000b4 	movhi	r2,2
   17238:	10a03a04 	addi	r2,r2,-32536
   1723c:	e0bfff15 	stw	r2,-4(fp)
   17240:	00000606 	br	1725c <_do_dtors+0x38>
        (*dtor) (); 
   17244:	e0bfff17 	ldw	r2,-4(fp)
   17248:	10800017 	ldw	r2,0(r2)
   1724c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17250:	e0bfff17 	ldw	r2,-4(fp)
   17254:	10bfff04 	addi	r2,r2,-4
   17258:	e0bfff15 	stw	r2,-4(fp)
   1725c:	e0ffff17 	ldw	r3,-4(fp)
   17260:	008000b4 	movhi	r2,2
   17264:	10a03b04 	addi	r2,r2,-32532
   17268:	18bff62e 	bgeu	r3,r2,17244 <__alt_exception_stack_pointer+0xf8017244>
        (*dtor) (); 
}
   1726c:	0001883a 	nop
   17270:	e037883a 	mov	sp,fp
   17274:	dfc00117 	ldw	ra,4(sp)
   17278:	df000017 	ldw	fp,0(sp)
   1727c:	dec00204 	addi	sp,sp,8
   17280:	f800283a 	ret

00017284 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   17284:	deffff04 	addi	sp,sp,-4
   17288:	df000015 	stw	fp,0(sp)
   1728c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   17290:	0001883a 	nop
   17294:	e037883a 	mov	sp,fp
   17298:	df000017 	ldw	fp,0(sp)
   1729c:	dec00104 	addi	sp,sp,4
   172a0:	f800283a 	ret

000172a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   172a4:	defff904 	addi	sp,sp,-28
   172a8:	dfc00615 	stw	ra,24(sp)
   172ac:	df000515 	stw	fp,20(sp)
   172b0:	df000504 	addi	fp,sp,20
   172b4:	e13ffc15 	stw	r4,-16(fp)
   172b8:	e17ffd15 	stw	r5,-12(fp)
   172bc:	e1bffe15 	stw	r6,-8(fp)
   172c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   172c4:	e0800217 	ldw	r2,8(fp)
   172c8:	d8800015 	stw	r2,0(sp)
   172cc:	e1ffff17 	ldw	r7,-4(fp)
   172d0:	e1bffe17 	ldw	r6,-8(fp)
   172d4:	e17ffd17 	ldw	r5,-12(fp)
   172d8:	e13ffc17 	ldw	r4,-16(fp)
   172dc:	00174540 	call	17454 <alt_iic_isr_register>
}  
   172e0:	e037883a 	mov	sp,fp
   172e4:	dfc00117 	ldw	ra,4(sp)
   172e8:	df000017 	ldw	fp,0(sp)
   172ec:	dec00204 	addi	sp,sp,8
   172f0:	f800283a 	ret

000172f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   172f4:	defff904 	addi	sp,sp,-28
   172f8:	df000615 	stw	fp,24(sp)
   172fc:	df000604 	addi	fp,sp,24
   17300:	e13ffe15 	stw	r4,-8(fp)
   17304:	e17fff15 	stw	r5,-4(fp)
   17308:	e0bfff17 	ldw	r2,-4(fp)
   1730c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17310:	0005303a 	rdctl	r2,status
   17314:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17318:	e0fffb17 	ldw	r3,-20(fp)
   1731c:	00bfff84 	movi	r2,-2
   17320:	1884703a 	and	r2,r3,r2
   17324:	1001703a 	wrctl	status,r2
  
  return context;
   17328:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1732c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   17330:	00c00044 	movi	r3,1
   17334:	e0bffa17 	ldw	r2,-24(fp)
   17338:	1884983a 	sll	r2,r3,r2
   1733c:	1007883a 	mov	r3,r2
   17340:	d0a90017 	ldw	r2,-23552(gp)
   17344:	1884b03a 	or	r2,r3,r2
   17348:	d0a90015 	stw	r2,-23552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1734c:	d0a90017 	ldw	r2,-23552(gp)
   17350:	100170fa 	wrctl	ienable,r2
   17354:	e0bffc17 	ldw	r2,-16(fp)
   17358:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1735c:	e0bffd17 	ldw	r2,-12(fp)
   17360:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   17364:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   17368:	0001883a 	nop
}
   1736c:	e037883a 	mov	sp,fp
   17370:	df000017 	ldw	fp,0(sp)
   17374:	dec00104 	addi	sp,sp,4
   17378:	f800283a 	ret

0001737c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1737c:	defff904 	addi	sp,sp,-28
   17380:	df000615 	stw	fp,24(sp)
   17384:	df000604 	addi	fp,sp,24
   17388:	e13ffe15 	stw	r4,-8(fp)
   1738c:	e17fff15 	stw	r5,-4(fp)
   17390:	e0bfff17 	ldw	r2,-4(fp)
   17394:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17398:	0005303a 	rdctl	r2,status
   1739c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   173a0:	e0fffb17 	ldw	r3,-20(fp)
   173a4:	00bfff84 	movi	r2,-2
   173a8:	1884703a 	and	r2,r3,r2
   173ac:	1001703a 	wrctl	status,r2
  
  return context;
   173b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   173b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   173b8:	00c00044 	movi	r3,1
   173bc:	e0bffa17 	ldw	r2,-24(fp)
   173c0:	1884983a 	sll	r2,r3,r2
   173c4:	0084303a 	nor	r2,zero,r2
   173c8:	1007883a 	mov	r3,r2
   173cc:	d0a90017 	ldw	r2,-23552(gp)
   173d0:	1884703a 	and	r2,r3,r2
   173d4:	d0a90015 	stw	r2,-23552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   173d8:	d0a90017 	ldw	r2,-23552(gp)
   173dc:	100170fa 	wrctl	ienable,r2
   173e0:	e0bffc17 	ldw	r2,-16(fp)
   173e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173e8:	e0bffd17 	ldw	r2,-12(fp)
   173ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   173f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   173f4:	0001883a 	nop
}
   173f8:	e037883a 	mov	sp,fp
   173fc:	df000017 	ldw	fp,0(sp)
   17400:	dec00104 	addi	sp,sp,4
   17404:	f800283a 	ret

00017408 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   17408:	defffc04 	addi	sp,sp,-16
   1740c:	df000315 	stw	fp,12(sp)
   17410:	df000304 	addi	fp,sp,12
   17414:	e13ffe15 	stw	r4,-8(fp)
   17418:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1741c:	000530fa 	rdctl	r2,ienable
   17420:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   17424:	00c00044 	movi	r3,1
   17428:	e0bfff17 	ldw	r2,-4(fp)
   1742c:	1884983a 	sll	r2,r3,r2
   17430:	1007883a 	mov	r3,r2
   17434:	e0bffd17 	ldw	r2,-12(fp)
   17438:	1884703a 	and	r2,r3,r2
   1743c:	1004c03a 	cmpne	r2,r2,zero
   17440:	10803fcc 	andi	r2,r2,255
}
   17444:	e037883a 	mov	sp,fp
   17448:	df000017 	ldw	fp,0(sp)
   1744c:	dec00104 	addi	sp,sp,4
   17450:	f800283a 	ret

00017454 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   17454:	defff504 	addi	sp,sp,-44
   17458:	dfc00a15 	stw	ra,40(sp)
   1745c:	df000915 	stw	fp,36(sp)
   17460:	df000904 	addi	fp,sp,36
   17464:	e13ffc15 	stw	r4,-16(fp)
   17468:	e17ffd15 	stw	r5,-12(fp)
   1746c:	e1bffe15 	stw	r6,-8(fp)
   17470:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   17474:	00bffa84 	movi	r2,-22
   17478:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1747c:	e0bffd17 	ldw	r2,-12(fp)
   17480:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   17484:	e0bff817 	ldw	r2,-32(fp)
   17488:	10800808 	cmpgei	r2,r2,32
   1748c:	1000271e 	bne	r2,zero,1752c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17490:	0005303a 	rdctl	r2,status
   17494:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17498:	e0fffb17 	ldw	r3,-20(fp)
   1749c:	00bfff84 	movi	r2,-2
   174a0:	1884703a 	and	r2,r3,r2
   174a4:	1001703a 	wrctl	status,r2
  
  return context;
   174a8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   174ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   174b0:	008000b4 	movhi	r2,2
   174b4:	10b58b04 	addi	r2,r2,-10708
   174b8:	e0fff817 	ldw	r3,-32(fp)
   174bc:	180690fa 	slli	r3,r3,3
   174c0:	10c5883a 	add	r2,r2,r3
   174c4:	e0fffe17 	ldw	r3,-8(fp)
   174c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   174cc:	008000b4 	movhi	r2,2
   174d0:	10b58b04 	addi	r2,r2,-10708
   174d4:	e0fff817 	ldw	r3,-32(fp)
   174d8:	180690fa 	slli	r3,r3,3
   174dc:	10c5883a 	add	r2,r2,r3
   174e0:	10800104 	addi	r2,r2,4
   174e4:	e0ffff17 	ldw	r3,-4(fp)
   174e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   174ec:	e0bffe17 	ldw	r2,-8(fp)
   174f0:	10000526 	beq	r2,zero,17508 <alt_iic_isr_register+0xb4>
   174f4:	e0bff817 	ldw	r2,-32(fp)
   174f8:	100b883a 	mov	r5,r2
   174fc:	e13ffc17 	ldw	r4,-16(fp)
   17500:	00172f40 	call	172f4 <alt_ic_irq_enable>
   17504:	00000406 	br	17518 <alt_iic_isr_register+0xc4>
   17508:	e0bff817 	ldw	r2,-32(fp)
   1750c:	100b883a 	mov	r5,r2
   17510:	e13ffc17 	ldw	r4,-16(fp)
   17514:	001737c0 	call	1737c <alt_ic_irq_disable>
   17518:	e0bff715 	stw	r2,-36(fp)
   1751c:	e0bffa17 	ldw	r2,-24(fp)
   17520:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17524:	e0bff917 	ldw	r2,-28(fp)
   17528:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1752c:	e0bff717 	ldw	r2,-36(fp)
}
   17530:	e037883a 	mov	sp,fp
   17534:	dfc00117 	ldw	ra,4(sp)
   17538:	df000017 	ldw	fp,0(sp)
   1753c:	dec00204 	addi	sp,sp,8
   17540:	f800283a 	ret

00017544 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   17544:	defff804 	addi	sp,sp,-32
   17548:	dfc00715 	stw	ra,28(sp)
   1754c:	df000615 	stw	fp,24(sp)
   17550:	dc000515 	stw	r16,20(sp)
   17554:	df000604 	addi	fp,sp,24
   17558:	e13ffb15 	stw	r4,-20(fp)
   1755c:	e17ffc15 	stw	r5,-16(fp)
   17560:	e1bffd15 	stw	r6,-12(fp)
   17564:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   17568:	e1bffe17 	ldw	r6,-8(fp)
   1756c:	e17ffd17 	ldw	r5,-12(fp)
   17570:	e13ffc17 	ldw	r4,-16(fp)
   17574:	00177cc0 	call	177cc <open>
   17578:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1757c:	e0bffa17 	ldw	r2,-24(fp)
   17580:	10002216 	blt	r2,zero,1760c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   17584:	040000b4 	movhi	r16,2
   17588:	8427a804 	addi	r16,r16,-24928
   1758c:	e0bffa17 	ldw	r2,-24(fp)
   17590:	01400304 	movi	r5,12
   17594:	1009883a 	mov	r4,r2
   17598:	00068e80 	call	68e8 <__mulsi3>
   1759c:	8085883a 	add	r2,r16,r2
   175a0:	10c00017 	ldw	r3,0(r2)
   175a4:	e0bffb17 	ldw	r2,-20(fp)
   175a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   175ac:	040000b4 	movhi	r16,2
   175b0:	8427a804 	addi	r16,r16,-24928
   175b4:	e0bffa17 	ldw	r2,-24(fp)
   175b8:	01400304 	movi	r5,12
   175bc:	1009883a 	mov	r4,r2
   175c0:	00068e80 	call	68e8 <__mulsi3>
   175c4:	8085883a 	add	r2,r16,r2
   175c8:	10800104 	addi	r2,r2,4
   175cc:	10c00017 	ldw	r3,0(r2)
   175d0:	e0bffb17 	ldw	r2,-20(fp)
   175d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   175d8:	040000b4 	movhi	r16,2
   175dc:	8427a804 	addi	r16,r16,-24928
   175e0:	e0bffa17 	ldw	r2,-24(fp)
   175e4:	01400304 	movi	r5,12
   175e8:	1009883a 	mov	r4,r2
   175ec:	00068e80 	call	68e8 <__mulsi3>
   175f0:	8085883a 	add	r2,r16,r2
   175f4:	10800204 	addi	r2,r2,8
   175f8:	10c00017 	ldw	r3,0(r2)
   175fc:	e0bffb17 	ldw	r2,-20(fp)
   17600:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   17604:	e13ffa17 	ldw	r4,-24(fp)
   17608:	001501c0 	call	1501c <alt_release_fd>
  }
} 
   1760c:	0001883a 	nop
   17610:	e6ffff04 	addi	sp,fp,-4
   17614:	dfc00217 	ldw	ra,8(sp)
   17618:	df000117 	ldw	fp,4(sp)
   1761c:	dc000017 	ldw	r16,0(sp)
   17620:	dec00304 	addi	sp,sp,12
   17624:	f800283a 	ret

00017628 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   17628:	defffb04 	addi	sp,sp,-20
   1762c:	dfc00415 	stw	ra,16(sp)
   17630:	df000315 	stw	fp,12(sp)
   17634:	df000304 	addi	fp,sp,12
   17638:	e13ffd15 	stw	r4,-12(fp)
   1763c:	e17ffe15 	stw	r5,-8(fp)
   17640:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   17644:	01c07fc4 	movi	r7,511
   17648:	01800044 	movi	r6,1
   1764c:	e17ffd17 	ldw	r5,-12(fp)
   17650:	010000b4 	movhi	r4,2
   17654:	2127ab04 	addi	r4,r4,-24916
   17658:	00175440 	call	17544 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1765c:	01c07fc4 	movi	r7,511
   17660:	000d883a 	mov	r6,zero
   17664:	e17ffe17 	ldw	r5,-8(fp)
   17668:	010000b4 	movhi	r4,2
   1766c:	2127a804 	addi	r4,r4,-24928
   17670:	00175440 	call	17544 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   17674:	01c07fc4 	movi	r7,511
   17678:	01800044 	movi	r6,1
   1767c:	e17fff17 	ldw	r5,-4(fp)
   17680:	010000b4 	movhi	r4,2
   17684:	2127ae04 	addi	r4,r4,-24904
   17688:	00175440 	call	17544 <alt_open_fd>
}  
   1768c:	0001883a 	nop
   17690:	e037883a 	mov	sp,fp
   17694:	dfc00117 	ldw	ra,4(sp)
   17698:	df000017 	ldw	fp,0(sp)
   1769c:	dec00204 	addi	sp,sp,8
   176a0:	f800283a 	ret

000176a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   176a4:	defffe04 	addi	sp,sp,-8
   176a8:	dfc00115 	stw	ra,4(sp)
   176ac:	df000015 	stw	fp,0(sp)
   176b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   176b4:	d0a01117 	ldw	r2,-32700(gp)
   176b8:	10000326 	beq	r2,zero,176c8 <alt_get_errno+0x24>
   176bc:	d0a01117 	ldw	r2,-32700(gp)
   176c0:	103ee83a 	callr	r2
   176c4:	00000106 	br	176cc <alt_get_errno+0x28>
   176c8:	d0a8f904 	addi	r2,gp,-23580
}
   176cc:	e037883a 	mov	sp,fp
   176d0:	dfc00117 	ldw	ra,4(sp)
   176d4:	df000017 	ldw	fp,0(sp)
   176d8:	dec00204 	addi	sp,sp,8
   176dc:	f800283a 	ret

000176e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   176e0:	defffb04 	addi	sp,sp,-20
   176e4:	dfc00415 	stw	ra,16(sp)
   176e8:	df000315 	stw	fp,12(sp)
   176ec:	dc000215 	stw	r16,8(sp)
   176f0:	df000304 	addi	fp,sp,12
   176f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   176f8:	e0bffe17 	ldw	r2,-8(fp)
   176fc:	10800217 	ldw	r2,8(r2)
   17700:	10d00034 	orhi	r3,r2,16384
   17704:	e0bffe17 	ldw	r2,-8(fp)
   17708:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1770c:	e03ffd15 	stw	zero,-12(fp)
   17710:	00002306 	br	177a0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17714:	040000b4 	movhi	r16,2
   17718:	8427a804 	addi	r16,r16,-24928
   1771c:	e0bffd17 	ldw	r2,-12(fp)
   17720:	01400304 	movi	r5,12
   17724:	1009883a 	mov	r4,r2
   17728:	00068e80 	call	68e8 <__mulsi3>
   1772c:	8085883a 	add	r2,r16,r2
   17730:	10c00017 	ldw	r3,0(r2)
   17734:	e0bffe17 	ldw	r2,-8(fp)
   17738:	10800017 	ldw	r2,0(r2)
   1773c:	1880151e 	bne	r3,r2,17794 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17740:	040000b4 	movhi	r16,2
   17744:	8427a804 	addi	r16,r16,-24928
   17748:	e0bffd17 	ldw	r2,-12(fp)
   1774c:	01400304 	movi	r5,12
   17750:	1009883a 	mov	r4,r2
   17754:	00068e80 	call	68e8 <__mulsi3>
   17758:	8085883a 	add	r2,r16,r2
   1775c:	10800204 	addi	r2,r2,8
   17760:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17764:	10000b0e 	bge	r2,zero,17794 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   17768:	01400304 	movi	r5,12
   1776c:	e13ffd17 	ldw	r4,-12(fp)
   17770:	00068e80 	call	68e8 <__mulsi3>
   17774:	1007883a 	mov	r3,r2
   17778:	008000b4 	movhi	r2,2
   1777c:	10a7a804 	addi	r2,r2,-24928
   17780:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17784:	e0bffe17 	ldw	r2,-8(fp)
   17788:	18800226 	beq	r3,r2,17794 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1778c:	00bffcc4 	movi	r2,-13
   17790:	00000806 	br	177b4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17794:	e0bffd17 	ldw	r2,-12(fp)
   17798:	10800044 	addi	r2,r2,1
   1779c:	e0bffd15 	stw	r2,-12(fp)
   177a0:	d0a00c17 	ldw	r2,-32720(gp)
   177a4:	1007883a 	mov	r3,r2
   177a8:	e0bffd17 	ldw	r2,-12(fp)
   177ac:	18bfd92e 	bgeu	r3,r2,17714 <__alt_exception_stack_pointer+0xf8017714>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   177b0:	0005883a 	mov	r2,zero
}
   177b4:	e6ffff04 	addi	sp,fp,-4
   177b8:	dfc00217 	ldw	ra,8(sp)
   177bc:	df000117 	ldw	fp,4(sp)
   177c0:	dc000017 	ldw	r16,0(sp)
   177c4:	dec00304 	addi	sp,sp,12
   177c8:	f800283a 	ret

000177cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   177cc:	defff604 	addi	sp,sp,-40
   177d0:	dfc00915 	stw	ra,36(sp)
   177d4:	df000815 	stw	fp,32(sp)
   177d8:	df000804 	addi	fp,sp,32
   177dc:	e13ffd15 	stw	r4,-12(fp)
   177e0:	e17ffe15 	stw	r5,-8(fp)
   177e4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   177e8:	00bfffc4 	movi	r2,-1
   177ec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   177f0:	00bffb44 	movi	r2,-19
   177f4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   177f8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   177fc:	d1600a04 	addi	r5,gp,-32728
   17800:	e13ffd17 	ldw	r4,-12(fp)
   17804:	00149a80 	call	149a8 <alt_find_dev>
   17808:	e0bff815 	stw	r2,-32(fp)
   1780c:	e0bff817 	ldw	r2,-32(fp)
   17810:	1000051e 	bne	r2,zero,17828 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   17814:	e13ffd17 	ldw	r4,-12(fp)
   17818:	0017af00 	call	17af0 <alt_find_file>
   1781c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   17820:	00800044 	movi	r2,1
   17824:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   17828:	e0bff817 	ldw	r2,-32(fp)
   1782c:	10002b26 	beq	r2,zero,178dc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   17830:	e13ff817 	ldw	r4,-32(fp)
   17834:	0017bf80 	call	17bf8 <alt_get_fd>
   17838:	e0bff915 	stw	r2,-28(fp)
   1783c:	e0bff917 	ldw	r2,-28(fp)
   17840:	1000030e 	bge	r2,zero,17850 <open+0x84>
    {
      status = index;
   17844:	e0bff917 	ldw	r2,-28(fp)
   17848:	e0bffa15 	stw	r2,-24(fp)
   1784c:	00002506 	br	178e4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   17850:	01400304 	movi	r5,12
   17854:	e13ff917 	ldw	r4,-28(fp)
   17858:	00068e80 	call	68e8 <__mulsi3>
   1785c:	1007883a 	mov	r3,r2
   17860:	008000b4 	movhi	r2,2
   17864:	10a7a804 	addi	r2,r2,-24928
   17868:	1885883a 	add	r2,r3,r2
   1786c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   17870:	e0fffe17 	ldw	r3,-8(fp)
   17874:	00900034 	movhi	r2,16384
   17878:	10bfffc4 	addi	r2,r2,-1
   1787c:	1886703a 	and	r3,r3,r2
   17880:	e0bffc17 	ldw	r2,-16(fp)
   17884:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   17888:	e0bffb17 	ldw	r2,-20(fp)
   1788c:	1000051e 	bne	r2,zero,178a4 <open+0xd8>
   17890:	e13ffc17 	ldw	r4,-16(fp)
   17894:	00176e00 	call	176e0 <alt_file_locked>
   17898:	e0bffa15 	stw	r2,-24(fp)
   1789c:	e0bffa17 	ldw	r2,-24(fp)
   178a0:	10001016 	blt	r2,zero,178e4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   178a4:	e0bff817 	ldw	r2,-32(fp)
   178a8:	10800317 	ldw	r2,12(r2)
   178ac:	10000826 	beq	r2,zero,178d0 <open+0x104>
   178b0:	e0bff817 	ldw	r2,-32(fp)
   178b4:	10800317 	ldw	r2,12(r2)
   178b8:	e1ffff17 	ldw	r7,-4(fp)
   178bc:	e1bffe17 	ldw	r6,-8(fp)
   178c0:	e17ffd17 	ldw	r5,-12(fp)
   178c4:	e13ffc17 	ldw	r4,-16(fp)
   178c8:	103ee83a 	callr	r2
   178cc:	00000106 	br	178d4 <open+0x108>
   178d0:	0005883a 	mov	r2,zero
   178d4:	e0bffa15 	stw	r2,-24(fp)
   178d8:	00000206 	br	178e4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   178dc:	00bffb44 	movi	r2,-19
   178e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   178e4:	e0bffa17 	ldw	r2,-24(fp)
   178e8:	1000090e 	bge	r2,zero,17910 <open+0x144>
  {
    alt_release_fd (index);  
   178ec:	e13ff917 	ldw	r4,-28(fp)
   178f0:	001501c0 	call	1501c <alt_release_fd>
    ALT_ERRNO = -status;
   178f4:	00176a40 	call	176a4 <alt_get_errno>
   178f8:	1007883a 	mov	r3,r2
   178fc:	e0bffa17 	ldw	r2,-24(fp)
   17900:	0085c83a 	sub	r2,zero,r2
   17904:	18800015 	stw	r2,0(r3)
    return -1;
   17908:	00bfffc4 	movi	r2,-1
   1790c:	00000106 	br	17914 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   17910:	e0bff917 	ldw	r2,-28(fp)
}
   17914:	e037883a 	mov	sp,fp
   17918:	dfc00117 	ldw	ra,4(sp)
   1791c:	df000017 	ldw	fp,0(sp)
   17920:	dec00204 	addi	sp,sp,8
   17924:	f800283a 	ret

00017928 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   17928:	defffa04 	addi	sp,sp,-24
   1792c:	df000515 	stw	fp,20(sp)
   17930:	df000504 	addi	fp,sp,20
   17934:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17938:	0005303a 	rdctl	r2,status
   1793c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17940:	e0fffc17 	ldw	r3,-16(fp)
   17944:	00bfff84 	movi	r2,-2
   17948:	1884703a 	and	r2,r3,r2
   1794c:	1001703a 	wrctl	status,r2
  
  return context;
   17950:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   17954:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   17958:	e0bfff17 	ldw	r2,-4(fp)
   1795c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   17960:	e0bffd17 	ldw	r2,-12(fp)
   17964:	10800017 	ldw	r2,0(r2)
   17968:	e0fffd17 	ldw	r3,-12(fp)
   1796c:	18c00117 	ldw	r3,4(r3)
   17970:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   17974:	e0bffd17 	ldw	r2,-12(fp)
   17978:	10800117 	ldw	r2,4(r2)
   1797c:	e0fffd17 	ldw	r3,-12(fp)
   17980:	18c00017 	ldw	r3,0(r3)
   17984:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   17988:	e0bffd17 	ldw	r2,-12(fp)
   1798c:	e0fffd17 	ldw	r3,-12(fp)
   17990:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   17994:	e0bffd17 	ldw	r2,-12(fp)
   17998:	e0fffd17 	ldw	r3,-12(fp)
   1799c:	10c00015 	stw	r3,0(r2)
   179a0:	e0bffb17 	ldw	r2,-20(fp)
   179a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   179a8:	e0bffe17 	ldw	r2,-8(fp)
   179ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   179b0:	0001883a 	nop
   179b4:	e037883a 	mov	sp,fp
   179b8:	df000017 	ldw	fp,0(sp)
   179bc:	dec00104 	addi	sp,sp,4
   179c0:	f800283a 	ret

000179c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   179c4:	defffb04 	addi	sp,sp,-20
   179c8:	dfc00415 	stw	ra,16(sp)
   179cc:	df000315 	stw	fp,12(sp)
   179d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   179d4:	d0a01317 	ldw	r2,-32692(gp)
   179d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   179dc:	d0a90217 	ldw	r2,-23544(gp)
   179e0:	10800044 	addi	r2,r2,1
   179e4:	d0a90215 	stw	r2,-23544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   179e8:	00002e06 	br	17aa4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   179ec:	e0bffd17 	ldw	r2,-12(fp)
   179f0:	10800017 	ldw	r2,0(r2)
   179f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   179f8:	e0bffd17 	ldw	r2,-12(fp)
   179fc:	10800403 	ldbu	r2,16(r2)
   17a00:	10803fcc 	andi	r2,r2,255
   17a04:	10000426 	beq	r2,zero,17a18 <alt_tick+0x54>
   17a08:	d0a90217 	ldw	r2,-23544(gp)
   17a0c:	1000021e 	bne	r2,zero,17a18 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   17a10:	e0bffd17 	ldw	r2,-12(fp)
   17a14:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   17a18:	e0bffd17 	ldw	r2,-12(fp)
   17a1c:	10800217 	ldw	r2,8(r2)
   17a20:	d0e90217 	ldw	r3,-23544(gp)
   17a24:	18801d36 	bltu	r3,r2,17a9c <alt_tick+0xd8>
   17a28:	e0bffd17 	ldw	r2,-12(fp)
   17a2c:	10800403 	ldbu	r2,16(r2)
   17a30:	10803fcc 	andi	r2,r2,255
   17a34:	1000191e 	bne	r2,zero,17a9c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   17a38:	e0bffd17 	ldw	r2,-12(fp)
   17a3c:	10800317 	ldw	r2,12(r2)
   17a40:	e0fffd17 	ldw	r3,-12(fp)
   17a44:	18c00517 	ldw	r3,20(r3)
   17a48:	1809883a 	mov	r4,r3
   17a4c:	103ee83a 	callr	r2
   17a50:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   17a54:	e0bfff17 	ldw	r2,-4(fp)
   17a58:	1000031e 	bne	r2,zero,17a68 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   17a5c:	e13ffd17 	ldw	r4,-12(fp)
   17a60:	00179280 	call	17928 <alt_alarm_stop>
   17a64:	00000d06 	br	17a9c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   17a68:	e0bffd17 	ldw	r2,-12(fp)
   17a6c:	10c00217 	ldw	r3,8(r2)
   17a70:	e0bfff17 	ldw	r2,-4(fp)
   17a74:	1887883a 	add	r3,r3,r2
   17a78:	e0bffd17 	ldw	r2,-12(fp)
   17a7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   17a80:	e0bffd17 	ldw	r2,-12(fp)
   17a84:	10c00217 	ldw	r3,8(r2)
   17a88:	d0a90217 	ldw	r2,-23544(gp)
   17a8c:	1880032e 	bgeu	r3,r2,17a9c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   17a90:	e0bffd17 	ldw	r2,-12(fp)
   17a94:	00c00044 	movi	r3,1
   17a98:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   17a9c:	e0bffe17 	ldw	r2,-8(fp)
   17aa0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17aa4:	e0fffd17 	ldw	r3,-12(fp)
   17aa8:	d0a01304 	addi	r2,gp,-32692
   17aac:	18bfcf1e 	bne	r3,r2,179ec <__alt_exception_stack_pointer+0xf80179ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   17ab0:	0001883a 	nop
}
   17ab4:	0001883a 	nop
   17ab8:	e037883a 	mov	sp,fp
   17abc:	dfc00117 	ldw	ra,4(sp)
   17ac0:	df000017 	ldw	fp,0(sp)
   17ac4:	dec00204 	addi	sp,sp,8
   17ac8:	f800283a 	ret

00017acc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   17acc:	deffff04 	addi	sp,sp,-4
   17ad0:	df000015 	stw	fp,0(sp)
   17ad4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17ad8:	000170fa 	wrctl	ienable,zero
}
   17adc:	0001883a 	nop
   17ae0:	e037883a 	mov	sp,fp
   17ae4:	df000017 	ldw	fp,0(sp)
   17ae8:	dec00104 	addi	sp,sp,4
   17aec:	f800283a 	ret

00017af0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17af0:	defffb04 	addi	sp,sp,-20
   17af4:	dfc00415 	stw	ra,16(sp)
   17af8:	df000315 	stw	fp,12(sp)
   17afc:	df000304 	addi	fp,sp,12
   17b00:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17b04:	d0a00817 	ldw	r2,-32736(gp)
   17b08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17b0c:	00003106 	br	17bd4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   17b10:	e0bffd17 	ldw	r2,-12(fp)
   17b14:	10800217 	ldw	r2,8(r2)
   17b18:	1009883a 	mov	r4,r2
   17b1c:	000a0580 	call	a058 <strlen>
   17b20:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17b24:	e0bffd17 	ldw	r2,-12(fp)
   17b28:	10c00217 	ldw	r3,8(r2)
   17b2c:	e0bffe17 	ldw	r2,-8(fp)
   17b30:	10bfffc4 	addi	r2,r2,-1
   17b34:	1885883a 	add	r2,r3,r2
   17b38:	10800003 	ldbu	r2,0(r2)
   17b3c:	10803fcc 	andi	r2,r2,255
   17b40:	1080201c 	xori	r2,r2,128
   17b44:	10bfe004 	addi	r2,r2,-128
   17b48:	10800bd8 	cmpnei	r2,r2,47
   17b4c:	1000031e 	bne	r2,zero,17b5c <alt_find_file+0x6c>
    {
      len -= 1;
   17b50:	e0bffe17 	ldw	r2,-8(fp)
   17b54:	10bfffc4 	addi	r2,r2,-1
   17b58:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17b5c:	e0bffe17 	ldw	r2,-8(fp)
   17b60:	e0ffff17 	ldw	r3,-4(fp)
   17b64:	1885883a 	add	r2,r3,r2
   17b68:	10800003 	ldbu	r2,0(r2)
   17b6c:	10803fcc 	andi	r2,r2,255
   17b70:	1080201c 	xori	r2,r2,128
   17b74:	10bfe004 	addi	r2,r2,-128
   17b78:	10800be0 	cmpeqi	r2,r2,47
   17b7c:	1000081e 	bne	r2,zero,17ba0 <alt_find_file+0xb0>
   17b80:	e0bffe17 	ldw	r2,-8(fp)
   17b84:	e0ffff17 	ldw	r3,-4(fp)
   17b88:	1885883a 	add	r2,r3,r2
   17b8c:	10800003 	ldbu	r2,0(r2)
   17b90:	10803fcc 	andi	r2,r2,255
   17b94:	1080201c 	xori	r2,r2,128
   17b98:	10bfe004 	addi	r2,r2,-128
   17b9c:	10000a1e 	bne	r2,zero,17bc8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17ba0:	e0bffd17 	ldw	r2,-12(fp)
   17ba4:	10800217 	ldw	r2,8(r2)
   17ba8:	e0fffe17 	ldw	r3,-8(fp)
   17bac:	180d883a 	mov	r6,r3
   17bb0:	e17fff17 	ldw	r5,-4(fp)
   17bb4:	1009883a 	mov	r4,r2
   17bb8:	0017da40 	call	17da4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17bbc:	1000021e 	bne	r2,zero,17bc8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   17bc0:	e0bffd17 	ldw	r2,-12(fp)
   17bc4:	00000706 	br	17be4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   17bc8:	e0bffd17 	ldw	r2,-12(fp)
   17bcc:	10800017 	ldw	r2,0(r2)
   17bd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17bd4:	e0fffd17 	ldw	r3,-12(fp)
   17bd8:	d0a00804 	addi	r2,gp,-32736
   17bdc:	18bfcc1e 	bne	r3,r2,17b10 <__alt_exception_stack_pointer+0xf8017b10>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   17be0:	0005883a 	mov	r2,zero
}
   17be4:	e037883a 	mov	sp,fp
   17be8:	dfc00117 	ldw	ra,4(sp)
   17bec:	df000017 	ldw	fp,0(sp)
   17bf0:	dec00204 	addi	sp,sp,8
   17bf4:	f800283a 	ret

00017bf8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   17bf8:	defffa04 	addi	sp,sp,-24
   17bfc:	dfc00515 	stw	ra,20(sp)
   17c00:	df000415 	stw	fp,16(sp)
   17c04:	dc000315 	stw	r16,12(sp)
   17c08:	df000404 	addi	fp,sp,16
   17c0c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   17c10:	00bffa04 	movi	r2,-24
   17c14:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17c18:	e03ffc15 	stw	zero,-16(fp)
   17c1c:	00001d06 	br	17c94 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   17c20:	040000b4 	movhi	r16,2
   17c24:	8427a804 	addi	r16,r16,-24928
   17c28:	e0bffc17 	ldw	r2,-16(fp)
   17c2c:	01400304 	movi	r5,12
   17c30:	1009883a 	mov	r4,r2
   17c34:	00068e80 	call	68e8 <__mulsi3>
   17c38:	8085883a 	add	r2,r16,r2
   17c3c:	10800017 	ldw	r2,0(r2)
   17c40:	1000111e 	bne	r2,zero,17c88 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   17c44:	040000b4 	movhi	r16,2
   17c48:	8427a804 	addi	r16,r16,-24928
   17c4c:	e0bffc17 	ldw	r2,-16(fp)
   17c50:	01400304 	movi	r5,12
   17c54:	1009883a 	mov	r4,r2
   17c58:	00068e80 	call	68e8 <__mulsi3>
   17c5c:	8085883a 	add	r2,r16,r2
   17c60:	e0fffe17 	ldw	r3,-8(fp)
   17c64:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   17c68:	d0e00c17 	ldw	r3,-32720(gp)
   17c6c:	e0bffc17 	ldw	r2,-16(fp)
   17c70:	1880020e 	bge	r3,r2,17c7c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   17c74:	e0bffc17 	ldw	r2,-16(fp)
   17c78:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   17c7c:	e0bffc17 	ldw	r2,-16(fp)
   17c80:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   17c84:	00000606 	br	17ca0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17c88:	e0bffc17 	ldw	r2,-16(fp)
   17c8c:	10800044 	addi	r2,r2,1
   17c90:	e0bffc15 	stw	r2,-16(fp)
   17c94:	e0bffc17 	ldw	r2,-16(fp)
   17c98:	10800810 	cmplti	r2,r2,32
   17c9c:	103fe01e 	bne	r2,zero,17c20 <__alt_exception_stack_pointer+0xf8017c20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   17ca0:	e0bffd17 	ldw	r2,-12(fp)
}
   17ca4:	e6ffff04 	addi	sp,fp,-4
   17ca8:	dfc00217 	ldw	ra,8(sp)
   17cac:	df000117 	ldw	fp,4(sp)
   17cb0:	dc000017 	ldw	r16,0(sp)
   17cb4:	dec00304 	addi	sp,sp,12
   17cb8:	f800283a 	ret

00017cbc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   17cbc:	defffe04 	addi	sp,sp,-8
   17cc0:	df000115 	stw	fp,4(sp)
   17cc4:	df000104 	addi	fp,sp,4
   17cc8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   17ccc:	e0bfff17 	ldw	r2,-4(fp)
   17cd0:	10bffe84 	addi	r2,r2,-6
   17cd4:	10c00428 	cmpgeui	r3,r2,16
   17cd8:	18001a1e 	bne	r3,zero,17d44 <alt_exception_cause_generated_bad_addr+0x88>
   17cdc:	100690ba 	slli	r3,r2,2
   17ce0:	00800074 	movhi	r2,1
   17ce4:	109f3d04 	addi	r2,r2,31988
   17ce8:	1885883a 	add	r2,r3,r2
   17cec:	10800017 	ldw	r2,0(r2)
   17cf0:	1000683a 	jmp	r2
   17cf4:	00017d34 	movhi	zero,1524
   17cf8:	00017d34 	movhi	zero,1524
   17cfc:	00017d44 	movi	zero,1525
   17d00:	00017d44 	movi	zero,1525
   17d04:	00017d44 	movi	zero,1525
   17d08:	00017d34 	movhi	zero,1524
   17d0c:	00017d3c 	xorhi	zero,zero,1524
   17d10:	00017d44 	movi	zero,1525
   17d14:	00017d34 	movhi	zero,1524
   17d18:	00017d34 	movhi	zero,1524
   17d1c:	00017d44 	movi	zero,1525
   17d20:	00017d34 	movhi	zero,1524
   17d24:	00017d3c 	xorhi	zero,zero,1524
   17d28:	00017d44 	movi	zero,1525
   17d2c:	00017d44 	movi	zero,1525
   17d30:	00017d34 	movhi	zero,1524
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   17d34:	00800044 	movi	r2,1
   17d38:	00000306 	br	17d48 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   17d3c:	0005883a 	mov	r2,zero
   17d40:	00000106 	br	17d48 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   17d44:	0005883a 	mov	r2,zero
  }
}
   17d48:	e037883a 	mov	sp,fp
   17d4c:	df000017 	ldw	fp,0(sp)
   17d50:	dec00104 	addi	sp,sp,4
   17d54:	f800283a 	ret

00017d58 <atexit>:
   17d58:	200b883a 	mov	r5,r4
   17d5c:	000f883a 	mov	r7,zero
   17d60:	000d883a 	mov	r6,zero
   17d64:	0009883a 	mov	r4,zero
   17d68:	0017e201 	jmpi	17e20 <__register_exitproc>

00017d6c <exit>:
   17d6c:	defffe04 	addi	sp,sp,-8
   17d70:	000b883a 	mov	r5,zero
   17d74:	dc000015 	stw	r16,0(sp)
   17d78:	dfc00115 	stw	ra,4(sp)
   17d7c:	2021883a 	mov	r16,r4
   17d80:	0017f380 	call	17f38 <__call_exitprocs>
   17d84:	008000b4 	movhi	r2,2
   17d88:	10ac7f04 	addi	r2,r2,-19972
   17d8c:	11000017 	ldw	r4,0(r2)
   17d90:	20800f17 	ldw	r2,60(r4)
   17d94:	10000126 	beq	r2,zero,17d9c <exit+0x30>
   17d98:	103ee83a 	callr	r2
   17d9c:	8009883a 	mov	r4,r16
   17da0:	00180b80 	call	180b8 <_exit>

00017da4 <memcmp>:
   17da4:	01c000c4 	movi	r7,3
   17da8:	3980192e 	bgeu	r7,r6,17e10 <memcmp+0x6c>
   17dac:	2144b03a 	or	r2,r4,r5
   17db0:	11c4703a 	and	r2,r2,r7
   17db4:	10000f26 	beq	r2,zero,17df4 <memcmp+0x50>
   17db8:	20800003 	ldbu	r2,0(r4)
   17dbc:	28c00003 	ldbu	r3,0(r5)
   17dc0:	10c0151e 	bne	r2,r3,17e18 <memcmp+0x74>
   17dc4:	31bfff84 	addi	r6,r6,-2
   17dc8:	01ffffc4 	movi	r7,-1
   17dcc:	00000406 	br	17de0 <memcmp+0x3c>
   17dd0:	20800003 	ldbu	r2,0(r4)
   17dd4:	28c00003 	ldbu	r3,0(r5)
   17dd8:	31bfffc4 	addi	r6,r6,-1
   17ddc:	10c00e1e 	bne	r2,r3,17e18 <memcmp+0x74>
   17de0:	21000044 	addi	r4,r4,1
   17de4:	29400044 	addi	r5,r5,1
   17de8:	31fff91e 	bne	r6,r7,17dd0 <__alt_exception_stack_pointer+0xf8017dd0>
   17dec:	0005883a 	mov	r2,zero
   17df0:	f800283a 	ret
   17df4:	20c00017 	ldw	r3,0(r4)
   17df8:	28800017 	ldw	r2,0(r5)
   17dfc:	18bfee1e 	bne	r3,r2,17db8 <__alt_exception_stack_pointer+0xf8017db8>
   17e00:	31bfff04 	addi	r6,r6,-4
   17e04:	21000104 	addi	r4,r4,4
   17e08:	29400104 	addi	r5,r5,4
   17e0c:	39bff936 	bltu	r7,r6,17df4 <__alt_exception_stack_pointer+0xf8017df4>
   17e10:	303fe91e 	bne	r6,zero,17db8 <__alt_exception_stack_pointer+0xf8017db8>
   17e14:	003ff506 	br	17dec <__alt_exception_stack_pointer+0xf8017dec>
   17e18:	10c5c83a 	sub	r2,r2,r3
   17e1c:	f800283a 	ret

00017e20 <__register_exitproc>:
   17e20:	defffa04 	addi	sp,sp,-24
   17e24:	dc000315 	stw	r16,12(sp)
   17e28:	040000b4 	movhi	r16,2
   17e2c:	842c7f04 	addi	r16,r16,-19972
   17e30:	80c00017 	ldw	r3,0(r16)
   17e34:	dc400415 	stw	r17,16(sp)
   17e38:	dfc00515 	stw	ra,20(sp)
   17e3c:	18805217 	ldw	r2,328(r3)
   17e40:	2023883a 	mov	r17,r4
   17e44:	10003726 	beq	r2,zero,17f24 <__register_exitproc+0x104>
   17e48:	10c00117 	ldw	r3,4(r2)
   17e4c:	010007c4 	movi	r4,31
   17e50:	20c00e16 	blt	r4,r3,17e8c <__register_exitproc+0x6c>
   17e54:	1a000044 	addi	r8,r3,1
   17e58:	8800221e 	bne	r17,zero,17ee4 <__register_exitproc+0xc4>
   17e5c:	18c00084 	addi	r3,r3,2
   17e60:	18c7883a 	add	r3,r3,r3
   17e64:	18c7883a 	add	r3,r3,r3
   17e68:	12000115 	stw	r8,4(r2)
   17e6c:	10c7883a 	add	r3,r2,r3
   17e70:	19400015 	stw	r5,0(r3)
   17e74:	0005883a 	mov	r2,zero
   17e78:	dfc00517 	ldw	ra,20(sp)
   17e7c:	dc400417 	ldw	r17,16(sp)
   17e80:	dc000317 	ldw	r16,12(sp)
   17e84:	dec00604 	addi	sp,sp,24
   17e88:	f800283a 	ret
   17e8c:	00800074 	movhi	r2,1
   17e90:	10a5a404 	addi	r2,r2,-26992
   17e94:	10002626 	beq	r2,zero,17f30 <__register_exitproc+0x110>
   17e98:	01006404 	movi	r4,400
   17e9c:	d9400015 	stw	r5,0(sp)
   17ea0:	d9800115 	stw	r6,4(sp)
   17ea4:	d9c00215 	stw	r7,8(sp)
   17ea8:	00096900 	call	9690 <malloc>
   17eac:	d9400017 	ldw	r5,0(sp)
   17eb0:	d9800117 	ldw	r6,4(sp)
   17eb4:	d9c00217 	ldw	r7,8(sp)
   17eb8:	10001d26 	beq	r2,zero,17f30 <__register_exitproc+0x110>
   17ebc:	81000017 	ldw	r4,0(r16)
   17ec0:	10000115 	stw	zero,4(r2)
   17ec4:	02000044 	movi	r8,1
   17ec8:	22405217 	ldw	r9,328(r4)
   17ecc:	0007883a 	mov	r3,zero
   17ed0:	12400015 	stw	r9,0(r2)
   17ed4:	20805215 	stw	r2,328(r4)
   17ed8:	10006215 	stw	zero,392(r2)
   17edc:	10006315 	stw	zero,396(r2)
   17ee0:	883fde26 	beq	r17,zero,17e5c <__alt_exception_stack_pointer+0xf8017e5c>
   17ee4:	18c9883a 	add	r4,r3,r3
   17ee8:	2109883a 	add	r4,r4,r4
   17eec:	1109883a 	add	r4,r2,r4
   17ef0:	21802215 	stw	r6,136(r4)
   17ef4:	01800044 	movi	r6,1
   17ef8:	12406217 	ldw	r9,392(r2)
   17efc:	30cc983a 	sll	r6,r6,r3
   17f00:	4992b03a 	or	r9,r9,r6
   17f04:	12406215 	stw	r9,392(r2)
   17f08:	21c04215 	stw	r7,264(r4)
   17f0c:	01000084 	movi	r4,2
   17f10:	893fd21e 	bne	r17,r4,17e5c <__alt_exception_stack_pointer+0xf8017e5c>
   17f14:	11006317 	ldw	r4,396(r2)
   17f18:	218cb03a 	or	r6,r4,r6
   17f1c:	11806315 	stw	r6,396(r2)
   17f20:	003fce06 	br	17e5c <__alt_exception_stack_pointer+0xf8017e5c>
   17f24:	18805304 	addi	r2,r3,332
   17f28:	18805215 	stw	r2,328(r3)
   17f2c:	003fc606 	br	17e48 <__alt_exception_stack_pointer+0xf8017e48>
   17f30:	00bfffc4 	movi	r2,-1
   17f34:	003fd006 	br	17e78 <__alt_exception_stack_pointer+0xf8017e78>

00017f38 <__call_exitprocs>:
   17f38:	defff504 	addi	sp,sp,-44
   17f3c:	df000915 	stw	fp,36(sp)
   17f40:	dd400615 	stw	r21,24(sp)
   17f44:	dc800315 	stw	r18,12(sp)
   17f48:	dfc00a15 	stw	ra,40(sp)
   17f4c:	ddc00815 	stw	r23,32(sp)
   17f50:	dd800715 	stw	r22,28(sp)
   17f54:	dd000515 	stw	r20,20(sp)
   17f58:	dcc00415 	stw	r19,16(sp)
   17f5c:	dc400215 	stw	r17,8(sp)
   17f60:	dc000115 	stw	r16,4(sp)
   17f64:	d9000015 	stw	r4,0(sp)
   17f68:	2839883a 	mov	fp,r5
   17f6c:	04800044 	movi	r18,1
   17f70:	057fffc4 	movi	r21,-1
   17f74:	008000b4 	movhi	r2,2
   17f78:	10ac7f04 	addi	r2,r2,-19972
   17f7c:	12000017 	ldw	r8,0(r2)
   17f80:	45005217 	ldw	r20,328(r8)
   17f84:	44c05204 	addi	r19,r8,328
   17f88:	a0001c26 	beq	r20,zero,17ffc <__call_exitprocs+0xc4>
   17f8c:	a0800117 	ldw	r2,4(r20)
   17f90:	15ffffc4 	addi	r23,r2,-1
   17f94:	b8000d16 	blt	r23,zero,17fcc <__call_exitprocs+0x94>
   17f98:	14000044 	addi	r16,r2,1
   17f9c:	8421883a 	add	r16,r16,r16
   17fa0:	8421883a 	add	r16,r16,r16
   17fa4:	84402004 	addi	r17,r16,128
   17fa8:	a463883a 	add	r17,r20,r17
   17fac:	a421883a 	add	r16,r20,r16
   17fb0:	e0001e26 	beq	fp,zero,1802c <__call_exitprocs+0xf4>
   17fb4:	80804017 	ldw	r2,256(r16)
   17fb8:	e0801c26 	beq	fp,r2,1802c <__call_exitprocs+0xf4>
   17fbc:	bdffffc4 	addi	r23,r23,-1
   17fc0:	843fff04 	addi	r16,r16,-4
   17fc4:	8c7fff04 	addi	r17,r17,-4
   17fc8:	bd7ff91e 	bne	r23,r21,17fb0 <__alt_exception_stack_pointer+0xf8017fb0>
   17fcc:	00800074 	movhi	r2,1
   17fd0:	10a5a904 	addi	r2,r2,-26972
   17fd4:	10000926 	beq	r2,zero,17ffc <__call_exitprocs+0xc4>
   17fd8:	a0800117 	ldw	r2,4(r20)
   17fdc:	1000301e 	bne	r2,zero,180a0 <__call_exitprocs+0x168>
   17fe0:	a0800017 	ldw	r2,0(r20)
   17fe4:	10003226 	beq	r2,zero,180b0 <__call_exitprocs+0x178>
   17fe8:	a009883a 	mov	r4,r20
   17fec:	98800015 	stw	r2,0(r19)
   17ff0:	00096a40 	call	96a4 <free>
   17ff4:	9d000017 	ldw	r20,0(r19)
   17ff8:	a03fe41e 	bne	r20,zero,17f8c <__alt_exception_stack_pointer+0xf8017f8c>
   17ffc:	dfc00a17 	ldw	ra,40(sp)
   18000:	df000917 	ldw	fp,36(sp)
   18004:	ddc00817 	ldw	r23,32(sp)
   18008:	dd800717 	ldw	r22,28(sp)
   1800c:	dd400617 	ldw	r21,24(sp)
   18010:	dd000517 	ldw	r20,20(sp)
   18014:	dcc00417 	ldw	r19,16(sp)
   18018:	dc800317 	ldw	r18,12(sp)
   1801c:	dc400217 	ldw	r17,8(sp)
   18020:	dc000117 	ldw	r16,4(sp)
   18024:	dec00b04 	addi	sp,sp,44
   18028:	f800283a 	ret
   1802c:	a0800117 	ldw	r2,4(r20)
   18030:	80c00017 	ldw	r3,0(r16)
   18034:	10bfffc4 	addi	r2,r2,-1
   18038:	15c01426 	beq	r2,r23,1808c <__call_exitprocs+0x154>
   1803c:	80000015 	stw	zero,0(r16)
   18040:	183fde26 	beq	r3,zero,17fbc <__alt_exception_stack_pointer+0xf8017fbc>
   18044:	95c8983a 	sll	r4,r18,r23
   18048:	a0806217 	ldw	r2,392(r20)
   1804c:	a5800117 	ldw	r22,4(r20)
   18050:	2084703a 	and	r2,r4,r2
   18054:	10000b26 	beq	r2,zero,18084 <__call_exitprocs+0x14c>
   18058:	a0806317 	ldw	r2,396(r20)
   1805c:	2088703a 	and	r4,r4,r2
   18060:	20000c1e 	bne	r4,zero,18094 <__call_exitprocs+0x15c>
   18064:	89400017 	ldw	r5,0(r17)
   18068:	d9000017 	ldw	r4,0(sp)
   1806c:	183ee83a 	callr	r3
   18070:	a0800117 	ldw	r2,4(r20)
   18074:	15bfbf1e 	bne	r2,r22,17f74 <__alt_exception_stack_pointer+0xf8017f74>
   18078:	98800017 	ldw	r2,0(r19)
   1807c:	153fcf26 	beq	r2,r20,17fbc <__alt_exception_stack_pointer+0xf8017fbc>
   18080:	003fbc06 	br	17f74 <__alt_exception_stack_pointer+0xf8017f74>
   18084:	183ee83a 	callr	r3
   18088:	003ff906 	br	18070 <__alt_exception_stack_pointer+0xf8018070>
   1808c:	a5c00115 	stw	r23,4(r20)
   18090:	003feb06 	br	18040 <__alt_exception_stack_pointer+0xf8018040>
   18094:	89000017 	ldw	r4,0(r17)
   18098:	183ee83a 	callr	r3
   1809c:	003ff406 	br	18070 <__alt_exception_stack_pointer+0xf8018070>
   180a0:	a0800017 	ldw	r2,0(r20)
   180a4:	a027883a 	mov	r19,r20
   180a8:	1029883a 	mov	r20,r2
   180ac:	003fb606 	br	17f88 <__alt_exception_stack_pointer+0xf8017f88>
   180b0:	0005883a 	mov	r2,zero
   180b4:	003ffb06 	br	180a4 <__alt_exception_stack_pointer+0xf80180a4>

000180b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   180b8:	defffd04 	addi	sp,sp,-12
   180bc:	df000215 	stw	fp,8(sp)
   180c0:	df000204 	addi	fp,sp,8
   180c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   180c8:	0001883a 	nop
   180cc:	e0bfff17 	ldw	r2,-4(fp)
   180d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   180d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   180d8:	10000226 	beq	r2,zero,180e4 <_exit+0x2c>
    ALT_SIM_FAIL();
   180dc:	002af070 	cmpltui	zero,zero,43969
   180e0:	00000106 	br	180e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   180e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   180e8:	003fff06 	br	180e8 <__alt_exception_stack_pointer+0xf80180e8>
